
IHM03_SPI_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a140  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800a318  0800a318  0000b318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f0  0800a6f0  0000c560  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6f0  0800a6f0  0000b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6f8  0800a6f8  0000c560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6f8  0800a6f8  0000b6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6fc  0800a6fc  0000b6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000560  20000000  0800a700  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d8  20000560  0800ac60  0000c560  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b38  0800ac60  0000cb38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c560  2**0
                  CONTENTS, READONLY
 12 .debug_line   00049bf7  00000000  00000000  0000c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000083  00000000  00000000  00056187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004a356  00000000  00000000  0005620a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008c02  00000000  00000000  000a0560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021c0  00000000  00000000  000a9168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001048f1  00000000  00000000  000ab328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003bcb  00000000  00000000  001afc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0002047f  00000000  00000000  001b37e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c7e0  00000000  00000000  001d3c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00200443  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c2c  00000000  00000000  00200488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000560 	.word	0x20000560
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a300 	.word	0x0800a300

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000564 	.word	0x20000564
 8000214:	0800a300 	.word	0x0800a300

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b96a 	b.w	8000b70 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	460c      	mov	r4, r1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d14e      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c0:	4694      	mov	ip, r2
 80008c2:	458c      	cmp	ip, r1
 80008c4:	4686      	mov	lr, r0
 80008c6:	fab2 f282 	clz	r2, r2
 80008ca:	d962      	bls.n	8000992 <__udivmoddi4+0xde>
 80008cc:	b14a      	cbz	r2, 80008e2 <__udivmoddi4+0x2e>
 80008ce:	f1c2 0320 	rsb	r3, r2, #32
 80008d2:	4091      	lsls	r1, r2
 80008d4:	fa20 f303 	lsr.w	r3, r0, r3
 80008d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008dc:	4319      	orrs	r1, r3
 80008de:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e6:	fa1f f68c 	uxth.w	r6, ip
 80008ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb07 1114 	mls	r1, r7, r4, r1
 80008f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fa:	fb04 f106 	mul.w	r1, r4, r6
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f104 30ff 	add.w	r0, r4, #4294967295
 800090a:	f080 8112 	bcs.w	8000b32 <__udivmoddi4+0x27e>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 810f 	bls.w	8000b32 <__udivmoddi4+0x27e>
 8000914:	3c02      	subs	r4, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a59      	subs	r1, r3, r1
 800091a:	fa1f f38e 	uxth.w	r3, lr
 800091e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000922:	fb07 1110 	mls	r1, r7, r0, r1
 8000926:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800092a:	fb00 f606 	mul.w	r6, r0, r6
 800092e:	429e      	cmp	r6, r3
 8000930:	d90a      	bls.n	8000948 <__udivmoddi4+0x94>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f100 31ff 	add.w	r1, r0, #4294967295
 800093a:	f080 80fc 	bcs.w	8000b36 <__udivmoddi4+0x282>
 800093e:	429e      	cmp	r6, r3
 8000940:	f240 80f9 	bls.w	8000b36 <__udivmoddi4+0x282>
 8000944:	4463      	add	r3, ip
 8000946:	3802      	subs	r0, #2
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800094e:	2100      	movs	r1, #0
 8000950:	b11d      	cbz	r5, 800095a <__udivmoddi4+0xa6>
 8000952:	40d3      	lsrs	r3, r2
 8000954:	2200      	movs	r2, #0
 8000956:	e9c5 3200 	strd	r3, r2, [r5]
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d905      	bls.n	800096e <__udivmoddi4+0xba>
 8000962:	b10d      	cbz	r5, 8000968 <__udivmoddi4+0xb4>
 8000964:	e9c5 0100 	strd	r0, r1, [r5]
 8000968:	2100      	movs	r1, #0
 800096a:	4608      	mov	r0, r1
 800096c:	e7f5      	b.n	800095a <__udivmoddi4+0xa6>
 800096e:	fab3 f183 	clz	r1, r3
 8000972:	2900      	cmp	r1, #0
 8000974:	d146      	bne.n	8000a04 <__udivmoddi4+0x150>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xcc>
 800097a:	4290      	cmp	r0, r2
 800097c:	f0c0 80f0 	bcc.w	8000b60 <__udivmoddi4+0x2ac>
 8000980:	1a86      	subs	r6, r0, r2
 8000982:	eb64 0303 	sbc.w	r3, r4, r3
 8000986:	2001      	movs	r0, #1
 8000988:	2d00      	cmp	r5, #0
 800098a:	d0e6      	beq.n	800095a <__udivmoddi4+0xa6>
 800098c:	e9c5 6300 	strd	r6, r3, [r5]
 8000990:	e7e3      	b.n	800095a <__udivmoddi4+0xa6>
 8000992:	2a00      	cmp	r2, #0
 8000994:	f040 8090 	bne.w	8000ab8 <__udivmoddi4+0x204>
 8000998:	eba1 040c 	sub.w	r4, r1, ip
 800099c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a0:	fa1f f78c 	uxth.w	r7, ip
 80009a4:	2101      	movs	r1, #1
 80009a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80009aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ae:	fb08 4416 	mls	r4, r8, r6, r4
 80009b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009b6:	fb07 f006 	mul.w	r0, r7, r6
 80009ba:	4298      	cmp	r0, r3
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x11c>
 80009be:	eb1c 0303 	adds.w	r3, ip, r3
 80009c2:	f106 34ff 	add.w	r4, r6, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x11a>
 80009c8:	4298      	cmp	r0, r3
 80009ca:	f200 80cd 	bhi.w	8000b68 <__udivmoddi4+0x2b4>
 80009ce:	4626      	mov	r6, r4
 80009d0:	1a1c      	subs	r4, r3, r0
 80009d2:	fa1f f38e 	uxth.w	r3, lr
 80009d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009da:	fb08 4410 	mls	r4, r8, r0, r4
 80009de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009e2:	fb00 f707 	mul.w	r7, r0, r7
 80009e6:	429f      	cmp	r7, r3
 80009e8:	d908      	bls.n	80009fc <__udivmoddi4+0x148>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f100 34ff 	add.w	r4, r0, #4294967295
 80009f2:	d202      	bcs.n	80009fa <__udivmoddi4+0x146>
 80009f4:	429f      	cmp	r7, r3
 80009f6:	f200 80b0 	bhi.w	8000b5a <__udivmoddi4+0x2a6>
 80009fa:	4620      	mov	r0, r4
 80009fc:	1bdb      	subs	r3, r3, r7
 80009fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a02:	e7a5      	b.n	8000950 <__udivmoddi4+0x9c>
 8000a04:	f1c1 0620 	rsb	r6, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a0e:	431f      	orrs	r7, r3
 8000a10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a14:	fa04 f301 	lsl.w	r3, r4, r1
 8000a18:	ea43 030c 	orr.w	r3, r3, ip
 8000a1c:	40f4      	lsrs	r4, r6
 8000a1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a22:	0c38      	lsrs	r0, r7, #16
 8000a24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a28:	fbb4 fef0 	udiv	lr, r4, r0
 8000a2c:	fa1f fc87 	uxth.w	ip, r7
 8000a30:	fb00 441e 	mls	r4, r0, lr, r4
 8000a34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a38:	fb0e f90c 	mul.w	r9, lr, ip
 8000a3c:	45a1      	cmp	r9, r4
 8000a3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a42:	d90a      	bls.n	8000a5a <__udivmoddi4+0x1a6>
 8000a44:	193c      	adds	r4, r7, r4
 8000a46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a4a:	f080 8084 	bcs.w	8000b56 <__udivmoddi4+0x2a2>
 8000a4e:	45a1      	cmp	r9, r4
 8000a50:	f240 8081 	bls.w	8000b56 <__udivmoddi4+0x2a2>
 8000a54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a58:	443c      	add	r4, r7
 8000a5a:	eba4 0409 	sub.w	r4, r4, r9
 8000a5e:	fa1f f983 	uxth.w	r9, r3
 8000a62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a66:	fb00 4413 	mls	r4, r0, r3, r4
 8000a6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a72:	45a4      	cmp	ip, r4
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x1d2>
 8000a76:	193c      	adds	r4, r7, r4
 8000a78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a7c:	d267      	bcs.n	8000b4e <__udivmoddi4+0x29a>
 8000a7e:	45a4      	cmp	ip, r4
 8000a80:	d965      	bls.n	8000b4e <__udivmoddi4+0x29a>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	443c      	add	r4, r7
 8000a86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	429c      	cmp	r4, r3
 8000a94:	46ce      	mov	lr, r9
 8000a96:	469c      	mov	ip, r3
 8000a98:	d351      	bcc.n	8000b3e <__udivmoddi4+0x28a>
 8000a9a:	d04e      	beq.n	8000b3a <__udivmoddi4+0x286>
 8000a9c:	b155      	cbz	r5, 8000ab4 <__udivmoddi4+0x200>
 8000a9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000aa2:	eb64 040c 	sbc.w	r4, r4, ip
 8000aa6:	fa04 f606 	lsl.w	r6, r4, r6
 8000aaa:	40cb      	lsrs	r3, r1
 8000aac:	431e      	orrs	r6, r3
 8000aae:	40cc      	lsrs	r4, r1
 8000ab0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	e750      	b.n	800095a <__udivmoddi4+0xa6>
 8000ab8:	f1c2 0320 	rsb	r3, r2, #32
 8000abc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	430c      	orrs	r4, r1
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ad4:	fa1f f78c 	uxth.w	r7, ip
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae0:	0c23      	lsrs	r3, r4, #16
 8000ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae6:	fb00 f107 	mul.w	r1, r0, r7
 8000aea:	4299      	cmp	r1, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x24c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000af6:	d22c      	bcs.n	8000b52 <__udivmoddi4+0x29e>
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d92a      	bls.n	8000b52 <__udivmoddi4+0x29e>
 8000afc:	3802      	subs	r0, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b08:	fb08 3311 	mls	r3, r8, r1, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb01 f307 	mul.w	r3, r1, r7
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x276>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b20:	d213      	bcs.n	8000b4a <__udivmoddi4+0x296>
 8000b22:	42a3      	cmp	r3, r4
 8000b24:	d911      	bls.n	8000b4a <__udivmoddi4+0x296>
 8000b26:	3902      	subs	r1, #2
 8000b28:	4464      	add	r4, ip
 8000b2a:	1ae4      	subs	r4, r4, r3
 8000b2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b30:	e739      	b.n	80009a6 <__udivmoddi4+0xf2>
 8000b32:	4604      	mov	r4, r0
 8000b34:	e6f0      	b.n	8000918 <__udivmoddi4+0x64>
 8000b36:	4608      	mov	r0, r1
 8000b38:	e706      	b.n	8000948 <__udivmoddi4+0x94>
 8000b3a:	45c8      	cmp	r8, r9
 8000b3c:	d2ae      	bcs.n	8000a9c <__udivmoddi4+0x1e8>
 8000b3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b46:	3801      	subs	r0, #1
 8000b48:	e7a8      	b.n	8000a9c <__udivmoddi4+0x1e8>
 8000b4a:	4631      	mov	r1, r6
 8000b4c:	e7ed      	b.n	8000b2a <__udivmoddi4+0x276>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	e799      	b.n	8000a86 <__udivmoddi4+0x1d2>
 8000b52:	4630      	mov	r0, r6
 8000b54:	e7d4      	b.n	8000b00 <__udivmoddi4+0x24c>
 8000b56:	46d6      	mov	lr, sl
 8000b58:	e77f      	b.n	8000a5a <__udivmoddi4+0x1a6>
 8000b5a:	4463      	add	r3, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	e74d      	b.n	80009fc <__udivmoddi4+0x148>
 8000b60:	4606      	mov	r6, r0
 8000b62:	4623      	mov	r3, r4
 8000b64:	4608      	mov	r0, r1
 8000b66:	e70f      	b.n	8000988 <__udivmoddi4+0xd4>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	e730      	b.n	80009d0 <__udivmoddi4+0x11c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8000b74:	480d      	ldr	r0, [pc, #52]	@ (8000bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480d      	ldr	r0, [pc, #52]	@ (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7a:	490e      	ldr	r1, [pc, #56]	@ (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b90:	4c0b      	ldr	r4, [pc, #44]	@ (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b9e:	f003 fe37 	bl	8004810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f009 fb7b 	bl	800a29c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba6:	f000 fba9 	bl	80012fc <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   r0, =_estack
 8000bac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	20000560 	.word	0x20000560
  ldr r2, =_sidata
 8000bb8:	0800a700 	.word	0x0800a700
  ldr r2, =_sbss
 8000bbc:	20000560 	.word	0x20000560
  ldr r4, =_ebss
 8000bc0:	20001b38 	.word	0x20001b38

08000bc4 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <BusFault_Handler>
	...

08000bc8 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000bc8:	b570      	push	{r4, r5, r6, lr}
 8000bca:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000bcc:	6940      	ldr	r0, [r0, #20]
 8000bce:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000bd0:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000bd2:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000bd4:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000bd6:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000bda:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000bde:	6960      	ldr	r0, [r4, #20]
 8000be0:	f104 011c 	add.w	r1, r4, #28
 8000be4:	462b      	mov	r3, r5
 8000be6:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000bec:	4718      	bx	r3
 8000bee:	bf00      	nop

08000bf0 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000bf0:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000bf2:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 8000bf4:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000bf6:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000bfa:	4c1e      	ldr	r4, [pc, #120]	@ (8000c74 <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000bfc:	01db      	lsls	r3, r3, #7
 8000bfe:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000c02:	784a      	ldrb	r2, [r1, #1]
 8000c04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000c08:	78ca      	ldrb	r2, [r1, #3]
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000c0a:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000c0e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000c18:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000c1c:	5ca2      	ldrb	r2, [r4, r2]
 8000c1e:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000c22:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000c24:	5ca2      	ldrb	r2, [r4, r2]
 8000c26:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000c2a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c2c:	5ca2      	ldrb	r2, [r4, r2]
 8000c2e:	4c12      	ldr	r4, [pc, #72]	@ (8000c78 <ASPEP_sendBeacon+0x88>)
 8000c30:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000c34:	5ca2      	ldrb	r2, [r4, r2]
 8000c36:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000c3a:	f043 0305 	orr.w	r3, r3, #5
 8000c3e:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000c42:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000c44:	b14b      	cbz	r3, 8000c5a <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c46:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000c48:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000c4c:	b913      	cbnz	r3, 8000c54 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c58:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c5a:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c64:	6481      	str	r1, [r0, #72]	@ 0x48
 8000c66:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c68:	2204      	movs	r2, #4
 8000c6a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c70:	6940      	ldr	r0, [r0, #20]
 8000c72:	4718      	bx	r3
 8000c74:	0800a328 	.word	0x0800a328
 8000c78:	0800a318 	.word	0x0800a318

08000c7c <ASPEP_sendPing>:
{
 8000c7c:	b430      	push	{r4, r5}
              | (uint32_t)((uint32_t)cBit << 5U)
 8000c7e:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000c80:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000c84:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c88:	4d1d      	ldr	r5, [pc, #116]	@ (8000d00 <ASPEP_sendPing+0x84>)
              | (uint32_t)((uint32_t)cBit << 5U)
 8000c8a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c8e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000c92:	f00c 0101 	and.w	r1, ip, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c96:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000c9a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 8000c9e:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000ca2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4c16      	ldr	r4, [pc, #88]	@ (8000d04 <ASPEP_sendPing+0x88>)
 8000caa:	f042 0206 	orr.w	r2, r2, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000cae:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000cb2:	5ca2      	ldrb	r2, [r4, r2]
 8000cb4:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000cb8:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000cba:	5ca2      	ldrb	r2, [r4, r2]
 8000cbc:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000cc0:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000cc2:	5ca2      	ldrb	r2, [r4, r2]
 8000cc4:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000cc8:	5ceb      	ldrb	r3, [r5, r3]
 8000cca:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000cce:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000cd2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000cd4:	b143      	cbz	r3, 8000ce8 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cd6:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000cd8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000cdc:	b913      	cbnz	r3, 8000ce4 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000ce4:	bc30      	pop	{r4, r5}
 8000ce6:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000ce8:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000cec:	2303      	movs	r3, #3
 8000cee:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000cf2:	6481      	str	r1, [r0, #72]	@ 0x48
 8000cf4:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000cfa:	6940      	ldr	r0, [r0, #20]
}
 8000cfc:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000cfe:	4718      	bx	r3
 8000d00:	0800a318 	.word	0x0800a318
 8000d04:	0800a328 	.word	0x0800a328

08000d08 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000d08:	2a0a      	cmp	r2, #10
 8000d0a:	d009      	beq.n	8000d20 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000d0c:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d91d      	bls.n	8000d50 <ASPEP_getBuffer+0x48>
 8000d14:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d90d      	bls.n	8000d38 <ASPEP_getBuffer+0x30>
        result = false;
 8000d1c:	2000      	movs	r0, #0
}
 8000d1e:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000d20:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d8f9      	bhi.n	8000d1c <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000d28:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8000d2a:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000d30:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8000d34:	2001      	movs	r0, #1
 8000d36:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d38:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000d3a:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000d3e:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d42:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8000d44:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000d48:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d4a:	600b      	str	r3, [r1, #0]
  bool result = true;
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000d52:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d56:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d5a:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8000d5c:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d60:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e7f2      	b.n	8000d4c <ASPEP_getBuffer+0x44>
 8000d66:	bf00      	nop

08000d68 <ASPEP_sendPacket>:
{
 8000d68:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000d6a:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d001      	beq.n	8000d76 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000d72:	2002      	movs	r0, #2
 8000d74:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000d76:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000d7a:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000d7e:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000d82:	2801      	cmp	r0, #1
 8000d84:	d104      	bne.n	8000d90 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000d86:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8000d8a:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000d8c:	3202      	adds	r2, #2
 8000d8e:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000d90:	2b0a      	cmp	r3, #10
 8000d92:	d105      	bne.n	8000da0 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000d94:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000d98:	b348      	cbz	r0, 8000dee <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000da0:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000da4:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000da6:	4d34      	ldr	r5, [pc, #208]	@ (8000e78 <ASPEP_sendPacket+0x110>)
 8000da8:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000daa:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000dac:	5d2e      	ldrb	r6, [r5, r4]
 8000dae:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000db2:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000db4:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000db8:	5d2e      	ldrb	r6, [r5, r4]
 8000dba:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000dbe:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000dc0:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000dc2:	5d2c      	ldrb	r4, [r5, r4]
 8000dc4:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000dc8:	406c      	eors	r4, r5
 8000dca:	4d2c      	ldr	r5, [pc, #176]	@ (8000e7c <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000dcc:	5d2c      	ldrb	r4, [r5, r4]
 8000dce:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000dd2:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd6:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000dd8:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000ddc:	b1b9      	cbz	r1, 8000e0e <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dde:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000de0:	2b09      	cmp	r3, #9
 8000de2:	d006      	beq.n	8000df2 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000de4:	2b0a      	cmp	r3, #10
 8000de6:	d02a      	beq.n	8000e3e <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8000de8:	b37b      	cbz	r3, 8000e4a <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8000dea:	2000      	movs	r0, #0
}
 8000dec:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000dee:	2001      	movs	r0, #1
}
 8000df0:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000df2:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000df6:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8000df8:	458e      	cmp	lr, r1
 8000dfa:	bf14      	ite	ne
 8000dfc:	2003      	movne	r0, #3
 8000dfe:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000e00:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000e04:	b3a1      	cbz	r1, 8000e70 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000e06:	2102      	movs	r1, #2
 8000e08:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000e0a:	809a      	strh	r2, [r3, #4]
}
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8000e0e:	2b09      	cmp	r3, #9
 8000e10:	d029      	beq.n	8000e66 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 8000e12:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000e14:	f04f 0303 	mov.w	r3, #3
 8000e18:	bf0b      	itete	eq
 8000e1a:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8000e1e:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000e22:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e26:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000e2a:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8000e2e:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000e30:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8000e34:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000e38:	4671      	mov	r1, lr
 8000e3a:	4798      	blx	r3
 8000e3c:	e7d5      	b.n	8000dea <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8000e3e:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d009      	beq.n	8000e5a <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8000e46:	2003      	movs	r0, #3
}
 8000e48:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8000e4a:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f9      	bne.n	8000e46 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8000e58:	e7c7      	b.n	8000dea <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000e60:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8000e64:	e7c1      	b.n	8000dea <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000e66:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000e6e:	e7dc      	b.n	8000e2a <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000e70:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000e74:	e7c7      	b.n	8000e06 <ASPEP_sendPacket+0x9e>
 8000e76:	bf00      	nop
 8000e78:	0800a328 	.word	0x0800a328
 8000e7c:	0800a318 	.word	0x0800a318

08000e80 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000e80:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000e82:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000e86:	2b03      	cmp	r3, #3
{
 8000e88:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000e8a:	d013      	beq.n	8000eb4 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000e8c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000e8e:	2100      	movs	r1, #0
 8000e90:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000e92:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000e96:	2a02      	cmp	r2, #2
 8000e98:	d013      	beq.n	8000ec2 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d11d      	bne.n	8000eda <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e9e:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000ea2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000ea4:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	6940      	ldr	r0, [r0, #20]
 8000eaa:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000eac:	2303      	movs	r3, #3
 8000eae:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000eb2:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000eb4:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8000eb8:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000eba:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000ebc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000ec0:	d10b      	bne.n	8000eda <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000ec2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000ec6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000ec8:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000eca:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000ecc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000ece:	6960      	ldr	r0, [r4, #20]
 8000ed0:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8000ed8:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000eda:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000edc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000ede:	b1cb      	cbz	r3, 8000f14 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000ee0:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000ee2:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000ee4:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	889a      	ldrh	r2, [r3, #4]
 8000eea:	6960      	ldr	r0, [r4, #20]
 8000eec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000eee:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000ef0:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d007      	beq.n	8000f08 <ASPEP_HWDataTransmittedIT+0x88>
 8000ef8:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d003      	beq.n	8000f08 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000f04:	b662      	cpsie	i
}
 8000f06:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000f08:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000f0a:	0063      	lsls	r3, r4, #1
 8000f0c:	3368      	adds	r3, #104	@ 0x68
 8000f0e:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000f10:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8000f12:	e7f7      	b.n	8000f04 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000f14:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000f16:	e7f5      	b.n	8000f04 <ASPEP_HWDataTransmittedIT+0x84>

08000f18 <ASPEP_RXframeProcess>:
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000f18:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000f1c:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000f1e:	f04f 0c00 	mov.w	ip, #0
{
 8000f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f26:	4604      	mov	r4, r0
    *packetLength = 0;
 8000f28:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 8000f2c:	b1cb      	cbz	r3, 8000f62 <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000f2e:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000f32:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d055      	beq.n	8000fe6 <ASPEP_RXframeProcess+0xce>
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d018      	beq.n	8000f70 <ASPEP_RXframeProcess+0x58>
 8000f3e:	b933      	cbnz	r3, 8000f4e <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000f40:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000f42:	2905      	cmp	r1, #5
 8000f44:	f000 80e3 	beq.w	800110e <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, master has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8000f48:	2906      	cmp	r1, #6
 8000f4a:	f000 8129 	beq.w	80011a0 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL;
 8000f4e:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000f50:	6960      	ldr	r0, [r4, #20]
 8000f52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000f54:	2204      	movs	r2, #4
 8000f56:	f104 011c 	add.w	r1, r4, #28
 8000f5a:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000f62:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8000f66:	b9bb      	cbnz	r3, 8000f98 <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL;
 8000f68:	2500      	movs	r5, #0
}
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000f70:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d045      	beq.n	8001002 <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	f000 8118 	beq.w	80011ac <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d1e6      	bne.n	8000f4e <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000f80:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLength;
 8000f84:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 8000f88:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000f8a:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f8c:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000f8e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f92:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000f94:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000f96:	e7db      	b.n	8000f50 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000f98:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000f9c:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000f9e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000fa2:	488b      	ldr	r0, [pc, #556]	@ (80011d0 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000fa4:	4d8b      	ldr	r5, [pc, #556]	@ (80011d4 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000fa6:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000faa:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000fae:	5c82      	ldrb	r2, [r0, r2]
 8000fb0:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000fb4:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000fb6:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000fb8:	5ceb      	ldrb	r3, [r5, r3]
 8000fba:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000fbe:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000fc2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80f6 	beq.w	80011b6 <ASPEP_RXframeProcess+0x29e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fca:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000fcc:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000fd0:	b913      	cbnz	r3, 8000fd8 <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000fd8:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000fda:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000fdc:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000fde:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000fe2:	4798      	blx	r3
 8000fe4:	e7c0      	b.n	8000f68 <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 8000fe6:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000fe8:	2905      	cmp	r1, #5
 8000fea:	d04f      	beq.n	800108c <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8000fec:	2906      	cmp	r1, #6
 8000fee:	d1ae      	bne.n	8000f4e <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000ff6:	f7ff fe41 	bl	8000c7c <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8001000:	e7a5      	b.n	8000f4e <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001002:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001006:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 800100a:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800100c:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001010:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001014:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001018:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 800101c:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800101e:	4575      	cmp	r5, lr
 8001020:	bf28      	it	cs
 8001022:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001024:	42b0      	cmp	r0, r6
 8001026:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001028:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800102c:	bf28      	it	cs
 800102e:	4631      	movcs	r1, r6
 8001030:	4663      	mov	r3, ip
 8001032:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8001036:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800103a:	45b8      	cmp	r8, r7
 800103c:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800103e:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001042:	bf28      	it	cs
 8001044:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001046:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001048:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800104c:	4651      	mov	r1, sl
 800104e:	bf28      	it	cs
 8001050:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001052:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001056:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001058:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800105a:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 800105e:	d80f      	bhi.n	8001080 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001060:	45ae      	cmp	lr, r5
 8001062:	d80d      	bhi.n	8001080 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001064:	45b8      	cmp	r8, r7
 8001066:	d80b      	bhi.n	8001080 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001068:	45ca      	cmp	sl, r9
 800106a:	d809      	bhi.n	8001080 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800106c:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 8001070:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001074:	ebac 0c02 	sub.w	ip, ip, r2
 8001078:	fabc fc8c 	clz	ip, ip
 800107c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001080:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff fdb3 	bl	8000bf0 <ASPEP_sendBeacon>
 800108a:	e760      	b.n	8000f4e <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 800108c:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800108e:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001092:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001094:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001098:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800109c:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80010a0:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80010a4:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010a6:	42a8      	cmp	r0, r5
 80010a8:	bf28      	it	cs
 80010aa:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010ac:	42b1      	cmp	r1, r6
 80010ae:	4663      	mov	r3, ip
 80010b0:	468c      	mov	ip, r1
 80010b2:	bf28      	it	cs
 80010b4:	46b4      	movcs	ip, r6
 80010b6:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80010ba:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 80010be:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010c2:	45bc      	cmp	ip, r7
 80010c4:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010c6:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010ca:	bf28      	it	cs
 80010cc:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010ce:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010d0:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010d4:	46c1      	mov	r9, r8
 80010d6:	bf28      	it	cs
 80010d8:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010da:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010de:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010e0:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010e2:	d80b      	bhi.n	80010fc <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80010e4:	4285      	cmp	r5, r0
 80010e6:	d809      	bhi.n	80010fc <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80010e8:	45bc      	cmp	ip, r7
 80010ea:	d807      	bhi.n	80010fc <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80010ec:	45f0      	cmp	r8, lr
 80010ee:	d805      	bhi.n	80010fc <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80010f0:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80010f4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d002      	beq.n	8001102 <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001102:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff fd72 	bl	8000bf0 <ASPEP_sendBeacon>
 800110c:	e71f      	b.n	8000f4e <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 800110e:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001112:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001116:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001118:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800111c:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001120:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001124:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001128:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800112a:	4561      	cmp	r1, ip
 800112c:	bf28      	it	cs
 800112e:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001130:	42b5      	cmp	r5, r6
 8001132:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001134:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001138:	bf28      	it	cs
 800113a:	4630      	movcs	r0, r6
 800113c:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8001140:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001144:	45b8      	cmp	r8, r7
 8001146:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001148:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800114c:	bf28      	it	cs
 800114e:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001150:	45ca      	cmp	sl, r9
 8001152:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001154:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001158:	bf28      	it	cs
 800115a:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800115c:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001160:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001162:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001164:	d8cd      	bhi.n	8001102 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001166:	458c      	cmp	ip, r1
 8001168:	d8cb      	bhi.n	8001102 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 800116a:	45b8      	cmp	r8, r7
 800116c:	d8c9      	bhi.n	8001102 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800116e:	45ca      	cmp	sl, r9
 8001170:	d8c7      	bhi.n	8001102 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001172:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001176:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800117a:	4293      	cmp	r3, r2
 800117c:	d1c1      	bne.n	8001102 <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800117e:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001180:	1c42      	adds	r2, r0, #1
 8001182:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001184:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001186:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001188:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800118c:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 800118e:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001190:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001192:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001196:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 800119a:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 800119e:	e7b0      	b.n	8001102 <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 80011a0:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fd69 	bl	8000c7c <ASPEP_sendPing>
 80011aa:	e6d0      	b.n	8000f4e <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80011ac:	7f42      	ldrb	r2, [r0, #29]
 80011ae:	2101      	movs	r1, #1
 80011b0:	f7ff fd64 	bl	8000c7c <ASPEP_sendPing>
 80011b4:	e6cb      	b.n	8000f4e <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80011b6:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80011c0:	64a1      	str	r1, [r4, #72]	@ 0x48
 80011c2:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80011c4:	2204      	movs	r2, #4
 80011c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011c8:	6960      	ldr	r0, [r4, #20]
 80011ca:	4798      	blx	r3
 80011cc:	e704      	b.n	8000fd8 <ASPEP_RXframeProcess+0xc0>
 80011ce:	bf00      	nop
 80011d0:	0800a328 	.word	0x0800a328
 80011d4:	0800a318 	.word	0x0800a318

080011d8 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 80011d8:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 80011da:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 80011de:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 80011e0:	b13b      	cbz	r3, 80011f2 <ASPEP_HWDataReceivedIT+0x1a>
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d104      	bne.n	80011f0 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 80011e6:	2200      	movs	r2, #0
 80011e8:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 80011ec:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 80011f0:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80011f2:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80011f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001270 <ASPEP_HWDataReceivedIT+0x98>)
 80011f6:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80011f8:	5cd3      	ldrb	r3, [r2, r3]
 80011fa:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80011fe:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8001206:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 800120e:	5cd3      	ldrb	r3, [r2, r3]
 8001210:	b95b      	cbnz	r3, 800122a <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8001212:	7f03      	ldrb	r3, [r0, #28]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	2b06      	cmp	r3, #6
 800121a:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 800121c:	d809      	bhi.n	8001232 <ASPEP_HWDataReceivedIT+0x5a>
 800121e:	2b04      	cmp	r3, #4
 8001220:	d81e      	bhi.n	8001260 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001222:	2301      	movs	r3, #1
 8001224:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8001228:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 800122a:	2304      	movs	r3, #4
 800122c:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001230:	bd10      	pop	{r4, pc}
 8001232:	2b09      	cmp	r3, #9
 8001234:	d1f5      	bne.n	8001222 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8001236:	8b83      	ldrh	r3, [r0, #28]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 800123e:	b17b      	cbz	r3, 8001260 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8001240:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8001244:	429a      	cmp	r2, r3
 8001246:	d30f      	bcc.n	8001268 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8001248:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 800124c:	6981      	ldr	r1, [r0, #24]
 800124e:	6940      	ldr	r0, [r0, #20]
 8001250:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001254:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001256:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8001258:	2301      	movs	r3, #1
 800125a:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 800125e:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8001260:	2301      	movs	r3, #1
 8001262:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8001266:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8001268:	2302      	movs	r3, #2
 800126a:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 800126e:	bd10      	pop	{r4, pc}
 8001270:	0800a328 	.word	0x0800a328

08001274 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8001274:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001276:	2200      	movs	r2, #0
 8001278:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800127c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800127e:	6940      	ldr	r0, [r0, #20]
 8001280:	2204      	movs	r2, #4
 8001282:	311c      	adds	r1, #28
 8001284:	4718      	bx	r3
 8001286:	bf00      	nop

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b510      	push	{r4, lr}
 800128a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128c:	2238      	movs	r2, #56	@ 0x38
 800128e:	2100      	movs	r1, #0
 8001290:	a806      	add	r0, sp, #24
 8001292:	f008 fffb 	bl	800a28c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001296:	2000      	movs	r0, #0
 8001298:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800129c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80012a0:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012a2:	f004 fbcd 	bl	8005a40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a6:	2001      	movs	r0, #1
 80012a8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80012ac:	2206      	movs	r2, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b4:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80012b6:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80012b8:	2155      	movs	r1, #85	@ 0x55
 80012ba:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012be:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80012c2:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012c6:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ca:	f004 fc33 	bl	8005b34 <HAL_RCC_OscConfig>
 80012ce:	b108      	cbz	r0, 80012d4 <SystemClock_Config+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <SystemClock_Config+0x4a>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012d4:	2104      	movs	r1, #4
 80012d6:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012da:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e2:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012e8:	f004 fe9e 	bl	8006028 <HAL_RCC_ClockConfig>
 80012ec:	b108      	cbz	r0, 80012f2 <SystemClock_Config+0x6a>
 80012ee:	b672      	cpsid	i
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <SystemClock_Config+0x68>
  HAL_RCC_EnableCSS();
 80012f2:	f004 ffc7 	bl	8006284 <HAL_RCC_EnableCSS>
}
 80012f6:	b014      	add	sp, #80	@ 0x50
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	bf00      	nop

080012fc <main>:
{
 80012fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	2600      	movs	r6, #0
{
 8001302:	b0ab      	sub	sp, #172	@ 0xac
  HAL_Init();
 8001304:	f003 fab4 	bl	8004870 <HAL_Init>
  SystemClock_Config();
 8001308:	f7ff ffbe 	bl	8001288 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
 8001310:	e9cd 661d 	strd	r6, r6, [sp, #116]	@ 0x74
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	4c9a      	ldr	r4, [pc, #616]	@ (8001580 <main+0x284>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	961f      	str	r6, [sp, #124]	@ 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001320:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	9304      	str	r3, [sp, #16]
 8001328:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800132a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800132c:	f043 0320 	orr.w	r3, r3, #32
 8001330:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001332:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	9305      	str	r3, [sp, #20]
 800133a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001344:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	9306      	str	r3, [sp, #24]
 800134c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001356:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001358:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800135c:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001368:	f004 fb64 	bl	8005a34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 800136c:	4632      	mov	r2, r6
 800136e:	4885      	ldr	r0, [pc, #532]	@ (8001584 <main+0x288>)
 8001370:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001374:	f004 fb5e 	bl	8005a34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800137c:	4882      	ldr	r0, [pc, #520]	@ (8001588 <main+0x28c>)
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800137e:	931b      	str	r3, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001380:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001382:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	961d      	str	r6, [sp, #116]	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138a:	931c      	str	r3, [sp, #112]	@ 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800138c:	f004 fa4a 	bl	8005824 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NSS_Pin;
 8001390:	2310      	movs	r3, #16
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001392:	a91b      	add	r1, sp, #108	@ 0x6c
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	e9cd 661d 	strd	r6, r6, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a0:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f004 fa3e 	bl	8005824 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80013a8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	4875      	ldr	r0, [pc, #468]	@ (8001584 <main+0x288>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80013ae:	931b      	str	r3, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013b2:	e9cd 5a1c 	strd	r5, sl, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	f8cd a078 	str.w	sl, [sp, #120]	@ 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f004 fa33 	bl	8005824 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013be:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80013c0:	f042 0204 	orr.w	r2, r2, #4
 80013c4:	64a2      	str	r2, [r4, #72]	@ 0x48
 80013c6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80013c8:	f002 0204 	and.w	r2, r2, #4
 80013cc:	9202      	str	r2, [sp, #8]
 80013ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80013d2:	432a      	orrs	r2, r5
 80013d4:	64a2      	str	r2, [r4, #72]	@ 0x48
 80013d6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
  hadc1.Instance = ADC1;
 80013d8:	4c6c      	ldr	r4, [pc, #432]	@ (800158c <main+0x290>)
  ADC_MultiModeTypeDef multimode = {0};
 80013da:	960e      	str	r6, [sp, #56]	@ 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013dc:	402a      	ands	r2, r5
 80013de:	9203      	str	r2, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80013e0:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e2:	9a03      	ldr	r2, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80013e4:	a81b      	add	r0, sp, #108	@ 0x6c
 80013e6:	223c      	movs	r2, #60	@ 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 80013e8:	e9cd 660f 	strd	r6, r6, [sp, #60]	@ 0x3c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80013ec:	f008 ff4e 	bl	800a28c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80013f0:	2220      	movs	r2, #32
 80013f2:	4631      	mov	r1, r6
 80013f4:	a813      	add	r0, sp, #76	@ 0x4c
 80013f6:	f008 ff49 	bl	800a28c <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80013fa:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013fe:	e9c4 6601 	strd	r6, r6, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001402:	e9c4 6504 	strd	r6, r5, [r4, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001406:	e9c4 660b 	strd	r6, r6, [r4, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800140a:	83a6      	strh	r6, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800140c:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001410:	f884 6038 	strb.w	r6, [r4, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001414:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001416:	f884 6040 	strb.w	r6, [r4, #64]	@ 0x40
  hadc1.Instance = ADC1;
 800141a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141e:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001420:	4620      	mov	r0, r4
  hadc1.Init.NbrOfConversion = 1;
 8001422:	6225      	str	r5, [r4, #32]
  hadc1.Instance = ADC1;
 8001424:	6022      	str	r2, [r4, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001426:	60e7      	str	r7, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001428:	61a6      	str	r6, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800142a:	f003 fa43 	bl	80048b4 <HAL_ADC_Init>
 800142e:	b108      	cbz	r0, 8001434 <main+0x138>
 8001430:	b672      	cpsid	i
  while (1)
 8001432:	e7fe      	b.n	8001432 <main+0x136>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001434:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001436:	a90e      	add	r1, sp, #56	@ 0x38
 8001438:	4620      	mov	r0, r4
 800143a:	f004 f865 	bl	8005508 <HAL_ADCEx_MultiModeConfigChannel>
 800143e:	b108      	cbz	r0, 8001444 <main+0x148>
 8001440:	b672      	cpsid	i
  while (1)
 8001442:	e7fe      	b.n	8001442 <main+0x146>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001444:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <main+0x294>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001446:	f8ad 0090 	strh.w	r0, [sp, #144]	@ 0x90
  sConfigInjected.InjectedOffset = 0;
 800144a:	e9cd 601f 	strd	r6, r0, [sp, #124]	@ 0x7c
  sConfigInjected.QueueInjectedContext = DISABLE;
 800144e:	f88d 0092 	strb.w	r0, [sp, #146]	@ 0x92
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001452:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001456:	f04f 0980 	mov.w	r9, #128	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800145a:	2309      	movs	r3, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800145c:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001460:	a91b      	add	r1, sp, #108	@ 0x6c
 8001462:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001464:	e9cd 9925 	strd	r9, r9, [sp, #148]	@ 0x94
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001468:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800146c:	951d      	str	r5, [sp, #116]	@ 0x74
  sConfigInjected.InjectedNbrOfConversion = 2;
 800146e:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001472:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001476:	f003 fd6d 	bl	8004f54 <HAL_ADCEx_InjectedConfigChannel>
 800147a:	b108      	cbz	r0, 8001480 <main+0x184>
 800147c:	b672      	cpsid	i
  while (1)
 800147e:	e7fe      	b.n	800147e <main+0x182>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001480:	4844      	ldr	r0, [pc, #272]	@ (8001594 <main+0x298>)
 8001482:	f240 130f 	movw	r3, #271	@ 0x10f
 8001486:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800148a:	a91b      	add	r1, sp, #108	@ 0x6c
 800148c:	4620      	mov	r0, r4
 800148e:	f003 fd61 	bl	8004f54 <HAL_ADCEx_InjectedConfigChannel>
 8001492:	b108      	cbz	r0, 8001498 <main+0x19c>
 8001494:	b672      	cpsid	i
  while (1)
 8001496:	e7fe      	b.n	8001496 <main+0x19a>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001498:	4a3f      	ldr	r2, [pc, #252]	@ (8001598 <main+0x29c>)
  sConfig.Offset = 0;
 800149a:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149c:	a913      	add	r1, sp, #76	@ 0x4c
 800149e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a0:	f04f 0b06 	mov.w	fp, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014a4:	e9cd 6815 	strd	r6, r8, [sp, #84]	@ 0x54
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a8:	e9cd 2b13 	strd	r2, fp, [sp, #76]	@ 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ac:	9617      	str	r6, [sp, #92]	@ 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ae:	f003 fb01 	bl	8004ab4 <HAL_ADC_ConfigChannel>
 80014b2:	4601      	mov	r1, r0
 80014b4:	b108      	cbz	r0, 80014ba <main+0x1be>
 80014b6:	b672      	cpsid	i
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <main+0x1bc>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80014ba:	223c      	movs	r2, #60	@ 0x3c
 80014bc:	9001      	str	r0, [sp, #4]
 80014be:	a81b      	add	r0, sp, #108	@ 0x6c
  hadc2.Instance = ADC2;
 80014c0:	4c36      	ldr	r4, [pc, #216]	@ (800159c <main+0x2a0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80014c2:	f008 fee3 	bl	800a28c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80014c6:	9901      	ldr	r1, [sp, #4]
 80014c8:	2220      	movs	r2, #32
 80014ca:	a813      	add	r0, sp, #76	@ 0x4c
 80014cc:	f008 fede 	bl	800a28c <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014d0:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80014d2:	4a33      	ldr	r2, [pc, #204]	@ (80015a0 <main+0x2a4>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014d4:	60e7      	str	r7, [r4, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014d6:	4620      	mov	r0, r4
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014d8:	e9c4 1101 	strd	r1, r1, [r4, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014dc:	e9c4 1504 	strd	r1, r5, [r4, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e0:	e9c4 110b 	strd	r1, r1, [r4, #44]	@ 0x2c
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e4:	61a6      	str	r6, [r4, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80014e6:	83a1      	strh	r1, [r4, #28]
  hadc2.Init.NbrOfConversion = 1;
 80014e8:	6225      	str	r5, [r4, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014ea:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014ee:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014f2:	63e1      	str	r1, [r4, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80014f4:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  hadc2.Instance = ADC2;
 80014f8:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014fa:	f003 f9db 	bl	80048b4 <HAL_ADC_Init>
 80014fe:	b108      	cbz	r0, 8001504 <main+0x208>
 8001500:	b672      	cpsid	i
  while (1)
 8001502:	e7fe      	b.n	8001502 <main+0x206>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001504:	4923      	ldr	r1, [pc, #140]	@ (8001594 <main+0x298>)
  sConfigInjected.InjectedOffset = 0;
 8001506:	9020      	str	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001508:	2309      	movs	r3, #9
 800150a:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800150e:	f8ad 0090 	strh.w	r0, [sp, #144]	@ 0x90
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001512:	f88d 0092 	strb.w	r0, [sp, #146]	@ 0x92
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001516:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800151a:	a91b      	add	r1, sp, #108	@ 0x6c
 800151c:	4620      	mov	r0, r4
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800151e:	e9cd 861e 	strd	r8, r6, [sp, #120]	@ 0x78
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001522:	e9cd 9925 	strd	r9, r9, [sp, #148]	@ 0x94
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001526:	951d      	str	r5, [sp, #116]	@ 0x74
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001528:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800152c:	f003 fd12 	bl	8004f54 <HAL_ADCEx_InjectedConfigChannel>
 8001530:	b108      	cbz	r0, 8001536 <main+0x23a>
 8001532:	b672      	cpsid	i
  while (1)
 8001534:	e7fe      	b.n	8001534 <main+0x238>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001536:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <main+0x2a8>)
 8001538:	f240 120f 	movw	r2, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800153c:	a91b      	add	r1, sp, #108	@ 0x6c
 800153e:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001540:	e9cd 321b 	strd	r3, r2, [sp, #108]	@ 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001544:	f003 fd06 	bl	8004f54 <HAL_ADCEx_InjectedConfigChannel>
 8001548:	b108      	cbz	r0, 800154e <main+0x252>
 800154a:	b672      	cpsid	i
  while (1)
 800154c:	e7fe      	b.n	800154c <main+0x250>
  sConfig.Channel = ADC_CHANNEL_5;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <main+0x2ac>)
  sConfig.Offset = 0;
 8001550:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001552:	a913      	add	r1, sp, #76	@ 0x4c
 8001554:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001556:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800155a:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800155e:	9615      	str	r6, [sp, #84]	@ 0x54
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001560:	9617      	str	r6, [sp, #92]	@ 0x5c
  sConfig.Channel = ADC_CHANNEL_5;
 8001562:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001564:	f003 faa6 	bl	8004ab4 <HAL_ADC_ConfigChannel>
 8001568:	b108      	cbz	r0, 800156e <main+0x272>
 800156a:	b672      	cpsid	i
  while (1)
 800156c:	e7fe      	b.n	800156c <main+0x270>
  hcordic.Instance = CORDIC;
 800156e:	480f      	ldr	r0, [pc, #60]	@ (80015ac <main+0x2b0>)
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <main+0x2b4>)
 8001572:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001574:	f004 f82e 	bl	80055d4 <HAL_CORDIC_Init>
 8001578:	b1e0      	cbz	r0, 80015b4 <main+0x2b8>
 800157a:	b672      	cpsid	i
  while (1)
 800157c:	e7fe      	b.n	800157c <main+0x280>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	48000400 	.word	0x48000400
 8001588:	48000800 	.word	0x48000800
 800158c:	2000087c 	.word	0x2000087c
 8001590:	08600004 	.word	0x08600004
 8001594:	3ac04000 	.word	0x3ac04000
 8001598:	04300002 	.word	0x04300002
 800159c:	20000810 	.word	0x20000810
 80015a0:	50000100 	.word	0x50000100
 80015a4:	10c00010 	.word	0x10c00010
 80015a8:	14f00020 	.word	0x14f00020
 80015ac:	200007e8 	.word	0x200007e8
 80015b0:	40020c00 	.word	0x40020c00
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015b4:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 80015b6:	4db6      	ldr	r5, [pc, #728]	@ (8001890 <main+0x594>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015b8:	9412      	str	r4, [sp, #72]	@ 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ba:	4621      	mov	r1, r4
 80015bc:	2234      	movs	r2, #52	@ 0x34
 80015be:	a81b      	add	r0, sp, #108	@ 0x6c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015c0:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 80015c4:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c8:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
 80015cc:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
 80015d0:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80015d8:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	9408      	str	r4, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80015de:	940b      	str	r4, [sp, #44]	@ 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e0:	9419      	str	r4, [sp, #100]	@ 0x64
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e2:	f008 fe53 	bl	800a28c <memset>
  htim1.Instance = TIM1;
 80015e6:	4bab      	ldr	r3, [pc, #684]	@ (8001894 <main+0x598>)
 80015e8:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80015ea:	f04f 0a20 	mov.w	sl, #32
 80015ee:	f240 3352 	movw	r3, #850	@ 0x352
 80015f2:	e9c5 a302 	strd	sl, r3, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80015f6:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80015fa:	2305      	movs	r3, #5
 80015fc:	f44f 7480 	mov.w	r4, #256	@ 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001600:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001602:	e9c5 4304 	strd	r4, r3, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001606:	f005 fb6b 	bl	8006ce0 <HAL_TIM_Base_Init>
 800160a:	b108      	cbz	r0, 8001610 <main+0x314>
 800160c:	b672      	cpsid	i
  while (1)
 800160e:	e7fe      	b.n	800160e <main+0x312>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001610:	4628      	mov	r0, r5
 8001612:	f005 fc15 	bl	8006e40 <HAL_TIM_PWM_Init>
 8001616:	b108      	cbz	r0, 800161c <main+0x320>
 8001618:	b672      	cpsid	i
  while (1)
 800161a:	e7fe      	b.n	800161a <main+0x31e>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800161c:	f04f 0806 	mov.w	r8, #6
 8001620:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001622:	a90e      	add	r1, sp, #56	@ 0x38
 8001624:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001626:	e9cd 830e 	strd	r8, r3, [sp, #56]	@ 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800162a:	f005 fd4d 	bl	80070c8 <HAL_TIM_SlaveConfigSynchro>
 800162e:	b108      	cbz	r0, 8001634 <main+0x338>
 8001630:	b672      	cpsid	i
  while (1)
 8001632:	e7fe      	b.n	8001632 <main+0x336>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001638:	2670      	movs	r6, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800163a:	a908      	add	r1, sp, #32
 800163c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800163e:	9608      	str	r6, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001640:	f006 f808 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	b108      	cbz	r0, 800164a <main+0x34e>
 8001646:	b672      	cpsid	i
  while (1)
 8001648:	e7fe      	b.n	8001648 <main+0x34c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800164a:	2301      	movs	r3, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800164c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800164e:	2102      	movs	r1, #2
 8001650:	4628      	mov	r0, r5
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001652:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 8001656:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001658:	f006 f89c 	bl	8007794 <HAL_TIMEx_ConfigBreakInput>
 800165c:	4602      	mov	r2, r0
 800165e:	b108      	cbz	r0, 8001664 <main+0x368>
 8001660:	b672      	cpsid	i
  while (1)
 8001662:	e7fe      	b.n	8001662 <main+0x366>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001664:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001668:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800166c:	9019      	str	r0, [sp, #100]	@ 0x64
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800166e:	f04f 0e60 	mov.w	lr, #96	@ 0x60
 8001672:	f240 13a9 	movw	r3, #425	@ 0x1a9
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001676:	a913      	add	r1, sp, #76	@ 0x4c
 8001678:	4628      	mov	r0, r5
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800167a:	e9cd e313 	strd	lr, r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	f005 ff03 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 8001682:	b108      	cbz	r0, 8001688 <main+0x38c>
 8001684:	b672      	cpsid	i
  while (1)
 8001686:	e7fe      	b.n	8001686 <main+0x38a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001688:	2204      	movs	r2, #4
 800168a:	a913      	add	r1, sp, #76	@ 0x4c
 800168c:	4628      	mov	r0, r5
 800168e:	f005 fefb 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 8001692:	b108      	cbz	r0, 8001698 <main+0x39c>
 8001694:	b672      	cpsid	i
  while (1)
 8001696:	e7fe      	b.n	8001696 <main+0x39a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001698:	2208      	movs	r2, #8
 800169a:	a913      	add	r1, sp, #76	@ 0x4c
 800169c:	4628      	mov	r0, r5
 800169e:	f005 fef3 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 80016a2:	b108      	cbz	r0, 80016a8 <main+0x3ac>
 80016a4:	b672      	cpsid	i
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <main+0x3aa>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80016a8:	f240 3351 	movw	r3, #849	@ 0x351
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ac:	220c      	movs	r2, #12
 80016ae:	a913      	add	r1, sp, #76	@ 0x4c
 80016b0:	4628      	mov	r0, r5
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80016b2:	9314      	str	r3, [sp, #80]	@ 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80016b4:	9613      	str	r6, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016b6:	f005 fee7 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b108      	cbz	r0, 80016c2 <main+0x3c6>
 80016be:	b672      	cpsid	i
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <main+0x3c4>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c6:	9220      	str	r2, [sp, #128]	@ 0x80
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80016c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016cc:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016d0:	e9cd 3321 	strd	r3, r3, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d4:	e9cd 3326 	strd	r3, r3, [sp, #152]	@ 0x98
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80016d8:	9223      	str	r2, [sp, #140]	@ 0x8c
  sBreakDeadTimeConfig.Break2Filter = 3;
 80016da:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 80016de:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80016e0:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
 80016e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e8:	4628      	mov	r0, r5
 80016ea:	a91b      	add	r1, sp, #108	@ 0x6c
  sBreakDeadTimeConfig.Break2Filter = 3;
 80016ec:	e9cd 7224 	strd	r7, r2, [sp, #144]	@ 0x90
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80016f0:	e9cd c31b 	strd	ip, r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80016f4:	941d      	str	r4, [sp, #116]	@ 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016f6:	f005 ffff 	bl	80076f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016fa:	b108      	cbz	r0, 8001700 <main+0x404>
 80016fc:	b672      	cpsid	i
  while (1)
 80016fe:	e7fe      	b.n	80016fe <main+0x402>
  huart2.Instance = USART2;
 8001700:	4c65      	ldr	r4, [pc, #404]	@ (8001898 <main+0x59c>)
  HAL_TIM_MspPostInit(&htim1);
 8001702:	4863      	ldr	r0, [pc, #396]	@ (8001890 <main+0x594>)
  huart2.Init.BaudRate = 1843200;
 8001704:	4e65      	ldr	r6, [pc, #404]	@ (800189c <main+0x5a0>)
  HAL_TIM_MspPostInit(&htim1);
 8001706:	f002 fe4b 	bl	80043a0 <HAL_TIM_MspPostInit>
  huart2.Init.BaudRate = 1843200;
 800170a:	f44f 12e1 	mov.w	r2, #1843200	@ 0x1c2000
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 1843200;
 8001710:	e9c4 6200 	strd	r6, r2, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001714:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001716:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001718:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171c:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001724:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001728:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172a:	f006 fab1 	bl	8007c90 <HAL_UART_Init>
 800172e:	4601      	mov	r1, r0
 8001730:	b108      	cbz	r0, 8001736 <main+0x43a>
 8001732:	b672      	cpsid	i
  while (1)
 8001734:	e7fe      	b.n	8001734 <main+0x438>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001736:	4620      	mov	r0, r4
 8001738:	f006 fb34 	bl	8007da4 <HAL_UARTEx_SetTxFifoThreshold>
 800173c:	4601      	mov	r1, r0
 800173e:	b108      	cbz	r0, 8001744 <main+0x448>
 8001740:	b672      	cpsid	i
  while (1)
 8001742:	e7fe      	b.n	8001742 <main+0x446>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	4620      	mov	r0, r4
 8001746:	f006 fb6f 	bl	8007e28 <HAL_UARTEx_SetRxFifoThreshold>
 800174a:	b108      	cbz	r0, 8001750 <main+0x454>
 800174c:	b672      	cpsid	i
  while (1)
 800174e:	e7fe      	b.n	800174e <main+0x452>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001750:	4620      	mov	r0, r4
 8001752:	f006 fb09 	bl	8007d68 <HAL_UARTEx_DisableFifoMode>
 8001756:	4605      	mov	r5, r0
 8001758:	b108      	cbz	r0, 800175e <main+0x462>
 800175a:	b672      	cpsid	i
  while (1)
 800175c:	e7fe      	b.n	800175c <main+0x460>
  MX_MotorControl_Init();
 800175e:	f001 f8ab 	bl	80028b8 <MX_MotorControl_Init>
  hspi3.Instance = SPI3;
 8001762:	4c4f      	ldr	r4, [pc, #316]	@ (80018a0 <main+0x5a4>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001764:	484f      	ldr	r0, [pc, #316]	@ (80018a4 <main+0x5a8>)
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001766:	62a5      	str	r5, [r4, #40]	@ 0x28
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001768:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800176c:	e9c4 0300 	strd	r0, r3, [r4]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001770:	2701      	movs	r7, #1
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001772:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001776:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800177a:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800177e:	2320      	movs	r3, #32
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001780:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001784:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001788:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800178c:	e9c4 5306 	strd	r5, r3, [r4, #24]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001790:	4620      	mov	r0, r4
  hspi3.Init.CRCPolynomial = 7;
 8001792:	2307      	movs	r3, #7
 8001794:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001796:	f004 ffe5 	bl	8006764 <HAL_SPI_Init>
 800179a:	b108      	cbz	r0, 80017a0 <main+0x4a4>
 800179c:	b672      	cpsid	i
  while (1)
 800179e:	e7fe      	b.n	800179e <main+0x4a2>
  htim3.Instance = TIM3;
 80017a0:	4d41      	ldr	r5, [pc, #260]	@ (80018a8 <main+0x5ac>)
  htim3.Init.Prescaler = 17-1;
 80017a2:	4a42      	ldr	r2, [pc, #264]	@ (80018ac <main+0x5b0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	9015      	str	r0, [sp, #84]	@ 0x54
  htim3.Init.Prescaler = 17-1;
 80017a6:	2310      	movs	r3, #16
 80017a8:	e9c5 2300 	strd	r2, r3, [r5]
  htim3.Init.Period = 999;
 80017ac:	f240 33e7 	movw	r3, #999	@ 0x3e7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b0:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
 80017b4:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	60a8      	str	r0, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	6128      	str	r0, [r5, #16]
  htim3.Init.Period = 999;
 80017c0:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c2:	4628      	mov	r0, r5
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c8:	f005 fa8a 	bl	8006ce0 <HAL_TIM_Base_Init>
 80017cc:	b108      	cbz	r0, 80017d2 <main+0x4d6>
 80017ce:	b672      	cpsid	i
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <main+0x4d4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017d6:	a91b      	add	r1, sp, #108	@ 0x6c
 80017d8:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017dc:	f005 fba6 	bl	8006f2c <HAL_TIM_ConfigClockSource>
 80017e0:	b108      	cbz	r0, 80017e6 <main+0x4ea>
 80017e2:	b672      	cpsid	i
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <main+0x4e8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	9013      	str	r0, [sp, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ea:	a913      	add	r1, sp, #76	@ 0x4c
 80017ec:	4628      	mov	r0, r5
 80017ee:	f005 ff31 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4606      	mov	r6, r0
 80017f4:	b108      	cbz	r0, 80017fa <main+0x4fe>
 80017f6:	b672      	cpsid	i
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <main+0x4fc>
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017fa:	4602      	mov	r2, r0
 80017fc:	4601      	mov	r1, r0
 80017fe:	201d      	movs	r0, #29
 8001800:	f003 ff14 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001804:	201d      	movs	r0, #29
 8001806:	f003 ff4d 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 800180a:	463a      	mov	r2, r7
 800180c:	2103      	movs	r1, #3
 800180e:	2026      	movs	r0, #38	@ 0x26
 8001810:	f003 ff0c 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001814:	2026      	movs	r0, #38	@ 0x26
 8001816:	f003 ff45 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800181a:	4632      	mov	r2, r6
 800181c:	2103      	movs	r1, #3
 800181e:	200b      	movs	r0, #11
 8001820:	f003 ff04 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001824:	200b      	movs	r0, #11
 8001826:	f003 ff3d 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 800182a:	463a      	mov	r2, r7
 800182c:	2104      	movs	r1, #4
 800182e:	2018      	movs	r0, #24
 8001830:	f003 fefc 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001834:	2018      	movs	r0, #24
 8001836:	f003 ff35 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800183a:	4632      	mov	r2, r6
 800183c:	4631      	mov	r1, r6
 800183e:	2019      	movs	r0, #25
 8001840:	f003 fef4 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001844:	2019      	movs	r0, #25
 8001846:	f003 ff2d 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800184a:	4632      	mov	r2, r6
 800184c:	2102      	movs	r1, #2
 800184e:	2012      	movs	r0, #18
 8001850:	f003 feec 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001854:	2012      	movs	r0, #18
 8001856:	f003 ff25 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800185a:	4632      	mov	r2, r6
 800185c:	2103      	movs	r1, #3
 800185e:	2028      	movs	r0, #40	@ 0x28
 8001860:	f003 fee4 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001864:	2028      	movs	r0, #40	@ 0x28
 8001866:	f003 ff1d 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800186a:	4632      	mov	r2, r6
 800186c:	4631      	mov	r1, r6
 800186e:	201d      	movs	r0, #29
 8001870:	f003 fedc 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001874:	201d      	movs	r0, #29
 8001876:	f003 ff15 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Init(&htim3);
 800187a:	4628      	mov	r0, r5
 800187c:	f005 fa30 	bl	8006ce0 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001880:	4628      	mov	r0, r5
 8001882:	f005 faa3 	bl	8006dcc <HAL_TIM_Base_Start_IT>
  HAL_SPI_Init(&hspi3);
 8001886:	4620      	mov	r0, r4
 8001888:	f004 ff6c 	bl	8006764 <HAL_SPI_Init>
  while (1)
 800188c:	e7fe      	b.n	800188c <main+0x590>
 800188e:	bf00      	nop
 8001890:	20000738 	.word	0x20000738
 8001894:	40012c00 	.word	0x40012c00
 8001898:	2000065c 	.word	0x2000065c
 800189c:	40004400 	.word	0x40004400
 80018a0:	20000784 	.word	0x20000784
 80018a4:	40003c00 	.word	0x40003c00
 80018a8:	200006ec 	.word	0x200006ec
 80018ac:	40000400 	.word	0x40000400

080018b0 <read_as5048a>:
	command1 = (RW << 14) | (adress & 0x3FFF) ;
 80018b0:	4b68      	ldr	r3, [pc, #416]	@ (8001a54 <read_as5048a+0x1a4>)
	CounterSPI ++;
 80018b2:	4a69      	ldr	r2, [pc, #420]	@ (8001a58 <read_as5048a+0x1a8>)
	command1 = (RW << 14) | (adress & 0x3FFF) ;
 80018b4:	8819      	ldrh	r1, [r3, #0]
	CounterSPI ++;
 80018b6:	6813      	ldr	r3, [r2, #0]
{
 80018b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	command1 = (RW << 14) | (adress & 0x3FFF) ;
 80018bc:	4c67      	ldr	r4, [pc, #412]	@ (8001a5c <read_as5048a+0x1ac>)
 80018be:	8824      	ldrh	r4, [r4, #0]
 80018c0:	f3c1 010d 	ubfx	r1, r1, #0, #14
 80018c4:	ea41 3184 	orr.w	r1, r1, r4, lsl #14
	CounterSPI ++;
 80018c8:	3301      	adds	r3, #1
		if (command & 0x1)
 80018ca:	078e      	lsls	r6, r1, #30
	CounterSPI ++;
 80018cc:	6013      	str	r3, [r2, #0]
	command1 = (RW << 14) | (adress & 0x3FFF) ;
 80018ce:	f001 0301 	and.w	r3, r1, #1
 80018d2:	b28a      	uxth	r2, r1
			x++;
 80018d4:	bf48      	it	mi
 80018d6:	3301      	addmi	r3, #1
		if (command & 0x1)
 80018d8:	0755      	lsls	r5, r2, #29
			x++;
 80018da:	bf44      	itt	mi
 80018dc:	3301      	addmi	r3, #1
 80018de:	b2db      	uxtbmi	r3, r3
{
 80018e0:	4604      	mov	r4, r0
		if (command & 0x1)
 80018e2:	0710      	lsls	r0, r2, #28
			x++;
 80018e4:	bf44      	itt	mi
 80018e6:	3301      	addmi	r3, #1
 80018e8:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 80018ea:	06d1      	lsls	r1, r2, #27
			x++;
 80018ec:	bf44      	itt	mi
 80018ee:	3301      	addmi	r3, #1
 80018f0:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 80018f2:	0697      	lsls	r7, r2, #26
			x++;
 80018f4:	bf44      	itt	mi
 80018f6:	3301      	addmi	r3, #1
 80018f8:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 80018fa:	0656      	lsls	r6, r2, #25
			x++;
 80018fc:	bf44      	itt	mi
 80018fe:	3301      	addmi	r3, #1
 8001900:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001902:	0615      	lsls	r5, r2, #24
			x++;
 8001904:	bf44      	itt	mi
 8001906:	3301      	addmi	r3, #1
 8001908:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 800190a:	05d0      	lsls	r0, r2, #23
			x++;
 800190c:	bf44      	itt	mi
 800190e:	3301      	addmi	r3, #1
 8001910:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001912:	0591      	lsls	r1, r2, #22
			x++;
 8001914:	bf44      	itt	mi
 8001916:	3301      	addmi	r3, #1
 8001918:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 800191a:	0557      	lsls	r7, r2, #21
			x++;
 800191c:	bf44      	itt	mi
 800191e:	3301      	addmi	r3, #1
 8001920:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001922:	0516      	lsls	r6, r2, #20
			x++;
 8001924:	bf44      	itt	mi
 8001926:	3301      	addmi	r3, #1
 8001928:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 800192a:	04d5      	lsls	r5, r2, #19
			x++;
 800192c:	bf44      	itt	mi
 800192e:	3301      	addmi	r3, #1
 8001930:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001932:	0490      	lsls	r0, r2, #18
			x++;
 8001934:	bf44      	itt	mi
 8001936:	3301      	addmi	r3, #1
 8001938:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 800193a:	0451      	lsls	r1, r2, #17
			x++;
 800193c:	bf44      	itt	mi
 800193e:	3301      	addmi	r3, #1
 8001940:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001942:	0bd1      	lsrs	r1, r2, #15
			x++;
 8001944:	bf1c      	itt	ne
 8001946:	3301      	addne	r3, #1
 8001948:	b2db      	uxtbne	r3, r3
{
 800194a:	b082      	sub	sp, #8
	command1 = ((uint16_t)CalcParityBit(command1)<<15)|command1; //0b1111 1111 1111 1111
 800194c:	4e44      	ldr	r6, [pc, #272]	@ (8001a60 <read_as5048a+0x1b0>)
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	ea42 33c3 	orr.w	r3, r2, r3, lsl #15
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&command1, (uint8_t*)&response1,sizeof(uint8_t), 1);
 8001956:	2501      	movs	r5, #1
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2110      	movs	r1, #16
 800195c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	command1 = ((uint16_t)CalcParityBit(command1)<<15)|command1; //0b1111 1111 1111 1111
 8001960:	8033      	strh	r3, [r6, #0]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001962:	f004 f867 	bl	8005a34 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&command1, (uint8_t*)&response1,sizeof(uint8_t), 1);
 8001966:	462b      	mov	r3, r5
 8001968:	4a3e      	ldr	r2, [pc, #248]	@ (8001a64 <read_as5048a+0x1b4>)
 800196a:	9500      	str	r5, [sp, #0]
 800196c:	4631      	mov	r1, r6
 800196e:	483e      	ldr	r0, [pc, #248]	@ (8001a68 <read_as5048a+0x1b8>)
 8001970:	f004 ff76 	bl	8006860 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001974:	462a      	mov	r2, r5
 8001976:	2110      	movs	r1, #16
 8001978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800197c:	f004 f85a 	bl	8005a34 <HAL_GPIO_WritePin>
 8001980:	2505      	movs	r5, #5
	  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2110      	movs	r1, #16
 8001986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198a:	f004 f853 	bl	8005a34 <HAL_GPIO_WritePin>
	for (int i = 0; i<5; i++)
 800198e:	3d01      	subs	r5, #1
 8001990:	d1f7      	bne.n	8001982 <read_as5048a+0xd2>
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&NOP, (uint8_t*)&response1,sizeof(uint8_t), 1);
 8001992:	4f34      	ldr	r7, [pc, #208]	@ (8001a64 <read_as5048a+0x1b4>)
 8001994:	2601      	movs	r6, #1
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001996:	462a      	mov	r2, r5
 8001998:	2110      	movs	r1, #16
 800199a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199e:	f004 f849 	bl	8005a34 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&NOP, (uint8_t*)&response1,sizeof(uint8_t), 1);
 80019a2:	4633      	mov	r3, r6
 80019a4:	4931      	ldr	r1, [pc, #196]	@ (8001a6c <read_as5048a+0x1bc>)
 80019a6:	4830      	ldr	r0, [pc, #192]	@ (8001a68 <read_as5048a+0x1b8>)
 80019a8:	9600      	str	r6, [sp, #0]
 80019aa:	463a      	mov	r2, r7
 80019ac:	f004 ff58 	bl	8006860 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80019b0:	4632      	mov	r2, r6
 80019b2:	2110      	movs	r1, #16
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b8:	f004 f83c 	bl	8005a34 <HAL_GPIO_WritePin>
    if (response1 & 0x4000)
 80019bc:	883b      	ldrh	r3, [r7, #0]
 80019be:	045a      	lsls	r2, r3, #17
 80019c0:	d40a      	bmi.n	80019d8 <read_as5048a+0x128>
    data = response1 & 0x3FFF;
 80019c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    return data;
 80019c6:	ee07 3a90 	vmov	s15, r3
    data = response1 & 0x3FFF;
 80019ca:	4a29      	ldr	r2, [pc, #164]	@ (8001a70 <read_as5048a+0x1c0>)
    return data;
 80019cc:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    data = response1 & 0x3FFF;
 80019d0:	8013      	strh	r3, [r2, #0]
}
 80019d2:	b002      	add	sp, #8
 80019d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        error_command1 = 0x4001;
 80019d8:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8001a78 <read_as5048a+0x1c8>
        error_response = 0;
 80019dc:	4f25      	ldr	r7, [pc, #148]	@ (8001a74 <read_as5048a+0x1c4>)
        error_command1 = 0x4001;
 80019de:	f244 0301 	movw	r3, #16385	@ 0x4001
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80019e2:	462a      	mov	r2, r5
 80019e4:	2110      	movs	r1, #16
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
        error_command1 = 0x4001;
 80019ea:	f8a8 3000 	strh.w	r3, [r8]
        error_response = 0;
 80019ee:	803d      	strh	r5, [r7, #0]
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80019f0:	f004 f820 	bl	8005a34 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(hspi, (uint8_t*)&error_command1, (uint8_t*)&error_response, sizeof(uint8_t), 1);
 80019f4:	4633      	mov	r3, r6
 80019f6:	4641      	mov	r1, r8
 80019f8:	463a      	mov	r2, r7
 80019fa:	9600      	str	r6, [sp, #0]
 80019fc:	4620      	mov	r0, r4
 80019fe:	f004 ff2f 	bl	8006860 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001a02:	4632      	mov	r2, r6
 8001a04:	2110      	movs	r1, #16
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a0a:	f004 f813 	bl	8005a34 <HAL_GPIO_WritePin>
 8001a0e:	2505      	movs	r5, #5
    	  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2110      	movs	r1, #16
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a18:	f004 f80c 	bl	8005a34 <HAL_GPIO_WritePin>
    	for (int i = 0; i<5; i++)
 8001a1c:	3d01      	subs	r5, #1
 8001a1e:	d1f7      	bne.n	8001a10 <read_as5048a+0x160>
        HAL_SPI_TransmitReceive(hspi, (uint8_t*)&NOP, (uint8_t*)&error_response, sizeof(uint8_t), 1);
 8001a20:	2601      	movs	r6, #1
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001a22:	462a      	mov	r2, r5
 8001a24:	2110      	movs	r1, #16
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a2a:	f004 f803 	bl	8005a34 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(hspi, (uint8_t*)&NOP, (uint8_t*)&error_response, sizeof(uint8_t), 1);
 8001a2e:	4633      	mov	r3, r6
 8001a30:	490e      	ldr	r1, [pc, #56]	@ (8001a6c <read_as5048a+0x1bc>)
 8001a32:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <read_as5048a+0x1c4>)
 8001a34:	9600      	str	r6, [sp, #0]
 8001a36:	4620      	mov	r0, r4
 8001a38:	f004 ff12 	bl	8006860 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001a3c:	4632      	mov	r2, r6
 8001a3e:	2110      	movs	r1, #16
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a44:	f003 fff6 	bl	8005a34 <HAL_GPIO_WritePin>
        return -1;
 8001a48:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
}
 8001a4c:	b002      	add	sp, #8
 8001a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a52:	bf00      	nop
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000598 	.word	0x20000598
 8001a5c:	20000002 	.word	0x20000002
 8001a60:	20000594 	.word	0x20000594
 8001a64:	20000590 	.word	0x20000590
 8001a68:	20000784 	.word	0x20000784
 8001a6c:	20000592 	.word	0x20000592
 8001a70:	20000580 	.word	0x20000580
 8001a74:	2000057c 	.word	0x2000057c
 8001a78:	2000057e 	.word	0x2000057e
 8001a7c:	00000000 	.word	0x00000000

08001a80 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM3)
 8001a80:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a82:	6802      	ldr	r2, [r0, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d000      	beq.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001a88:	4770      	bx	lr
{
 8001a8a:	b510      	push	{r4, lr}
		CounterSPI ++;
 8001a8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x64>)
		angle_measured = read_as5048a(&hspi3);
 8001a8e:	4816      	ldr	r0, [pc, #88]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x68>)
		CounterSPI ++;
 8001a90:	6813      	ldr	r3, [r2, #0]
		angle_rad = ((float)angle_measured) / 16384.0*2.0*M_PI;
 8001a92:	4c16      	ldr	r4, [pc, #88]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x6c>)
{
 8001a94:	ed2d 8b02 	vpush	{d8}
		CounterSPI ++;
 8001a98:	3301      	adds	r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
		angle_measured = read_as5048a(&hspi3);
 8001a9c:	f7ff ff08 	bl	80018b0 <read_as5048a>
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x70>)
		angle_rad = ((float)angle_measured) / 16384.0*2.0*M_PI;
 8001aa2:	ee10 0a10 	vmov	r0, s0
		angle_measured = read_as5048a(&hspi3);
 8001aa6:	ed83 0a00 	vstr	s0, [r3]
 8001aaa:	eeb0 8a40 	vmov.f32	s16, s0
		angle_rad = ((float)angle_measured) / 16384.0*2.0*M_PI;
 8001aae:	f7fe fe41 	bl	8000734 <__aeabi_f2d>
 8001ab2:	a309      	add	r3, pc, #36	@ (adr r3, 8001ad8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fbae 	bl	8000218 <__aeabi_dmul>
 8001abc:	f7fe fe92 	bl	80007e4 <__aeabi_d2f>
		angle_deg = ((float)angle_measured) / 16384.0*360.0;
 8001ac0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8001af4 <HAL_TIM_PeriodElapsedCallback+0x74>
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x78>)
		angle_rad = ((float)angle_measured) / 16384.0*2.0*M_PI;
 8001ac6:	6020      	str	r0, [r4, #0]
		angle_deg = ((float)angle_measured) / 16384.0*360.0;
 8001ac8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001acc:	ed83 8a00 	vstr	s16, [r3]
}
 8001ad0:	ecbd 8b02 	vpop	{d8}
 8001ad4:	bd10      	pop	{r4, pc}
 8001ad6:	bf00      	nop
 8001ad8:	54442d18 	.word	0x54442d18
 8001adc:	3f3921fb 	.word	0x3f3921fb
 8001ae0:	40000400 	.word	0x40000400
 8001ae4:	20000598 	.word	0x20000598
 8001ae8:	20000784 	.word	0x20000784
 8001aec:	20000588 	.word	0x20000588
 8001af0:	2000058c 	.word	0x2000058c
 8001af4:	3cb40000 	.word	0x3cb40000
 8001af8:	20000584 	.word	0x20000584

08001afc <Error_Handler>:
 8001afc:	b672      	cpsid	i
  while (1)
 8001afe:	e7fe      	b.n	8001afe <Error_Handler+0x2>

08001b00 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001b00:	4b01      	ldr	r3, [pc, #4]	@ (8001b08 <MC_StartMotor1+0x8>)
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	f000 b890 	b.w	8001c28 <MCI_StartMotor>
 8001b08:	20001ad8 	.word	0x20001ad8

08001b0c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001b0c:	4b01      	ldr	r3, [pc, #4]	@ (8001b14 <MC_StopMotor1+0x8>)
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	f000 b8a0 	b.w	8001c54 <MCI_StopMotor>
 8001b14:	20001ad8 	.word	0x20001ad8

08001b18 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001b18:	4b01      	ldr	r3, [pc, #4]	@ (8001b20 <MC_GetSTMStateMotor1+0x8>)
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	f000 b87e 	b.w	8001c1c <MCI_GetSTMState>
 8001b20:	20001ad8 	.word	0x20001ad8

08001b24 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 8001b24:	2002      	movs	r0, #2
 8001b26:	4770      	bx	lr

08001b28 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001b30:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 8001b34:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001b38:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001b3a:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001b3e:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 8001b42:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001b46:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001b4a:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001b4e:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001b52:	4770      	bx	lr

08001b54 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001b54:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001b58:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001b5c:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8001b60:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8001b62:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001b64:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001b66:	4770      	bx	lr

08001b68 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001b68:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001b6c:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001b70:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8001b74:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8001b76:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001b78:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001b7a:	4770      	bx	lr

08001b7c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001b7c:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001b7e:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001b80:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001b84:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8001b86:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001b8a:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001b8c:	b002      	add	sp, #8
 8001b8e:	4770      	bx	lr

08001b90 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001b90:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001b92:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001b96:	430b      	orrs	r3, r1
 8001b98:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 8001b9c:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001ba0:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001ba2:	8381      	strh	r1, [r0, #28]

  return;
}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop

08001ba8 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001ba8:	7f83      	ldrb	r3, [r0, #30]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d000      	beq.n	8001bb0 <MCI_ExecBufferedCommands+0x8>
 8001bae:	4770      	bx	lr
{
 8001bb0:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001bb2:	7b02      	ldrb	r2, [r0, #12]
 8001bb4:	2a02      	cmp	r2, #2
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	d006      	beq.n	8001bc8 <MCI_ExecBufferedCommands+0x20>
 8001bba:	2a03      	cmp	r2, #3
 8001bbc:	d026      	beq.n	8001c0c <MCI_ExecBufferedCommands+0x64>
 8001bbe:	2a01      	cmp	r2, #1
 8001bc0:	d015      	beq.n	8001bee <MCI_ExecBufferedCommands+0x46>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001bc6:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001bc8:	6843      	ldr	r3, [r0, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001bd0:	6800      	ldr	r0, [r0, #0]
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	f007 fee0 	bl	8009998 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001bd8:	8ae2      	ldrh	r2, [r4, #22]
 8001bda:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001bde:	6820      	ldr	r0, [r4, #0]
 8001be0:	f007 fede 	bl	80099a0 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d0ec      	beq.n	8001bc2 <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001be8:	2302      	movs	r3, #2
 8001bea:	77a3      	strb	r3, [r4, #30]
}
 8001bec:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001bee:	6843      	ldr	r3, [r0, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001bf6:	6800      	ldr	r0, [r0, #0]
 8001bf8:	2103      	movs	r1, #3
 8001bfa:	f007 fecd 	bl	8009998 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001bfe:	8ae2      	ldrh	r2, [r4, #22]
 8001c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c04:	6820      	ldr	r0, [r4, #0]
 8001c06:	f007 fecb 	bl	80099a0 <STC_ExecRamp>
          break;
 8001c0a:	e7eb      	b.n	8001be4 <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001c0c:	6842      	ldr	r2, [r0, #4]
 8001c0e:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001c12:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001c16:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001c18:	e7e6      	b.n	8001be8 <MCI_ExecBufferedCommands+0x40>
 8001c1a:	bf00      	nop

08001c1c <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 8001c1c:	7e40      	ldrb	r0, [r0, #25]
 8001c1e:	4770      	bx	lr

08001c20 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 8001c20:	8b80      	ldrh	r0, [r0, #28]
 8001c22:	4770      	bx	lr

08001c24 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 8001c24:	8b40      	ldrh	r0, [r0, #26]
 8001c26:	4770      	bx	lr

08001c28 <MCI_StartMotor>:
{
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001c2c:	f7ff fff6 	bl	8001c1c <MCI_GetSTMState>
 8001c30:	b108      	cbz	r0, 8001c36 <MCI_StartMotor+0xe>
    RetVal = false;
 8001c32:	2000      	movs	r0, #0
}
 8001c34:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff fff2 	bl	8001c20 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	d1f8      	bne.n	8001c32 <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7ff ffef 	bl	8001c24 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d1f3      	bne.n	8001c32 <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c4e:	77a0      	strb	r0, [r4, #30]
}
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	bf00      	nop

08001c54 <MCI_StopMotor>:
{
 8001c54:	b538      	push	{r3, r4, r5, lr}
 8001c56:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 8001c58:	f7ff ffe0 	bl	8001c1c <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	b118      	cbz	r0, 8001c68 <MCI_StopMotor+0x14>
 8001c60:	f1b0 040c 	subs.w	r4, r0, #12
 8001c64:	bf18      	it	ne
 8001c66:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001c68:	4628      	mov	r0, r5
 8001c6a:	f7ff ffd9 	bl	8001c20 <MCI_GetOccurredFaults>
 8001c6e:	b110      	cbz	r0, 8001c76 <MCI_StopMotor+0x22>
    RetVal = false;
 8001c70:	2400      	movs	r4, #0
}
 8001c72:	4620      	mov	r0, r4
 8001c74:	bd38      	pop	{r3, r4, r5, pc}
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001c76:	4628      	mov	r0, r5
 8001c78:	f7ff ffd4 	bl	8001c24 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d1f7      	bne.n	8001c70 <MCI_StopMotor+0x1c>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001c80:	2c00      	cmp	r4, #0
 8001c82:	d0f5      	beq.n	8001c70 <MCI_StopMotor+0x1c>
    pHandle->DirectCommand = MCI_STOP;
 8001c84:	2305      	movs	r3, #5
 8001c86:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 8001c88:	e7f3      	b.n	8001c72 <MCI_StopMotor+0x1e>
 8001c8a:	bf00      	nop

08001c8c <MCI_FaultAcknowledged>:
{
 8001c8c:	b510      	push	{r4, lr}
 8001c8e:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001c90:	f7ff ffc4 	bl	8001c1c <MCI_GetSTMState>
 8001c94:	280b      	cmp	r0, #11
 8001c96:	d001      	beq.n	8001c9c <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 8001c98:	2000      	movs	r0, #0
}
 8001c9a:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff ffc1 	bl	8001c24 <MCI_GetCurrentFaults>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d1f8      	bne.n	8001c98 <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 8001caa:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 8001cac:	2001      	movs	r0, #1
}
 8001cae:	bd10      	pop	{r4, pc}

08001cb0 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001cb0:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001cb2:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 8001cb4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001cbc:	7fc0      	ldrb	r0, [r0, #31]
 8001cbe:	4770      	bx	lr

08001cc0 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001cc0:	7b03      	ldrb	r3, [r0, #12]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d005      	beq.n	8001cd2 <MCI_GetImposedMotorDirection+0x12>
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d013      	beq.n	8001cf2 <MCI_GetImposedMotorDirection+0x32>
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d009      	beq.n	8001ce2 <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 8001cce:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
}
 8001cd0:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8001cd2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bfac      	ite	ge
 8001cda:	2001      	movge	r0, #1
 8001cdc:	f04f 30ff 	movlt.w	r0, #4294967295
 8001ce0:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8001ce2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bfac      	ite	ge
 8001cea:	2001      	movge	r0, #1
 8001cec:	f04f 30ff 	movlt.w	r0, #4294967295
 8001cf0:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8001cf2:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bfac      	ite	ge
 8001cfa:	2001      	movge	r0, #1
 8001cfc:	f04f 30ff 	movlt.w	r0, #4294967295
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001d04:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop

08001d0c <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8001d0c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop

08001d14 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001d14:	8ac0      	ldrh	r0, [r0, #22]
 8001d16:	4770      	bx	lr

08001d18 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001d18:	6800      	ldr	r0, [r0, #0]
 8001d1a:	f007 be81 	b.w	8009a20 <STC_StopRamp>
 8001d1e:	bf00      	nop

08001d20 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001d20:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001d22:	6800      	ldr	r0, [r0, #0]
 8001d24:	f007 fe26 	bl	8009974 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 8001d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001d2c:	f007 bdc2 	b.w	80098b4 <SPD_GetAvrgMecSpeedUnit>

08001d30 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	f007 be29 	b.w	8009988 <STC_GetMecSpeedRefUnit>
 8001d36:	bf00      	nop

08001d38 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001d38:	6842      	ldr	r2, [r0, #4]
 8001d3a:	6810      	ldr	r0, [r2, #0]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	b282      	uxth	r2, r0
 8001d40:	f362 030f 	bfi	r3, r2, #0, #16
 8001d44:	0c00      	lsrs	r0, r0, #16
 8001d46:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001d4a:	b082      	sub	sp, #8
#endif
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	b002      	add	sp, #8
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop

08001d54 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001d54:	6842      	ldr	r2, [r0, #4]
 8001d56:	6850      	ldr	r0, [r2, #4]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	b282      	uxth	r2, r0
 8001d5c:	f362 030f 	bfi	r3, r2, #0, #16
 8001d60:	0c00      	lsrs	r0, r0, #16
 8001d62:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001d66:	b082      	sub	sp, #8
#endif
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	b002      	add	sp, #8
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001d70:	6842      	ldr	r2, [r0, #4]
 8001d72:	68d0      	ldr	r0, [r2, #12]
 8001d74:	2300      	movs	r3, #0
 8001d76:	b282      	uxth	r2, r0
 8001d78:	f362 030f 	bfi	r3, r2, #0, #16
 8001d7c:	0c00      	lsrs	r0, r0, #16
 8001d7e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001d82:	b082      	sub	sp, #8
#endif
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	b002      	add	sp, #8
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001d8c:	6842      	ldr	r2, [r0, #4]
 8001d8e:	6910      	ldr	r0, [r2, #16]
 8001d90:	2300      	movs	r3, #0
 8001d92:	b282      	uxth	r2, r0
 8001d94:	f362 030f 	bfi	r3, r2, #0, #16
 8001d98:	0c00      	lsrs	r0, r0, #16
 8001d9a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001d9e:	b082      	sub	sp, #8
#endif
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	b002      	add	sp, #8
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop

08001da8 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001da8:	6842      	ldr	r2, [r0, #4]
 8001daa:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001dae:	2300      	movs	r3, #0
 8001db0:	b282      	uxth	r2, r0
 8001db2:	f362 030f 	bfi	r3, r2, #0, #16
 8001db6:	0c00      	lsrs	r0, r0, #16
 8001db8:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001dbc:	b082      	sub	sp, #8
#endif
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	b002      	add	sp, #8
 8001dc2:	4770      	bx	lr

08001dc4 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001dc4:	6842      	ldr	r2, [r0, #4]
 8001dc6:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	b282      	uxth	r2, r0
 8001dce:	f362 030f 	bfi	r3, r2, #0, #16
 8001dd2:	0c00      	lsrs	r0, r0, #16
 8001dd4:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001dd8:	b082      	sub	sp, #8
#endif
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	b002      	add	sp, #8
 8001dde:	4770      	bx	lr

08001de0 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001de0:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001de2:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001de6:	4770      	bx	lr

08001de8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001de8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8001dea:	e9d0 0400 	ldrd	r0, r4, [r0]
 8001dee:	f007 fe55 	bl	8009a9c <STC_GetDefaultIqdref>
 8001df2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001df6:	8220      	strh	r0, [r4, #16]
 8001df8:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001dfa:	bd10      	pop	{r4, pc}

08001dfc <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8001dfc:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001e00:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001e04:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001e08:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001e0c:	fb10 f202 	smulbb	r2, r0, r2
 8001e10:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001e14:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8001e18:	b084      	sub	sp, #16
 8001e1a:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8001e1c:	da05      	bge.n	8001e2a <MCM_Clarke+0x2e>
 8001e1e:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001e20:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8001e24:	da0c      	bge.n	8001e40 <MCM_Clarke+0x44>
 8001e26:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <MCM_Clarke+0x50>)
 8001e28:	e001      	b.n	8001e2e <MCM_Clarke+0x32>
 8001e2a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2000      	movs	r0, #0
 8001e32:	f363 000f 	bfi	r0, r3, #0, #16
 8001e36:	b293      	uxth	r3, r2
 8001e38:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001e3c:	b004      	add	sp, #16
 8001e3e:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <MCM_Clarke+0x50>)
 8001e42:	b20a      	sxth	r2, r1
 8001e44:	4282      	cmp	r2, r0
 8001e46:	bfb8      	it	lt
 8001e48:	4602      	movlt	r2, r0
 8001e4a:	e7f0      	b.n	8001e2e <MCM_Clarke+0x32>
 8001e4c:	ffff8001 	.word	0xffff8001

08001e50 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001e52:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001e56:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001e5a:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001e5e:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001e60:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001e62:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 8001e64:	2000      	movs	r0, #0
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f362 000f 	bfi	r0, r2, #0, #16
 8001e6c:	0c1b      	lsrs	r3, r3, #16
{
 8001e6e:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8001e70:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001e74:	b002      	add	sp, #8
 8001e76:	4770      	bx	lr
 8001e78:	40020c00 	.word	0x40020c00

08001e7c <MCM_Park>:
{
 8001e7c:	b530      	push	{r4, r5, lr}
 8001e7e:	4605      	mov	r5, r0
 8001e80:	4604      	mov	r4, r0
 8001e82:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001e84:	4608      	mov	r0, r1
 8001e86:	f7ff ffe3 	bl	8001e50 <MCM_Trig_Functions>
 8001e8a:	b22d      	sxth	r5, r5
 8001e8c:	b201      	sxth	r1, r0
 8001e8e:	1424      	asrs	r4, r4, #16
 8001e90:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001e92:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001e96:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e9e:	da05      	bge.n	8001eac <MCM_Park+0x30>
 8001ea0:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8001ea2:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8001ea6:	da22      	bge.n	8001eee <MCM_Park+0x72>
 8001ea8:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <MCM_Park+0x80>)
 8001eaa:	e001      	b.n	8001eb0 <MCM_Park+0x34>
 8001eac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001eb0:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001eb4:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8001eb8:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001ebc:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001ec0:	da04      	bge.n	8001ecc <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8001ec2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001ec6:	da0c      	bge.n	8001ee2 <MCM_Park+0x66>
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MCM_Park+0x80>)
 8001eca:	e001      	b.n	8001ed0 <MCM_Park+0x54>
 8001ecc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f362 000f 	bfi	r0, r2, #0, #16
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001ede:	b005      	add	sp, #20
 8001ee0:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001ee2:	4906      	ldr	r1, [pc, #24]	@ (8001efc <MCM_Park+0x80>)
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	428b      	cmp	r3, r1
 8001ee8:	bfb8      	it	lt
 8001eea:	460b      	movlt	r3, r1
 8001eec:	e7f0      	b.n	8001ed0 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001eee:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <MCM_Park+0x80>)
 8001ef0:	b212      	sxth	r2, r2
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	bfb8      	it	lt
 8001ef6:	461a      	movlt	r2, r3
 8001ef8:	e7da      	b.n	8001eb0 <MCM_Park+0x34>
 8001efa:	bf00      	nop
 8001efc:	ffff8001 	.word	0xffff8001

08001f00 <MCM_Rev_Park>:
{
 8001f00:	b530      	push	{r4, r5, lr}
 8001f02:	4605      	mov	r5, r0
 8001f04:	b085      	sub	sp, #20
 8001f06:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001f08:	4608      	mov	r0, r1
 8001f0a:	f7ff ffa1 	bl	8001e50 <MCM_Trig_Functions>
 8001f0e:	1424      	asrs	r4, r4, #16
 8001f10:	1402      	asrs	r2, r0, #16
 8001f12:	b22d      	sxth	r5, r5
 8001f14:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001f16:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001f1a:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001f1e:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001f22:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001f26:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f363 000f 	bfi	r0, r3, #0, #16
 8001f30:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001f34:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001f38:	b005      	add	sp, #20
 8001f3a:	bd30      	pop	{r4, r5, pc}

08001f3c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	dd09      	ble.n	8001f54 <MCM_Sqrt+0x18>
 8001f40:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <MCM_Sqrt+0x1c>)
 8001f44:	f240 1269 	movw	r2, #361	@ 0x169
 8001f48:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001f4a:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001f4c:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001f4e:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8001f50:	b662      	cpsie	i
}
 8001f52:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001f54:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001f56:	4770      	bx	lr
 8001f58:	40020c00 	.word	0x40020c00

08001f5c <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001f5c:	b538      	push	{r3, r4, r5, lr}
 8001f5e:	2326      	movs	r3, #38	@ 0x26
 8001f60:	4916      	ldr	r1, [pc, #88]	@ (8001fbc <FOC_Clear+0x60>)
 8001f62:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001f66:	2400      	movs	r4, #0
 8001f68:	50cc      	str	r4, [r1, r3]
{
 8001f6a:	4605      	mov	r5, r0
 8001f6c:	f103 0208 	add.w	r2, r3, #8
 8001f70:	1858      	adds	r0, r3, r1
 8001f72:	3310      	adds	r3, #16
 8001f74:	440a      	add	r2, r1
 8001f76:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001f78:	4911      	ldr	r1, [pc, #68]	@ (8001fc0 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001f7a:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001f7c:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001f80:	6054      	str	r4, [r2, #4]
 8001f82:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001f84:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8001f86:	f8c3 4006 	str.w	r4, [r3, #6]
 8001f8a:	f8c3 400a 	str.w	r4, [r3, #10]
 8001f8e:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001f92:	f006 fa45 	bl	8008420 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <FOC_Clear+0x68>)
 8001f98:	4621      	mov	r1, r4
 8001f9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001f9e:	f006 fa3f 	bl	8008420 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <FOC_Clear+0x6c>)
 8001fa4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001fa8:	f007 fce6 	bl	8009978 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001fac:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <FOC_Clear+0x70>)
 8001fae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001fb6:	f000 bdc1 	b.w	8002b3c <PWMC_SwitchOffPWM>
 8001fba:	bf00      	nop
 8001fbc:	20000924 	.word	0x20000924
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000014 	.word	0x20000014
 8001fcc:	20000920 	.word	0x20000920

08001fd0 <MCboot>:
  if (MC_NULL == pMCIList)
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d06d      	beq.n	80020b0 <MCboot+0xe0>
{
 8001fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001fd8:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 80020f8 <MCboot+0x128>
    bMCBootCompleted = (uint8_t )0;
 8001fdc:	f8df 911c 	ldr.w	r9, [pc, #284]	@ 80020fc <MCboot+0x12c>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001fe0:	4d34      	ldr	r5, [pc, #208]	@ (80020b4 <MCboot+0xe4>)
    RVBS_Init(&BusVoltageSensor_M1);
 8001fe2:	4e35      	ldr	r6, [pc, #212]	@ (80020b8 <MCboot+0xe8>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001fe4:	4f35      	ldr	r7, [pc, #212]	@ (80020bc <MCboot+0xec>)
{
 8001fe6:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 8001fe8:	f04f 0800 	mov.w	r8, #0
 8001fec:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001fee:	4834      	ldr	r0, [pc, #208]	@ (80020c0 <MCboot+0xf0>)
 8001ff0:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001ff4:	f889 8000 	strb.w	r8, [r9]
    R3_2_Init(&PWM_Handle_M1);
 8001ff8:	f006 fe3a 	bl	8008c70 <R3_2_Init>
    ASPEP_start(&aspepOverUartA);
 8001ffc:	4831      	ldr	r0, [pc, #196]	@ (80020c4 <MCboot+0xf4>)
 8001ffe:	f7fe fde3 	bl	8000bc8 <ASPEP_start>
    startTimers();
 8002002:	f006 fab1 	bl	8008568 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002006:	4830      	ldr	r0, [pc, #192]	@ (80020c8 <MCboot+0xf8>)
 8002008:	f006 f9f6 	bl	80083f8 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 800200c:	482f      	ldr	r0, [pc, #188]	@ (80020cc <MCboot+0xfc>)
 800200e:	f007 ff41 	bl	8009e94 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8002012:	4a2e      	ldr	r2, [pc, #184]	@ (80020cc <MCboot+0xfc>)
 8002014:	492c      	ldr	r1, [pc, #176]	@ (80020c8 <MCboot+0xf8>)
 8002016:	6828      	ldr	r0, [r5, #0]
 8002018:	f007 fc94 	bl	8009944 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 800201c:	482c      	ldr	r0, [pc, #176]	@ (80020d0 <MCboot+0x100>)
 800201e:	f008 f837 	bl	800a090 <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002022:	f8db 3000 	ldr.w	r3, [fp]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	6829      	ldr	r1, [r5, #0]
 800202a:	4a29      	ldr	r2, [pc, #164]	@ (80020d0 <MCboot+0x100>)
 800202c:	4b29      	ldr	r3, [pc, #164]	@ (80020d4 <MCboot+0x104>)
 800202e:	482a      	ldr	r0, [pc, #168]	@ (80020d8 <MCboot+0x108>)
 8002030:	f007 fb58 	bl	80096e4 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8002034:	4829      	ldr	r0, [pc, #164]	@ (80020dc <MCboot+0x10c>)
 8002036:	f006 f9df 	bl	80083f8 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 800203a:	4829      	ldr	r0, [pc, #164]	@ (80020e0 <MCboot+0x110>)
 800203c:	f006 f9dc 	bl	80083f8 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8002040:	4630      	mov	r0, r6
 8002042:	f007 fa55 	bl	80094f0 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002046:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <MCboot+0x114>)
    NTC_Init(&TempSensor_M1);
 8002048:	4827      	ldr	r0, [pc, #156]	@ (80020e8 <MCboot+0x118>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800204e:	4e27      	ldr	r6, [pc, #156]	@ (80020ec <MCboot+0x11c>)
 8002050:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8002052:	f006 f991 	bl	8008378 <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002056:	4b26      	ldr	r3, [pc, #152]	@ (80020f0 <MCboot+0x120>)
 8002058:	4826      	ldr	r0, [pc, #152]	@ (80020f4 <MCboot+0x124>)
 800205a:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 800205c:	f007 fab0 	bl	80095c0 <REMNG_Init>
    FOC_Clear(M1);
 8002060:	4640      	mov	r0, r8
 8002062:	f7ff ff7b 	bl	8001f5c <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002066:	f04f 0a01 	mov.w	sl, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800206a:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 800206c:	f886 a024 	strb.w	sl, [r6, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002070:	f007 fd14 	bl	8009a9c <STC_GetDefaultIqdref>
 8002074:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002076:	6828      	ldr	r0, [r5, #0]
 8002078:	f007 fd10 	bl	8009a9c <STC_GetDefaultIqdref>
 800207c:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002080:	f8db 3000 	ldr.w	r3, [fp]
 8002084:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002086:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002088:	4632      	mov	r2, r6
 800208a:	4638      	mov	r0, r7
 800208c:	f7ff fd50 	bl	8001b30 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8002090:	6828      	ldr	r0, [r5, #0]
 8002092:	f007 fcff 	bl	8009a94 <STC_GetMecSpeedRefUnitDefault>
 8002096:	4642      	mov	r2, r8
 8002098:	4601      	mov	r1, r0
 800209a:	4638      	mov	r0, r7
 800209c:	f7ff fd5a 	bl	8001b54 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 80020a0:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 80020a2:	f7ff fd41 	bl	8001b28 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 80020a6:	f889 a000 	strb.w	sl, [r9]
}
 80020aa:	b005      	add	sp, #20
 80020ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000014 	.word	0x20000014
 80020b8:	200000e4 	.word	0x200000e4
 80020bc:	200008e8 	.word	0x200008e8
 80020c0:	200002ac 	.word	0x200002ac
 80020c4:	200004c8 	.word	0x200004c8
 80020c8:	20000440 	.word	0x20000440
 80020cc:	2000014c 	.word	0x2000014c
 80020d0:	20000274 	.word	0x20000274
 80020d4:	20000138 	.word	0x20000138
 80020d8:	2000033c 	.word	0x2000033c
 80020dc:	20000414 	.word	0x20000414
 80020e0:	200003e8 	.word	0x200003e8
 80020e4:	20000004 	.word	0x20000004
 80020e8:	20000110 	.word	0x20000110
 80020ec:	20000924 	.word	0x20000924
 80020f0:	2000091c 	.word	0x2000091c
 80020f4:	200000cc 	.word	0x200000cc
 80020f8:	20000920 	.word	0x20000920
 80020fc:	20000914 	.word	0x20000914

08002100 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002104:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8002106:	4c08      	ldr	r4, [pc, #32]	@ (8002128 <FOC_CalcCurrRef+0x24>)
 8002108:	2326      	movs	r3, #38	@ 0x26
 800210a:	fb03 4400 	mla	r4, r3, r0, r4
 800210e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002112:	b103      	cbz	r3, 8002116 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002114:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <FOC_CalcCurrRef+0x28>)
 8002118:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800211c:	f007 fc84 	bl	8009a28 <STC_CalcTorqueReference>
 8002120:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002122:	8220      	strh	r0, [r4, #16]
}
 8002124:	bd10      	pop	{r4, pc}
 8002126:	bf00      	nop
 8002128:	20000924 	.word	0x20000924
 800212c:	20000014 	.word	0x20000014

08002130 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002130:	4b01      	ldr	r3, [pc, #4]	@ (8002138 <TSK_SetChargeBootCapDelayM1+0x8>)
 8002132:	8018      	strh	r0, [r3, #0]
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000918 	.word	0x20000918

0800213c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 800213c:	4b03      	ldr	r3, [pc, #12]	@ (800214c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800213e:	8818      	ldrh	r0, [r3, #0]
 8002140:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002142:	fab0 f080 	clz	r0, r0
 8002146:	0940      	lsrs	r0, r0, #5
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000918 	.word	0x20000918

08002150 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002150:	4b01      	ldr	r3, [pc, #4]	@ (8002158 <TSK_SetStopPermanencyTimeM1+0x8>)
 8002152:	8018      	strh	r0, [r3, #0]
}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000916 	.word	0x20000916

0800215c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800215e:	8818      	ldrh	r0, [r3, #0]
 8002160:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002162:	fab0 f080 	clz	r0, r0
 8002166:	0940      	lsrs	r0, r0, #5
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000916 	.word	0x20000916

08002170 <TSK_MediumFrequencyTaskM1>:
{
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8002174:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8002176:	4669      	mov	r1, sp
 8002178:	48ba      	ldr	r0, [pc, #744]	@ (8002464 <TSK_MediumFrequencyTaskM1+0x2f4>)
  int16_t wAux = 0;
 800217a:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 800217e:	f007 fd95 	bl	8009cac <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8002182:	4eb9      	ldr	r6, [pc, #740]	@ (8002468 <TSK_MediumFrequencyTaskM1+0x2f8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002184:	4cb9      	ldr	r4, [pc, #740]	@ (800246c <TSK_MediumFrequencyTaskM1+0x2fc>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8002186:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8002188:	6830      	ldr	r0, [r6, #0]
 800218a:	f006 f9bd 	bl	8008508 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800218e:	4620      	mov	r0, r4
 8002190:	f7ff fd48 	bl	8001c24 <MCI_GetCurrentFaults>
 8002194:	b118      	cbz	r0, 800219e <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8002196:	230a      	movs	r3, #10
 8002198:	7663      	strb	r3, [r4, #25]
}
 800219a:	b002      	add	sp, #8
 800219c:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff fd3e 	bl	8001c20 <MCI_GetOccurredFaults>
 80021a4:	bb70      	cbnz	r0, 8002204 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 80021a6:	7e63      	ldrb	r3, [r4, #25]
 80021a8:	2b13      	cmp	r3, #19
 80021aa:	d8f6      	bhi.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
 80021ac:	a201      	add	r2, pc, #4	@ (adr r2, 80021b4 <TSK_MediumFrequencyTaskM1+0x44>)
 80021ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b2:	bf00      	nop
 80021b4:	08002385 	.word	0x08002385
 80021b8:	0800219b 	.word	0x0800219b
 80021bc:	0800219b 	.word	0x0800219b
 80021c0:	0800219b 	.word	0x0800219b
 80021c4:	080022f3 	.word	0x080022f3
 80021c8:	0800219b 	.word	0x0800219b
 80021cc:	080022cf 	.word	0x080022cf
 80021d0:	0800219b 	.word	0x0800219b
 80021d4:	080022af 	.word	0x080022af
 80021d8:	0800219b 	.word	0x0800219b
 80021dc:	08002205 	.word	0x08002205
 80021e0:	080022a1 	.word	0x080022a1
 80021e4:	0800219b 	.word	0x0800219b
 80021e8:	0800219b 	.word	0x0800219b
 80021ec:	0800219b 	.word	0x0800219b
 80021f0:	0800219b 	.word	0x0800219b
 80021f4:	0800225f 	.word	0x0800225f
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	0800219b 	.word	0x0800219b
 8002200:	0800220d 	.word	0x0800220d
      Mci[M1].State = FAULT_OVER;
 8002204:	230b      	movs	r3, #11
 8002206:	7663      	strb	r3, [r4, #25]
}
 8002208:	b002      	add	sp, #8
 800220a:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 800220c:	7e23      	ldrb	r3, [r4, #24]
 800220e:	2b05      	cmp	r3, #5
 8002210:	f000 80d0 	beq.w	80023b4 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 8002214:	4896      	ldr	r0, [pc, #600]	@ (8002470 <TSK_MediumFrequencyTaskM1+0x300>)
 8002216:	f007 fae7 	bl	80097e8 <RUC_Exec>
 800221a:	4602      	mov	r2, r0
 800221c:	2800      	cmp	r0, #0
 800221e:	f040 80e4 	bne.w	80023ea <TSK_MediumFrequencyTaskM1+0x27a>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8002222:	4892      	ldr	r0, [pc, #584]	@ (800246c <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002224:	2110      	movs	r1, #16
 8002226:	f7ff fcb3 	bl	8001b90 <MCI_FaultProcessing>
 800222a:	e7b6      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
            if (MCI_STOP == Mci[M1].DirectCommand)
 800222c:	7e23      	ldrb	r3, [r4, #24]
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 800222e:	4d91      	ldr	r5, [pc, #580]	@ (8002474 <TSK_MediumFrequencyTaskM1+0x304>)
            if (MCI_STOP == Mci[M1].DirectCommand)
 8002230:	2b05      	cmp	r3, #5
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8002232:	6828      	ldr	r0, [r5, #0]
            if (MCI_STOP == Mci[M1].DirectCommand)
 8002234:	f000 80c0 	beq.w	80023b8 <TSK_MediumFrequencyTaskM1+0x248>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8002238:	2101      	movs	r1, #1
 800223a:	f000 fc83 	bl	8002b44 <PWMC_CurrentReadingCalibr>
 800223e:	2800      	cmp	r0, #0
 8002240:	d0ab      	beq.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8002242:	7e23      	ldrb	r3, [r4, #24]
 8002244:	2b03      	cmp	r3, #3
 8002246:	f000 8103 	beq.w	8002450 <TSK_MediumFrequencyTaskM1+0x2e0>
                  R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800224a:	6828      	ldr	r0, [r5, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	f006 fb67 	bl	8008920 <R3_2_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8002252:	2014      	movs	r0, #20
 8002254:	f7ff ff6c 	bl	8002130 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8002258:	2310      	movs	r3, #16
 800225a:	7663      	strb	r3, [r4, #25]
 800225c:	e79d      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800225e:	7e23      	ldrb	r3, [r4, #24]
 8002260:	2b05      	cmp	r3, #5
 8002262:	f000 80a7 	beq.w	80023b4 <TSK_MediumFrequencyTaskM1+0x244>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8002266:	f7ff ff69 	bl	800213c <TSK_ChargeBootCapDelayHasElapsedM1>
 800226a:	2800      	cmp	r0, #0
 800226c:	d095      	beq.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 800226e:	4d81      	ldr	r5, [pc, #516]	@ (8002474 <TSK_MediumFrequencyTaskM1+0x304>)
 8002270:	6828      	ldr	r0, [r5, #0]
 8002272:	f006 fbc7 	bl	8008a04 <R3_2_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002276:	4a80      	ldr	r2, [pc, #512]	@ (8002478 <TSK_MediumFrequencyTaskM1+0x308>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8002278:	4b80      	ldr	r3, [pc, #512]	@ (800247c <TSK_MediumFrequencyTaskM1+0x30c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800227a:	4981      	ldr	r1, [pc, #516]	@ (8002480 <TSK_MediumFrequencyTaskM1+0x310>)
 800227c:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002284:	f007 fb74 	bl	8009970 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8002288:	4876      	ldr	r0, [pc, #472]	@ (8002464 <TSK_MediumFrequencyTaskM1+0x2f4>)
 800228a:	f007 fddd 	bl	8009e48 <STO_PLL_Clear>
              FOC_Clear( M1 );
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff fe64 	bl	8001f5c <FOC_Clear>
                Mci[M1].State = START;
 8002294:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002296:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8002298:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800229a:	f000 fc51 	bl	8002b40 <PWMC_SwitchOnPWM>
 800229e:	e77c      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80022a0:	7e23      	ldrb	r3, [r4, #24]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	f47f af79 	bne.w	800219a <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80022a8:	2300      	movs	r3, #0
 80022aa:	8323      	strh	r3, [r4, #24]
 80022ac:	e775      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80022ae:	f7ff ff55 	bl	800215c <TSK_StopPermanencyTimeHasElapsedM1>
 80022b2:	2800      	cmp	r0, #0
 80022b4:	f43f af71 	beq.w	800219a <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 80022b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002478 <TSK_MediumFrequencyTaskM1+0x308>)
 80022ba:	4971      	ldr	r1, [pc, #452]	@ (8002480 <TSK_MediumFrequencyTaskM1+0x310>)
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	f007 fb57 	bl	8009970 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 80022c2:	486f      	ldr	r0, [pc, #444]	@ (8002480 <TSK_MediumFrequencyTaskM1+0x310>)
 80022c4:	f007 fed6 	bl	800a074 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80022c8:	2300      	movs	r3, #0
 80022ca:	8323      	strh	r3, [r4, #24]
 80022cc:	e765      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80022ce:	7e23      	ldrb	r3, [r4, #24]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d06f      	beq.n	80023b4 <TSK_MediumFrequencyTaskM1+0x244>
            MCI_ExecBufferedCommands(&Mci[M1]);
 80022d4:	4865      	ldr	r0, [pc, #404]	@ (800246c <TSK_MediumFrequencyTaskM1+0x2fc>)
 80022d6:	f7ff fc67 	bl	8001ba8 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80022da:	2000      	movs	r0, #0
 80022dc:	f7ff ff12 	bl	8002104 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 80022e0:	2d00      	cmp	r5, #0
 80022e2:	f47f af5a 	bne.w	800219a <TSK_MediumFrequencyTaskM1+0x2a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 80022e6:	4861      	ldr	r0, [pc, #388]	@ (800246c <TSK_MediumFrequencyTaskM1+0x2fc>)
 80022e8:	462a      	mov	r2, r5
 80022ea:	2120      	movs	r1, #32
 80022ec:	f7ff fc50 	bl	8001b90 <MCI_FaultProcessing>
 80022f0:	e753      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80022f2:	7e23      	ldrb	r3, [r4, #24]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d05d      	beq.n	80023b4 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 80022f8:	485d      	ldr	r0, [pc, #372]	@ (8002470 <TSK_MediumFrequencyTaskM1+0x300>)
 80022fa:	f007 fa75 	bl	80097e8 <RUC_Exec>
 80022fe:	4602      	mov	r2, r0
 8002300:	2800      	cmp	r0, #0
 8002302:	d168      	bne.n	80023d6 <TSK_MediumFrequencyTaskM1+0x266>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8002304:	4859      	ldr	r0, [pc, #356]	@ (800246c <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002306:	2110      	movs	r1, #16
 8002308:	f7ff fc42 	bl	8001b90 <MCI_FaultProcessing>
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 800230c:	485c      	ldr	r0, [pc, #368]	@ (8002480 <TSK_MediumFrequencyTaskM1+0x310>)
 800230e:	f10d 0102 	add.w	r1, sp, #2
 8002312:	f007 ff13 	bl	800a13c <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8002316:	4856      	ldr	r0, [pc, #344]	@ (8002470 <TSK_MediumFrequencyTaskM1+0x300>)
 8002318:	f007 fa9c 	bl	8009854 <RUC_FirstAccelerationStageReached>
 800231c:	2800      	cmp	r0, #0
 800231e:	f43f af3c 	beq.w	800219a <TSK_MediumFrequencyTaskM1+0x2a>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8002322:	f10d 0102 	add.w	r1, sp, #2
 8002326:	484f      	ldr	r0, [pc, #316]	@ (8002464 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8002328:	f007 fdee 	bl	8009f08 <STO_PLL_IsObserverConverged>
 800232c:	4605      	mov	r5, r0
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 800232e:	484f      	ldr	r0, [pc, #316]	@ (800246c <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002330:	f7ff fcc6 	bl	8001cc0 <MCI_GetImposedMotorDirection>
 8002334:	b241      	sxtb	r1, r0
 8002336:	484b      	ldr	r0, [pc, #300]	@ (8002464 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8002338:	f007 fe98 	bl	800a06c <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 800233c:	4850      	ldr	r0, [pc, #320]	@ (8002480 <TSK_MediumFrequencyTaskM1+0x310>)
 800233e:	4629      	mov	r1, r5
 8002340:	f007 ff92 	bl	800a268 <VSS_SetStartTransition>
            if (ObserverConverged)
 8002344:	2d00      	cmp	r5, #0
 8002346:	f43f af28 	beq.w	800219a <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 800234a:	4846      	ldr	r0, [pc, #280]	@ (8002464 <TSK_MediumFrequencyTaskM1+0x2f4>)
 800234c:	4e4b      	ldr	r6, [pc, #300]	@ (800247c <TSK_MediumFrequencyTaskM1+0x30c>)
              REMNG_Init(pREMNG[M1]);
 800234e:	4d4d      	ldr	r5, [pc, #308]	@ (8002484 <TSK_MediumFrequencyTaskM1+0x314>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8002350:	f007 faac 	bl	80098ac <SPD_GetElAngle>
 8002354:	4601      	mov	r1, r0
 8002356:	6870      	ldr	r0, [r6, #4]
 8002358:	f7ff fd90 	bl	8001e7c <MCM_Park>
 800235c:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 800235e:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8002360:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8002362:	f007 f92d 	bl	80095c0 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8002366:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 800236a:	6828      	ldr	r0, [r5, #0]
 800236c:	2200      	movs	r2, #0
 800236e:	f007 f973 	bl	8009658 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8002372:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8002376:	6828      	ldr	r0, [r5, #0]
 8002378:	2219      	movs	r2, #25
 800237a:	f007 f96d 	bl	8009658 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 800237e:	2313      	movs	r3, #19
 8002380:	7663      	strb	r3, [r4, #25]
 8002382:	e70a      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8002384:	7e25      	ldrb	r5, [r4, #24]
 8002386:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 800238a:	2d01      	cmp	r5, #1
 800238c:	f47f af05 	bne.w	800219a <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8002390:	4836      	ldr	r0, [pc, #216]	@ (800246c <TSK_MediumFrequencyTaskM1+0x2fc>)
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002392:	4e38      	ldr	r6, [pc, #224]	@ (8002474 <TSK_MediumFrequencyTaskM1+0x304>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8002394:	f7ff fc94 	bl	8001cc0 <MCI_GetImposedMotorDirection>
 8002398:	4601      	mov	r1, r0
 800239a:	4835      	ldr	r0, [pc, #212]	@ (8002470 <TSK_MediumFrequencyTaskM1+0x300>)
 800239c:	f007 f9e0 	bl	8009760 <RUC_Clear>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 80023a0:	6830      	ldr	r0, [r6, #0]
 80023a2:	f890 106e 	ldrb.w	r1, [r0, #110]	@ 0x6e
 80023a6:	2900      	cmp	r1, #0
 80023a8:	d14b      	bne.n	8002442 <TSK_MediumFrequencyTaskM1+0x2d2>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80023aa:	f000 fbcb 	bl	8002b44 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 80023ae:	2311      	movs	r3, #17
 80023b0:	7663      	strb	r3, [r4, #25]
 80023b2:	e6f2      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 80023b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <TSK_MediumFrequencyTaskM1+0x304>)
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	f006 fb24 	bl	8008a04 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff fdcd 	bl	8001f5c <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 80023c2:	6830      	ldr	r0, [r6, #0]
 80023c4:	f006 f8ba 	bl	800853c <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80023c8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80023cc:	f7ff fec0 	bl	8002150 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80023d0:	2308      	movs	r3, #8
 80023d2:	7663      	strb	r3, [r4, #25]
  return;
 80023d4:	e6e1      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 80023d6:	4b28      	ldr	r3, [pc, #160]	@ (8002478 <TSK_MediumFrequencyTaskM1+0x308>)
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	f007 fb25 	bl	8009a28 <STC_CalcTorqueReference>
             IqdRef.d = FOCVars[M1].UserIdref;
 80023de:	4b27      	ldr	r3, [pc, #156]	@ (800247c <TSK_MediumFrequencyTaskM1+0x30c>)
 80023e0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
             FOCVars[M1].Iqdref = IqdRef;
 80023e4:	8218      	strh	r0, [r3, #16]
 80023e6:	825a      	strh	r2, [r3, #18]
 80023e8:	e790      	b.n	800230c <TSK_MediumFrequencyTaskM1+0x19c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80023ea:	4825      	ldr	r0, [pc, #148]	@ (8002480 <TSK_MediumFrequencyTaskM1+0x310>)
 80023ec:	a901      	add	r1, sp, #4
 80023ee:	f007 fea5 	bl	800a13c <VSS_CalcAvrgMecSpeedUnit>
 80023f2:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 80023f4:	4822      	ldr	r0, [pc, #136]	@ (8002480 <TSK_MediumFrequencyTaskM1+0x310>)
 80023f6:	f007 ff45 	bl	800a284 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 80023fa:	b915      	cbnz	r5, 8002402 <TSK_MediumFrequencyTaskM1+0x292>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	f43f aecc 	beq.w	800219a <TSK_MediumFrequencyTaskM1+0x2a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8002402:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <TSK_MediumFrequencyTaskM1+0x30c>)
 8002404:	4820      	ldr	r0, [pc, #128]	@ (8002488 <TSK_MediumFrequencyTaskM1+0x318>)
 8002406:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 800240a:	4d1b      	ldr	r5, [pc, #108]	@ (8002478 <TSK_MediumFrequencyTaskM1+0x308>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 800240c:	f006 f812 	bl	8008434 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8002410:	b201      	sxth	r1, r0
 8002412:	fb06 f101 	mul.w	r1, r6, r1
 8002416:	481c      	ldr	r0, [pc, #112]	@ (8002488 <TSK_MediumFrequencyTaskM1+0x318>)
 8002418:	f006 f802 	bl	8008420 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 800241c:	4911      	ldr	r1, [pc, #68]	@ (8002464 <TSK_MediumFrequencyTaskM1+0x2f4>)
 800241e:	6828      	ldr	r0, [r5, #0]
 8002420:	f007 faa6 	bl	8009970 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff fe6b 	bl	8002100 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff fe6a 	bl	8002104 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8002430:	6828      	ldr	r0, [r5, #0]
 8002432:	f007 fb41 	bl	8009ab8 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002436:	480d      	ldr	r0, [pc, #52]	@ (800246c <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002438:	f7ff fbb6 	bl	8001ba8 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 800243c:	2306      	movs	r3, #6
 800243e:	7663      	strb	r3, [r4, #25]
 8002440:	e6ab      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002442:	4629      	mov	r1, r5
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002444:	f8a0 504e 	strh.w	r5, [r0, #78]	@ 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002448:	f000 fb7c 	bl	8002b44 <PWMC_CurrentReadingCalibr>
             R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800244c:	6830      	ldr	r0, [r6, #0]
 800244e:	e6fd      	b.n	800224c <TSK_MediumFrequencyTaskM1+0xdc>
                  FOC_Clear(M1);
 8002450:	2000      	movs	r0, #0
 8002452:	f7ff fd83 	bl	8001f5c <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8002456:	6830      	ldr	r0, [r6, #0]
 8002458:	f006 f870 	bl	800853c <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800245c:	2300      	movs	r3, #0
 800245e:	8323      	strh	r3, [r4, #24]
 8002460:	e69b      	b.n	800219a <TSK_MediumFrequencyTaskM1+0x2a>
 8002462:	bf00      	nop
 8002464:	2000014c 	.word	0x2000014c
 8002468:	20000004 	.word	0x20000004
 800246c:	200008e8 	.word	0x200008e8
 8002470:	2000033c 	.word	0x2000033c
 8002474:	20000920 	.word	0x20000920
 8002478:	20000014 	.word	0x20000014
 800247c:	20000924 	.word	0x20000924
 8002480:	20000274 	.word	0x20000274
 8002484:	2000091c 	.word	0x2000091c
 8002488:	20000440 	.word	0x20000440

0800248c <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 800248c:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <MC_Scheduler+0x78>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d000      	beq.n	8002496 <MC_Scheduler+0xa>
 8002494:	4770      	bx	lr
{
 8002496:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002498:	4c1b      	ldr	r4, [pc, #108]	@ (8002508 <MC_Scheduler+0x7c>)
 800249a:	8823      	ldrh	r3, [r4, #0]
 800249c:	b19b      	cbz	r3, 80024c6 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 80024a2:	4a1a      	ldr	r2, [pc, #104]	@ (800250c <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 80024a4:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80024a6:	8813      	ldrh	r3, [r2, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b11b      	cbz	r3, 80024b4 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 80024ac:	8813      	ldrh	r3, [r2, #0]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80024b4:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <MC_Scheduler+0x84>)
 80024b6:	8813      	ldrh	r3, [r2, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	b11b      	cbz	r3, 80024c4 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 80024bc:	8813      	ldrh	r3, [r2, #0]
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	8013      	strh	r3, [r2, #0]
}
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80024c6:	4d13      	ldr	r5, [pc, #76]	@ (8002514 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 80024c8:	f7ff fe52 	bl	8002170 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80024cc:	f7ff fb2e 	bl	8001b2c <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80024d0:	4629      	mov	r1, r5
 80024d2:	f851 0b0c 	ldr.w	r0, [r1], #12
 80024d6:	6883      	ldr	r3, [r0, #8]
 80024d8:	4798      	blx	r3
 80024da:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80024dc:	b130      	cbz	r0, 80024ec <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80024de:	4629      	mov	r1, r5
 80024e0:	220a      	movs	r2, #10
 80024e2:	f851 0b08 	ldr.w	r0, [r1], #8
 80024e6:	6803      	ldr	r3, [r0, #0]
 80024e8:	4798      	blx	r3
 80024ea:	b908      	cbnz	r0, 80024f0 <MC_Scheduler+0x64>
{
 80024ec:	2301      	movs	r3, #1
 80024ee:	e7d8      	b.n	80024a2 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80024f0:	4628      	mov	r0, r5
 80024f2:	f005 fd11 	bl	8007f18 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 80024f6:	6828      	ldr	r0, [r5, #0]
 80024f8:	89ea      	ldrh	r2, [r5, #14]
 80024fa:	6846      	ldr	r6, [r0, #4]
 80024fc:	68a9      	ldr	r1, [r5, #8]
 80024fe:	230a      	movs	r3, #10
 8002500:	47b0      	blx	r6
 8002502:	e7f3      	b.n	80024ec <MC_Scheduler+0x60>
 8002504:	20000914 	.word	0x20000914
 8002508:	2000091a 	.word	0x2000091a
 800250c:	20000918 	.word	0x20000918
 8002510:	20000916 	.word	0x20000916
 8002514:	200004b8 	.word	0x200004b8

08002518 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t bMotorNbr = 0;

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if (SWITCH_OVER == Mci[M1].State)
 800251c:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 80026ac <TSK_HighFrequencyTask+0x194>
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002520:	4c57      	ldr	r4, [pc, #348]	@ (8002680 <TSK_HighFrequencyTask+0x168>)
  if (SWITCH_OVER == Mci[M1].State)
 8002522:	f898 3019 	ldrb.w	r3, [r8, #25]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002526:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 800252a:	b089      	sub	sp, #36	@ 0x24
  if (SWITCH_OVER == Mci[M1].State)
 800252c:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800252e:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 8002530:	f000 809a 	beq.w	8002668 <TSK_HighFrequencyTask+0x150>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002534:	4b53      	ldr	r3, [pc, #332]	@ (8002684 <TSK_HighFrequencyTask+0x16c>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002536:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80026b4 <TSK_HighFrequencyTask+0x19c>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	f007 fa1a 	bl	8009974 <STC_GetSpeedSensor>
 8002540:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8002542:	f007 f9b3 	bl	80098ac <SPD_GetElAngle>
 8002546:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8002548:	4638      	mov	r0, r7
 800254a:	f007 f9b7 	bl	80098bc <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800254e:	a902      	add	r1, sp, #8
 8002550:	f8d9 0000 	ldr.w	r0, [r9]
 8002554:	f000 f9ce 	bl	80028f4 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8002558:	f001 fd80 	bl	800405c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 800255c:	f001 fd3a 	bl	8003fd4 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002560:	9802      	ldr	r0, [sp, #8]
 8002562:	f7ff fc4b 	bl	8001dfc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002566:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8002568:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800256a:	f7ff fc87 	bl	8001e7c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800256e:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <TSK_HighFrequencyTask+0x170>)
 8002570:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002574:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002576:	b200      	sxth	r0, r0
 8002578:	1a09      	subs	r1, r1, r0
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	f005 ff84 	bl	8008488 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002580:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002584:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8002588:	1ac9      	subs	r1, r1, r3
 800258a:	4b40      	ldr	r3, [pc, #256]	@ (800268c <TSK_HighFrequencyTask+0x174>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800258c:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	f005 ff7a 	bl	8008488 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002594:	f8ad 6004 	strh.w	r6, [sp, #4]
 8002598:	f8ad 0006 	strh.w	r0, [sp, #6]
 800259c:	9901      	ldr	r1, [sp, #4]
 800259e:	483c      	ldr	r0, [pc, #240]	@ (8002690 <TSK_HighFrequencyTask+0x178>)
 80025a0:	f005 fc8c 	bl	8007ebc <Circle_Limitation>
 80025a4:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80025a6:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80025a8:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80025aa:	f007 f987 	bl	80098bc <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80025ae:	4629      	mov	r1, r5
 80025b0:	9801      	ldr	r0, [sp, #4]
 80025b2:	f7ff fca5 	bl	8001f00 <MCM_Rev_Park>
 80025b6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80025b8:	f8d9 0000 	ldr.w	r0, [r9]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80025bc:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80025be:	f000 f99b 	bl	80028f8 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80025c2:	9b02      	ldr	r3, [sp, #8]
 80025c4:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80025c6:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80025c8:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 80025ca:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80025cc:	6063      	str	r3, [r4, #4]
  if(hFOCreturn == MC_DURATION)
 80025ce:	2901      	cmp	r1, #1
  FOCVars[M1].Iqd = Iqd;
 80025d0:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 80025d2:	f8c4 6016 	str.w	r6, [r4, #22]
  FOCVars[M1].Iqd = Iqd;
 80025d6:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80025d8:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80025dc:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 80025de:	d038      	beq.n	8002652 <TSK_HighFrequencyTask+0x13a>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80025e0:	482c      	ldr	r0, [pc, #176]	@ (8002694 <TSK_HighFrequencyTask+0x17c>)
 80025e2:	f007 f937 	bl	8009854 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 80025e6:	6862      	ldr	r2, [r4, #4]
 80025e8:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80025ea:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 80025ec:	482a      	ldr	r0, [pc, #168]	@ (8002698 <TSK_HighFrequencyTask+0x180>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80025ee:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 80025f0:	f005 fc5c 	bl	8007eac <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80025f4:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 80025f6:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80025f8:	4828      	ldr	r0, [pc, #160]	@ (800269c <TSK_HighFrequencyTask+0x184>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 80025fa:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80025fe:	f007 fa63 	bl	8009ac8 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 8002602:	4826      	ldr	r0, [pc, #152]	@ (800269c <TSK_HighFrequencyTask+0x184>)
 8002604:	f007 fbf4 	bl	8009df0 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 8002608:	b18c      	cbz	r4, 800262e <TSK_HighFrequencyTask+0x116>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 800260a:	f898 3019 	ldrb.w	r3, [r8, #25]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d014      	beq.n	800263c <TSK_HighFrequencyTask+0x124>
 8002612:	2b13      	cmp	r3, #19
 8002614:	d012      	beq.n	800263c <TSK_HighFrequencyTask+0x124>
  GLOBAL_TIMESTAMP++;
 8002616:	4a22      	ldr	r2, [pc, #136]	@ (80026a0 <TSK_HighFrequencyTask+0x188>)
  if (0U == MCPA_UART_A.Mark)
 8002618:	4822      	ldr	r0, [pc, #136]	@ (80026a4 <TSK_HighFrequencyTask+0x18c>)
  GLOBAL_TIMESTAMP++;
 800261a:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800261c:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8002620:	3301      	adds	r3, #1
 8002622:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002624:	b9d1      	cbnz	r1, 800265c <TSK_HighFrequencyTask+0x144>
}
 8002626:	2000      	movs	r0, #0
 8002628:	b009      	add	sp, #36	@ 0x24
 800262a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 800262e:	481b      	ldr	r0, [pc, #108]	@ (800269c <TSK_HighFrequencyTask+0x184>)
 8002630:	f007 fd00 	bl	800a034 <STO_ResetPLL>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8002634:	f898 3019 	ldrb.w	r3, [r8, #25]
 8002638:	2b04      	cmp	r3, #4
 800263a:	d1ea      	bne.n	8002612 <TSK_HighFrequencyTask+0xfa>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800263c:	4817      	ldr	r0, [pc, #92]	@ (800269c <TSK_HighFrequencyTask+0x184>)
 800263e:	f007 f935 	bl	80098ac <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002642:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002644:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002646:	4818      	ldr	r0, [pc, #96]	@ (80026a8 <TSK_HighFrequencyTask+0x190>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002648:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 800264c:	f007 fd24 	bl	800a098 <VSS_CalcElAngle>
 8002650:	e7e1      	b.n	8002616 <TSK_HighFrequencyTask+0xfe>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8002652:	4816      	ldr	r0, [pc, #88]	@ (80026ac <TSK_HighFrequencyTask+0x194>)
 8002654:	2200      	movs	r2, #0
 8002656:	f7ff fa9b 	bl	8001b90 <MCI_FaultProcessing>
 800265a:	e7dc      	b.n	8002616 <TSK_HighFrequencyTask+0xfe>
    MCPA_dataLog (&MCPA_UART_A);
 800265c:	f005 fd14 	bl	8008088 <MCPA_dataLog>
}
 8002660:	2000      	movs	r0, #0
 8002662:	b009      	add	sp, #36	@ 0x24
 8002664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8002668:	4d11      	ldr	r5, [pc, #68]	@ (80026b0 <TSK_HighFrequencyTask+0x198>)
 800266a:	6828      	ldr	r0, [r5, #0]
 800266c:	f006 ffd2 	bl	8009614 <REMNG_RampCompleted>
 8002670:	2800      	cmp	r0, #0
 8002672:	f47f af5f 	bne.w	8002534 <TSK_HighFrequencyTask+0x1c>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8002676:	6828      	ldr	r0, [r5, #0]
 8002678:	f006 ffaa 	bl	80095d0 <REMNG_Calc>
 800267c:	8220      	strh	r0, [r4, #16]
 800267e:	e759      	b.n	8002534 <TSK_HighFrequencyTask+0x1c>
 8002680:	20000924 	.word	0x20000924
 8002684:	20000014 	.word	0x20000014
 8002688:	2000000c 	.word	0x2000000c
 800268c:	20000008 	.word	0x20000008
 8002690:	20000018 	.word	0x20000018
 8002694:	2000033c 	.word	0x2000033c
 8002698:	200000e4 	.word	0x200000e4
 800269c:	2000014c 	.word	0x2000014c
 80026a0:	20001b34 	.word	0x20001b34
 80026a4:	2000048c 	.word	0x2000048c
 80026a8:	20000274 	.word	0x20000274
 80026ac:	200008e8 	.word	0x200008e8
 80026b0:	2000091c 	.word	0x2000091c
 80026b4:	20000920 	.word	0x20000920

080026b8 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80026ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <TSK_SafetyTask_PWMOFF+0x78>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80026bc:	4e1d      	ldr	r6, [pc, #116]	@ (8002734 <TSK_SafetyTask_PWMOFF+0x7c>)
{
 80026be:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80026c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80026c4:	f005 fe6a 	bl	800839c <NTC_CalcAvTemp>
 80026c8:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80026ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80026ce:	f000 fa53 	bl	8002b78 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80026d2:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80026d6:	4305      	orrs	r5, r0
 80026d8:	b2ad      	uxth	r5, r5
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 80026da:	b16c      	cbz	r4, 80026f8 <TSK_SafetyTask_PWMOFF+0x40>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 80026dc:	4f16      	ldr	r7, [pc, #88]	@ (8002738 <TSK_SafetyTask_PWMOFF+0x80>)
 80026de:	43ea      	mvns	r2, r5
 80026e0:	eb07 1744 	add.w	r7, r7, r4, lsl #5
 80026e4:	4638      	mov	r0, r7
 80026e6:	b292      	uxth	r2, r2
 80026e8:	4629      	mov	r1, r5
 80026ea:	f7ff fa51 	bl	8001b90 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80026ee:	4638      	mov	r0, r7
 80026f0:	f7ff fade 	bl	8001cb0 <MCI_GetFaultState>
 80026f4:	b938      	cbnz	r0, 8002706 <TSK_SafetyTask_PWMOFF+0x4e>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80026f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 80026f8:	4810      	ldr	r0, [pc, #64]	@ (800273c <TSK_SafetyTask_PWMOFF+0x84>)
 80026fa:	f006 ff2d 	bl	8009558 <RVBS_CalcAvVbus>
 80026fe:	f000 000e 	and.w	r0, r0, #14
 8002702:	4305      	orrs	r5, r0
 8002704:	e7ea      	b.n	80026dc <TSK_SafetyTask_PWMOFF+0x24>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002706:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800270a:	f000 fa17 	bl	8002b3c <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 800270e:	480c      	ldr	r0, [pc, #48]	@ (8002740 <TSK_SafetyTask_PWMOFF+0x88>)
 8002710:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002714:	b94b      	cbnz	r3, 800272a <TSK_SafetyTask_PWMOFF+0x72>
    FOC_Clear(bMotor);
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff fc20 	bl	8001f5c <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <TSK_SafetyTask_PWMOFF+0x8c>)
 800271e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8002722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002726:	f005 bf09 	b.w	800853c <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 800272a:	f005 fd6d 	bl	8008208 <MCPA_flushDataLog>
 800272e:	e7f2      	b.n	8002716 <TSK_SafetyTask_PWMOFF+0x5e>
 8002730:	20000010 	.word	0x20000010
 8002734:	20000920 	.word	0x20000920
 8002738:	200008e8 	.word	0x200008e8
 800273c:	200000e4 	.word	0x200000e4
 8002740:	2000048c 	.word	0x2000048c
 8002744:	20000004 	.word	0x20000004

08002748 <TSK_SafetyTask>:
{
 8002748:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <TSK_SafetyTask+0x1c>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d000      	beq.n	8002754 <TSK_SafetyTask+0xc>
}
 8002752:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff ffaf 	bl	80026b8 <TSK_SafetyTask_PWMOFF>
}
 800275a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 800275e:	f001 bc09 	b.w	8003f74 <RCM_ExecUserConv>
 8002762:	bf00      	nop
 8002764:	20000914 	.word	0x20000914

08002768 <MC_RunMotorControlTasks>:
{
 8002768:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 800276a:	4b04      	ldr	r3, [pc, #16]	@ (800277c <MC_RunMotorControlTasks+0x14>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b903      	cbnz	r3, 8002772 <MC_RunMotorControlTasks+0xa>
}
 8002770:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002772:	f7ff fe8b 	bl	800248c <MC_Scheduler>
    TSK_SafetyTask();
 8002776:	f7ff ffe7 	bl	8002748 <TSK_SafetyTask>
}
 800277a:	bd08      	pop	{r3, pc}
 800277c:	20000914 	.word	0x20000914

08002780 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002780:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002782:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <TSK_HardwareFaultTask+0x18>)
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	f006 f93d 	bl	8008a04 <R3_2_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800278a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800278e:	4803      	ldr	r0, [pc, #12]	@ (800279c <TSK_HardwareFaultTask+0x1c>)
 8002790:	2200      	movs	r2, #0
 8002792:	2180      	movs	r1, #128	@ 0x80
 8002794:	f7ff b9fc 	b.w	8001b90 <MCI_FaultProcessing>
 8002798:	20000920 	.word	0x20000920
 800279c:	200008e8 	.word	0x200008e8

080027a0 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80027a0:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80027a2:	f7ff f9b9 	bl	8001b18 <MC_GetSTMStateMotor1>
 80027a6:	b918      	cbnz	r0, 80027b0 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80027a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80027ac:	f7ff b9a8 	b.w	8001b00 <MC_StartMotor1>
}
 80027b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80027b4:	f7ff b9aa 	b.w	8001b0c <MC_StopMotor1>

080027b8 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80027b8:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027ba:	4b3a      	ldr	r3, [pc, #232]	@ (80028a4 <mc_lock_pins+0xec>)
 80027bc:	4a3a      	ldr	r2, [pc, #232]	@ (80028a8 <mc_lock_pins+0xf0>)
 80027be:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027c0:	2110      	movs	r1, #16
 80027c2:	61d9      	str	r1, [r3, #28]
 80027c4:	b08c      	sub	sp, #48	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027c6:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	920b      	str	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027d0:	4a36      	ldr	r2, [pc, #216]	@ (80028ac <mc_lock_pins+0xf4>)
  (void) temp;
 80027d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027d4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027d6:	2180      	movs	r1, #128	@ 0x80
 80027d8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027da:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	920a      	str	r2, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027e4:	4a32      	ldr	r2, [pc, #200]	@ (80028b0 <mc_lock_pins+0xf8>)
  (void) temp;
 80027e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027e8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027ea:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027ec:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	9209      	str	r2, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027f6:	f44f 3281 	mov.w	r2, #66048	@ 0x10200
  (void) temp;
 80027fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027fc:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027fe:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002800:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	9208      	str	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002806:	f44f 3184 	mov.w	r1, #67584	@ 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 800280a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  (void) temp;
 800280e:	9a08      	ldr	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002810:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002812:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002814:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	9207      	str	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800281a:	f44f 3482 	mov.w	r4, #66560	@ 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 800281e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  (void) temp;
 8002822:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002824:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002826:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002828:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800282a:	69dc      	ldr	r4, [r3, #28]
 800282c:	9406      	str	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800282e:	441a      	add	r2, r3
  (void) temp;
 8002830:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002832:	f44f 34a0 	mov.w	r4, #81920	@ 0x14000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002836:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800283a:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800283c:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800283e:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002840:	69d4      	ldr	r4, [r2, #28]
 8002842:	9405      	str	r4, [sp, #20]
  (void) temp;
 8002844:	9d05      	ldr	r5, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002846:	f44f 3490 	mov.w	r4, #73728	@ 0x12000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800284a:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800284e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002850:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002852:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002854:	69d4      	ldr	r4, [r2, #28]
 8002856:	9404      	str	r4, [sp, #16]
  (void) temp;
 8002858:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800285a:	f44f 34c0 	mov.w	r4, #98304	@ 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800285e:	f44f 4500 	mov.w	r5, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002862:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002864:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002866:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002868:	69d4      	ldr	r4, [r2, #28]
 800286a:	9403      	str	r4, [sp, #12]
  (void) temp;
 800286c:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800286e:	4c11      	ldr	r4, [pc, #68]	@ (80028b4 <mc_lock_pins+0xfc>)
 8002870:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002872:	2502      	movs	r5, #2
 8002874:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002876:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002878:	69dc      	ldr	r4, [r3, #28]
 800287a:	9402      	str	r4, [sp, #8]
  (void) temp;
 800287c:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800287e:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002882:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002884:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002886:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002888:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	9301      	str	r3, [sp, #4]
  (void) temp;
 800288e:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002890:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002892:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002894:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002896:	69d3      	ldr	r3, [r2, #28]
 8002898:	9300      	str	r3, [sp, #0]
  (void) temp;
 800289a:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
LL_GPIO_LockPin(M1_PWM_EN_W_GPIO_Port, M1_PWM_EN_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 800289c:	b00c      	add	sp, #48	@ 0x30
 800289e:	bc30      	pop	{r4, r5}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	48000800 	.word	0x48000800
 80028a8:	00010010 	.word	0x00010010
 80028ac:	00010080 	.word	0x00010080
 80028b0:	00010100 	.word	0x00010100
 80028b4:	00010002 	.word	0x00010002

080028b8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80028b8:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80028ba:	f003 fcb9 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <MX_MotorControl_Init+0x30>)
 80028c0:	fba3 3000 	umull	r3, r0, r3, r0
 80028c4:	09c0      	lsrs	r0, r0, #7
 80028c6:	f002 fefb 	bl	80056c0 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <MX_MotorControl_Init+0x34>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f002 feaa 	bl	800562c <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80028d8:	4805      	ldr	r0, [pc, #20]	@ (80028f0 <MX_MotorControl_Init+0x38>)
 80028da:	f7ff fb79 	bl	8001fd0 <MCboot>
  mc_lock_pins();
}
 80028de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80028e2:	f7ff bf69 	b.w	80027b8 <mc_lock_pins>
 80028e6:	bf00      	nop
 80028e8:	10624dd3 	.word	0x10624dd3
 80028ec:	2000055c 	.word	0x2000055c
 80028f0:	20001ad8 	.word	0x20001ad8

080028f4 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80028f4:	6803      	ldr	r3, [r0, #0]
 80028f6:	4718      	bx	r3

080028f8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80028f8:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80028fa:	f8b0 4060 	ldrh.w	r4, [r0, #96]	@ 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80028fe:	8f82      	ldrh	r2, [r0, #60]	@ 0x3c
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002900:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002904:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002906:	fb04 fc0c 	mul.w	ip, r4, ip
 800290a:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800290e:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002912:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002916:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800291a:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 800291e:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002922:	1c55      	adds	r5, r2, #1
{
 8002924:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002926:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800292a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800292e:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002932:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    if (wY < 0)
 8002936:	db7f      	blt.n	8002a38 <PWMC_SetPhaseVoltage+0x140>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002938:	1c5d      	adds	r5, r3, #1
 800293a:	db5c      	blt.n	80029f6 <PWMC_SetPhaseVoltage+0xfe>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800293c:	ebb1 010e 	subs.w	r1, r1, lr
 8002940:	bf44      	itt	mi
 8002942:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002946:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800294a:	2b00      	cmp	r3, #0
 800294c:	bfbc      	itt	lt
 800294e:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002952:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8002956:	2a00      	cmp	r2, #0
 8002958:	bfb8      	it	lt
 800295a:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800295e:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002962:	bfb8      	it	lt
 8002964:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002968:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 800296c:	eba1 42a2 	sub.w	r2, r1, r2, asr #18

        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002970:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002974:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002978:	b294      	uxth	r4, r2
 800297a:	2501      	movs	r5, #1
          pHandle->highDuty = (uint16_t)wTimePhA;
 800297c:	f8a0 404a 	strh.w	r4, [r0, #74]	@ 0x4a

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8002980:	f8b0 405e 	ldrh.w	r4, [r0, #94]	@ 0x5e
          pHandle->Sector = SECTOR_4;
 8002984:	f880 506a 	strb.w	r5, [r0, #106]	@ 0x6a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002988:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800298c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002990:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002994:	b289      	uxth	r1, r1
 8002996:	b29b      	uxth	r3, r3
 8002998:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 800299a:	2c01      	cmp	r4, #1
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800299c:	f8a0 e046 	strh.w	lr, [r0, #70]	@ 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80029a0:	f8a0 c048 	strh.w	ip, [r0, #72]	@ 0x48
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80029a4:	87c1      	strh	r1, [r0, #62]	@ 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80029a6:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80029aa:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
    if (1U == pHandle->DTTest)
 80029ae:	d11d      	bne.n	80029ec <PWMC_SetPhaseVoltage+0xf4>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80029b0:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	@ 0x50
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 80029b4:	f8b0 4062 	ldrh.w	r4, [r0, #98]	@ 0x62
      if (pHandle->Ia > 0)
 80029b8:	2d00      	cmp	r5, #0
        pHandle->CntPhA += pHandle->DTCompCnt;
 80029ba:	bfcc      	ite	gt
 80029bc:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80029be:	1b09      	suble	r1, r1, r4
 80029c0:	b289      	uxth	r1, r1
 80029c2:	87c1      	strh	r1, [r0, #62]	@ 0x3e
      }

      if (pHandle->Ib > 0)
 80029c4:	f9b0 1052 	ldrsh.w	r1, [r0, #82]	@ 0x52
 80029c8:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 80029ca:	f9b0 1054 	ldrsh.w	r1, [r0, #84]	@ 0x54
        pHandle->CntPhB += pHandle->DTCompCnt;
 80029ce:	bfcc      	ite	gt
 80029d0:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80029d2:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 80029d4:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80029d6:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 80029d8:	bfcc      	ite	gt
 80029da:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80029dc:	1b12      	suble	r2, r2, r4
 80029de:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
        pHandle->CntPhC += pHandle->DTCompCnt;
 80029e2:	bfcc      	ite	gt
 80029e4:	f8a0 4042 	strhgt.w	r4, [r0, #66]	@ 0x42
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80029e8:	f8a0 2042 	strhle.w	r2, [r0, #66]	@ 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80029ec:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80029ee:	b003      	add	sp, #12
 80029f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80029f4:	4718      	bx	r3
        if ( wX <= 0 )
 80029f6:	f1bc 0f00 	cmp.w	ip, #0
 80029fa:	dd3d      	ble.n	8002a78 <PWMC_SetPhaseVoltage+0x180>
          wTimePhB = wTimePhA + (wZ / 131072);
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bfb8      	it	lt
 8002a00:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002a04:	ebac 0e0e 	sub.w	lr, ip, lr
          wTimePhB = wTimePhA + (wZ / 131072);
 8002a08:	bfb8      	it	lt
 8002a0a:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002a0e:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002a12:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002a16:	bfb8      	it	lt
 8002a18:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002a1c:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002a20:	bfb8      	it	lt
 8002a22:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8002a26:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002a2a:	fa1f fe81 	uxth.w	lr, r1
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002a2e:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhC;
 8002a32:	b294      	uxth	r4, r2
 8002a34:	2500      	movs	r5, #0
 8002a36:	e7a1      	b.n	800297c <PWMC_SetPhaseVoltage+0x84>
      if (wZ < 0)
 8002a38:	1c5d      	adds	r5, r3, #1
 8002a3a:	db5d      	blt.n	8002af8 <PWMC_SetPhaseVoltage+0x200>
        if (wX <= 0)
 8002a3c:	f1bc 0f00 	cmp.w	ip, #0
 8002a40:	dd38      	ble.n	8002ab4 <PWMC_SetPhaseVoltage+0x1bc>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002a42:	ebb1 010c 	subs.w	r1, r1, ip
 8002a46:	bf44      	itt	mi
 8002a48:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002a4c:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002a50:	2a00      	cmp	r2, #0
 8002a52:	bfb8      	it	lt
 8002a54:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002a58:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002a5c:	bfb8      	it	lt
 8002a5e:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
 8002a62:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002a66:	eb02 436c 	add.w	r3, r2, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002a6a:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002a6e:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002a72:	b28c      	uxth	r4, r1
 8002a74:	2502      	movs	r5, #2
 8002a76:	e781      	b.n	800297c <PWMC_SetPhaseVoltage+0x84>
          wTimePhC = wTimePhA - (wY / 131072);
 8002a78:	2a00      	cmp	r2, #0
 8002a7a:	bfb8      	it	lt
 8002a7c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002a80:	eba1 010c 	sub.w	r1, r1, ip
          wTimePhC = wTimePhA - (wY / 131072);
 8002a84:	bfb8      	it	lt
 8002a86:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhB = wTimePhC + (wX / 131072);
 8002a8a:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002a8e:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002a92:	bfb8      	it	lt
 8002a94:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8002a98:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002a9c:	bfb8      	it	lt
 8002a9e:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8002aa2:	eb02 4363 	add.w	r3, r2, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002aa6:	fa1f fe81 	uxth.w	lr, r1
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002aaa:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002aae:	b29c      	uxth	r4, r3
 8002ab0:	2505      	movs	r5, #5
 8002ab2:	e763      	b.n	800297c <PWMC_SetPhaseVoltage+0x84>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002ab4:	ebbc 0e0e 	subs.w	lr, ip, lr
 8002ab8:	bf44      	itt	mi
 8002aba:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002abe:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bfbc      	itt	lt
 8002ac6:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002aca:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002ace:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002ad2:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002ad6:	bfb8      	it	lt
 8002ad8:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002adc:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002ae0:	bfb8      	it	lt
 8002ae2:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8002ae6:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002aea:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002aee:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002af2:	b28c      	uxth	r4, r1
 8002af4:	2503      	movs	r5, #3
 8002af6:	e741      	b.n	800297c <PWMC_SetPhaseVoltage+0x84>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002af8:	ebb1 010e 	subs.w	r1, r1, lr
 8002afc:	bf44      	itt	mi
 8002afe:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002b02:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bfbc      	itt	lt
 8002b0a:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002b0e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002b12:	2a00      	cmp	r2, #0
 8002b14:	bfb8      	it	lt
 8002b16:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002b1a:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002b1e:	bfb8      	it	lt
 8002b20:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002b24:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002b28:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        pHandle->lowDuty = (uint16_t)wTimePhC;
 8002b2c:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002b30:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002b34:	b29c      	uxth	r4, r3
 8002b36:	2504      	movs	r5, #4
 8002b38:	e720      	b.n	800297c <PWMC_SetPhaseVoltage+0x84>
 8002b3a:	bf00      	nop

08002b3c <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002b3c:	6843      	ldr	r3, [r0, #4]
 8002b3e:	4718      	bx	r3

08002b40 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002b40:	6883      	ldr	r3, [r0, #8]
 8002b42:	4718      	bx	r3

08002b44 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002b44:	b510      	push	{r4, lr}
 8002b46:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002b48:	b179      	cbz	r1, 8002b6a <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002b4a:	2901      	cmp	r1, #1
 8002b4c:	d001      	beq.n	8002b52 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8002b4e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002b50:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002b52:	f8b0 304e 	ldrh.w	r3, [r0, #78]	@ 0x4e
 8002b56:	b16b      	cbz	r3, 8002b74 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f8a0 304e 	strh.w	r3, [r0, #78]	@ 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f4      	bne.n	8002b4e <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8002b64:	68c3      	ldr	r3, [r0, #12]
 8002b66:	4798      	blx	r3
          retVal = true;
 8002b68:	e004      	b.n	8002b74 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8002b6a:	f7ff ffe7 	bl	8002b3c <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002b6e:	68e3      	ldr	r3, [r4, #12]
 8002b70:	4620      	mov	r0, r4
 8002b72:	4798      	blx	r3
      retVal = true;
 8002b74:	2001      	movs	r0, #1
}
 8002b76:	bd10      	pop	{r4, pc}

08002b78 <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 8002b78:	6983      	ldr	r3, [r0, #24]
 8002b7a:	4718      	bx	r3

08002b7c <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8002b80:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002b84:	2300      	movs	r3, #0
    uint8_t accessResult;
    while (rxLength > 0)
 8002b86:	429c      	cmp	r4, r3
    uint8_t * txData = pHandle->txBuffer;
 8002b88:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
{
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	4680      	mov	r8, r0
    pHandle->txLength = 0;
 8002b90:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0)
 8002b92:	dd74      	ble.n	8002c7e <RI_SetRegCommandParser+0x102>
 8002b94:	eb06 0b01 	add.w	fp, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	f1c6 0a01 	rsb	sl, r6, #1
    {
       number_of_item++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002b9e:	882a      	ldrh	r2, [r5, #0]
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002ba0:	fa1f fe84 	uxth.w	lr, r4

    typeID = (uint8_t)dataID & TYPE_MASK;
    motorID = 0U;
    MCI_Handle_t *pMCIN = &Mci[motorID];

    switch (typeID)
 8002ba4:	f002 0138 	and.w	r1, r2, #56	@ 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002ba8:	f1ae 0402 	sub.w	r4, lr, #2
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002bac:	1ca8      	adds	r0, r5, #2
    uint16_t regID = dataID & REG_MASK;
 8002bae:	f022 0307 	bic.w	r3, r2, #7
    switch (typeID)
 8002bb2:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002bb4:	fa1f fc84 	uxth.w	ip, r4
    uint16_t regID = dataID & REG_MASK;
 8002bb8:	b29b      	uxth	r3, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002bba:	b224      	sxth	r4, r4
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002bbc:	4607      	mov	r7, r0
    switch (typeID)
 8002bbe:	2920      	cmp	r1, #32
 8002bc0:	d812      	bhi.n	8002be8 <RI_SetRegCommandParser+0x6c>
 8002bc2:	e8df f001 	tbb	[pc, r1]
 8002bc6:	11bf      	.short	0x11bf
 8002bc8:	11111111 	.word	0x11111111
 8002bcc:	11941111 	.word	0x11941111
 8002bd0:	11111111 	.word	0x11111111
 8002bd4:	11831111 	.word	0x11831111
 8002bd8:	11111111 	.word	0x11111111
 8002bdc:	11621111 	.word	0x11621111
 8002be0:	11111111 	.word	0x11111111
 8002be4:	1111      	.short	0x1111
 8002be6:	2d          	.byte	0x2d
 8002be7:	00          	.byte	0x00
 8002be8:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 8002bea:	eb06 030a 	add.w	r3, r6, sl
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d040      	beq.n	8002c76 <RI_SetRegCommandParser+0xfa>
        if (txSyncFreeSpace !=0 )
 8002bf4:	45b3      	cmp	fp, r6
 8002bf6:	f000 80b5 	beq.w	8002d64 <RI_SetRegCommandParser+0x1e8>
          *txData = accessResult;
 8002bfa:	f806 0b01 	strb.w	r0, [r6], #1
          pHandle->txLength++;
 8002bfe:	f8b8 300e 	ldrh.w	r3, [r8, #14]
 8002c02:	3301      	adds	r3, #1
 8002c04:	f8a8 300e 	strh.w	r3, [r8, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	f000 80b3 	beq.w	8002d74 <RI_SetRegCommandParser+0x1f8>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002c0e:	2807      	cmp	r0, #7
 8002c10:	d002      	beq.n	8002c18 <RI_SetRegCommandParser+0x9c>
 8002c12:	280a      	cmp	r0, #10
 8002c14:	f040 80ac 	bne.w	8002d70 <RI_SetRegCommandParser+0x1f4>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002c18:	2001      	movs	r0, #1
}
 8002c1a:	b007      	add	sp, #28
 8002c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        break;
      }

      case TYPE_DATA_RAW:
      {
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 8002c20:	f8b5 e002 	ldrh.w	lr, [r5, #2]
        /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
        *size = rawSize + 2U;
 8002c24:	f10e 0102 	add.w	r1, lr, #2
 8002c28:	b289      	uxth	r1, r1
        uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
        rawData++;
        rawData++;

        if (*size > dataAvailable )
 8002c2a:	42a1      	cmp	r1, r4
 8002c2c:	f300 81fa 	bgt.w	8003024 <RI_SetRegCommandParser+0x4a8>
      rxLength = (int16_t) (rxLength - size);
 8002c30:	ebac 0c01 	sub.w	ip, ip, r1
 8002c34:	f5b3 7f0a 	cmp.w	r3, #552	@ 0x228
      rxData = rxData+size;
 8002c38:	eb00 0701 	add.w	r7, r0, r1
      rxLength = (int16_t) (rxLength - size);
 8002c3c:	fa0f f48c 	sxth.w	r4, ip
 8002c40:	f000 81e8 	beq.w	8003014 <RI_SetRegCommandParser+0x498>
 8002c44:	f200 81d3 	bhi.w	8002fee <RI_SetRegCommandParser+0x472>
 8002c48:	f5b3 7fd4 	cmp.w	r3, #424	@ 0x1a8
 8002c4c:	f000 8210 	beq.w	8003070 <RI_SetRegCommandParser+0x4f4>
 8002c50:	f240 81c4 	bls.w	8002fdc <RI_SetRegCommandParser+0x460>
 8002c54:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 8002c58:	f040 8095 	bne.w	8002d86 <RI_SetRegCommandParser+0x20a>
              uint32_t torque;
              uint16_t duration;

              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002c5c:	892a      	ldrh	r2, [r5, #8]
 8002c5e:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8002c62:	48af      	ldr	r0, [pc, #700]	@ (8002f20 <RI_SetRegCommandParser+0x3a4>)
 8002c64:	f7fe ff80 	bl	8001b68 <MCI_ExecTorqueRamp>
        if ((1U == number_of_item) && (0 == rxLength))
 8002c68:	eb06 030a 	add.w	r3, r6, sl
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
  uint8_t retVal = MCP_CMD_OK;
 8002c70:	f04f 0000 	mov.w	r0, #0
        if ((1U == number_of_item) && (0 == rxLength))
 8002c74:	d1be      	bne.n	8002bf4 <RI_SetRegCommandParser+0x78>
 8002c76:	2c00      	cmp	r4, #0
 8002c78:	d1bc      	bne.n	8002bf4 <RI_SetRegCommandParser+0x78>
      if (MCP_CMD_OK == retVal)
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d1cd      	bne.n	8002c1a <RI_SetRegCommandParser+0x9e>
      pHandle->txLength = 0;
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f8a8 000e 	strh.w	r0, [r8, #14]
}
 8002c84:	b007      	add	sp, #28
 8002c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c8a:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8209 	beq.w	80030a6 <RI_SetRegCommandParser+0x52a>
 8002c94:	2c01      	cmp	r4, #1
 8002c96:	f340 820a 	ble.w	80030ae <RI_SetRegCommandParser+0x532>
 8002c9a:	1ceb      	adds	r3, r5, #3
 8002c9c:	eb00 070c 	add.w	r7, r0, ip
 8002ca0:	43ed      	mvns	r5, r5
 8002ca2:	e002      	b.n	8002caa <RI_SetRegCommandParser+0x12e>
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	f000 81dc 	beq.w	8003062 <RI_SetRegCommandParser+0x4e6>
 8002caa:	f993 1000 	ldrsb.w	r1, [r3]
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8002cae:	18ec      	adds	r4, r5, r3
    tempdestString++;
 8002cb0:	461a      	mov	r2, r3
    *size = *size + 1U;
 8002cb2:	b2a4      	uxth	r4, r4
 8002cb4:	3301      	adds	r3, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002cb6:	2900      	cmp	r1, #0
 8002cb8:	d1f4      	bne.n	8002ca4 <RI_SetRegCommandParser+0x128>
      rxData = rxData+size;
 8002cba:	4627      	mov	r7, r4
      rxLength = (int16_t) (rxLength - size);
 8002cbc:	ebac 0404 	sub.w	r4, ip, r4
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002cc0:	2300      	movs	r3, #0
      rxData = rxData+size;
 8002cc2:	4407      	add	r7, r0
      rxLength = (int16_t) (rxLength - size);
 8002cc4:	b224      	sxth	r4, r4
    *tempdestString = (int8_t)0;
 8002cc6:	7013      	strb	r3, [r2, #0]
        retVal = MCP_ERROR_RO_REG;
 8002cc8:	2004      	movs	r0, #4
 8002cca:	e78e      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8002ccc:	f1ae 0e06 	sub.w	lr, lr, #6
 8002cd0:	2b98      	cmp	r3, #152	@ 0x98
 8002cd2:	fa0f f48e 	sxth.w	r4, lr
      rxData = rxData+size;
 8002cd6:	f105 0706 	add.w	r7, r5, #6
 8002cda:	f000 81b5 	beq.w	8003048 <RI_SetRegCommandParser+0x4cc>
 8002cde:	d86e      	bhi.n	8002dbe <RI_SetRegCommandParser+0x242>
 8002ce0:	f022 0247 	bic.w	r2, r2, #71	@ 0x47
 8002ce4:	2a18      	cmp	r2, #24
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2004      	moveq	r0, #4
 8002cea:	2005      	movne	r0, #5
 8002cec:	e77d      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8002cee:	f1ae 0e04 	sub.w	lr, lr, #4
 8002cf2:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002cf6:	f8b5 9002 	ldrh.w	r9, [r5, #2]
      rxLength = (int16_t) (rxLength - size);
 8002cfa:	fa0f f48e 	sxth.w	r4, lr
      rxData = rxData+size;
 8002cfe:	f105 0704 	add.w	r7, r5, #4
 8002d02:	f000 820d 	beq.w	8003120 <RI_SetRegCommandParser+0x5a4>
 8002d06:	f200 80a7 	bhi.w	8002e58 <RI_SetRegCommandParser+0x2dc>
 8002d0a:	f5b3 7f24 	cmp.w	r3, #656	@ 0x290
 8002d0e:	f000 8200 	beq.w	8003112 <RI_SetRegCommandParser+0x596>
 8002d12:	f240 808e 	bls.w	8002e32 <RI_SetRegCommandParser+0x2b6>
 8002d16:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8002d1a:	f000 81f4 	beq.w	8003106 <RI_SetRegCommandParser+0x58a>
 8002d1e:	d934      	bls.n	8002d8a <RI_SetRegCommandParser+0x20e>
 8002d20:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8002d24:	d022      	beq.n	8002d6c <RI_SetRegCommandParser+0x1f0>
 8002d26:	d967      	bls.n	8002df8 <RI_SetRegCommandParser+0x27c>
 8002d28:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 8002d2c:	d159      	bne.n	8002de2 <RI_SetRegCommandParser+0x266>
            currComp = MCI_GetIqdref(pMCIN);
 8002d2e:	487c      	ldr	r0, [pc, #496]	@ (8002f20 <RI_SetRegCommandParser+0x3a4>)
 8002d30:	f7ff f82c 	bl	8001d8c <MCI_GetIqdref>
 8002d34:	9003      	str	r0, [sp, #12]
            currComp.q = (int16_t)regdata16;
 8002d36:	f8ad 900c 	strh.w	r9, [sp, #12]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002d3a:	9903      	ldr	r1, [sp, #12]
 8002d3c:	4878      	ldr	r0, [pc, #480]	@ (8002f20 <RI_SetRegCommandParser+0x3a4>)
 8002d3e:	f7fe ff1d 	bl	8001b7c <MCI_SetCurrentReferences>
            break;
 8002d42:	e791      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
      rxLength = (int16_t) (rxLength - size);
 8002d44:	f1ae 0e03 	sub.w	lr, lr, #3
 8002d48:	2b88      	cmp	r3, #136	@ 0x88
 8002d4a:	fa0f f48e 	sxth.w	r4, lr
      rxData = rxData+size;
 8002d4e:	f105 0703 	add.w	r7, r5, #3
 8002d52:	f000 8169 	beq.w	8003028 <RI_SetRegCommandParser+0x4ac>
 8002d56:	f022 0287 	bic.w	r2, r2, #135	@ 0x87
 8002d5a:	2a48      	cmp	r2, #72	@ 0x48
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2004      	moveq	r0, #4
 8002d60:	2005      	movne	r0, #5
 8002d62:	e742      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002d64:	2008      	movs	r0, #8
}
 8002d66:	b007      	add	sp, #28
 8002d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6c:	2004      	movs	r0, #4
 8002d6e:	e73c      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002d70:	2301      	movs	r3, #1
 8002d72:	9300      	str	r3, [sp, #0]
    while (rxLength > 0)
 8002d74:	2c00      	cmp	r4, #0
 8002d76:	f340 821a 	ble.w	80031ae <RI_SetRegCommandParser+0x632>
 8002d7a:	463d      	mov	r5, r7
 8002d7c:	e70f      	b.n	8002b9e <RI_SetRegCommandParser+0x22>
 8002d7e:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 8002d82:	f000 811d 	beq.w	8002fc0 <RI_SetRegCommandParser+0x444>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002d86:	2005      	movs	r0, #5
 8002d88:	e72f      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002d8a:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8002d8e:	f000 81f5 	beq.w	800317c <RI_SetRegCommandParser+0x600>
 8002d92:	d91c      	bls.n	8002dce <RI_SetRegCommandParser+0x252>
 8002d94:	f5b3 7f54 	cmp.w	r3, #848	@ 0x350
 8002d98:	f000 8112 	beq.w	8002fc0 <RI_SetRegCommandParser+0x444>
 8002d9c:	f5b3 7f64 	cmp.w	r3, #912	@ 0x390
 8002da0:	d1f1      	bne.n	8002d86 <RI_SetRegCommandParser+0x20a>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002da2:	aa03      	add	r2, sp, #12
 8002da4:	f10d 010a 	add.w	r1, sp, #10
 8002da8:	485e      	ldr	r0, [pc, #376]	@ (8002f24 <RI_SetRegCommandParser+0x3a8>)
 8002daa:	f007 f931 	bl	800a010 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8002dae:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8002db2:	485c      	ldr	r0, [pc, #368]	@ (8002f24 <RI_SetRegCommandParser+0x3a8>)
 8002db4:	fa0f f289 	sxth.w	r2, r9
 8002db8:	f007 f932 	bl	800a020 <STO_PLL_SetObserverGains>
            break;
 8002dbc:	e754      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002dbe:	2bd8      	cmp	r3, #216	@ 0xd8
 8002dc0:	d0d4      	beq.n	8002d6c <RI_SetRegCommandParser+0x1f0>
 8002dc2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2004      	moveq	r0, #4
 8002dca:	2005      	movne	r0, #5
 8002dcc:	e70d      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002dce:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
 8002dd2:	d1d8      	bne.n	8002d86 <RI_SetRegCommandParser+0x20a>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002dd4:	4b54      	ldr	r3, [pc, #336]	@ (8002f28 <RI_SetRegCommandParser+0x3ac>)
 8002dd6:	fa0f f189 	sxth.w	r1, r9
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	f005 fb16 	bl	800840c <PID_SetKI>
            break;
 8002de0:	e742      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002de2:	d8d0      	bhi.n	8002d86 <RI_SetRegCommandParser+0x20a>
 8002de4:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 8002de8:	d0c0      	beq.n	8002d6c <RI_SetRegCommandParser+0x1f0>
 8002dea:	d90e      	bls.n	8002e0a <RI_SetRegCommandParser+0x28e>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002dec:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 8002df0:	bf0c      	ite	eq
 8002df2:	2004      	moveq	r0, #4
 8002df4:	2005      	movne	r0, #5
 8002df6:	e6f8      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002df8:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 8002dfc:	d10e      	bne.n	8002e1c <RI_SetRegCommandParser+0x2a0>
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002dfe:	484b      	ldr	r0, [pc, #300]	@ (8002f2c <RI_SetRegCommandParser+0x3b0>)
 8002e00:	fa0f f189 	sxth.w	r1, r9
 8002e04:	f005 fb00 	bl	8008408 <PID_SetKP>
            break;
 8002e08:	e72e      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002e0a:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 8002e0e:	d0ad      	beq.n	8002d6c <RI_SetRegCommandParser+0x1f0>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002e10:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8002e14:	bf0c      	ite	eq
 8002e16:	2004      	moveq	r0, #4
 8002e18:	2005      	movne	r0, #5
 8002e1a:	e6e6      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002e1c:	d3b3      	bcc.n	8002d86 <RI_SetRegCommandParser+0x20a>
 8002e1e:	f5b3 6ff2 	cmp.w	r3, #1936	@ 0x790
 8002e22:	d0a3      	beq.n	8002d6c <RI_SetRegCommandParser+0x1f0>
 8002e24:	d938      	bls.n	8002e98 <RI_SetRegCommandParser+0x31c>
 8002e26:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2004      	moveq	r0, #4
 8002e2e:	2005      	movne	r0, #5
 8002e30:	e6db      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002e32:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002e36:	f000 81b3 	beq.w	80031a0 <RI_SetRegCommandParser+0x624>
 8002e3a:	d959      	bls.n	8002ef0 <RI_SetRegCommandParser+0x374>
 8002e3c:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8002e40:	f000 817f 	beq.w	8003142 <RI_SetRegCommandParser+0x5c6>
 8002e44:	f5b3 7f04 	cmp.w	r3, #528	@ 0x210
 8002e48:	d19d      	bne.n	8002d86 <RI_SetRegCommandParser+0x20a>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8002e4a:	4b39      	ldr	r3, [pc, #228]	@ (8002f30 <RI_SetRegCommandParser+0x3b4>)
 8002e4c:	fa0f f189 	sxth.w	r1, r9
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	f005 fb0b 	bl	800846c <PID_SetKD>
            break;
 8002e56:	e707      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002e58:	f241 5150 	movw	r1, #5456	@ 0x1550
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	f000 8199 	beq.w	8003194 <RI_SetRegCommandParser+0x618>
 8002e62:	d930      	bls.n	8002ec6 <RI_SetRegCommandParser+0x34a>
 8002e64:	f241 6250 	movw	r2, #5712	@ 0x1650
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f000 817c 	beq.w	8003166 <RI_SetRegCommandParser+0x5ea>
 8002e6e:	d91b      	bls.n	8002ea8 <RI_SetRegCommandParser+0x32c>
 8002e70:	f641 1210 	movw	r2, #6416	@ 0x1910
 8002e74:	4293      	cmp	r3, r2
 8002e76:	f000 816b 	beq.w	8003150 <RI_SetRegCommandParser+0x5d4>
 8002e7a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	f43f af74 	beq.w	8002d6c <RI_SetRegCommandParser+0x1f0>
 8002e84:	f641 02d0 	movw	r2, #6352	@ 0x18d0
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	f47f af7c 	bne.w	8002d86 <RI_SetRegCommandParser+0x20a>
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002e8e:	4827      	ldr	r0, [pc, #156]	@ (8002f2c <RI_SetRegCommandParser+0x3b0>)
 8002e90:	4649      	mov	r1, r9
 8002e92:	f005 fad7 	bl	8008444 <PID_SetKIDivisorPOW2>
            break;
 8002e96:	e6e7      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002e98:	f022 0247 	bic.w	r2, r2, #71	@ 0x47
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002e9c:	f5b2 6fb2 	cmp.w	r2, #1424	@ 0x590
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2004      	moveq	r0, #4
 8002ea4:	2005      	movne	r0, #5
 8002ea6:	e6a0      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002ea8:	f241 52d0 	movw	r2, #5584	@ 0x15d0
 8002eac:	4293      	cmp	r3, r2
 8002eae:	f000 8154 	beq.w	800315a <RI_SetRegCommandParser+0x5de>
 8002eb2:	f241 6210 	movw	r2, #5648	@ 0x1610
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d126      	bne.n	8002f08 <RI_SetRegCommandParser+0x38c>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002eba:	4b1d      	ldr	r3, [pc, #116]	@ (8002f30 <RI_SetRegCommandParser+0x3b4>)
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	f005 fac0 	bl	8008444 <PID_SetKIDivisorPOW2>
            break;
 8002ec4:	e6d0      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002ec6:	f241 4150 	movw	r1, #5200	@ 0x1450
 8002eca:	428b      	cmp	r3, r1
 8002ecc:	f000 8151 	beq.w	8003172 <RI_SetRegCommandParser+0x5f6>
 8002ed0:	d93c      	bls.n	8002f4c <RI_SetRegCommandParser+0x3d0>
 8002ed2:	f241 42d0 	movw	r2, #5328	@ 0x14d0
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f000 8157 	beq.w	800318a <RI_SetRegCommandParser+0x60e>
 8002edc:	f241 5210 	movw	r2, #5392	@ 0x1510
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d129      	bne.n	8002f38 <RI_SetRegCommandParser+0x3bc>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002ee4:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <RI_SetRegCommandParser+0x3ac>)
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	f005 fa9d 	bl	8008428 <PID_SetKPDivisorPOW2>
            break;
 8002eee:	e6bb      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002ef0:	2bd0      	cmp	r3, #208	@ 0xd0
 8002ef2:	f000 8120 	beq.w	8003136 <RI_SetRegCommandParser+0x5ba>
 8002ef6:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8002efa:	d13a      	bne.n	8002f72 <RI_SetRegCommandParser+0x3f6>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002efc:	480d      	ldr	r0, [pc, #52]	@ (8002f34 <RI_SetRegCommandParser+0x3b8>)
 8002efe:	fa0f f189 	sxth.w	r1, r9
 8002f02:	f005 fab3 	bl	800846c <PID_SetKD>
            break;
 8002f06:	e6af      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002f08:	f241 5290 	movw	r2, #5520	@ 0x1590
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	f47f af3a 	bne.w	8002d86 <RI_SetRegCommandParser+0x20a>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002f12:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <RI_SetRegCommandParser+0x3ac>)
 8002f14:	4649      	mov	r1, r9
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	f005 fab0 	bl	800847c <PID_SetKDDivisorPOW2>
            break;
 8002f1c:	e6a4      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002f1e:	bf00      	nop
 8002f20:	200008e8 	.word	0x200008e8
 8002f24:	2000014c 	.word	0x2000014c
 8002f28:	20000008 	.word	0x20000008
 8002f2c:	20000180 	.word	0x20000180
 8002f30:	2000000c 	.word	0x2000000c
 8002f34:	20000440 	.word	0x20000440
 8002f38:	f241 4290 	movw	r2, #5264	@ 0x1490
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	f47f af22 	bne.w	8002d86 <RI_SetRegCommandParser+0x20a>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002f42:	489d      	ldr	r0, [pc, #628]	@ (80031b8 <RI_SetRegCommandParser+0x63c>)
 8002f44:	4649      	mov	r1, r9
 8002f46:	f005 fa7d 	bl	8008444 <PID_SetKIDivisorPOW2>
            break;
 8002f4a:	e68d      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002f4c:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 8002f50:	f43f af0c 	beq.w	8002d6c <RI_SetRegCommandParser+0x1f0>
 8002f54:	d917      	bls.n	8002f86 <RI_SetRegCommandParser+0x40a>
 8002f56:	f5b3 6f65 	cmp.w	r3, #3664	@ 0xe50
 8002f5a:	f43f ae85 	beq.w	8002c68 <RI_SetRegCommandParser+0xec>
 8002f5e:	f5b3 6f69 	cmp.w	r3, #3728	@ 0xe90
 8002f62:	f43f ae81 	beq.w	8002c68 <RI_SetRegCommandParser+0xec>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002f66:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2004      	moveq	r0, #4
 8002f6e:	2005      	movne	r0, #5
 8002f70:	e63b      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002f72:	2b90      	cmp	r3, #144	@ 0x90
 8002f74:	f47f af07 	bne.w	8002d86 <RI_SetRegCommandParser+0x20a>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002f78:	488f      	ldr	r0, [pc, #572]	@ (80031b8 <RI_SetRegCommandParser+0x63c>)
 8002f7a:	fa0f f189 	sxth.w	r1, r9
 8002f7e:	f005 fa43 	bl	8008408 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002f82:	2000      	movs	r0, #0
            break;
 8002f84:	e631      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002f86:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 8002f8a:	d019      	beq.n	8002fc0 <RI_SetRegCommandParser+0x444>
 8002f8c:	d911      	bls.n	8002fb2 <RI_SetRegCommandParser+0x436>
 8002f8e:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 8002f92:	f43f aeeb 	beq.w	8002d6c <RI_SetRegCommandParser+0x1f0>
 8002f96:	f67f aef2 	bls.w	8002d7e <RI_SetRegCommandParser+0x202>
 8002f9a:	f022 0247 	bic.w	r2, r2, #71	@ 0x47
 8002f9e:	f5b2 6f39 	cmp.w	r2, #2960	@ 0xb90
 8002fa2:	f43f aee3 	beq.w	8002d6c <RI_SetRegCommandParser+0x1f0>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002fa6:	f5b3 6f41 	cmp.w	r3, #3088	@ 0xc10
 8002faa:	bf0c      	ite	eq
 8002fac:	2004      	moveq	r0, #4
 8002fae:	2005      	movne	r0, #5
 8002fb0:	e61b      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002fb2:	f5b3 6f1d 	cmp.w	r3, #2512	@ 0x9d0
 8002fb6:	d003      	beq.n	8002fc0 <RI_SetRegCommandParser+0x444>
 8002fb8:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8002fbc:	f47f aee3 	bne.w	8002d86 <RI_SetRegCommandParser+0x20a>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002fc0:	aa03      	add	r2, sp, #12
 8002fc2:	f10d 010a 	add.w	r1, sp, #10
 8002fc6:	487d      	ldr	r0, [pc, #500]	@ (80031bc <RI_SetRegCommandParser+0x640>)
 8002fc8:	f007 f822 	bl	800a010 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 8002fcc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8002fd0:	487a      	ldr	r0, [pc, #488]	@ (80031bc <RI_SetRegCommandParser+0x640>)
 8002fd2:	fa0f f189 	sxth.w	r1, r9
 8002fd6:	f007 f823 	bl	800a020 <STO_PLL_SetObserverGains>
            break;
 8002fda:	e645      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 8002fdc:	2ba8      	cmp	r3, #168	@ 0xa8
 8002fde:	f43f aec5 	beq.w	8002d6c <RI_SetRegCommandParser+0x1f0>
 8002fe2:	d910      	bls.n	8003006 <RI_SetRegCommandParser+0x48a>
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002fe4:	2be8      	cmp	r3, #232	@ 0xe8
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2004      	moveq	r0, #4
 8002fea:	2005      	movne	r0, #5
 8002fec:	e5fd      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8002fee:	f5b3 7f5a 	cmp.w	r3, #872	@ 0x368
 8002ff2:	d049      	beq.n	8003088 <RI_SetRegCommandParser+0x50c>
 8002ff4:	f5b3 6fa5 	cmp.w	r3, #1320	@ 0x528
 8002ff8:	f47f aec5 	bne.w	8002d86 <RI_SetRegCommandParser+0x20a>
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002ffc:	1d29      	adds	r1, r5, #4
 8002ffe:	4870      	ldr	r0, [pc, #448]	@ (80031c0 <RI_SetRegCommandParser+0x644>)
 8003000:	f005 f930 	bl	8008264 <MCPA_cfgLog>
              break;
 8003004:	e5f1      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
 8003006:	f022 0247 	bic.w	r2, r2, #71	@ 0x47
              retVal = MCP_ERROR_UNKNOWN_REG;
 800300a:	2a28      	cmp	r2, #40	@ 0x28
 800300c:	bf0c      	ite	eq
 800300e:	2004      	moveq	r0, #4
 8003010:	2005      	movne	r0, #5
 8003012:	e5ea      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8003014:	f01e 0307 	ands.w	r3, lr, #7
 8003018:	d104      	bne.n	8003024 <RI_SetRegCommandParser+0x4a8>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 800301a:	fa5f fe8e 	uxtb.w	lr, lr
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 800301e:	f1be 0f2f 	cmp.w	lr, #47	@ 0x2f
 8003022:	d94b      	bls.n	80030bc <RI_SetRegCommandParser+0x540>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8003024:	200a      	movs	r0, #10
 8003026:	e5e0      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
            uint8_t regdata8 = *data;
 8003028:	78ab      	ldrb	r3, [r5, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 800302a:	2b04      	cmp	r3, #4
 800302c:	d032      	beq.n	8003094 <RI_SetRegCommandParser+0x518>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 800302e:	2b03      	cmp	r3, #3
 8003030:	f47f ae1a 	bne.w	8002c68 <RI_SetRegCommandParser+0xec>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8003034:	4863      	ldr	r0, [pc, #396]	@ (80031c4 <RI_SetRegCommandParser+0x648>)
 8003036:	f7fe fe7b 	bl	8001d30 <MCI_GetMecSpeedRefUnit>
 800303a:	2200      	movs	r2, #0
 800303c:	4601      	mov	r1, r0
 800303e:	4861      	ldr	r0, [pc, #388]	@ (80031c4 <RI_SetRegCommandParser+0x648>)
 8003040:	f7fe fd88 	bl	8001b54 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003044:	2000      	movs	r0, #0
 8003046:	e5d0      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8003048:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800304c:	495e      	ldr	r1, [pc, #376]	@ (80031c8 <RI_SetRegCommandParser+0x64c>)
 800304e:	485d      	ldr	r0, [pc, #372]	@ (80031c4 <RI_SetRegCommandParser+0x648>)
 8003050:	fb81 2103 	smull	r2, r1, r1, r3
 8003054:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003058:	b209      	sxth	r1, r1
 800305a:	2200      	movs	r2, #0
 800305c:	f7fe fd7a 	bl	8001b54 <MCI_ExecSpeedRamp>
 8003060:	e602      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
      rxLength = (int16_t) (rxLength - size);
 8003062:	ebac 0c04 	sub.w	ip, ip, r4
      rxData = rxData+size;
 8003066:	1907      	adds	r7, r0, r4
      rxLength = (int16_t) (rxLength - size);
 8003068:	fa0f f48c 	sxth.w	r4, ip
        retVal = MCP_ERROR_RO_REG;
 800306c:	2004      	movs	r0, #4
 800306e:	e5bc      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003070:	686b      	ldr	r3, [r5, #4]
 8003072:	4955      	ldr	r1, [pc, #340]	@ (80031c8 <RI_SetRegCommandParser+0x64c>)
 8003074:	892a      	ldrh	r2, [r5, #8]
 8003076:	fb81 0103 	smull	r0, r1, r1, r3
 800307a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800307e:	4851      	ldr	r0, [pc, #324]	@ (80031c4 <RI_SetRegCommandParser+0x648>)
 8003080:	b209      	sxth	r1, r1
 8003082:	f7fe fd67 	bl	8001b54 <MCI_ExecSpeedRamp>
              break;
 8003086:	e5ef      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003088:	6869      	ldr	r1, [r5, #4]
              MCI_SetCurrentReferences(pMCIN, currComp);
 800308a:	484e      	ldr	r0, [pc, #312]	@ (80031c4 <RI_SetRegCommandParser+0x648>)
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 800308c:	9103      	str	r1, [sp, #12]
              MCI_SetCurrentReferences(pMCIN, currComp);
 800308e:	f7fe fd75 	bl	8001b7c <MCI_SetCurrentReferences>
              break;
 8003092:	e5e9      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8003094:	484b      	ldr	r0, [pc, #300]	@ (80031c4 <RI_SetRegCommandParser+0x648>)
 8003096:	f7fe fea3 	bl	8001de0 <MCI_GetTeref>
 800309a:	2200      	movs	r2, #0
 800309c:	4601      	mov	r1, r0
 800309e:	4849      	ldr	r0, [pc, #292]	@ (80031c4 <RI_SetRegCommandParser+0x648>)
 80030a0:	f7fe fd62 	bl	8001b68 <MCI_ExecTorqueRamp>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80030a4:	e5e0      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80030a6:	2701      	movs	r7, #1
  const char_t *tempsrcString = srcString;
 80030a8:	4602      	mov	r2, r0
  *size= 1U ; /* /0 is the min String size */
 80030aa:	463c      	mov	r4, r7
 80030ac:	e606      	b.n	8002cbc <RI_SetRegCommandParser+0x140>
      rxLength = (int16_t) (rxLength - size);
 80030ae:	f1ae 0e03 	sub.w	lr, lr, #3
      rxData = rxData+size;
 80030b2:	1cef      	adds	r7, r5, #3
      rxLength = (int16_t) (rxLength - size);
 80030b4:	fa0f f48e 	sxth.w	r4, lr
        retVal = MCP_ERROR_RO_REG;
 80030b8:	2004      	movs	r0, #4
 80030ba:	e596      	b.n	8002bea <RI_SetRegCommandParser+0x6e>
                for (i = 0; i <nbrOfPhase; i++)
 80030bc:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80030c0:	f43f add2 	beq.w	8002c68 <RI_SetRegCommandParser+0xec>
 80030c4:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
 80030c8:	9401      	str	r4, [sp, #4]
 80030ca:	4691      	mov	r9, r2
 80030cc:	461c      	mov	r4, r3
                revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80030ce:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80030d2:	4b3d      	ldr	r3, [pc, #244]	@ (80031c8 <RI_SetRegCommandParser+0x64c>)
 80030d4:	fb83 c200 	smull	ip, r2, r3, r0
 80030d8:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 80030dc:	f8ad 200e 	strh.w	r2, [sp, #14]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80030e0:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80030e4:	f8ad 2010 	strh.w	r2, [sp, #16]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80030e8:	896a      	ldrh	r2, [r5, #10]
 80030ea:	f8ad 200c 	strh.w	r2, [sp, #12]
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 80030ee:	b2e1      	uxtb	r1, r4
 80030f0:	4836      	ldr	r0, [pc, #216]	@ (80031cc <RI_SetRegCommandParser+0x650>)
                for (i = 0; i <nbrOfPhase; i++)
 80030f2:	3508      	adds	r5, #8
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 80030f4:	aa03      	add	r2, sp, #12
 80030f6:	f006 fbb7 	bl	8009868 <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 80030fa:	45a9      	cmp	r9, r5
 80030fc:	f104 0401 	add.w	r4, r4, #1
 8003100:	d1e5      	bne.n	80030ce <RI_SetRegCommandParser+0x552>
 8003102:	9c01      	ldr	r4, [sp, #4]
 8003104:	e5b0      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8003106:	4832      	ldr	r0, [pc, #200]	@ (80031d0 <RI_SetRegCommandParser+0x654>)
 8003108:	fa0f f189 	sxth.w	r1, r9
 800310c:	f005 f97e 	bl	800840c <PID_SetKI>
            break;
 8003110:	e5aa      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8003112:	4b30      	ldr	r3, [pc, #192]	@ (80031d4 <RI_SetRegCommandParser+0x658>)
 8003114:	fa0f f189 	sxth.w	r1, r9
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	f005 f975 	bl	8008408 <PID_SetKP>
            break;
 800311e:	e5a3      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            currComp = MCI_GetIqdref(pMCIN);
 8003120:	4828      	ldr	r0, [pc, #160]	@ (80031c4 <RI_SetRegCommandParser+0x648>)
 8003122:	f7fe fe33 	bl	8001d8c <MCI_GetIqdref>
 8003126:	9003      	str	r0, [sp, #12]
            currComp.d = (int16_t)regdata16;
 8003128:	f8ad 900e 	strh.w	r9, [sp, #14]
            MCI_SetCurrentReferences(pMCIN,currComp);
 800312c:	9903      	ldr	r1, [sp, #12]
 800312e:	4825      	ldr	r0, [pc, #148]	@ (80031c4 <RI_SetRegCommandParser+0x648>)
 8003130:	f7fe fd24 	bl	8001b7c <MCI_SetCurrentReferences>
            break;
 8003134:	e598      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8003136:	4820      	ldr	r0, [pc, #128]	@ (80031b8 <RI_SetRegCommandParser+0x63c>)
 8003138:	fa0f f189 	sxth.w	r1, r9
 800313c:	f005 f966 	bl	800840c <PID_SetKI>
            break;
 8003140:	e592      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8003142:	4b25      	ldr	r3, [pc, #148]	@ (80031d8 <RI_SetRegCommandParser+0x65c>)
 8003144:	fa0f f189 	sxth.w	r1, r9
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	f005 f95f 	bl	800840c <PID_SetKI>
            break;
 800314e:	e58b      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8003150:	481f      	ldr	r0, [pc, #124]	@ (80031d0 <RI_SetRegCommandParser+0x654>)
 8003152:	4649      	mov	r1, r9
 8003154:	f005 f968 	bl	8008428 <PID_SetKPDivisorPOW2>
            break;
 8003158:	e586      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 800315a:	4b1f      	ldr	r3, [pc, #124]	@ (80031d8 <RI_SetRegCommandParser+0x65c>)
 800315c:	4649      	mov	r1, r9
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	f005 f962 	bl	8008428 <PID_SetKPDivisorPOW2>
            break;
 8003164:	e580      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8003166:	4b1c      	ldr	r3, [pc, #112]	@ (80031d8 <RI_SetRegCommandParser+0x65c>)
 8003168:	4649      	mov	r1, r9
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	f005 f986 	bl	800847c <PID_SetKDDivisorPOW2>
            break;
 8003170:	e57a      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003172:	4811      	ldr	r0, [pc, #68]	@ (80031b8 <RI_SetRegCommandParser+0x63c>)
 8003174:	4649      	mov	r1, r9
 8003176:	f005 f957 	bl	8008428 <PID_SetKPDivisorPOW2>
            break;
 800317a:	e575      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 800317c:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <RI_SetRegCommandParser+0x658>)
 800317e:	fa0f f189 	sxth.w	r1, r9
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	f005 f972 	bl	800846c <PID_SetKD>
            break;
 8003188:	e56e      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800318a:	480b      	ldr	r0, [pc, #44]	@ (80031b8 <RI_SetRegCommandParser+0x63c>)
 800318c:	4649      	mov	r1, r9
 800318e:	f005 f975 	bl	800847c <PID_SetKDDivisorPOW2>
            break;
 8003192:	e569      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8003194:	4b0f      	ldr	r3, [pc, #60]	@ (80031d4 <RI_SetRegCommandParser+0x658>)
 8003196:	4649      	mov	r1, r9
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	f005 f953 	bl	8008444 <PID_SetKIDivisorPOW2>
            break;
 800319e:	e563      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 80031a0:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <RI_SetRegCommandParser+0x65c>)
 80031a2:	fa0f f189 	sxth.w	r1, r9
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	f005 f92e 	bl	8008408 <PID_SetKP>
            break;
 80031ac:	e55c      	b.n	8002c68 <RI_SetRegCommandParser+0xec>
 80031ae:	9800      	ldr	r0, [sp, #0]
      if (MCP_CMD_OK == retVal)
 80031b0:	2800      	cmp	r0, #0
 80031b2:	f43f ad64 	beq.w	8002c7e <RI_SetRegCommandParser+0x102>
 80031b6:	e530      	b.n	8002c1a <RI_SetRegCommandParser+0x9e>
 80031b8:	20000440 	.word	0x20000440
 80031bc:	2000014c 	.word	0x2000014c
 80031c0:	2000048c 	.word	0x2000048c
 80031c4:	200008e8 	.word	0x200008e8
 80031c8:	2aaaaaab 	.word	0x2aaaaaab
 80031cc:	2000033c 	.word	0x2000033c
 80031d0:	20000180 	.word	0x20000180
 80031d4:	20000008 	.word	0x20000008
 80031d8:	2000000c 	.word	0x2000000c

080031dc <RI_GetRegCommandParser>:
{
 80031dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 80031e0:	f8b0 900c 	ldrh.w	r9, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 80031e4:	f8d0 b004 	ldr.w	fp, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 80031e8:	6886      	ldr	r6, [r0, #8]
    pHandle->txLength = 0;
 80031ea:	2300      	movs	r3, #0
{
 80031ec:	b099      	sub	sp, #100	@ 0x64
    pHandle->txLength = 0;
 80031ee:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 80031f0:	f1b9 0f00 	cmp.w	r9, #0
 80031f4:	f000 8372 	beq.w	80038dc <RI_GetRegCommandParser+0x700>
 80031f8:	b20c      	sxth	r4, r1
 80031fa:	4680      	mov	r8, r0
 80031fc:	4619      	mov	r1, r3
    uint8_t * rxData = pHandle->rxBuffer;
 80031fe:	465d      	mov	r5, fp
 8003200:	f241 5790 	movw	r7, #5520	@ 0x1590
 8003204:	4620      	mov	r0, r4
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8003206:	f835 3b02 	ldrh.w	r3, [r5], #2
    switch (typeID)
 800320a:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800320e:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 8003210:	f023 0307 	bic.w	r3, r3, #7
 8003214:	b29b      	uxth	r3, r3
    switch (typeID)
 8003216:	2a20      	cmp	r2, #32
 8003218:	d812      	bhi.n	8003240 <RI_GetRegCommandParser+0x64>
 800321a:	e8df f002 	tbb	[pc, r2]
 800321e:	11d9      	.short	0x11d9
 8003220:	11111111 	.word	0x11111111
 8003224:	116b1111 	.word	0x116b1111
 8003228:	11111111 	.word	0x11111111
 800322c:	11e71111 	.word	0x11e71111
 8003230:	11111111 	.word	0x11111111
 8003234:	11311111 	.word	0x11311111
 8003238:	11111111 	.word	0x11111111
 800323c:	1111      	.short	0x1111
 800323e:	15          	.byte	0x15
 800323f:	00          	.byte	0x00
 8003240:	2007      	movs	r0, #7
}
 8003242:	b019      	add	sp, #100	@ 0x64
 8003244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 8003248:	f5b3 7fd4 	cmp.w	r3, #424	@ 0x1a8
 800324c:	f106 0202 	add.w	r2, r6, #2
        switch (regID)
 8003250:	f000 82ae 	beq.w	80037b0 <RI_GetRegCommandParser+0x5d4>
 8003254:	f200 810e 	bhi.w	8003474 <RI_GetRegCommandParser+0x298>
 8003258:	2ba8      	cmp	r3, #168	@ 0xa8
 800325a:	f000 82be 	beq.w	80037da <RI_GetRegCommandParser+0x5fe>
 800325e:	f200 80ff 	bhi.w	8003460 <RI_GetRegCommandParser+0x284>
 8003262:	2b28      	cmp	r3, #40	@ 0x28
 8003264:	f000 82d1 	beq.w	800380a <RI_GetRegCommandParser+0x62e>
 8003268:	2b68      	cmp	r3, #104	@ 0x68
 800326a:	f040 80bd 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800326e:	233c      	movs	r3, #60	@ 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8003270:	283d      	cmp	r0, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003272:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003274:	f200 8334 	bhi.w	80038e0 <RI_GetRegCommandParser+0x704>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003278:	2008      	movs	r0, #8
}
 800327a:	b019      	add	sp, #100	@ 0x64
 800327c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8003280:	2ba0      	cmp	r3, #160	@ 0xa0
 8003282:	f000 8241 	beq.w	8003708 <RI_GetRegCommandParser+0x52c>
 8003286:	f200 80cd 	bhi.w	8003424 <RI_GetRegCommandParser+0x248>
 800328a:	2b20      	cmp	r3, #32
 800328c:	f000 8254 	beq.w	8003738 <RI_GetRegCommandParser+0x55c>
 8003290:	2b60      	cmp	r3, #96	@ 0x60
 8003292:	f040 80a9 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003296:	4cb2      	ldr	r4, [pc, #712]	@ (8003560 <RI_GetRegCommandParser+0x384>)
 8003298:	f994 1000 	ldrsb.w	r1, [r4]
 800329c:	2900      	cmp	r1, #0
 800329e:	f000 8282 	beq.w	80037a6 <RI_GetRegCommandParser+0x5ca>
 80032a2:	2801      	cmp	r0, #1
 80032a4:	f340 822e 	ble.w	8003704 <RI_GetRegCommandParser+0x528>
 80032a8:	46b6      	mov	lr, r6
 80032aa:	f1c6 0201 	rsb	r2, r6, #1
 80032ae:	e002      	b.n	80032b6 <RI_GetRegCommandParser+0xda>
 80032b0:	4283      	cmp	r3, r0
 80032b2:	f280 8227 	bge.w	8003704 <RI_GetRegCommandParser+0x528>
    *tempdestString = *tempsrcString;
 80032b6:	f80e 1b01 	strb.w	r1, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80032ba:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
    *size = *size + 1U;
 80032be:	eb0e 0302 	add.w	r3, lr, r2
 80032c2:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80032c4:	2900      	cmp	r1, #0
 80032c6:	d1f3      	bne.n	80032b0 <RI_GetRegCommandParser+0xd4>
        txData = txData+size;
 80032c8:	469c      	mov	ip, r3
    *tempdestString = (int8_t)0;
 80032ca:	2200      	movs	r2, #0
 80032cc:	f88e 2000 	strb.w	r2, [lr]
        pHandle->txLength += size;
 80032d0:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        if (freeSpace >= 2U)
 80032d4:	b284      	uxth	r4, r0
    while (rxLength > 0U)
 80032d6:	eb0b 0209 	add.w	r2, fp, r9
        freeSpaceS16 = freeSpaceS16-size;
 80032da:	1ae0      	subs	r0, r4, r3
        pHandle->txLength += size;
 80032dc:	4419      	add	r1, r3
    while (rxLength > 0U)
 80032de:	b2ac      	uxth	r4, r5
 80032e0:	b293      	uxth	r3, r2
        pHandle->txLength += size;
 80032e2:	b289      	uxth	r1, r1
    while (rxLength > 0U)
 80032e4:	429c      	cmp	r4, r3
        pHandle->txLength += size;
 80032e6:	f8a8 100e 	strh.w	r1, [r8, #14]
        txData = txData+size;
 80032ea:	4466      	add	r6, ip
        freeSpaceS16 = freeSpaceS16-size;
 80032ec:	b200      	sxth	r0, r0
    while (rxLength > 0U)
 80032ee:	d18a      	bne.n	8003206 <RI_GetRegCommandParser+0x2a>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 80032f0:	2000      	movs	r0, #0
 80032f2:	e7a6      	b.n	8003242 <RI_GetRegCommandParser+0x66>
        if (freeSpace >= 2U)
 80032f4:	b284      	uxth	r4, r0
 80032f6:	2c01      	cmp	r4, #1
 80032f8:	d9be      	bls.n	8003278 <RI_GetRegCommandParser+0x9c>
          switch (regID)
 80032fa:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 80032fe:	f000 832e 	beq.w	800395e <RI_GetRegCommandParser+0x782>
 8003302:	d924      	bls.n	800334e <RI_GetRegCommandParser+0x172>
 8003304:	f5b3 6f69 	cmp.w	r3, #3728	@ 0xe90
 8003308:	f000 80e3 	beq.w	80034d2 <RI_GetRegCommandParser+0x2f6>
 800330c:	f240 80e5 	bls.w	80034da <RI_GetRegCommandParser+0x2fe>
 8003310:	42bb      	cmp	r3, r7
 8003312:	f000 8334 	beq.w	800397e <RI_GetRegCommandParser+0x7a2>
 8003316:	f240 810f 	bls.w	8003538 <RI_GetRegCommandParser+0x35c>
 800331a:	f241 6250 	movw	r2, #5712	@ 0x1650
 800331e:	4293      	cmp	r3, r2
 8003320:	f000 8322 	beq.w	8003968 <RI_GetRegCommandParser+0x78c>
 8003324:	f240 80f3 	bls.w	800350e <RI_GetRegCommandParser+0x332>
 8003328:	f641 02d0 	movw	r2, #6352	@ 0x18d0
 800332c:	4293      	cmp	r3, r2
 800332e:	f000 8379 	beq.w	8003a24 <RI_GetRegCommandParser+0x848>
 8003332:	f641 1210 	movw	r2, #6416	@ 0x1910
 8003336:	4293      	cmp	r3, r2
 8003338:	d156      	bne.n	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 800333a:	488a      	ldr	r0, [pc, #552]	@ (8003564 <RI_GetRegCommandParser+0x388>)
 800333c:	f005 f872 	bl	8008424 <PID_GetKPDivisorPOW2>
        pHandle->txLength += size;
 8003340:	f04f 0c02 	mov.w	ip, #2
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003344:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003346:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 800334a:	4663      	mov	r3, ip
 800334c:	e7c3      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 800334e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8003352:	f000 8302 	beq.w	800395a <RI_GetRegCommandParser+0x77e>
 8003356:	d919      	bls.n	800338c <RI_GetRegCommandParser+0x1b0>
 8003358:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 800335c:	f000 82f2 	beq.w	8003944 <RI_GetRegCommandParser+0x768>
 8003360:	f240 8173 	bls.w	800364a <RI_GetRegCommandParser+0x46e>
 8003364:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 8003368:	f000 82e7 	beq.w	800393a <RI_GetRegCommandParser+0x75e>
 800336c:	f240 8138 	bls.w	80035e0 <RI_GetRegCommandParser+0x404>
 8003370:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 8003374:	d138      	bne.n	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003376:	487c      	ldr	r0, [pc, #496]	@ (8003568 <RI_GetRegCommandParser+0x38c>)
 8003378:	f7fe fd08 	bl	8001d8c <MCI_GetIqdref>
        pHandle->txLength += size;
 800337c:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003380:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003382:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003386:	900e      	str	r0, [sp, #56]	@ 0x38
          *size = 2;
 8003388:	4663      	mov	r3, ip
 800338a:	e7a4      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 800338c:	f5b3 7f04 	cmp.w	r3, #528	@ 0x210
 8003390:	f000 82c8 	beq.w	8003924 <RI_GetRegCommandParser+0x748>
 8003394:	f240 814a 	bls.w	800362c <RI_GetRegCommandParser+0x450>
 8003398:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800339c:	f000 832b 	beq.w	80039f6 <RI_GetRegCommandParser+0x81a>
 80033a0:	f240 8131 	bls.w	8003606 <RI_GetRegCommandParser+0x42a>
 80033a4:	f5b3 7f54 	cmp.w	r3, #848	@ 0x350
 80033a8:	f000 8316 	beq.w	80039d8 <RI_GetRegCommandParser+0x7fc>
 80033ac:	f5b3 7f64 	cmp.w	r3, #912	@ 0x390
 80033b0:	d11a      	bne.n	80033e8 <RI_GetRegCommandParser+0x20c>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 80033b2:	f10d 010a 	add.w	r1, sp, #10
 80033b6:	486d      	ldr	r0, [pc, #436]	@ (800356c <RI_GetRegCommandParser+0x390>)
 80033b8:	aa15      	add	r2, sp, #84	@ 0x54
 80033ba:	f006 fe29 	bl	800a010 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 80033be:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 80033c2:	8033      	strh	r3, [r6, #0]
        pHandle->txLength += size;
 80033c4:	f04f 0c02 	mov.w	ip, #2
 80033c8:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 80033cc:	4663      	mov	r3, ip
 80033ce:	e782      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
        if (freeSpace > 0U)
 80033d0:	2800      	cmp	r0, #0
 80033d2:	f43f af51 	beq.w	8003278 <RI_GetRegCommandParser+0x9c>
          switch (regID)
 80033d6:	2b88      	cmp	r3, #136	@ 0x88
 80033d8:	f000 81da 	beq.w	8003790 <RI_GetRegCommandParser+0x5b4>
 80033dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80033de:	f000 81cc 	beq.w	800377a <RI_GetRegCommandParser+0x59e>
 80033e2:	2b48      	cmp	r3, #72	@ 0x48
 80033e4:	f000 81be 	beq.w	8003764 <RI_GetRegCommandParser+0x588>
 80033e8:	2005      	movs	r0, #5
 80033ea:	e72a      	b.n	8003242 <RI_GetRegCommandParser+0x66>
        if (freeSpace >= 4U)
 80033ec:	b284      	uxth	r4, r0
 80033ee:	2c03      	cmp	r4, #3
 80033f0:	f67f af42 	bls.w	8003278 <RI_GetRegCommandParser+0x9c>
          switch (regID)
 80033f4:	2bd8      	cmp	r3, #216	@ 0xd8
 80033f6:	f000 8259 	beq.w	80038ac <RI_GetRegCommandParser+0x6d0>
 80033fa:	f200 816c 	bhi.w	80036d6 <RI_GetRegCommandParser+0x4fa>
 80033fe:	2b58      	cmp	r3, #88	@ 0x58
 8003400:	f000 8268 	beq.w	80038d4 <RI_GetRegCommandParser+0x6f8>
 8003404:	2b98      	cmp	r3, #152	@ 0x98
 8003406:	f040 8159 	bne.w	80036bc <RI_GetRegCommandParser+0x4e0>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800340a:	4857      	ldr	r0, [pc, #348]	@ (8003568 <RI_GetRegCommandParser+0x38c>)
 800340c:	f7fe fc90 	bl	8001d30 <MCI_GetMecSpeedRefUnit>
 8003410:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003414:	0040      	lsls	r0, r0, #1
        pHandle->txLength += size;
 8003416:	f04f 0c04 	mov.w	ip, #4
 800341a:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800341e:	6030      	str	r0, [r6, #0]
          *size = 4;
 8003420:	4663      	mov	r3, ip
 8003422:	e758      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 8003424:	2be0      	cmp	r3, #224	@ 0xe0
 8003426:	d1df      	bne.n	80033e8 <RI_GetRegCommandParser+0x20c>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003428:	4b51      	ldr	r3, [pc, #324]	@ (8003570 <RI_GetRegCommandParser+0x394>)
 800342a:	681c      	ldr	r4, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800342c:	f994 1024 	ldrsb.w	r1, [r4, #36]	@ 0x24
 8003430:	2900      	cmp	r1, #0
 8003432:	f000 81b8 	beq.w	80037a6 <RI_GetRegCommandParser+0x5ca>
 8003436:	2801      	cmp	r0, #1
 8003438:	f340 8164 	ble.w	8003704 <RI_GetRegCommandParser+0x528>
 800343c:	3424      	adds	r4, #36	@ 0x24
 800343e:	46b6      	mov	lr, r6
 8003440:	f1c6 0201 	rsb	r2, r6, #1
 8003444:	e002      	b.n	800344c <RI_GetRegCommandParser+0x270>
 8003446:	4283      	cmp	r3, r0
 8003448:	f280 815c 	bge.w	8003704 <RI_GetRegCommandParser+0x528>
    *tempdestString = *tempsrcString;
 800344c:	f80e 1b01 	strb.w	r1, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003450:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
    *size = *size + 1U;
 8003454:	eb0e 0302 	add.w	r3, lr, r2
 8003458:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800345a:	2900      	cmp	r1, #0
 800345c:	d1f3      	bne.n	8003446 <RI_GetRegCommandParser+0x26a>
 800345e:	e733      	b.n	80032c8 <RI_GetRegCommandParser+0xec>
 8003460:	2be8      	cmp	r3, #232	@ 0xe8
 8003462:	d1c1      	bne.n	80033e8 <RI_GetRegCommandParser+0x20c>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003464:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 8003466:	280f      	cmp	r0, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003468:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 800346a:	f67f af05 	bls.w	8003278 <RI_GetRegCommandParser+0x9c>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 800346e:	4b41      	ldr	r3, [pc, #260]	@ (8003574 <RI_GetRegCommandParser+0x398>)
        if (freeSpace >= 2U)
 8003470:	b284      	uxth	r4, r0
 8003472:	e1b9      	b.n	80037e8 <RI_GetRegCommandParser+0x60c>
 8003474:	f5b3 7f0a 	cmp.w	r3, #552	@ 0x228
 8003478:	f000 81da 	beq.w	8003830 <RI_GetRegCommandParser+0x654>
 800347c:	f5b3 7f5a 	cmp.w	r3, #872	@ 0x368
 8003480:	d115      	bne.n	80034ae <RI_GetRegCommandParser+0x2d2>
            *rawSize = 4;
 8003482:	2304      	movs	r3, #4
 8003484:	8033      	strh	r3, [r6, #0]
        if (freeSpace >= 2U)
 8003486:	b284      	uxth	r4, r0
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003488:	4837      	ldr	r0, [pc, #220]	@ (8003568 <RI_GetRegCommandParser+0x38c>)
 800348a:	f7fe fc7f 	bl	8001d8c <MCI_GetIqdref>
 800348e:	8070      	strh	r0, [r6, #2]
 8003490:	9004      	str	r0, [sp, #16]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003492:	4835      	ldr	r0, [pc, #212]	@ (8003568 <RI_GetRegCommandParser+0x38c>)
 8003494:	f7fe fc7a 	bl	8001d8c <MCI_GetIqdref>
 8003498:	9003      	str	r0, [sp, #12]
 800349a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800349e:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 80034a0:	8833      	ldrh	r3, [r6, #0]
        pHandle->txLength += size;
 80034a2:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        *size = (*rawSize) + 2U;
 80034a6:	3302      	adds	r3, #2
 80034a8:	b29b      	uxth	r3, r3
        txData = txData+size;
 80034aa:	469c      	mov	ip, r3
 80034ac:	e713      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 80034ae:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 80034b2:	d199      	bne.n	80033e8 <RI_GetRegCommandParser+0x20c>
            *rawSize = 4;
 80034b4:	2304      	movs	r3, #4
 80034b6:	8033      	strh	r3, [r6, #0]
        if (freeSpace >= 2U)
 80034b8:	b284      	uxth	r4, r0
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80034ba:	482b      	ldr	r0, [pc, #172]	@ (8003568 <RI_GetRegCommandParser+0x38c>)
 80034bc:	f7fe fc26 	bl	8001d0c <MCI_GetLastRampFinalTorque>
 80034c0:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80034c2:	4829      	ldr	r0, [pc, #164]	@ (8003568 <RI_GetRegCommandParser+0x38c>)
 80034c4:	f7fe fc26 	bl	8001d14 <MCI_GetLastRampFinalDuration>
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80034c8:	80b0      	strh	r0, [r6, #4]
 80034ca:	e7e9      	b.n	80034a0 <RI_GetRegCommandParser+0x2c4>
 80034cc:	f5b3 6f65 	cmp.w	r3, #3664	@ 0xe50
 80034d0:	d18a      	bne.n	80033e8 <RI_GetRegCommandParser+0x20c>
 80034d2:	f04f 0c02 	mov.w	ip, #2
 80034d6:	4663      	mov	r3, ip
 80034d8:	e6fd      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 80034da:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 80034de:	f000 8297 	beq.w	8003a10 <RI_GetRegCommandParser+0x834>
 80034e2:	d966      	bls.n	80035b2 <RI_GetRegCommandParser+0x3d6>
 80034e4:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 80034e8:	f000 8287 	beq.w	80039fa <RI_GetRegCommandParser+0x81e>
 80034ec:	d954      	bls.n	8003598 <RI_GetRegCommandParser+0x3bc>
 80034ee:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 80034f2:	d1eb      	bne.n	80034cc <RI_GetRegCommandParser+0x2f0>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 80034f4:	481d      	ldr	r0, [pc, #116]	@ (800356c <RI_GetRegCommandParser+0x390>)
 80034f6:	f006 fd6d 	bl	8009fd4 <STO_PLL_GetEstimatedBemf>
 80034fa:	9005      	str	r0, [sp, #20]
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80034fc:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003500:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003502:	f04f 0c02 	mov.w	ip, #2
 8003506:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 800350a:	4663      	mov	r3, ip
 800350c:	e6e3      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 800350e:	f241 52d0 	movw	r2, #5584	@ 0x15d0
 8003512:	4293      	cmp	r3, r2
 8003514:	f000 82b8 	beq.w	8003a88 <RI_GetRegCommandParser+0x8ac>
 8003518:	f241 6210 	movw	r2, #5648	@ 0x1610
 800351c:	4293      	cmp	r3, r2
 800351e:	f47f af63 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8003522:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <RI_GetRegCommandParser+0x39c>)
 8003524:	6818      	ldr	r0, [r3, #0]
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003526:	f004 ff87 	bl	8008438 <PID_GetKIDivisorPOW2>
        pHandle->txLength += size;
 800352a:	f04f 0c02 	mov.w	ip, #2
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 800352e:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003530:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003534:	4663      	mov	r3, ip
 8003536:	e6ce      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 8003538:	f241 42d0 	movw	r2, #5328	@ 0x14d0
 800353c:	4293      	cmp	r3, r2
 800353e:	f000 8273 	beq.w	8003a28 <RI_GetRegCommandParser+0x84c>
 8003542:	d91d      	bls.n	8003580 <RI_GetRegCommandParser+0x3a4>
 8003544:	f241 5210 	movw	r2, #5392	@ 0x1510
 8003548:	4293      	cmp	r3, r2
 800354a:	f000 8271 	beq.w	8003a30 <RI_GetRegCommandParser+0x854>
 800354e:	f241 5250 	movw	r2, #5456	@ 0x1550
 8003552:	4293      	cmp	r3, r2
 8003554:	f47f af48 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8003558:	4b08      	ldr	r3, [pc, #32]	@ (800357c <RI_GetRegCommandParser+0x3a0>)
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	e7e3      	b.n	8003526 <RI_GetRegCommandParser+0x34a>
 800355e:	bf00      	nop
 8003560:	0800a4b8 	.word	0x0800a4b8
 8003564:	20000180 	.word	0x20000180
 8003568:	200008e8 	.word	0x200008e8
 800356c:	2000014c 	.word	0x2000014c
 8003570:	20000480 	.word	0x20000480
 8003574:	20000484 	.word	0x20000484
 8003578:	2000000c 	.word	0x2000000c
 800357c:	20000008 	.word	0x20000008
 8003580:	f241 4250 	movw	r2, #5200	@ 0x1450
 8003584:	4293      	cmp	r3, r2
 8003586:	f000 8251 	beq.w	8003a2c <RI_GetRegCommandParser+0x850>
 800358a:	f241 4290 	movw	r2, #5264	@ 0x1490
 800358e:	4293      	cmp	r3, r2
 8003590:	f47f af2a 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8003594:	48b9      	ldr	r0, [pc, #740]	@ (800387c <RI_GetRegCommandParser+0x6a0>)
 8003596:	e7c6      	b.n	8003526 <RI_GetRegCommandParser+0x34a>
 8003598:	f5b3 6f3d 	cmp.w	r3, #3024	@ 0xbd0
 800359c:	f000 8269 	beq.w	8003a72 <RI_GetRegCommandParser+0x896>
 80035a0:	f5b3 6f41 	cmp.w	r3, #3088	@ 0xc10
 80035a4:	f47f af20 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 80035a8:	48b5      	ldr	r0, [pc, #724]	@ (8003880 <RI_GetRegCommandParser+0x6a4>)
 80035aa:	f006 fd1f 	bl	8009fec <STO_PLL_GetEstimatedCurrent>
 80035ae:	9007      	str	r0, [sp, #28]
 80035b0:	e7a4      	b.n	80034fc <RI_GetRegCommandParser+0x320>
 80035b2:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 80035b6:	f000 8251 	beq.w	8003a5c <RI_GetRegCommandParser+0x880>
 80035ba:	d958      	bls.n	800366e <RI_GetRegCommandParser+0x492>
 80035bc:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 80035c0:	f000 8247 	beq.w	8003a52 <RI_GetRegCommandParser+0x876>
 80035c4:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 80035c8:	f47f af0e 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80035cc:	48ac      	ldr	r0, [pc, #688]	@ (8003880 <RI_GetRegCommandParser+0x6a4>)
 80035ce:	f006 f96d 	bl	80098ac <SPD_GetElAngle>
        pHandle->txLength += size;
 80035d2:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80035d6:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80035d8:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 80035dc:	4663      	mov	r3, ip
 80035de:	e67a      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 80035e0:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 80035e4:	f000 8230 	beq.w	8003a48 <RI_GetRegCommandParser+0x86c>
 80035e8:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 80035ec:	f47f aefc 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 80035f0:	48a4      	ldr	r0, [pc, #656]	@ (8003884 <RI_GetRegCommandParser+0x6a8>)
 80035f2:	f7fe fbbd 	bl	8001d70 <MCI_GetIqd>
        pHandle->txLength += size;
 80035f6:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetIqd(pMCIN).q;
 80035fa:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80035fc:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003600:	9010      	str	r0, [sp, #64]	@ 0x40
          *size = 2;
 8003602:	4663      	mov	r3, ip
 8003604:	e667      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 8003606:	f5b3 7f24 	cmp.w	r3, #656	@ 0x290
 800360a:	f000 8216 	beq.w	8003a3a <RI_GetRegCommandParser+0x85e>
 800360e:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
 8003612:	f47f aee9 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003616:	4b9c      	ldr	r3, [pc, #624]	@ (8003888 <RI_GetRegCommandParser+0x6ac>)
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	f004 fefd 	bl	8008418 <PID_GetKI>
        pHandle->txLength += size;
 800361e:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003622:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003624:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003628:	4663      	mov	r3, ip
 800362a:	e654      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 800362c:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003630:	f000 8208 	beq.w	8003a44 <RI_GetRegCommandParser+0x868>
 8003634:	d928      	bls.n	8003688 <RI_GetRegCommandParser+0x4ac>
 8003636:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800363a:	f000 8201 	beq.w	8003a40 <RI_GetRegCommandParser+0x864>
 800363e:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8003642:	f47f aed1 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003646:	4b91      	ldr	r3, [pc, #580]	@ (800388c <RI_GetRegCommandParser+0x6b0>)
 8003648:	e7e6      	b.n	8003618 <RI_GetRegCommandParser+0x43c>
 800364a:	f5b3 6fba 	cmp.w	r3, #1488	@ 0x5d0
 800364e:	f000 81b8 	beq.w	80039c2 <RI_GetRegCommandParser+0x7e6>
 8003652:	d921      	bls.n	8003698 <RI_GetRegCommandParser+0x4bc>
 8003654:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003658:	f000 81a8 	beq.w	80039ac <RI_GetRegCommandParser+0x7d0>
 800365c:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003660:	f47f aec2 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8003664:	4887      	ldr	r0, [pc, #540]	@ (8003884 <RI_GetRegCommandParser+0x6a8>)
 8003666:	f7fe fb67 	bl	8001d38 <MCI_GetIab>
 800366a:	9013      	str	r0, [sp, #76]	@ 0x4c
 800366c:	e746      	b.n	80034fc <RI_GetRegCommandParser+0x320>
 800366e:	f5b3 6f1d 	cmp.w	r3, #2512	@ 0x9d0
 8003672:	f000 8190 	beq.w	8003996 <RI_GetRegCommandParser+0x7ba>
 8003676:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 800367a:	f47f aeb5 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 800367e:	4881      	ldr	r0, [pc, #516]	@ (8003884 <RI_GetRegCommandParser+0x6a8>)
 8003680:	f7fe fb92 	bl	8001da8 <MCI_GetVqd>
 8003684:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003686:	e739      	b.n	80034fc <RI_GetRegCommandParser+0x320>
 8003688:	2b90      	cmp	r3, #144	@ 0x90
 800368a:	f000 817a 	beq.w	8003982 <RI_GetRegCommandParser+0x7a6>
 800368e:	2bd0      	cmp	r3, #208	@ 0xd0
 8003690:	f47f aeaa 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003694:	4879      	ldr	r0, [pc, #484]	@ (800387c <RI_GetRegCommandParser+0x6a0>)
 8003696:	e7c0      	b.n	800361a <RI_GetRegCommandParser+0x43e>
 8003698:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 800369c:	f000 81cb 	beq.w	8003a36 <RI_GetRegCommandParser+0x85a>
 80036a0:	f5b3 6fb2 	cmp.w	r3, #1424	@ 0x590
 80036a4:	f47f aea0 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80036a8:	4879      	ldr	r0, [pc, #484]	@ (8003890 <RI_GetRegCommandParser+0x6b4>)
 80036aa:	f004 fc01 	bl	8007eb0 <VBS_GetAvBusVoltage_V>
        pHandle->txLength += size;
 80036ae:	f04f 0c02 	mov.w	ip, #2
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80036b2:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80036b4:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 80036b8:	4663      	mov	r3, ip
 80036ba:	e60c      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 80036bc:	2b18      	cmp	r3, #24
 80036be:	f47f ae93 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80036c2:	4870      	ldr	r0, [pc, #448]	@ (8003884 <RI_GetRegCommandParser+0x6a8>)
 80036c4:	f7fe faf4 	bl	8001cb0 <MCI_GetFaultState>
        pHandle->txLength += size;
 80036c8:	f04f 0c04 	mov.w	ip, #4
 80036cc:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80036d0:	6030      	str	r0, [r6, #0]
          *size = 4;
 80036d2:	4663      	mov	r3, ip
 80036d4:	e5ff      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
 80036d6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80036da:	f000 80f1 	beq.w	80038c0 <RI_GetRegCommandParser+0x6e4>
 80036de:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f47f ae80 	bne.w	80033e8 <RI_GetRegCommandParser+0x20c>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 80036e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003894 <RI_GetRegCommandParser+0x6b8>)
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	f004 ff2a 	bl	8008544 <PQD_GetAvrgElMotorPowerW>
 80036f0:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 80036f4:	9b01      	ldr	r3, [sp, #4]
 80036f6:	6033      	str	r3, [r6, #0]
        pHandle->txLength += size;
 80036f8:	f04f 0c04 	mov.w	ip, #4
 80036fc:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 4;
 8003700:	4663      	mov	r3, ip
 8003702:	e5e8      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003704:	2006      	movs	r0, #6
 8003706:	e59c      	b.n	8003242 <RI_GetRegCommandParser+0x66>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8003708:	4b63      	ldr	r3, [pc, #396]	@ (8003898 <RI_GetRegCommandParser+0x6bc>)
 800370a:	681c      	ldr	r4, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800370c:	f994 1000 	ldrsb.w	r1, [r4]
 8003710:	2900      	cmp	r1, #0
 8003712:	d048      	beq.n	80037a6 <RI_GetRegCommandParser+0x5ca>
 8003714:	2801      	cmp	r0, #1
 8003716:	ddf5      	ble.n	8003704 <RI_GetRegCommandParser+0x528>
 8003718:	46b6      	mov	lr, r6
 800371a:	f1c6 0201 	rsb	r2, r6, #1
 800371e:	e001      	b.n	8003724 <RI_GetRegCommandParser+0x548>
 8003720:	4283      	cmp	r3, r0
 8003722:	daef      	bge.n	8003704 <RI_GetRegCommandParser+0x528>
    *tempdestString = *tempsrcString;
 8003724:	f80e 1b01 	strb.w	r1, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003728:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
    *size = *size + 1U;
 800372c:	eb0e 0302 	add.w	r3, lr, r2
 8003730:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003732:	2900      	cmp	r1, #0
 8003734:	d1f4      	bne.n	8003720 <RI_GetRegCommandParser+0x544>
 8003736:	e5c7      	b.n	80032c8 <RI_GetRegCommandParser+0xec>
 8003738:	4c58      	ldr	r4, [pc, #352]	@ (800389c <RI_GetRegCommandParser+0x6c0>)
 800373a:	f994 1000 	ldrsb.w	r1, [r4]
 800373e:	b391      	cbz	r1, 80037a6 <RI_GetRegCommandParser+0x5ca>
 8003740:	2801      	cmp	r0, #1
 8003742:	dddf      	ble.n	8003704 <RI_GetRegCommandParser+0x528>
 8003744:	46b6      	mov	lr, r6
 8003746:	f1c6 0201 	rsb	r2, r6, #1
 800374a:	e001      	b.n	8003750 <RI_GetRegCommandParser+0x574>
 800374c:	4283      	cmp	r3, r0
 800374e:	dad9      	bge.n	8003704 <RI_GetRegCommandParser+0x528>
    *tempdestString = *tempsrcString;
 8003750:	f80e 1b01 	strb.w	r1, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003754:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
    *size = *size + 1U;
 8003758:	eb0e 0302 	add.w	r3, lr, r2
 800375c:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800375e:	2900      	cmp	r1, #0
 8003760:	d1f4      	bne.n	800374c <RI_GetRegCommandParser+0x570>
 8003762:	e5b1      	b.n	80032c8 <RI_GetRegCommandParser+0xec>
        if (freeSpace >= 2U)
 8003764:	b284      	uxth	r4, r0
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003766:	4847      	ldr	r0, [pc, #284]	@ (8003884 <RI_GetRegCommandParser+0x6a8>)
 8003768:	f7fe fa58 	bl	8001c1c <MCI_GetSTMState>
        if (freeSpace >= 2U)
 800376c:	f04f 0c01 	mov.w	ip, #1
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003770:	7030      	strb	r0, [r6, #0]
        pHandle->txLength += size;
 8003772:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 1;
 8003776:	4663      	mov	r3, ip
 8003778:	e5ad      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
        if (freeSpace >= 2U)
 800377a:	b284      	uxth	r4, r0
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 800377c:	4848      	ldr	r0, [pc, #288]	@ (80038a0 <RI_GetRegCommandParser+0x6c4>)
 800377e:	f006 f881 	bl	8009884 <RUC_GetNumberOfPhases>
        if (freeSpace >= 2U)
 8003782:	f04f 0c01 	mov.w	ip, #1
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 8003786:	7030      	strb	r0, [r6, #0]
        pHandle->txLength += size;
 8003788:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 1;
 800378c:	4663      	mov	r3, ip
 800378e:	e5a2      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
        if (freeSpace >= 2U)
 8003790:	b284      	uxth	r4, r0
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003792:	483c      	ldr	r0, [pc, #240]	@ (8003884 <RI_GetRegCommandParser+0x6a8>)
 8003794:	f7fe fa92 	bl	8001cbc <MCI_GetControlMode>
        if (freeSpace >= 2U)
 8003798:	f04f 0c01 	mov.w	ip, #1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 800379c:	7030      	strb	r0, [r6, #0]
        pHandle->txLength += size;
 800379e:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 1;
 80037a2:	4663      	mov	r3, ip
 80037a4:	e597      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80037a6:	f04f 0c01 	mov.w	ip, #1
 80037aa:	46b6      	mov	lr, r6
  *size= 1U ; /* /0 is the min String size */
 80037ac:	4663      	mov	r3, ip
 80037ae:	e58c      	b.n	80032ca <RI_GetRegCommandParser+0xee>
        if (freeSpace >= 2U)
 80037b0:	b284      	uxth	r4, r0
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80037b2:	4834      	ldr	r0, [pc, #208]	@ (8003884 <RI_GetRegCommandParser+0x6a8>)
 80037b4:	f7fe faa6 	bl	8001d04 <MCI_GetLastRampFinalSpeed>
 80037b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80037bc:	0040      	lsls	r0, r0, #1
 80037be:	f8c6 0002 	str.w	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80037c2:	4830      	ldr	r0, [pc, #192]	@ (8003884 <RI_GetRegCommandParser+0x6a8>)
 80037c4:	f7fe faa6 	bl	8001d14 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80037c8:	2306      	movs	r3, #6
 80037ca:	8033      	strh	r3, [r6, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80037cc:	80f0      	strh	r0, [r6, #6]
        if (freeSpace >= 2U)
 80037ce:	f04f 0c08 	mov.w	ip, #8
        pHandle->txLength += size;
 80037d2:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        *size = (*rawSize) + 2U;
 80037d6:	4663      	mov	r3, ip
 80037d8:	e57d      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 80037da:	230e      	movs	r3, #14
            if ((*rawSize) +2  > freeSpace)
 80037dc:	280f      	cmp	r0, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 80037de:	8033      	strh	r3, [r6, #0]
            if ((*rawSize) +2  > freeSpace)
 80037e0:	f77f ad4a 	ble.w	8003278 <RI_GetRegCommandParser+0x9c>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 80037e4:	4b2f      	ldr	r3, [pc, #188]	@ (80038a4 <RI_GetRegCommandParser+0x6c8>)
        if (freeSpace >= 2U)
 80037e6:	b284      	uxth	r4, r0
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80037f2:	f8c2 e008 	str.w	lr, [r2, #8]
 80037f6:	6010      	str	r0, [r2, #0]
 80037f8:	6051      	str	r1, [r2, #4]
 80037fa:	899b      	ldrh	r3, [r3, #12]
 80037fc:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 80037fe:	f04f 0c10 	mov.w	ip, #16
        pHandle->txLength += size;
 8003802:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        *size = (*rawSize) + 2U;
 8003806:	4663      	mov	r3, ip
 8003808:	e565      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800380a:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 800380c:	280b      	cmp	r0, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800380e:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003810:	f67f ad32 	bls.w	8003278 <RI_GetRegCommandParser+0x9c>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003814:	4b24      	ldr	r3, [pc, #144]	@ (80038a8 <RI_GetRegCommandParser+0x6cc>)
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	6011      	str	r1, [r2, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	891b      	ldrh	r3, [r3, #8]
 800381e:	8113      	strh	r3, [r2, #8]
        if (freeSpace >= 2U)
 8003820:	f04f 0c0c 	mov.w	ip, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003824:	6051      	str	r1, [r2, #4]
        pHandle->txLength += size;
 8003826:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        if (freeSpace >= 2U)
 800382a:	b284      	uxth	r4, r0
        *size = (*rawSize) + 2U;
 800382c:	4663      	mov	r3, ip
 800382e:	e552      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003830:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > freeSpace)
 8003832:	2829      	cmp	r0, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003834:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003836:	f67f ad1f 	bls.w	8003278 <RI_GetRegCommandParser+0x9c>
 800383a:	f04f 0a00 	mov.w	sl, #0
 800383e:	9501      	str	r5, [sp, #4]
 8003840:	4634      	mov	r4, r6
 8003842:	4655      	mov	r5, sl
 8003844:	4682      	mov	sl, r0
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8003846:	b2e9      	uxtb	r1, r5
 8003848:	aa15      	add	r2, sp, #84	@ 0x54
 800384a:	4815      	ldr	r0, [pc, #84]	@ (80038a0 <RI_GetRegCommandParser+0x6c4>)
 800384c:	f006 f81e 	bl	800988c <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003850:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	@ 0x56
 8003854:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003858:	0052      	lsls	r2, r2, #1
 800385a:	f8c4 2002 	str.w	r2, [r4, #2]
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 800385e:	f8bd 2058 	ldrh.w	r2, [sp, #88]	@ 0x58
 8003862:	80e2      	strh	r2, [r4, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8003864:	3501      	adds	r5, #1
                *durationms  = revUpPhase.hDurationms;
 8003866:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 800386a:	f824 2f08 	strh.w	r2, [r4, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 800386e:	2d05      	cmp	r5, #5
 8003870:	d1e9      	bne.n	8003846 <RI_GetRegCommandParser+0x66a>
        if (freeSpace >= 2U)
 8003872:	9d01      	ldr	r5, [sp, #4]
 8003874:	fa1f f48a 	uxth.w	r4, sl
 8003878:	e612      	b.n	80034a0 <RI_GetRegCommandParser+0x2c4>
 800387a:	bf00      	nop
 800387c:	20000440 	.word	0x20000440
 8003880:	2000014c 	.word	0x2000014c
 8003884:	200008e8 	.word	0x200008e8
 8003888:	20000008 	.word	0x20000008
 800388c:	2000000c 	.word	0x2000000c
 8003890:	200000e4 	.word	0x200000e4
 8003894:	20000004 	.word	0x20000004
 8003898:	20000488 	.word	0x20000488
 800389c:	0800a490 	.word	0x0800a490
 80038a0:	2000033c 	.word	0x2000033c
 80038a4:	2000047c 	.word	0x2000047c
 80038a8:	0800a484 	.word	0x0800a484
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 80038ac:	4878      	ldr	r0, [pc, #480]	@ (8003a90 <RI_GetRegCommandParser+0x8b4>)
 80038ae:	f006 fbc5 	bl	800a03c <STO_PLL_GetEstimatedBemfLevel>
        pHandle->txLength += size;
 80038b2:	f04f 0c04 	mov.w	ip, #4
 80038b6:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 80038ba:	6030      	str	r0, [r6, #0]
          *size = 4;
 80038bc:	4663      	mov	r3, ip
 80038be:	e50a      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 80038c0:	4873      	ldr	r0, [pc, #460]	@ (8003a90 <RI_GetRegCommandParser+0x8b4>)
 80038c2:	f006 fbbf 	bl	800a044 <STO_PLL_GetObservedBemfLevel>
        pHandle->txLength += size;
 80038c6:	f04f 0c04 	mov.w	ip, #4
 80038ca:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 80038ce:	6030      	str	r0, [r6, #0]
          *size = 4;
 80038d0:	4663      	mov	r3, ip
 80038d2:	e500      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80038d4:	486f      	ldr	r0, [pc, #444]	@ (8003a94 <RI_GetRegCommandParser+0x8b8>)
 80038d6:	f7fe fa23 	bl	8001d20 <MCI_GetAvrgMecSpeedUnit>
 80038da:	e599      	b.n	8003410 <RI_GetRegCommandParser+0x234>
  uint8_t retVal = MCP_CMD_NOK;
 80038dc:	2001      	movs	r0, #1
 80038de:	e4b0      	b.n	8003242 <RI_GetRegCommandParser+0x66>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80038e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003a98 <RI_GetRegCommandParser+0x8bc>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f103 0a30 	add.w	sl, r3, #48	@ 0x30
 80038e8:	f8d3 c000 	ldr.w	ip, [r3]
 80038ec:	685c      	ldr	r4, [r3, #4]
 80038ee:	6899      	ldr	r1, [r3, #8]
 80038f0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80038f4:	f8c2 e00c 	str.w	lr, [r2, #12]
 80038f8:	3310      	adds	r3, #16
 80038fa:	4553      	cmp	r3, sl
 80038fc:	f8c2 c000 	str.w	ip, [r2]
 8003900:	6054      	str	r4, [r2, #4]
 8003902:	6091      	str	r1, [r2, #8]
 8003904:	f102 0210 	add.w	r2, r2, #16
 8003908:	d1ee      	bne.n	80038e8 <RI_GetRegCommandParser+0x70c>
 800390a:	6859      	ldr	r1, [r3, #4]
        if (freeSpace >= 2U)
 800390c:	b284      	uxth	r4, r0
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	6093      	str	r3, [r2, #8]
 8003914:	6010      	str	r0, [r2, #0]
 8003916:	6051      	str	r1, [r2, #4]
        if (freeSpace >= 2U)
 8003918:	f04f 0c3e 	mov.w	ip, #62	@ 0x3e
        pHandle->txLength += size;
 800391c:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        *size = (*rawSize) + 2U;
 8003920:	4663      	mov	r3, ip
 8003922:	e4d8      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003924:	4b5d      	ldr	r3, [pc, #372]	@ (8003a9c <RI_GetRegCommandParser+0x8c0>)
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	f004 fda2 	bl	8008470 <PID_GetKD>
        pHandle->txLength += size;
 800392c:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003930:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003932:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003936:	4663      	mov	r3, ip
 8003938:	e4cd      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800393a:	4856      	ldr	r0, [pc, #344]	@ (8003a94 <RI_GetRegCommandParser+0x8b8>)
 800393c:	f7fe fa18 	bl	8001d70 <MCI_GetIqd>
 8003940:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003942:	e5db      	b.n	80034fc <RI_GetRegCommandParser+0x320>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003944:	4853      	ldr	r0, [pc, #332]	@ (8003a94 <RI_GetRegCommandParser+0x8b8>)
 8003946:	f7fe fa05 	bl	8001d54 <MCI_GetIalphabeta>
        pHandle->txLength += size;
 800394a:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800394e:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003950:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003954:	9012      	str	r0, [sp, #72]	@ 0x48
          *size = 2;
 8003956:	4663      	mov	r3, ip
 8003958:	e4bd      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 800395a:	4851      	ldr	r0, [pc, #324]	@ (8003aa0 <RI_GetRegCommandParser+0x8c4>)
 800395c:	e65d      	b.n	800361a <RI_GetRegCommandParser+0x43e>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800395e:	484d      	ldr	r0, [pc, #308]	@ (8003a94 <RI_GetRegCommandParser+0x8b8>)
 8003960:	f7fe fa14 	bl	8001d8c <MCI_GetIqdref>
 8003964:	900d      	str	r0, [sp, #52]	@ 0x34
 8003966:	e5c9      	b.n	80034fc <RI_GetRegCommandParser+0x320>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003968:	4b4c      	ldr	r3, [pc, #304]	@ (8003a9c <RI_GetRegCommandParser+0x8c0>)
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	f004 fd84 	bl	8008478 <PID_GetKDDivisorPOW2>
        pHandle->txLength += size;
 8003970:	f04f 0c02 	mov.w	ip, #2
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003974:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003976:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 800397a:	4663      	mov	r3, ip
 800397c:	e4ab      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 800397e:	4b49      	ldr	r3, [pc, #292]	@ (8003aa4 <RI_GetRegCommandParser+0x8c8>)
 8003980:	e7f3      	b.n	800396a <RI_GetRegCommandParser+0x78e>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8003982:	4849      	ldr	r0, [pc, #292]	@ (8003aa8 <RI_GetRegCommandParser+0x8cc>)
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8003984:	f004 fd44 	bl	8008410 <PID_GetKP>
        pHandle->txLength += size;
 8003988:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 800398c:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 800398e:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003992:	4663      	mov	r3, ip
 8003994:	e49f      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003996:	483f      	ldr	r0, [pc, #252]	@ (8003a94 <RI_GetRegCommandParser+0x8b8>)
 8003998:	f7fe fa06 	bl	8001da8 <MCI_GetVqd>
        pHandle->txLength += size;
 800399c:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80039a0:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80039a2:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80039a6:	900c      	str	r0, [sp, #48]	@ 0x30
          *size = 2;
 80039a8:	4663      	mov	r3, ip
 80039aa:	e494      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80039ac:	4839      	ldr	r0, [pc, #228]	@ (8003a94 <RI_GetRegCommandParser+0x8b8>)
 80039ae:	f7fe f9c3 	bl	8001d38 <MCI_GetIab>
        pHandle->txLength += size;
 80039b2:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetIab(pMCIN).a;
 80039b6:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80039b8:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetIab(pMCIN).a;
 80039bc:	9014      	str	r0, [sp, #80]	@ 0x50
          *size = 2;
 80039be:	4663      	mov	r3, ip
 80039c0:	e489      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 80039c2:	4b3a      	ldr	r3, [pc, #232]	@ (8003aac <RI_GetRegCommandParser+0x8d0>)
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	f004 fd05 	bl	80083d4 <NTC_GetAvTemp_C>
        pHandle->txLength += size;
 80039ca:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 80039ce:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80039d0:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 80039d4:	4663      	mov	r3, ip
 80039d6:	e47e      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 80039d8:	f10d 010a 	add.w	r1, sp, #10
 80039dc:	482c      	ldr	r0, [pc, #176]	@ (8003a90 <RI_GetRegCommandParser+0x8b4>)
 80039de:	aa15      	add	r2, sp, #84	@ 0x54
 80039e0:	f006 fb16 	bl	800a010 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 80039e4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80039e8:	8033      	strh	r3, [r6, #0]
        pHandle->txLength += size;
 80039ea:	f04f 0c02 	mov.w	ip, #2
 80039ee:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 80039f2:	4663      	mov	r3, ip
 80039f4:	e46f      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 80039f6:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa4 <RI_GetRegCommandParser+0x8c8>)
 80039f8:	e795      	b.n	8003926 <RI_GetRegCommandParser+0x74a>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 80039fa:	4825      	ldr	r0, [pc, #148]	@ (8003a90 <RI_GetRegCommandParser+0x8b4>)
 80039fc:	f006 faea 	bl	8009fd4 <STO_PLL_GetEstimatedBemf>
        pHandle->txLength += size;
 8003a00:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003a04:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003a06:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003a0a:	9006      	str	r0, [sp, #24]
          *size = 2;
 8003a0c:	4663      	mov	r3, ip
 8003a0e:	e462      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003a10:	481f      	ldr	r0, [pc, #124]	@ (8003a90 <RI_GetRegCommandParser+0x8b4>)
 8003a12:	f005 ff8d 	bl	8009930 <SPD_GetS16Speed>
        pHandle->txLength += size;
 8003a16:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003a1a:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003a1c:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003a20:	4663      	mov	r3, ip
 8003a22:	e458      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003a24:	481e      	ldr	r0, [pc, #120]	@ (8003aa0 <RI_GetRegCommandParser+0x8c4>)
 8003a26:	e57e      	b.n	8003526 <RI_GetRegCommandParser+0x34a>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8003a28:	481f      	ldr	r0, [pc, #124]	@ (8003aa8 <RI_GetRegCommandParser+0x8cc>)
 8003a2a:	e79f      	b.n	800396c <RI_GetRegCommandParser+0x790>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8003a2c:	481e      	ldr	r0, [pc, #120]	@ (8003aa8 <RI_GetRegCommandParser+0x8cc>)
 8003a2e:	e485      	b.n	800333c <RI_GetRegCommandParser+0x160>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8003a30:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa4 <RI_GetRegCommandParser+0x8c8>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	e482      	b.n	800333c <RI_GetRegCommandParser+0x160>
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 8003a36:	481a      	ldr	r0, [pc, #104]	@ (8003aa0 <RI_GetRegCommandParser+0x8c4>)
 8003a38:	e7a4      	b.n	8003984 <RI_GetRegCommandParser+0x7a8>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa4 <RI_GetRegCommandParser+0x8c8>)
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	e7a1      	b.n	8003984 <RI_GetRegCommandParser+0x7a8>
 8003a40:	4b16      	ldr	r3, [pc, #88]	@ (8003a9c <RI_GetRegCommandParser+0x8c0>)
 8003a42:	e7fb      	b.n	8003a3c <RI_GetRegCommandParser+0x860>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8003a44:	4818      	ldr	r0, [pc, #96]	@ (8003aa8 <RI_GetRegCommandParser+0x8cc>)
 8003a46:	e76f      	b.n	8003928 <RI_GetRegCommandParser+0x74c>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8003a48:	4812      	ldr	r0, [pc, #72]	@ (8003a94 <RI_GetRegCommandParser+0x8b8>)
 8003a4a:	f7fe f983 	bl	8001d54 <MCI_GetIalphabeta>
 8003a4e:	9011      	str	r0, [sp, #68]	@ 0x44
 8003a50:	e554      	b.n	80034fc <RI_GetRegCommandParser+0x320>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8003a52:	4810      	ldr	r0, [pc, #64]	@ (8003a94 <RI_GetRegCommandParser+0x8b8>)
 8003a54:	f7fe f9b6 	bl	8001dc4 <MCI_GetValphabeta>
 8003a58:	9009      	str	r0, [sp, #36]	@ 0x24
 8003a5a:	e54f      	b.n	80034fc <RI_GetRegCommandParser+0x320>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003a5c:	480d      	ldr	r0, [pc, #52]	@ (8003a94 <RI_GetRegCommandParser+0x8b8>)
 8003a5e:	f7fe f9b1 	bl	8001dc4 <MCI_GetValphabeta>
        pHandle->txLength += size;
 8003a62:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003a66:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003a68:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003a6c:	900a      	str	r0, [sp, #40]	@ 0x28
          *size = 2;
 8003a6e:	4663      	mov	r3, ip
 8003a70:	e431      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003a72:	4807      	ldr	r0, [pc, #28]	@ (8003a90 <RI_GetRegCommandParser+0x8b4>)
 8003a74:	f006 faba 	bl	8009fec <STO_PLL_GetEstimatedCurrent>
        pHandle->txLength += size;
 8003a78:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003a7c:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003a7e:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003a82:	9008      	str	r0, [sp, #32]
          *size = 2;
 8003a84:	4663      	mov	r3, ip
 8003a86:	e426      	b.n	80032d6 <RI_GetRegCommandParser+0xfa>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8003a88:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <RI_GetRegCommandParser+0x8c0>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	e456      	b.n	800333c <RI_GetRegCommandParser+0x160>
 8003a8e:	bf00      	nop
 8003a90:	2000014c 	.word	0x2000014c
 8003a94:	200008e8 	.word	0x200008e8
 8003a98:	20000480 	.word	0x20000480
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	20000180 	.word	0x20000180
 8003aa4:	20000008 	.word	0x20000008
 8003aa8:	20000440 	.word	0x20000440
 8003aac:	20000010 	.word	0x20000010

08003ab0 <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003ab0:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8003ab4:	3808      	subs	r0, #8
 8003ab6:	b2c0      	uxtb	r0, r0
 8003ab8:	2810      	cmp	r0, #16
 8003aba:	bf9a      	itte	ls
 8003abc:	4b01      	ldrls	r3, [pc, #4]	@ (8003ac4 <RI_GetIDSize+0x14>)
 8003abe:	5c18      	ldrbls	r0, [r3, r0]
 8003ac0:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8003ac2:	4770      	bx	lr
 8003ac4:	0800a594 	.word	0x0800a594

08003ac8 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003ac8:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d003      	beq.n	8003ad8 <RI_GetPtrReg+0x10>
 8003ad0:	4a43      	ldr	r2, [pc, #268]	@ (8003be0 <RI_GetPtrReg+0x118>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 8003ad2:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003ad4:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 8003ad6:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003ad8:	f020 0007 	bic.w	r0, r0, #7
 8003adc:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8003ae0:	b283      	uxth	r3, r0
 8003ae2:	d073      	beq.n	8003bcc <RI_GetPtrReg+0x104>
 8003ae4:	d80f      	bhi.n	8003b06 <RI_GetPtrReg+0x3e>
 8003ae6:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 8003aea:	d074      	beq.n	8003bd6 <RI_GetPtrReg+0x10e>
 8003aec:	d824      	bhi.n	8003b38 <RI_GetPtrReg+0x70>
 8003aee:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 8003af2:	d058      	beq.n	8003ba6 <RI_GetPtrReg+0xde>
 8003af4:	d915      	bls.n	8003b22 <RI_GetPtrReg+0x5a>
 8003af6:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8003afa:	d1e9      	bne.n	8003ad0 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003afc:	4b39      	ldr	r3, [pc, #228]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003afe:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b00:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003b02:	3206      	adds	r2, #6
            break;
 8003b04:	e7e6      	b.n	8003ad4 <RI_GetPtrReg+0xc>
 8003b06:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 8003b0a:	d049      	beq.n	8003ba0 <RI_GetPtrReg+0xd8>
 8003b0c:	d929      	bls.n	8003b62 <RI_GetPtrReg+0x9a>
 8003b0e:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 8003b12:	d041      	beq.n	8003b98 <RI_GetPtrReg+0xd0>
 8003b14:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 8003b18:	d119      	bne.n	8003b4e <RI_GetPtrReg+0x86>
 8003b1a:	4a33      	ldr	r2, [pc, #204]	@ (8003be8 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003b1c:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003b1e:	2000      	movs	r0, #0
}
 8003b20:	4770      	bx	lr
 8003b22:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003b26:	d04d      	beq.n	8003bc4 <RI_GetPtrReg+0xfc>
 8003b28:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003b2c:	d1d0      	bne.n	8003ad0 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003b30:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b32:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003b34:	3202      	adds	r2, #2
            break;
 8003b36:	e7cd      	b.n	8003ad4 <RI_GetPtrReg+0xc>
 8003b38:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 8003b3c:	d038      	beq.n	8003bb0 <RI_GetPtrReg+0xe8>
 8003b3e:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 8003b42:	d119      	bne.n	8003b78 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003b44:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003b46:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b48:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003b4a:	3212      	adds	r2, #18
            break;
 8003b4c:	e7c2      	b.n	8003ad4 <RI_GetPtrReg+0xc>
 8003b4e:	4824      	ldr	r0, [pc, #144]	@ (8003be0 <RI_GetPtrReg+0x118>)
 8003b50:	4a26      	ldr	r2, [pc, #152]	@ (8003bec <RI_GetPtrReg+0x124>)
 8003b52:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 8003b56:	bf16      	itet	ne
 8003b58:	4602      	movne	r2, r0
 8003b5a:	2000      	moveq	r0, #0
 8003b5c:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003b5e:	600a      	str	r2, [r1, #0]
}
 8003b60:	4770      	bx	lr
 8003b62:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 8003b66:	d028      	beq.n	8003bba <RI_GetPtrReg+0xf2>
 8003b68:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 8003b6c:	d10c      	bne.n	8003b88 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003b70:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b72:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003b74:	321c      	adds	r2, #28
            break;
 8003b76:	e7ad      	b.n	8003ad4 <RI_GetPtrReg+0xc>
 8003b78:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 8003b7c:	d1a8      	bne.n	8003ad0 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003b7e:	4b19      	ldr	r3, [pc, #100]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003b80:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b82:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003b84:	320e      	adds	r2, #14
            break;
 8003b86:	e7a5      	b.n	8003ad4 <RI_GetPtrReg+0xc>
 8003b88:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8003b8c:	d1a0      	bne.n	8003ad0 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003b8e:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003b90:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b92:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003b94:	3218      	adds	r2, #24
            break;
 8003b96:	e79d      	b.n	8003ad4 <RI_GetPtrReg+0xc>
 8003b98:	4a15      	ldr	r2, [pc, #84]	@ (8003bf0 <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003b9a:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003b9c:	2000      	movs	r0, #0
}
 8003b9e:	4770      	bx	lr
 8003ba0:	4a14      	ldr	r2, [pc, #80]	@ (8003bf4 <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e796      	b.n	8003ad4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003ba8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003baa:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003bac:	3204      	adds	r2, #4
            break;
 8003bae:	e791      	b.n	8003ad4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003bb2:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003bb4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003bb6:	3210      	adds	r2, #16
            break;
 8003bb8:	e78c      	b.n	8003ad4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003bbc:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003bbe:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003bc0:	321a      	adds	r2, #26
            break;
 8003bc2:	e787      	b.n	8003ad4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003bc4:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 8003bc6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003bc8:	685a      	ldr	r2, [r3, #4]
             break;
 8003bca:	e783      	b.n	8003ad4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003bce:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003bd0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003bd2:	3216      	adds	r2, #22
            break;
 8003bd4:	e77e      	b.n	8003ad4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003bd6:	4b03      	ldr	r3, [pc, #12]	@ (8003be4 <RI_GetPtrReg+0x11c>)
 8003bd8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003bda:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003bdc:	320c      	adds	r2, #12
            break;
 8003bde:	e779      	b.n	8003ad4 <RI_GetPtrReg+0xc>
 8003be0:	20001adc 	.word	0x20001adc
 8003be4:	200008e8 	.word	0x200008e8
 8003be8:	200001be 	.word	0x200001be
 8003bec:	20000158 	.word	0x20000158
 8003bf0:	200001bc 	.word	0x200001bc
 8003bf4:	20000150 	.word	0x20000150

08003bf8 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t *regConv)
{
 8003bf8:	b470      	push	{r4, r5, r6}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003bfa:	4e78      	ldr	r6, [pc, #480]	@ (8003ddc <RCM_RegisterRegConv+0x1e4>)
 8003bfc:	6834      	ldr	r4, [r6, #0]
{
 8003bfe:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c00:	2c00      	cmp	r4, #0
 8003c02:	d034      	beq.n	8003c6e <RCM_RegisterRegConv+0x76>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c04:	7902      	ldrb	r2, [r0, #4]
 8003c06:	7923      	ldrb	r3, [r4, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d01e      	beq.n	8003c4a <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c0c:	6875      	ldr	r5, [r6, #4]
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	f000 80c1 	beq.w	8003d96 <RCM_RegisterRegConv+0x19e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c14:	792b      	ldrb	r3, [r5, #4]
 8003c16:	4293      	cmp	r3, r2
  uint8_t handle = 255U;
 8003c18:	f04f 00ff 	mov.w	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c1c:	d030      	beq.n	8003c80 <RCM_RegisterRegConv+0x88>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c1e:	68b4      	ldr	r4, [r6, #8]
 8003c20:	2c00      	cmp	r4, #0
 8003c22:	f000 809e 	beq.w	8003d62 <RCM_RegisterRegConv+0x16a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c26:	7923      	ldrb	r3, [r4, #4]
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d02f      	beq.n	8003c8c <RCM_RegisterRegConv+0x94>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c2c:	68f4      	ldr	r4, [r6, #12]
 8003c2e:	2c00      	cmp	r4, #0
 8003c30:	f000 80a3 	beq.w	8003d7a <RCM_RegisterRegConv+0x182>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c34:	7923      	ldrb	r3, [r4, #4]
 8003c36:	4293      	cmp	r3, r2
 8003c38:	f000 80a6 	beq.w	8003d88 <RCM_RegisterRegConv+0x190>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003c3c:	2803      	cmp	r0, #3
 8003c3e:	bf88      	it	hi
 8003c40:	20ff      	movhi	r0, #255	@ 0xff
 8003c42:	f240 80b2 	bls.w	8003daa <RCM_RegisterRegConv+0x1b2>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 8003c46:	bc70      	pop	{r4, r5, r6}
 8003c48:	4770      	bx	lr
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c4a:	6803      	ldr	r3, [r0, #0]
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	4283      	cmp	r3, r0
 8003c50:	d022      	beq.n	8003c98 <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c52:	6875      	ldr	r5, [r6, #4]
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	d1dd      	bne.n	8003c14 <RCM_RegisterRegConv+0x1c>
 8003c58:	68b4      	ldr	r4, [r6, #8]
      i++;
 8003c5a:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c5c:	2c00      	cmp	r4, #0
 8003c5e:	d1e2      	bne.n	8003c26 <RCM_RegisterRegConv+0x2e>
 8003c60:	68f4      	ldr	r4, [r6, #12]
 8003c62:	b1e4      	cbz	r4, 8003c9e <RCM_RegisterRegConv+0xa6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c64:	7925      	ldrb	r5, [r4, #4]
 8003c66:	790a      	ldrb	r2, [r1, #4]
 8003c68:	4295      	cmp	r5, r2
 8003c6a:	d116      	bne.n	8003c9a <RCM_RegisterRegConv+0xa2>
 8003c6c:	e08d      	b.n	8003d8a <RCM_RegisterRegConv+0x192>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c6e:	6875      	ldr	r5, [r6, #4]
 8003c70:	2d00      	cmp	r5, #0
 8003c72:	f000 80a2 	beq.w	8003dba <RCM_RegisterRegConv+0x1c2>
 8003c76:	7902      	ldrb	r2, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c78:	792b      	ldrb	r3, [r5, #4]
 8003c7a:	4293      	cmp	r3, r2
    uint8_t i = 0;
 8003c7c:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c7e:	d1ce      	bne.n	8003c1e <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c80:	682c      	ldr	r4, [r5, #0]
 8003c82:	680b      	ldr	r3, [r1, #0]
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d1ca      	bne.n	8003c1e <RCM_RegisterRegConv+0x26>
      i++;
 8003c88:	2001      	movs	r0, #1
 8003c8a:	e006      	b.n	8003c9a <RCM_RegisterRegConv+0xa2>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c8c:	6824      	ldr	r4, [r4, #0]
 8003c8e:	680b      	ldr	r3, [r1, #0]
 8003c90:	429c      	cmp	r4, r3
 8003c92:	d1cb      	bne.n	8003c2c <RCM_RegisterRegConv+0x34>
      i++;
 8003c94:	2002      	movs	r0, #2
 8003c96:	e000      	b.n	8003c9a <RCM_RegisterRegConv+0xa2>
    uint8_t i = 0;
 8003c98:	2000      	movs	r0, #0
    while (i < RCM_MAX_CONV)
 8003c9a:	f04f 0400 	mov.w	r4, #0
 8003c9e:	f360 0407 	bfi	r4, r0, #0, #8
 8003ca2:	f360 240f 	bfi	r4, r0, #8, #8
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003ca6:	4d4e      	ldr	r5, [pc, #312]	@ (8003de0 <RCM_RegisterRegConv+0x1e8>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca8:	689a      	ldr	r2, [r3, #8]
      RCM_handle_array [handle] = regConv;
 8003caa:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003cae:	2600      	movs	r6, #0
 8003cb0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8003cb4:	07d6      	lsls	r6, r2, #31
 8003cb6:	d422      	bmi.n	8003cfe <RCM_RegisterRegConv+0x106>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	601a      	str	r2, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	f022 0220 	bic.w	r2, r2, #32
 8003cca:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003ccc:	2220      	movs	r2, #32
 8003cce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003cd6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003cda:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003cde:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	2a00      	cmp	r2, #0
 8003ce4:	dbfc      	blt.n	8003ce0 <RCM_RegisterRegConv+0xe8>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	07d5      	lsls	r5, r2, #31
 8003cea:	d408      	bmi.n	8003cfe <RCM_RegisterRegConv+0x106>
  MODIFY_REG(ADCx->CR,
 8003cec:	4d3d      	ldr	r5, [pc, #244]	@ (8003de4 <RCM_RegisterRegConv+0x1ec>)
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	402a      	ands	r2, r5
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	07d2      	lsls	r2, r2, #31
 8003cfc:	d5f7      	bpl.n	8003cee <RCM_RegisterRegConv+0xf6>
      RCM_NoInj_array[handle].enable = false;
 8003cfe:	4d3a      	ldr	r5, [pc, #232]	@ (8003de8 <RCM_RegisterRegConv+0x1f0>)
 8003d00:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003d04:	0052      	lsls	r2, r2, #1
      RCM_NoInj_array[handle].prev = handle;
 8003d06:	1d2e      	adds	r6, r5, #4
 8003d08:	52b4      	strh	r4, [r6, r2]
      RCM_NoInj_array[handle].enable = false;
 8003d0a:	2400      	movs	r4, #0
 8003d0c:	54ac      	strb	r4, [r5, r2]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003d0e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003d10:	f024 040f 	bic.w	r4, r4, #15
 8003d14:	631c      	str	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003d16:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	fa02 f20c 	lsl.w	r2, r2, ip
 8003d20:	f1bc 0f09 	cmp.w	ip, #9
 8003d24:	ea42 628c 	orr.w	r2, r2, ip, lsl #26
 8003d28:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8003d2c:	d813      	bhi.n	8003d56 <RCM_RegisterRegConv+0x15e>
 8003d2e:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d32:	0dd4      	lsrs	r4, r2, #23
 8003d34:	f004 0404 	and.w	r4, r4, #4
 8003d38:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8003d3a:	688d      	ldr	r5, [r1, #8]
 8003d3c:	5919      	ldr	r1, [r3, r4]
 8003d3e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003d42:	2607      	movs	r6, #7
 8003d44:	4095      	lsls	r5, r2
 8003d46:	fa06 f202 	lsl.w	r2, r6, r2
 8003d4a:	ea21 0202 	bic.w	r2, r1, r2
 8003d4e:	432a      	orrs	r2, r5
 8003d50:	511a      	str	r2, [r3, r4]
}
 8003d52:	bc70      	pop	{r4, r5, r6}
 8003d54:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003d56:	3c1e      	subs	r4, #30
 8003d58:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 8003d5c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003d60:	e7e7      	b.n	8003d32 <RCM_RegisterRegConv+0x13a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d62:	2804      	cmp	r0, #4
 8003d64:	d92e      	bls.n	8003dc4 <RCM_RegisterRegConv+0x1cc>
 8003d66:	68f0      	ldr	r0, [r6, #12]
 8003d68:	b370      	cbz	r0, 8003dc8 <RCM_RegisterRegConv+0x1d0>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003d6a:	7903      	ldrb	r3, [r0, #4]
 8003d6c:	429a      	cmp	r2, r3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003d6e:	680b      	ldr	r3, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003d70:	d02f      	beq.n	8003dd2 <RCM_RegisterRegConv+0x1da>
      i++;
 8003d72:	2002      	movs	r0, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d74:	f240 2402 	movw	r4, #514	@ 0x202
 8003d78:	e795      	b.n	8003ca6 <RCM_RegisterRegConv+0xae>
 8003d7a:	2804      	cmp	r0, #4
 8003d7c:	d917      	bls.n	8003dae <RCM_RegisterRegConv+0x1b6>
 8003d7e:	680b      	ldr	r3, [r1, #0]
 8003d80:	2003      	movs	r0, #3
 8003d82:	f240 3403 	movw	r4, #771	@ 0x303
 8003d86:	e78e      	b.n	8003ca6 <RCM_RegisterRegConv+0xae>
 8003d88:	680b      	ldr	r3, [r1, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	f47f af55 	bne.w	8003c3c <RCM_RegisterRegConv+0x44>
      i++;
 8003d92:	2003      	movs	r0, #3
 8003d94:	e781      	b.n	8003c9a <RCM_RegisterRegConv+0xa2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d96:	68b4      	ldr	r4, [r6, #8]
      i++;
 8003d98:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d9a:	2c00      	cmp	r4, #0
 8003d9c:	f47f af43 	bne.w	8003c26 <RCM_RegisterRegConv+0x2e>
 8003da0:	68f4      	ldr	r4, [r6, #12]
 8003da2:	b124      	cbz	r4, 8003dae <RCM_RegisterRegConv+0x1b6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003da4:	7923      	ldrb	r3, [r4, #4]
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d0ee      	beq.n	8003d88 <RCM_RegisterRegConv+0x190>
 8003daa:	f04f 0400 	mov.w	r4, #0
 8003dae:	f360 0407 	bfi	r4, r0, #0, #8
 8003db2:	680b      	ldr	r3, [r1, #0]
 8003db4:	f360 240f 	bfi	r4, r0, #8, #8
 8003db8:	e775      	b.n	8003ca6 <RCM_RegisterRegConv+0xae>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003dba:	68b4      	ldr	r4, [r6, #8]
 8003dbc:	b134      	cbz	r4, 8003dcc <RCM_RegisterRegConv+0x1d4>
 8003dbe:	7902      	ldrb	r2, [r0, #4]
    uint8_t i = 0;
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	e730      	b.n	8003c26 <RCM_RegisterRegConv+0x2e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	e7eb      	b.n	8003da0 <RCM_RegisterRegConv+0x1a8>
 8003dc8:	680b      	ldr	r3, [r1, #0]
 8003dca:	e7d2      	b.n	8003d72 <RCM_RegisterRegConv+0x17a>
 8003dcc:	6803      	ldr	r3, [r0, #0]
    uint8_t i = 0;
 8003dce:	4620      	mov	r0, r4
 8003dd0:	e746      	b.n	8003c60 <RCM_RegisterRegConv+0x68>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003dd2:	6802      	ldr	r2, [r0, #0]
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d0dc      	beq.n	8003d92 <RCM_RegisterRegConv+0x19a>
 8003dd8:	e7cb      	b.n	8003d72 <RCM_RegisterRegConv+0x17a>
 8003dda:	bf00      	nop
 8003ddc:	20001b1c 	.word	0x20001b1c
 8003de0:	20001afc 	.word	0x20001afc
 8003de4:	7fffffc0 	.word	0x7fffffc0
 8003de8:	20001ae4 	.word	0x20001ae4

08003dec <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003dec:	4b5d      	ldr	r3, [pc, #372]	@ (8003f64 <RCM_ExecRegularConv+0x178>)
 8003dee:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8003df2:	b510      	push	{r4, lr}
  if (false == RCM_NoInj_array [handle].enable)
 8003df4:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 8003df8:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	d139      	bne.n	8003e74 <RCM_ExecRegularConv+0x88>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	b992      	cbnz	r2, 8003e2a <RCM_ExecRegularConv+0x3e>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003e04:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 8003e06:	799a      	ldrb	r2, [r3, #6]
 8003e08:	2a00      	cmp	r2, #0
 8003e0a:	d173      	bne.n	8003ef4 <RCM_ExecRegularConv+0x108>
 8003e0c:	7b1a      	ldrb	r2, [r3, #12]
 8003e0e:	2a00      	cmp	r2, #0
 8003e10:	d175      	bne.n	8003efe <RCM_ExecRegularConv+0x112>
 8003e12:	7c9a      	ldrb	r2, [r3, #18]
 8003e14:	2a00      	cmp	r2, #0
 8003e16:	f000 8098 	beq.w	8003f4a <RCM_ExecRegularConv+0x15e>
      {
        if (RCM_NoInj_array[i].next > handle)
 8003e1a:	7dda      	ldrb	r2, [r3, #23]
 8003e1c:	4282      	cmp	r2, r0
 8003e1e:	f240 809e 	bls.w	8003f5e <RCM_ExecRegularConv+0x172>
 8003e22:	f04f 0e03 	mov.w	lr, #3
      if (true == RCM_NoInj_array [i].enable)
 8003e26:	4671      	mov	r1, lr
 8003e28:	e003      	b.n	8003e32 <RCM_ExecRegularConv+0x46>
        if (RCM_NoInj_array[i].next > handle)
 8003e2a:	795a      	ldrb	r2, [r3, #5]
 8003e2c:	4290      	cmp	r0, r2
 8003e2e:	d2ea      	bcs.n	8003e06 <RCM_ExecRegularConv+0x1a>
  uint8_t i=0;
 8003e30:	468e      	mov	lr, r1
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8003e32:	eb0c 0400 	add.w	r4, ip, r0
 8003e36:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8003e3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003e3e:	7162      	strb	r2, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003e40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8003e44:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 8003e48:	eb03 0242 	add.w	r2, r3, r2, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003e4c:	4c46      	ldr	r4, [pc, #280]	@ (8003f68 <RCM_ExecRegularConv+0x17c>)
          RCM_NoInj_array[formerNext].prev = handle;
 8003e4e:	7110      	strb	r0, [r2, #4]
          RCM_NoInj_array[i].next = handle;
 8003e50:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003e54:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8003e56:	7148      	strb	r0, [r1, #5]
    RCM_NoInj_array[handle].enable = true;
 8003e58:	eb0c 0100 	add.w	r1, ip, r0
 8003e5c:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003e60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8003e64:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003e68:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003e6c:	7852      	ldrb	r2, [r2, #1]
 8003e6e:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8003e70:	bf18      	it	ne
 8003e72:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8003e74:	4a3d      	ldr	r2, [pc, #244]	@ (8003f6c <RCM_ExecRegularConv+0x180>)
 8003e76:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 8003e7a:	2a00      	cmp	r2, #0
 8003e7c:	d135      	bne.n	8003eea <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f70 <RCM_ExecRegularConv+0x184>)
 8003e80:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003e84:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003e86:	6811      	ldr	r1, [r2, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003e88:	2201      	movs	r2, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003e8a:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003e8c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003e90:	fa02 f204 	lsl.w	r2, r2, r4
 8003e94:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8003e98:	bf84      	itt	hi
 8003e9a:	f1ae 0e1e 	subhi.w	lr, lr, #30
 8003e9e:	ea42 520e 	orrhi.w	r2, r2, lr, lsl #20
  MODIFY_REG(*preg,
 8003ea2:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003ea4:	bf94      	ite	ls
 8003ea6:	ea42 520e 	orrls.w	r2, r2, lr, lsl #20
 8003eaa:	f042 7200 	orrhi.w	r2, r2, #33554432	@ 0x2000000
 8003eae:	0d12      	lsrs	r2, r2, #20
 8003eb0:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 8003eb4:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8003eb8:	4322      	orrs	r2, r4
 8003eba:	630a      	str	r2, [r1, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003ebc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8003ebe:	688a      	ldr	r2, [r1, #8]
 8003ec0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ec4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003ec8:	f042 0204 	orr.w	r2, r2, #4
 8003ecc:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003ece:	680a      	ldr	r2, [r1, #0]
 8003ed0:	0752      	lsls	r2, r2, #29
 8003ed2:	d5fc      	bpl.n	8003ece <RCM_ExecRegularConv+0xe2>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003ed4:	eb0c 0200 	add.w	r2, ip, r0
 8003ed8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003edc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ede:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003ee0:	4921      	ldr	r1, [pc, #132]	@ (8003f68 <RCM_ExecRegularConv+0x17c>)
 8003ee2:	7954      	ldrb	r4, [r2, #5]
 8003ee4:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array[handle].status = valid;
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	7051      	strb	r1, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003eea:	4484      	add	ip, r0
 8003eec:	eb03 034c 	add.w	r3, r3, ip, lsl #1
  return retVal;
}
 8003ef0:	8858      	ldrh	r0, [r3, #2]
 8003ef2:	bd10      	pop	{r4, pc}
        if (RCM_NoInj_array[i].next > handle)
 8003ef4:	7ada      	ldrb	r2, [r3, #11]
 8003ef6:	4290      	cmp	r0, r2
 8003ef8:	d31d      	bcc.n	8003f36 <RCM_ExecRegularConv+0x14a>
      if (true == RCM_NoInj_array [i].enable)
 8003efa:	7b1a      	ldrb	r2, [r3, #12]
 8003efc:	b1fa      	cbz	r2, 8003f3e <RCM_ExecRegularConv+0x152>
        if (RCM_NoInj_array[i].next > handle)
 8003efe:	7c5a      	ldrb	r2, [r3, #17]
 8003f00:	4282      	cmp	r2, r0
 8003f02:	d828      	bhi.n	8003f56 <RCM_ExecRegularConv+0x16a>
      if (true == RCM_NoInj_array [i].enable)
 8003f04:	7c9a      	ldrb	r2, [r3, #18]
 8003f06:	2a00      	cmp	r2, #0
 8003f08:	d187      	bne.n	8003e1a <RCM_ExecRegularConv+0x2e>
 8003f0a:	2202      	movs	r2, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003f12:	eb0c 0400 	add.w	r4, ip, r0
 8003f16:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003f1a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003f1e:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003f20:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003f22:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003f24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003f28:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003f2c:	4c0e      	ldr	r4, [pc, #56]	@ (8003f68 <RCM_ExecRegularConv+0x17c>)
         RCM_NoInj_array[formerNext].prev = handle;
 8003f2e:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003f30:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003f32:	7822      	ldrb	r2, [r4, #0]
 8003f34:	e790      	b.n	8003e58 <RCM_ExecRegularConv+0x6c>
        if (RCM_NoInj_array[i].next > handle)
 8003f36:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8003f3a:	4671      	mov	r1, lr
 8003f3c:	e779      	b.n	8003e32 <RCM_ExecRegularConv+0x46>
 8003f3e:	7c9a      	ldrb	r2, [r3, #18]
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	f47f af6a 	bne.w	8003e1a <RCM_ExecRegularConv+0x2e>
 8003f46:	2201      	movs	r2, #1
 8003f48:	e7e0      	b.n	8003f0c <RCM_ExecRegularConv+0x120>
       if (LastEnable != RCM_MAX_CONV )
 8003f4a:	2900      	cmp	r1, #0
 8003f4c:	d0de      	beq.n	8003f0c <RCM_ExecRegularConv+0x120>
         RCM_currentHandle = handle;
 8003f4e:	4c06      	ldr	r4, [pc, #24]	@ (8003f68 <RCM_ExecRegularConv+0x17c>)
 8003f50:	4602      	mov	r2, r0
 8003f52:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 8003f54:	e780      	b.n	8003e58 <RCM_ExecRegularConv+0x6c>
        if (RCM_NoInj_array[i].next > handle)
 8003f56:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8003f5a:	4671      	mov	r1, lr
 8003f5c:	e769      	b.n	8003e32 <RCM_ExecRegularConv+0x46>
 8003f5e:	2103      	movs	r1, #3
 8003f60:	460a      	mov	r2, r1
 8003f62:	e7d4      	b.n	8003f0e <RCM_ExecRegularConv+0x122>
 8003f64:	20001ae4 	.word	0x20001ae4
 8003f68:	20001ae2 	.word	0x20001ae2
 8003f6c:	200002ac 	.word	0x200002ac
 8003f70:	20001b1c 	.word	0x20001b1c

08003f74 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8003f74:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003f76:	4c12      	ldr	r4, [pc, #72]	@ (8003fc0 <RCM_ExecUserConv+0x4c>)
 8003f78:	7823      	ldrb	r3, [r4, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d000      	beq.n	8003f80 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003f80:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <RCM_ExecUserConv+0x50>)
 8003f82:	781d      	ldrb	r5, [r3, #0]
 8003f84:	4628      	mov	r0, r5
 8003f86:	f7ff ff31 	bl	8003dec <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc8 <RCM_ExecUserConv+0x54>)
 8003f8c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8003f90:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003f94:	4a0d      	ldr	r2, [pc, #52]	@ (8003fcc <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003f96:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003f98:	8010      	strh	r0, [r2, #0]
 8003f9a:	4601      	mov	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003f9c:	b10b      	cbz	r3, 8003fa2 <RCM_ExecUserConv+0x2e>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <RCM_ExecUserConv+0x5c>)
 8003fa4:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
 8003fa8:	2e00      	cmp	r6, #0
 8003faa:	d0e8      	beq.n	8003f7e <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003fac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003fb8:	4633      	mov	r3, r6
}
 8003fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003fbe:	4718      	bx	r3
 8003fc0:	20001adf 	.word	0x20001adf
 8003fc4:	20001ade 	.word	0x20001ade
 8003fc8:	20001ae4 	.word	0x20001ae4
 8003fcc:	20001ae0 	.word	0x20001ae0
 8003fd0:	20001afc 	.word	0x20001afc

08003fd4 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8004050 <RCM_ExecNextConv+0x7c>)
 8003fd6:	491f      	ldr	r1, [pc, #124]	@ (8004054 <RCM_ExecNextConv+0x80>)
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003fde:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003fe2:	b3a3      	cbz	r3, 800404e <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8004058 <RCM_ExecNextConv+0x84>)
{
 8003fe6:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fec:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003fee:	2404      	movs	r4, #4
 8003ff0:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003ff2:	f893 c004 	ldrb.w	ip, [r3, #4]
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003ffc:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004000:	fa03 f30c 	lsl.w	r3, r3, ip
 8004004:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 8004008:	bf84      	itt	hi
 800400a:	3c1e      	subhi	r4, #30
 800400c:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 8004010:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004014:	bf98      	it	ls
 8004016:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 800401a:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 800401c:	bf88      	it	hi
 800401e:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 8004022:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004024:	0d1b      	lsrs	r3, r3, #20
 8004026:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800402a:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 800402e:	4313      	orrs	r3, r2
 8004030:	6303      	str	r3, [r0, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8004032:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8004034:	6883      	ldr	r3, [r0, #8]
 8004036:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 800403a:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 800403e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004042:	2401      	movs	r4, #1
 8004044:	f043 0304 	orr.w	r3, r3, #4
 8004048:	6083      	str	r3, [r0, #8]
 800404a:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 800404c:	bd10      	pop	{r4, pc}
 800404e:	4770      	bx	lr
 8004050:	20001ae2 	.word	0x20001ae2
 8004054:	20001ae4 	.word	0x20001ae4
 8004058:	20001b1c 	.word	0x20001b1c

0800405c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 800405c:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 800405e:	4811      	ldr	r0, [pc, #68]	@ (80040a4 <RCM_ReadOngoingConv+0x48>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004060:	4a11      	ldr	r2, [pc, #68]	@ (80040a8 <RCM_ReadOngoingConv+0x4c>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8004062:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004068:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8004070:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8004074:	4a0d      	ldr	r2, [pc, #52]	@ (80040ac <RCM_ReadOngoingConv+0x50>)
 8004076:	d00e      	beq.n	8004096 <RCM_ReadOngoingConv+0x3a>
 8004078:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800407c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8004080:	f89c e001 	ldrb.w	lr, [ip, #1]
 8004084:	f01e 0ffd 	tst.w	lr, #253	@ 0xfd
 8004088:	d005      	beq.n	8004096 <RCM_ReadOngoingConv+0x3a>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800408a:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800408c:	f8ac 4002 	strh.w	r4, [ip, #2]
  else
  {
    /* Reading of ADC Converted Value */
    RCM_NoInj_array[RCM_currentHandle].value
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8004090:	2402      	movs	r4, #2
 8004092:	f88c 4001 	strb.w	r4, [ip, #1]
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8004096:	440b      	add	r3, r1
 8004098:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800409c:	7953      	ldrb	r3, [r2, #5]
 800409e:	7003      	strb	r3, [r0, #0]
}
 80040a0:	bd10      	pop	{r4, pc}
 80040a2:	bf00      	nop
 80040a4:	20001ae2 	.word	0x20001ae2
 80040a8:	20001b1c 	.word	0x20001b1c
 80040ac:	20001ae4 	.word	0x20001ae4

080040b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b0:	4b0e      	ldr	r3, [pc, #56]	@ (80040ec <HAL_MspInit+0x3c>)
{
 80040b2:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80040bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 80040be:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c0:	f002 0201 	and.w	r2, r2, #1
 80040c4:	9200      	str	r2, [sp, #0]
 80040c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80040ca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80040ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80040d8:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80040da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80040dc:	f001 fa94 	bl	8005608 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040e0:	b003      	add	sp, #12
 80040e2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80040e6:	f001 bd1d 	b.w	8005b24 <HAL_PWREx_DisableUCPDDeadBattery>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000

080040f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4604      	mov	r4, r0
 80040f4:	b09e      	sub	sp, #120	@ 0x78
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040f8:	2244      	movs	r2, #68	@ 0x44
 80040fa:	a80d      	add	r0, sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040fc:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8004100:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 8004104:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004106:	f006 f8c1 	bl	800a28c <memset>
  if(hadc->Instance==ADC1)
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004110:	d004      	beq.n	800411c <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8004112:	4a4d      	ldr	r2, [pc, #308]	@ (8004248 <HAL_ADC_MspInit+0x158>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d047      	beq.n	80041a8 <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004118:	b01e      	add	sp, #120	@ 0x78
 800411a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800411c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004120:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004124:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004126:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004128:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800412a:	f002 f8b3 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 800412e:	2800      	cmp	r0, #0
 8004130:	f040 8084 	bne.w	800423c <HAL_ADC_MspInit+0x14c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004134:	4a45      	ldr	r2, [pc, #276]	@ (800424c <HAL_ADC_MspInit+0x15c>)
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800413a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800413c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800413e:	d109      	bne.n	8004154 <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004140:	4b43      	ldr	r3, [pc, #268]	@ (8004250 <HAL_ADC_MspInit+0x160>)
 8004142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004144:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004148:	64da      	str	r2, [r3, #76]	@ 0x4c
 800414a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004154:	4b3e      	ldr	r3, [pc, #248]	@ (8004250 <HAL_ADC_MspInit+0x160>)
 8004156:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800415e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004160:	f002 0201 	and.w	r2, r2, #1
 8004164:	9202      	str	r2, [sp, #8]
 8004166:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004168:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800416a:	f042 0202 	orr.w	r2, r2, #2
 800416e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8004178:	2203      	movs	r2, #3
 800417a:	2303      	movs	r3, #3
 800417c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004182:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004186:	a908      	add	r1, sp, #32
 8004188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 800418c:	f001 fb4a 	bl	8005824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8004190:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004194:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004196:	482f      	ldr	r0, [pc, #188]	@ (8004254 <HAL_ADC_MspInit+0x164>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800419a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 800419c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80041a0:	f001 fb40 	bl	8005824 <HAL_GPIO_Init>
}
 80041a4:	b01e      	add	sp, #120	@ 0x78
 80041a6:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80041a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80041ac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041b0:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80041b2:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80041b4:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041b6:	f002 f86d 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d141      	bne.n	8004242 <HAL_ADC_MspInit+0x152>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80041be:	4a23      	ldr	r2, [pc, #140]	@ (800424c <HAL_ADC_MspInit+0x15c>)
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80041c4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80041c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80041c8:	d109      	bne.n	80041de <HAL_ADC_MspInit+0xee>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80041ca:	4b21      	ldr	r3, [pc, #132]	@ (8004250 <HAL_ADC_MspInit+0x160>)
 80041cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041d2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041da:	9304      	str	r3, [sp, #16]
 80041dc:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041de:	4b1c      	ldr	r3, [pc, #112]	@ (8004250 <HAL_ADC_MspInit+0x160>)
 80041e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80041e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041ea:	f002 0201 	and.w	r2, r2, #1
 80041ee:	9205      	str	r2, [sp, #20]
 80041f0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041f4:	f042 0204 	orr.w	r2, r2, #4
 80041f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80041fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041fc:	f002 0204 	and.w	r2, r2, #4
 8004200:	9206      	str	r2, [sp, #24]
 8004202:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004204:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004206:	f042 0202 	orr.w	r2, r2, #2
 800420a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800420c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 8004214:	2280      	movs	r2, #128	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 8004218:	a908      	add	r1, sp, #32
 800421a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 800421e:	2303      	movs	r3, #3
 8004220:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004226:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 8004228:	f001 fafc 	bl	8005824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin;
 800422c:	2210      	movs	r2, #16
 800422e:	2303      	movs	r3, #3
 8004230:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8004234:	4808      	ldr	r0, [pc, #32]	@ (8004258 <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004236:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8004238:	a908      	add	r1, sp, #32
 800423a:	e7a7      	b.n	800418c <HAL_ADC_MspInit+0x9c>
      Error_Handler();
 800423c:	f7fd fc5e 	bl	8001afc <Error_Handler>
 8004240:	e778      	b.n	8004134 <HAL_ADC_MspInit+0x44>
      Error_Handler();
 8004242:	f7fd fc5b 	bl	8001afc <Error_Handler>
 8004246:	e7ba      	b.n	80041be <HAL_ADC_MspInit+0xce>
 8004248:	50000100 	.word	0x50000100
 800424c:	20001b2c 	.word	0x20001b2c
 8004250:	40021000 	.word	0x40021000
 8004254:	48000400 	.word	0x48000400
 8004258:	48000800 	.word	0x48000800

0800425c <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 800425c:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <HAL_CORDIC_MspInit+0x2c>)
 800425e:	6802      	ldr	r2, [r0, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d000      	beq.n	8004266 <HAL_CORDIC_MspInit+0xa>
 8004264:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004266:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 800426a:	f042 0208 	orr.w	r2, r2, #8
 800426e:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
 8004272:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
{
 8004276:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004282:	b002      	add	sp, #8
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40020c00 	.word	0x40020c00
 800428c:	00000000 	.word	0x00000000

08004290 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004290:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 8004292:	4a1b      	ldr	r2, [pc, #108]	@ (8004300 <HAL_SPI_MspInit+0x70>)
 8004294:	6801      	ldr	r1, [r0, #0]
{
 8004296:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 800429a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80042a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80042a4:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI3)
 80042a6:	d001      	beq.n	80042ac <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80042a8:	b008      	add	sp, #32
 80042aa:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80042ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042b0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80042b4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80042f8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80042b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ba:	4812      	ldr	r0, [pc, #72]	@ (8004304 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80042bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80042c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042c4:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80042c8:	9200      	str	r2, [sp, #0]
 80042ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042ce:	f042 0204 	orr.w	r2, r2, #4
 80042d2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80042d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042dc:	2203      	movs	r2, #3
 80042de:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042e0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80042e2:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ea:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ec:	f001 fa9a 	bl	8005824 <HAL_GPIO_Init>
}
 80042f0:	b008      	add	sp, #32
 80042f2:	bd10      	pop	{r4, pc}
 80042f4:	f3af 8000 	nop.w
 80042f8:	00001c00 	.word	0x00001c00
 80042fc:	00000002 	.word	0x00000002
 8004300:	40003c00 	.word	0x40003c00
 8004304:	48000800 	.word	0x48000800

08004308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004308:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800430a:	6802      	ldr	r2, [r0, #0]
 800430c:	4922      	ldr	r1, [pc, #136]	@ (8004398 <HAL_TIM_Base_MspInit+0x90>)
{
 800430e:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8004312:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004318:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800431c:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 800431e:	d011      	beq.n	8004344 <HAL_TIM_Base_MspInit+0x3c>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004320:	4b1e      	ldr	r3, [pc, #120]	@ (800439c <HAL_TIM_Base_MspInit+0x94>)
 8004322:	429a      	cmp	r2, r3
 8004324:	d001      	beq.n	800432a <HAL_TIM_Base_MspInit+0x22>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004326:	b00a      	add	sp, #40	@ 0x28
 8004328:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800432a:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 800432e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004330:	f042 0202 	orr.w	r2, r2, #2
 8004334:	659a      	str	r2, [r3, #88]	@ 0x58
 8004336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	9303      	str	r3, [sp, #12]
 800433e:	9b03      	ldr	r3, [sp, #12]
}
 8004340:	b00a      	add	sp, #40	@ 0x28
 8004342:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004344:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004348:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800434c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8004390 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004350:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004356:	661a      	str	r2, [r3, #96]	@ 0x60
 8004358:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800435a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800435e:	9201      	str	r2, [sp, #4]
 8004360:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004362:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	64da      	str	r2, [r3, #76]	@ 0x4c
 800436a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004372:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8004374:	230c      	movs	r3, #12
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004376:	a904      	add	r1, sp, #16
 8004378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800437c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004380:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004382:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8004384:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004386:	f001 fa4d 	bl	8005824 <HAL_GPIO_Init>
}
 800438a:	b00a      	add	sp, #40	@ 0x28
 800438c:	bd10      	pop	{r4, pc}
 800438e:	bf00      	nop
 8004390:	00000800 	.word	0x00000800
 8004394:	00000012 	.word	0x00000012
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40000400 	.word	0x40000400

080043a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043a0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80043a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004410 <HAL_TIM_MspPostInit+0x70>)
 80043a4:	6801      	ldr	r1, [r0, #0]
{
 80043a6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80043aa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80043b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80043b4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80043b6:	d002      	beq.n	80043be <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043b8:	b009      	add	sp, #36	@ 0x24
 80043ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043c2:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80043c6:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8004400 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80043d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80043d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80043d8:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8004408 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80043e4:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80043ea:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ee:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80043f0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f2:	f001 fa17 	bl	8005824 <HAL_GPIO_Init>
}
 80043f6:	b009      	add	sp, #36	@ 0x24
 80043f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80043fc:	f3af 8000 	nop.w
 8004400:	00000700 	.word	0x00000700
 8004404:	00000002 	.word	0x00000002
 8004408:	00000002 	.word	0x00000002
 800440c:	00000002 	.word	0x00000002
 8004410:	40012c00 	.word	0x40012c00

08004414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	4604      	mov	r4, r0
 8004418:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800441c:	2244      	movs	r2, #68	@ 0x44
 800441e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004420:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8004424:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004428:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800442a:	f005 ff2f 	bl	800a28c <memset>
  if(huart->Instance==USART2)
 800442e:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <HAL_UART_MspInit+0xe0>)
 8004430:	6822      	ldr	r2, [r4, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004436:	b018      	add	sp, #96	@ 0x60
 8004438:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800443a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800443c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800443e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004440:	f001 ff28 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 8004444:	2800      	cmp	r0, #0
 8004446:	d14c      	bne.n	80044e2 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004448:	4b2b      	ldr	r3, [pc, #172]	@ (80044f8 <HAL_UART_MspInit+0xe4>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800444a:	4e2c      	ldr	r6, [pc, #176]	@ (80044fc <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800444c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800444e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004452:	659a      	str	r2, [r3, #88]	@ 0x58
 8004454:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004456:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800445a:	9200      	str	r2, [sp, #0]
 800445c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800446e:	220c      	movs	r2, #12
 8004470:	2302      	movs	r3, #2
 8004472:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004476:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004478:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800447a:	2300      	movs	r3, #0
 800447c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004480:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004482:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004488:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448a:	f001 f9cb 	bl	8005824 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800448e:	491c      	ldr	r1, [pc, #112]	@ (8004500 <HAL_UART_MspInit+0xec>)
 8004490:	221a      	movs	r2, #26
 8004492:	2300      	movs	r3, #0
 8004494:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004498:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800449a:	2280      	movs	r2, #128	@ 0x80
 800449c:	e9c6 3302 	strd	r3, r3, [r6, #8]
 80044a0:	e9c6 2304 	strd	r2, r3, [r6, #16]
 80044a4:	e9c6 3306 	strd	r3, r3, [r6, #24]
 80044a8:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80044aa:	f001 f929 	bl	8005700 <HAL_DMA_Init>
 80044ae:	b9f0      	cbnz	r0, 80044ee <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80044b0:	4d14      	ldr	r5, [pc, #80]	@ (8004504 <HAL_UART_MspInit+0xf0>)
 80044b2:	4915      	ldr	r1, [pc, #84]	@ (8004508 <HAL_UART_MspInit+0xf4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80044b4:	67e6      	str	r6, [r4, #124]	@ 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80044b6:	221b      	movs	r2, #27
 80044b8:	2300      	movs	r3, #0
 80044ba:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80044be:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80044c0:	2110      	movs	r1, #16
 80044c2:	2280      	movs	r2, #128	@ 0x80
 80044c4:	e9c5 1302 	strd	r1, r3, [r5, #8]
 80044c8:	e9c5 3305 	strd	r3, r3, [r5, #20]
 80044cc:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80044d0:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80044d2:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80044d4:	f001 f914 	bl	8005700 <HAL_DMA_Init>
 80044d8:	b930      	cbnz	r0, 80044e8 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80044da:	67a5      	str	r5, [r4, #120]	@ 0x78
 80044dc:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80044de:	b018      	add	sp, #96	@ 0x60
 80044e0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80044e2:	f7fd fb0b 	bl	8001afc <Error_Handler>
 80044e6:	e7af      	b.n	8004448 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80044e8:	f7fd fb08 	bl	8001afc <Error_Handler>
 80044ec:	e7f5      	b.n	80044da <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80044ee:	f7fd fb05 	bl	8001afc <Error_Handler>
 80044f2:	e7dd      	b.n	80044b0 <HAL_UART_MspInit+0x9c>
 80044f4:	40004400 	.word	0x40004400
 80044f8:	40021000 	.word	0x40021000
 80044fc:	200005fc 	.word	0x200005fc
 8004500:	40020008 	.word	0x40020008
 8004504:	2000059c 	.word	0x2000059c
 8004508:	4002001c 	.word	0x4002001c

0800450c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800450c:	4801      	ldr	r0, [pc, #4]	@ (8004514 <TIM3_IRQHandler+0x8>)
 800450e:	f002 be7f 	b.w	8007210 <HAL_TIM_IRQHandler>
 8004512:	bf00      	nop
 8004514:	200006ec 	.word	0x200006ec

08004518 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004518:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800451c:	2240      	movs	r2, #64	@ 0x40
 800451e:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  (void)TSK_HighFrequencyTask();
 8004520:	f7fd bffa 	b.w	8002518 <TSK_HighFrequencyTask>

08004524 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004524:	4b03      	ldr	r3, [pc, #12]	@ (8004534 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    ( void )R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004526:	4804      	ldr	r0, [pc, #16]	@ (8004538 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004528:	f06f 0201 	mvn.w	r2, #1
 800452c:	611a      	str	r2, [r3, #16]
 800452e:	f004 bdf3 	b.w	8009118 <R3_2_TIMx_UP_IRQHandler>
 8004532:	bf00      	nop
 8004534:	40012c00 	.word	0x40012c00
 8004538:	200002ac 	.word	0x200002ac

0800453c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 800453c:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800453e:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	0611      	lsls	r1, r2, #24
 8004544:	d505      	bpl.n	8004552 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004546:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    ( void )R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 800454a:	480a      	ldr	r0, [pc, #40]	@ (8004574 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800454c:	611a      	str	r2, [r3, #16]
 800454e:	f004 fe4b 	bl	80091e8 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004552:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	05d2      	lsls	r2, r2, #23
 8004558:	d505      	bpl.n	8004566 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800455a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    ( void )R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 800455e:	4805      	ldr	r0, [pc, #20]	@ (8004574 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	f004 fe1d 	bl	80091a0 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800456a:	f7fd bf8f 	b.w	800248c <MC_Scheduler>
 800456e:	bf00      	nop
 8004570:	40012c00 	.word	0x40012c00
 8004574:	200002ac 	.word	0x200002ac

08004578 <DMA1_Channel1_IRQHandler>:
  }
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 8004578:	4b04      	ldr	r3, [pc, #16]	@ (800458c <DMA1_Channel1_IRQHandler+0x14>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	0792      	lsls	r2, r2, #30
 800457e:	d400      	bmi.n	8004582 <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 8004580:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004582:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8004584:	4802      	ldr	r0, [pc, #8]	@ (8004590 <DMA1_Channel1_IRQHandler+0x18>)
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	f7fc be26 	b.w	80011d8 <ASPEP_HWDataReceivedIT>
 800458c:	40020000 	.word	0x40020000
 8004590:	200004c8 	.word	0x200004c8

08004594 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004594:	4b41      	ldr	r3, [pc, #260]	@ (800469c <USART2_IRQHandler+0x108>)
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 800459a:	b510      	push	{r4, lr}
 800459c:	d509      	bpl.n	80045b2 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800459e:	4940      	ldr	r1, [pc, #256]	@ (80046a0 <USART2_IRQHandler+0x10c>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 80045a0:	4840      	ldr	r0, [pc, #256]	@ (80046a4 <USART2_IRQHandler+0x110>)
 80045a2:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80045a4:	2440      	movs	r4, #64	@ 0x40
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	61ca      	str	r2, [r1, #28]
 80045ac:	621c      	str	r4, [r3, #32]
 80045ae:	f7fc fc67 	bl	8000e80 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80045b2:	4b3a      	ldr	r3, [pc, #232]	@ (800469c <USART2_IRQHandler+0x108>)
 80045b4:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80045b6:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80045b8:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80045ba:	689c      	ldr	r4, [r3, #8]
 80045bc:	07e4      	lsls	r4, r4, #31
 80045be:	d526      	bpl.n	800460e <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80045c0:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80045c4:	f000 0008 	and.w	r0, r0, #8
  test2 = LL_USART_IsActiveFlag_FE (USARTA);
  test3 = LL_USART_IsActiveFlag_NE (USARTA);
  mask = LL_USART_IsEnabledIT_ERROR (USARTA);

  test1 = ( ( test1 | test2 | test3 ) & mask );
  if ( 0U == test1 )
 80045c8:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80045ca:	f001 0104 	and.w	r1, r1, #4
 80045ce:	430a      	orrs	r2, r1
 80045d0:	d01d      	beq.n	800460e <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 80045d2:	220e      	movs	r2, #14
 80045d4:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80045da:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80045de:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80045ea:	e840 3100 	strex	r1, r3, [r0]
 80045ee:	2900      	cmp	r1, #0
 80045f0:	d1f3      	bne.n	80045da <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80045f6:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 80045fa:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80045fe:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004606:	e840 3100 	strex	r1, r3, [r0]
 800460a:	2900      	cmp	r1, #0
 800460c:	d1f3      	bne.n	80045f6 <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800460e:	4b23      	ldr	r3, [pc, #140]	@ (800469c <USART2_IRQHandler+0x108>)
 8004610:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004612:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004614:	06d2      	lsls	r2, r2, #27
 8004616:	d540      	bpl.n	800469a <USART2_IRQHandler+0x106>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004618:	06db      	lsls	r3, r3, #27
 800461a:	d53e      	bpl.n	800469a <USART2_IRQHandler+0x106>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004620:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004624:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004628:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004630:	e840 3100 	strex	r1, r3, [r0]
 8004634:	2900      	cmp	r1, #0
 8004636:	d1f3      	bne.n	8004620 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800463c:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004640:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004644:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 800464c:	e840 3100 	strex	r1, r3, [r0]
 8004650:	2900      	cmp	r1, #0
 8004652:	d1f3      	bne.n	800463c <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004658:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 800465c:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004668:	e840 3100 	strex	r1, r3, [r0]
 800466c:	2900      	cmp	r1, #0
 800466e:	d1f3      	bne.n	8004658 <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004670:	4b0a      	ldr	r3, [pc, #40]	@ (800469c <USART2_IRQHandler+0x108>)
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004678:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 800467c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004688:	e840 3100 	strex	r1, r3, [r0]
 800468c:	2900      	cmp	r1, #0
 800468e:	d1f3      	bne.n	8004678 <USART2_IRQHandler+0xe4>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8004690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8004694:	4803      	ldr	r0, [pc, #12]	@ (80046a4 <USART2_IRQHandler+0x110>)
 8004696:	f7fc bded 	b.w	8001274 <ASPEP_HWDMAReset>
}
 800469a:	bd10      	pop	{r4, pc}
 800469c:	40004400 	.word	0x40004400
 80046a0:	40020000 	.word	0x40020000
 80046a4:	200004c8 	.word	0x200004c8

080046a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80046a8:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80046aa:	f7fe f869 	bl	8002780 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 80046ae:	e7fe      	b.n	80046ae <HardFault_Handler+0x6>

080046b0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80046b0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80046b2:	4c0a      	ldr	r4, [pc, #40]	@ (80046dc <SysTick_Handler+0x2c>)
 80046b4:	7823      	ldrb	r3, [r4, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d006      	beq.n	80046c8 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80046ba:	3301      	adds	r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80046c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80046c4:	f7fe b850 	b.w	8002768 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80046c8:	f000 f8e2 	bl	8004890 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80046cc:	f001 f814 	bl	80056f8 <HAL_SYSTICK_IRQHandler>
 80046d0:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80046d2:	7023      	strb	r3, [r4, #0]
}
 80046d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80046d8:	f7fe b846 	b.w	8002768 <MC_RunMotorControlTasks>
 80046dc:	20000550 	.word	0x20000550

080046e0 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80046e0:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <EXTI15_10_IRQHandler+0x14>)
 80046e2:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if (  0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 80046e4:	0492      	lsls	r2, r2, #18
 80046e6:	d400      	bmi.n	80046ea <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    ( void )UI_HandleStartStopButton_cb ();
  }

}
 80046e8:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80046ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046ee:	615a      	str	r2, [r3, #20]
    ( void )UI_HandleStartStopButton_cb ();
 80046f0:	f7fe b856 	b.w	80027a0 <UI_HandleStartStopButton_cb>
 80046f4:	40010400 	.word	0x40010400

080046f8 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80046f8:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80046fa:	2340      	movs	r3, #64	@ 0x40
{
 80046fc:	b470      	push	{r4, r5, r6}
 80046fe:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	e842 3100 	strex	r1, r3, [r2]
 800470c:	2900      	cmp	r1, #0
 800470e:	d1f7      	bne.n	8004700 <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004710:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	e851 3f00 	ldrex	r3, [r1]
 8004718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	e841 3400 	strex	r4, r3, [r1]
 8004720:	2c00      	cmp	r4, #0
 8004722:	d1f7      	bne.n	8004714 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004724:	6901      	ldr	r1, [r0, #16]
 8004726:	4e17      	ldr	r6, [pc, #92]	@ (8004784 <UASPEP_INIT+0x8c>)
 8004728:	6883      	ldr	r3, [r0, #8]
 800472a:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800472c:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800472e:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8004730:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 8004734:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004736:	68c3      	ldr	r3, [r0, #12]
 8004738:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800473a:	2340      	movs	r3, #64	@ 0x40
 800473c:	6213      	str	r3, [r2, #32]
 800473e:	586b      	ldr	r3, [r5, r1]
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004746:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	e851 3f00 	ldrex	r3, [r1]
 800474e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	e841 3400 	strex	r4, r3, [r1]
 8004756:	2c00      	cmp	r4, #0
 8004758:	d1f7      	bne.n	800474a <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800475a:	68c3      	ldr	r3, [r0, #12]
 800475c:	5cf0      	ldrb	r0, [r6, r3]
 800475e:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8004760:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004764:	2340      	movs	r3, #64	@ 0x40
 8004766:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004768:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800476c:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	e841 3200 	strex	r2, r3, [r1]
 800477a:	2a00      	cmp	r2, #0
 800477c:	d1f7      	bne.n	800476e <UASPEP_INIT+0x76>
}
 800477e:	bc70      	pop	{r4, r5, r6}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	0800a5a8 	.word	0x0800a5a8

08004788 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8004788:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800478a:	6903      	ldr	r3, [r0, #16]
 800478c:	4d0b      	ldr	r5, [pc, #44]	@ (80047bc <UASPEP_SEND_PACKET+0x34>)
 800478e:	6884      	ldr	r4, [r0, #8]
 8004790:	5ceb      	ldrb	r3, [r5, r3]
 8004792:	58e5      	ldr	r5, [r4, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8004794:	07ed      	lsls	r5, r5, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004796:	eb04 0003 	add.w	r0, r4, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 800479a:	d40b      	bmi.n	80047b4 <UASPEP_SEND_PACKET+0x2c>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800479c:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800479e:	6841      	ldr	r1, [r0, #4]
 80047a0:	0c09      	lsrs	r1, r1, #16
 80047a2:	0409      	lsls	r1, r1, #16
 80047a4:	430a      	orrs	r2, r1
 80047a6:	6042      	str	r2, [r0, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80047a8:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 80047aa:	2001      	movs	r0, #1
 80047ac:	4302      	orrs	r2, r0
 80047ae:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return result;
}
 80047b0:	bc30      	pop	{r4, r5}
 80047b2:	4770      	bx	lr
    result = false;
 80047b4:	2000      	movs	r0, #0
}
 80047b6:	bc30      	pop	{r4, r5}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	0800a5a8 	.word	0x0800a5a8

080047c0 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 80047c0:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80047c2:	68c3      	ldr	r3, [r0, #12]
 80047c4:	4d0b      	ldr	r5, [pc, #44]	@ (80047f4 <UASPEP_RECEIVE_BUFFER+0x34>)
 80047c6:	6844      	ldr	r4, [r0, #4]
 80047c8:	5ce8      	ldrb	r0, [r5, r3]
 80047ca:	5823      	ldr	r3, [r4, r0]
 80047cc:	eb04 0c00 	add.w	ip, r4, r0
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80047d6:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80047da:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80047de:	0c1b      	lsrs	r3, r3, #16
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80047e8:	5823      	ldr	r3, [r4, r0]
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	5023      	str	r3, [r4, r0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 80047f0:	bc30      	pop	{r4, r5}
 80047f2:	4770      	bx	lr
 80047f4:	0800a5a8 	.word	0x0800a5a8

080047f8 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 80047f8:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80047fa:	2310      	movs	r3, #16
 80047fc:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004802:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	e842 3100 	strex	r1, r3, [r2]
 800480a:	2900      	cmp	r1, #0
 800480c:	d1f7      	bne.n	80047fe <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 800480e:	4770      	bx	lr

08004810 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004810:	4a03      	ldr	r2, [pc, #12]	@ (8004820 <SystemInit+0x10>)
 8004812:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004816:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800481a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800481e:	4770      	bx	lr
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004824:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004826:	4b0f      	ldr	r3, [pc, #60]	@ (8004864 <HAL_InitTick+0x40>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	b90b      	cbnz	r3, 8004830 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 800482c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800482e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004830:	490d      	ldr	r1, [pc, #52]	@ (8004868 <HAL_InitTick+0x44>)
 8004832:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004836:	4605      	mov	r5, r0
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	6808      	ldr	r0, [r1, #0]
 800483e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004842:	f000 ff3d 	bl	80056c0 <HAL_SYSTICK_Config>
 8004846:	4604      	mov	r4, r0
 8004848:	2800      	cmp	r0, #0
 800484a:	d1ef      	bne.n	800482c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800484c:	2d0f      	cmp	r5, #15
 800484e:	d8ed      	bhi.n	800482c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004850:	4602      	mov	r2, r0
 8004852:	4629      	mov	r1, r5
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	f000 fee8 	bl	800562c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800485c:	4b03      	ldr	r3, [pc, #12]	@ (800486c <HAL_InitTick+0x48>)
 800485e:	4620      	mov	r0, r4
 8004860:	601d      	str	r5, [r3, #0]
}
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	20000558 	.word	0x20000558
 8004868:	20000554 	.word	0x20000554
 800486c:	2000055c 	.word	0x2000055c

08004870 <HAL_Init>:
{
 8004870:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004872:	2003      	movs	r0, #3
 8004874:	f000 fec8 	bl	8005608 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004878:	2004      	movs	r0, #4
 800487a:	f7ff ffd3 	bl	8004824 <HAL_InitTick>
 800487e:	b110      	cbz	r0, 8004886 <HAL_Init+0x16>
    status = HAL_ERROR;
 8004880:	2401      	movs	r4, #1
}
 8004882:	4620      	mov	r0, r4
 8004884:	bd10      	pop	{r4, pc}
 8004886:	4604      	mov	r4, r0
    HAL_MspInit();
 8004888:	f7ff fc12 	bl	80040b0 <HAL_MspInit>
}
 800488c:	4620      	mov	r0, r4
 800488e:	bd10      	pop	{r4, pc}

08004890 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004890:	4a03      	ldr	r2, [pc, #12]	@ (80048a0 <HAL_IncTick+0x10>)
 8004892:	4904      	ldr	r1, [pc, #16]	@ (80048a4 <HAL_IncTick+0x14>)
 8004894:	6813      	ldr	r3, [r2, #0]
 8004896:	6809      	ldr	r1, [r1, #0]
 8004898:	440b      	add	r3, r1
 800489a:	6013      	str	r3, [r2, #0]
}
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20001b30 	.word	0x20001b30
 80048a4:	20000558 	.word	0x20000558

080048a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80048a8:	4b01      	ldr	r3, [pc, #4]	@ (80048b0 <HAL_GetTick+0x8>)
 80048aa:	6818      	ldr	r0, [r3, #0]
}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20001b30 	.word	0x20001b30

080048b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048b4:	b530      	push	{r4, r5, lr}
 80048b6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80048bc:	2800      	cmp	r0, #0
 80048be:	f000 808c 	beq.w	80049da <HAL_ADC_Init+0x126>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048c2:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80048c4:	4604      	mov	r4, r0
 80048c6:	2d00      	cmp	r5, #0
 80048c8:	f000 808c 	beq.w	80049e4 <HAL_ADC_Init+0x130>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048cc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80048ce:	6893      	ldr	r3, [r2, #8]
 80048d0:	0098      	lsls	r0, r3, #2
 80048d2:	d505      	bpl.n	80048e0 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80048d4:	6893      	ldr	r3, [r2, #8]
 80048d6:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80048da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048de:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048e0:	6893      	ldr	r3, [r2, #8]
 80048e2:	00d9      	lsls	r1, r3, #3
 80048e4:	d419      	bmi.n	800491a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048e6:	4b6e      	ldr	r3, [pc, #440]	@ (8004aa0 <HAL_ADC_Init+0x1ec>)
 80048e8:	486e      	ldr	r0, [pc, #440]	@ (8004aa4 <HAL_ADC_Init+0x1f0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80048ec:	6891      	ldr	r1, [r2, #8]
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	fba0 0303 	umull	r0, r3, r0, r3
 80048f4:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80048f8:	099b      	lsrs	r3, r3, #6
 80048fa:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80048fe:	3301      	adds	r3, #1
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004906:	6091      	str	r1, [r2, #8]
 8004908:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800490a:	9b01      	ldr	r3, [sp, #4]
 800490c:	b12b      	cbz	r3, 800491a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	3b01      	subs	r3, #1
 8004912:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004914:	9b01      	ldr	r3, [sp, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f9      	bne.n	800490e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800491a:	6893      	ldr	r3, [r2, #8]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	d45f      	bmi.n	80049e0 <HAL_ADC_Init+0x12c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004920:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004922:	f043 0310 	orr.w	r3, r3, #16
 8004926:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004928:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800492a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492c:	4303      	orrs	r3, r0
 800492e:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004930:	6893      	ldr	r3, [r2, #8]
 8004932:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004936:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004938:	d14b      	bne.n	80049d2 <HAL_ADC_Init+0x11e>
 800493a:	06dd      	lsls	r5, r3, #27
 800493c:	d449      	bmi.n	80049d2 <HAL_ADC_Init+0x11e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800493e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004940:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004944:	f043 0302 	orr.w	r3, r3, #2
 8004948:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800494a:	6893      	ldr	r3, [r2, #8]
 800494c:	07d9      	lsls	r1, r3, #31
 800494e:	d409      	bmi.n	8004964 <HAL_ADC_Init+0xb0>
 8004950:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f013 0f01 	tst.w	r3, #1
 800495a:	4b53      	ldr	r3, [pc, #332]	@ (8004aa8 <HAL_ADC_Init+0x1f4>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	d101      	bne.n	8004964 <HAL_ADC_Init+0xb0>
 8004960:	07db      	lsls	r3, r3, #31
 8004962:	d576      	bpl.n	8004a52 <HAL_ADC_Init+0x19e>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004964:	68e5      	ldr	r5, [r4, #12]
 8004966:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004968:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                hadc->Init.DataAlign                                                   |
 800496c:	432b      	orrs	r3, r5
 800496e:	68a5      	ldr	r5, [r4, #8]
 8004970:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004972:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004974:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8004976:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800497a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800497e:	d05b      	beq.n	8004a38 <HAL_ADC_Init+0x184>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004980:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004982:	b121      	cbz	r1, 800498e <HAL_ADC_Init+0xda>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004984:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004986:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800498a:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800498c:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800498e:	68d5      	ldr	r5, [r2, #12]
 8004990:	4946      	ldr	r1, [pc, #280]	@ (8004aac <HAL_ADC_Init+0x1f8>)
 8004992:	4029      	ands	r1, r5
 8004994:	4319      	orrs	r1, r3
 8004996:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004998:	6913      	ldr	r3, [r2, #16]
 800499a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800499c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049a4:	6891      	ldr	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049a6:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049a8:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	430b      	orrs	r3, r1
 80049b2:	d01d      	beq.n	80049f0 <HAL_ADC_Init+0x13c>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80049b4:	6963      	ldr	r3, [r4, #20]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d043      	beq.n	8004a42 <HAL_ADC_Init+0x18e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80049ba:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80049bc:	f023 030f 	bic.w	r3, r3, #15
 80049c0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049c2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80049c4:	f023 0303 	bic.w	r3, r3, #3
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80049ce:	b003      	add	sp, #12
 80049d0:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049d2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80049d4:	f043 0310 	orr.w	r3, r3, #16
 80049d8:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80049da:	2001      	movs	r0, #1
}
 80049dc:	b003      	add	sp, #12
 80049de:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049e0:	2000      	movs	r0, #0
 80049e2:	e7a5      	b.n	8004930 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 80049e4:	f7ff fb84 	bl	80040f0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80049e8:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 80049ea:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 80049ee:	e76d      	b.n	80048cc <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049f0:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049f2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049f6:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049f8:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049fc:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049fe:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a02:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a06:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8004a08:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a0a:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a0c:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004a0e:	bb41      	cbnz	r1, 8004a62 <HAL_ADC_Init+0x1ae>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a14:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004a16:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004a1a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a22:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004a26:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d026      	beq.n	8004a7c <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a2e:	6913      	ldr	r3, [r2, #16]
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	6113      	str	r3, [r2, #16]
 8004a36:	e7bd      	b.n	80049b4 <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a38:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004a3a:	3901      	subs	r1, #1
 8004a3c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004a40:	e79e      	b.n	8004980 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a42:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004a44:	6a23      	ldr	r3, [r4, #32]
 8004a46:	f021 010f 	bic.w	r1, r1, #15
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a50:	e7b7      	b.n	80049c2 <HAL_ADC_Init+0x10e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a52:	4917      	ldr	r1, [pc, #92]	@ (8004ab0 <HAL_ADC_Init+0x1fc>)
 8004a54:	6865      	ldr	r5, [r4, #4]
 8004a56:	688b      	ldr	r3, [r1, #8]
 8004a58:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8004a5c:	432b      	orrs	r3, r5
 8004a5e:	608b      	str	r3, [r1, #8]
}
 8004a60:	e780      	b.n	8004964 <HAL_ADC_Init+0xb0>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a66:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004a68:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004a6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a74:	430b      	orrs	r3, r1
 8004a76:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004a7a:	e7d4      	b.n	8004a26 <HAL_ADC_Init+0x172>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004a7c:	6911      	ldr	r1, [r2, #16]
 8004a7e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004a80:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8004a82:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8004a86:	f021 0104 	bic.w	r1, r1, #4
 8004a8a:	432b      	orrs	r3, r5
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004a94:	430b      	orrs	r3, r1
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6113      	str	r3, [r2, #16]
 8004a9c:	e78a      	b.n	80049b4 <HAL_ADC_Init+0x100>
 8004a9e:	bf00      	nop
 8004aa0:	20000554 	.word	0x20000554
 8004aa4:	053e2d63 	.word	0x053e2d63
 8004aa8:	50000100 	.word	0x50000100
 8004aac:	fff04007 	.word	0xfff04007
 8004ab0:	50000300 	.word	0x50000300

08004ab4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ab8:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8004abc:	b082      	sub	sp, #8
 8004abe:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004ac0:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004ac8:	f000 812b 	beq.w	8004d22 <HAL_ADC_ConfigChannel+0x26e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004acc:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004ace:	2001      	movs	r0, #1
 8004ad0:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ad4:	6894      	ldr	r4, [r2, #8]
 8004ad6:	0764      	lsls	r4, r4, #29
 8004ad8:	d44f      	bmi.n	8004b7a <HAL_ADC_ConfigChannel+0xc6>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ada:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004adc:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8004ae0:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004ae4:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8004ae8:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004aea:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8004aee:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004af2:	f854 500e 	ldr.w	r5, [r4, lr]
 8004af6:	261f      	movs	r6, #31
 8004af8:	fa00 f00c 	lsl.w	r0, r0, ip
 8004afc:	fa06 fc0c 	lsl.w	ip, r6, ip
 8004b00:	ea25 0c0c 	bic.w	ip, r5, ip
 8004b04:	ea40 000c 	orr.w	r0, r0, ip
 8004b08:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b0c:	6890      	ldr	r0, [r2, #8]
 8004b0e:	0747      	lsls	r7, r0, #29
 8004b10:	d53d      	bpl.n	8004b8e <HAL_ADC_ConfigChannel+0xda>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b12:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b14:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b16:	6894      	ldr	r4, [r2, #8]
 8004b18:	07e5      	lsls	r5, r4, #31
 8004b1a:	d40c      	bmi.n	8004b36 <HAL_ADC_ConfigChannel+0x82>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004b1c:	4dc0      	ldr	r5, [pc, #768]	@ (8004e20 <HAL_ADC_ConfigChannel+0x36c>)
 8004b1e:	68ce      	ldr	r6, [r1, #12]
 8004b20:	42ae      	cmp	r6, r5
    SET_BIT(ADCx->DIFSEL,
 8004b22:	f3c0 0412 	ubfx	r4, r0, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004b26:	f000 80a7 	beq.w	8004c78 <HAL_ADC_ConfigChannel+0x1c4>
    CLEAR_BIT(ADCx->DIFSEL,
 8004b2a:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8004b2e:	ea21 0104 	bic.w	r1, r1, r4
 8004b32:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b36:	49bb      	ldr	r1, [pc, #748]	@ (8004e24 <HAL_ADC_ConfigChannel+0x370>)
 8004b38:	4208      	tst	r0, r1
 8004b3a:	d01c      	beq.n	8004b76 <HAL_ADC_ConfigChannel+0xc2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b3c:	4cba      	ldr	r4, [pc, #744]	@ (8004e28 <HAL_ADC_ConfigChannel+0x374>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b3e:	4dbb      	ldr	r5, [pc, #748]	@ (8004e2c <HAL_ADC_ConfigChannel+0x378>)
 8004b40:	68a1      	ldr	r1, [r4, #8]
 8004b42:	42a8      	cmp	r0, r5
 8004b44:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8004b48:	d073      	beq.n	8004c32 <HAL_ADC_ConfigChannel+0x17e>
 8004b4a:	4db9      	ldr	r5, [pc, #740]	@ (8004e30 <HAL_ADC_ConfigChannel+0x37c>)
 8004b4c:	42a8      	cmp	r0, r5
 8004b4e:	d070      	beq.n	8004c32 <HAL_ADC_ConfigChannel+0x17e>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b50:	4db8      	ldr	r5, [pc, #736]	@ (8004e34 <HAL_ADC_ConfigChannel+0x380>)
 8004b52:	42a8      	cmp	r0, r5
 8004b54:	f000 80e9 	beq.w	8004d2a <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b58:	4db7      	ldr	r5, [pc, #732]	@ (8004e38 <HAL_ADC_ConfigChannel+0x384>)
 8004b5a:	42a8      	cmp	r0, r5
 8004b5c:	d10b      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b5e:	0249      	lsls	r1, r1, #9
 8004b60:	d409      	bmi.n	8004b76 <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b62:	49b6      	ldr	r1, [pc, #728]	@ (8004e3c <HAL_ADC_ConfigChannel+0x388>)
 8004b64:	428a      	cmp	r2, r1
 8004b66:	d006      	beq.n	8004b76 <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b68:	68a2      	ldr	r2, [r4, #8]
 8004b6a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004b6e:	4332      	orrs	r2, r6
 8004b70:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004b74:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b76:	2000      	movs	r0, #0
 8004b78:	e003      	b.n	8004b82 <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b7c:	f042 0220 	orr.w	r2, r2, #32
 8004b80:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004b88:	b002      	add	sp, #8
 8004b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b8e:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	0726      	lsls	r6, r4, #28
 8004b94:	d4bf      	bmi.n	8004b16 <HAL_ADC_ConfigChannel+0x62>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b96:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8004b98:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8004b9c:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b9e:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8004ba0:	40b4      	lsls	r4, r6
 8004ba2:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ba6:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8004baa:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004bae:	f102 0714 	add.w	r7, r2, #20
 8004bb2:	f000 8105 	beq.w	8004dc0 <HAL_ADC_ConfigChannel+0x30c>
  MODIFY_REG(*preg,
 8004bb6:	40b5      	lsls	r5, r6
 8004bb8:	583e      	ldr	r6, [r7, r0]
 8004bba:	4034      	ands	r4, r6
 8004bbc:	432c      	orrs	r4, r5
 8004bbe:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004bc0:	6950      	ldr	r0, [r2, #20]
 8004bc2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004bc6:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bc8:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bcc:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bce:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bd0:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bd2:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bd6:	4684      	mov	ip, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bd8:	f000 80ca 	beq.w	8004d70 <HAL_ADC_ConfigChannel+0x2bc>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bdc:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004be0:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8004be2:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8004be6:	40b5      	lsls	r5, r6
 8004be8:	4e95      	ldr	r6, [pc, #596]	@ (8004e40 <HAL_ADC_ConfigChannel+0x38c>)
 8004bea:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8004bee:	ea0c 0606 	and.w	r6, ip, r6
 8004bf2:	4306      	orrs	r6, r0
 8004bf4:	4335      	orrs	r5, r6
 8004bf6:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8004bfa:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bfe:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8004c00:	698e      	ldr	r6, [r1, #24]
 8004c02:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8004c06:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8004c0a:	4330      	orrs	r0, r6
 8004c0c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c10:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004c12:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8004c14:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8004c18:	f1a5 0501 	sub.w	r5, r5, #1
 8004c1c:	fab5 f585 	clz	r5, r5
 8004c20:	096d      	lsrs	r5, r5, #5
 8004c22:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8004c26:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8004c2a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c2e:	6808      	ldr	r0, [r1, #0]
}
 8004c30:	e771      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c32:	020c      	lsls	r4, r1, #8
 8004c34:	d49f      	bmi.n	8004b76 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c36:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004c3a:	d19c      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004c3c:	497a      	ldr	r1, [pc, #488]	@ (8004e28 <HAL_ADC_ConfigChannel+0x374>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c3e:	4881      	ldr	r0, [pc, #516]	@ (8004e44 <HAL_ADC_ConfigChannel+0x390>)
 8004c40:	688a      	ldr	r2, [r1, #8]
 8004c42:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004c46:	4332      	orrs	r2, r6
 8004c48:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004c4c:	608a      	str	r2, [r1, #8]
 8004c4e:	6802      	ldr	r2, [r0, #0]
 8004c50:	497d      	ldr	r1, [pc, #500]	@ (8004e48 <HAL_ADC_ConfigChannel+0x394>)
 8004c52:	0992      	lsrs	r2, r2, #6
 8004c54:	fba1 1202 	umull	r1, r2, r1, r2
 8004c58:	0992      	lsrs	r2, r2, #6
 8004c5a:	3201      	adds	r2, #1
 8004c5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004c60:	0092      	lsls	r2, r2, #2
 8004c62:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004c64:	9a01      	ldr	r2, [sp, #4]
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	d085      	beq.n	8004b76 <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 8004c6a:	9a01      	ldr	r2, [sp, #4]
 8004c6c:	3a01      	subs	r2, #1
 8004c6e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004c70:	9a01      	ldr	r2, [sp, #4]
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d1f9      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x1b6>
 8004c76:	e77e      	b.n	8004b76 <HAL_ADC_ConfigChannel+0xc2>
    SET_BIT(ADCx->DIFSEL,
 8004c78:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8004c7c:	4325      	orrs	r5, r4
 8004c7e:	f8c2 50b0 	str.w	r5, [r2, #176]	@ 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c82:	2c00      	cmp	r4, #0
 8004c84:	d060      	beq.n	8004d48 <HAL_ADC_ConfigChannel+0x294>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c86:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004c8a:	2c00      	cmp	r4, #0
 8004c8c:	f000 80a0 	beq.w	8004dd0 <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 8004c90:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c94:	3401      	adds	r4, #1
 8004c96:	f004 041f 	and.w	r4, r4, #31
 8004c9a:	2c09      	cmp	r4, #9
 8004c9c:	f240 8098 	bls.w	8004dd0 <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004ca4:	2c00      	cmp	r4, #0
 8004ca6:	f000 8147 	beq.w	8004f38 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8004caa:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cae:	3401      	adds	r4, #1
 8004cb0:	06a4      	lsls	r4, r4, #26
 8004cb2:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004cba:	2d00      	cmp	r5, #0
 8004cbc:	f000 8141 	beq.w	8004f42 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8004cc0:	fab5 f585 	clz	r5, r5
 8004cc4:	3501      	adds	r5, #1
 8004cc6:	f005 051f 	and.w	r5, r5, #31
 8004cca:	2601      	movs	r6, #1
 8004ccc:	fa06 f505 	lsl.w	r5, r6, r5
 8004cd0:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd2:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	f000 8131 	beq.w	8004f3e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004cdc:	fab0 f080 	clz	r0, r0
 8004ce0:	1c45      	adds	r5, r0, #1
 8004ce2:	f005 051f 	and.w	r5, r5, #31
 8004ce6:	2003      	movs	r0, #3
 8004ce8:	f06f 061d 	mvn.w	r6, #29
 8004cec:	fb10 6005 	smlabb	r0, r0, r5, r6
 8004cf0:	0500      	lsls	r0, r0, #20
 8004cf2:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cf6:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004cf8:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8004cfa:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004cfc:	f005 0504 	and.w	r5, r5, #4
 8004d00:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8004d04:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004d08:	fa04 f700 	lsl.w	r7, r4, r0
 8004d0c:	f04f 0c07 	mov.w	ip, #7
 8004d10:	5974      	ldr	r4, [r6, r5]
 8004d12:	fa0c f000 	lsl.w	r0, ip, r0
 8004d16:	ea24 0000 	bic.w	r0, r4, r0
 8004d1a:	4338      	orrs	r0, r7
 8004d1c:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d1e:	6808      	ldr	r0, [r1, #0]
}
 8004d20:	e709      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x82>
  __HAL_LOCK(hadc);
 8004d22:	2002      	movs	r0, #2
}
 8004d24:	b002      	add	sp, #8
 8004d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d2a:	01c8      	lsls	r0, r1, #7
 8004d2c:	f53f af23 	bmi.w	8004b76 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d30:	4942      	ldr	r1, [pc, #264]	@ (8004e3c <HAL_ADC_ConfigChannel+0x388>)
 8004d32:	428a      	cmp	r2, r1
 8004d34:	f43f af1f 	beq.w	8004b76 <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d38:	68a2      	ldr	r2, [r4, #8]
 8004d3a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004d3e:	4332      	orrs	r2, r6
 8004d40:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004d44:	60a2      	str	r2, [r4, #8]
}
 8004d46:	e716      	b.n	8004b76 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d48:	0e80      	lsrs	r0, r0, #26
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f000 061f 	and.w	r6, r0, #31
 8004d50:	0680      	lsls	r0, r0, #26
 8004d52:	f000 45f8 	and.w	r5, r0, #2080374784	@ 0x7c000000
 8004d56:	2001      	movs	r0, #1
 8004d58:	40b0      	lsls	r0, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d5a:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d5c:	ea45 0400 	orr.w	r4, r5, r0
 8004d60:	eb06 0046 	add.w	r0, r6, r6, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d64:	d959      	bls.n	8004e1a <HAL_ADC_ConfigChannel+0x366>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d66:	381e      	subs	r0, #30
 8004d68:	0500      	lsls	r0, r0, #20
 8004d6a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004d6e:	e7c2      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x242>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d70:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8004d72:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d74:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d78:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d7c:	2e00      	cmp	r6, #0
 8004d7e:	d165      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x398>
 8004d80:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d84:	4285      	cmp	r5, r0
 8004d86:	f000 80a7 	beq.w	8004ed8 <HAL_ADC_ConfigChannel+0x424>
 8004d8a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004d8c:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d8e:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004d92:	4285      	cmp	r5, r0
 8004d94:	f000 808b 	beq.w	8004eae <HAL_ADC_ConfigChannel+0x3fa>
 8004d98:	68a5      	ldr	r5, [r4, #8]
 8004d9a:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d9c:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004da0:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004da4:	4285      	cmp	r5, r0
 8004da6:	f000 80a9 	beq.w	8004efc <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004daa:	68e5      	ldr	r5, [r4, #12]
 8004dac:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dae:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004db2:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8004db6:	42a0      	cmp	r0, r4
 8004db8:	f000 80b5 	beq.w	8004f26 <HAL_ADC_ConfigChannel+0x472>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004dbc:	4660      	mov	r0, ip
 8004dbe:	e6aa      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x62>
  MODIFY_REG(*preg,
 8004dc0:	583d      	ldr	r5, [r7, r0]
 8004dc2:	402c      	ands	r4, r5
 8004dc4:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004dc6:	6950      	ldr	r0, [r2, #20]
 8004dc8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004dcc:	6150      	str	r0, [r2, #20]
}
 8004dce:	e6fb      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004dd4:	2c00      	cmp	r4, #0
 8004dd6:	f000 80b8 	beq.w	8004f4a <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 8004dda:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dde:	3401      	adds	r4, #1
 8004de0:	06a4      	lsls	r4, r4, #26
 8004de2:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	f000 80ab 	beq.w	8004f46 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004df0:	fab5 f585 	clz	r5, r5
 8004df4:	3501      	adds	r5, #1
 8004df6:	f005 051f 	and.w	r5, r5, #31
 8004dfa:	2601      	movs	r6, #1
 8004dfc:	fa06 f505 	lsl.w	r5, r6, r5
 8004e00:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004e06:	2800      	cmp	r0, #0
 8004e08:	f000 8093 	beq.w	8004f32 <HAL_ADC_ConfigChannel+0x47e>
  return __builtin_clz(value);
 8004e0c:	fab0 f080 	clz	r0, r0
 8004e10:	3001      	adds	r0, #1
 8004e12:	f000 001f 	and.w	r0, r0, #31
 8004e16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004e1a:	0500      	lsls	r0, r0, #20
 8004e1c:	e76b      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x242>
 8004e1e:	bf00      	nop
 8004e20:	407f0000 	.word	0x407f0000
 8004e24:	80080000 	.word	0x80080000
 8004e28:	50000300 	.word	0x50000300
 8004e2c:	c3210000 	.word	0xc3210000
 8004e30:	90c00010 	.word	0x90c00010
 8004e34:	c7520000 	.word	0xc7520000
 8004e38:	cb840000 	.word	0xcb840000
 8004e3c:	50000100 	.word	0x50000100
 8004e40:	03fff000 	.word	0x03fff000
 8004e44:	20000554 	.word	0x20000554
 8004e48:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4c:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8004e50:	b11e      	cbz	r6, 8004e5a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8004e52:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e56:	42b5      	cmp	r5, r6
 8004e58:	d03e      	beq.n	8004ed8 <HAL_ADC_ConfigChannel+0x424>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e5a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004e5c:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e5e:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e66:	f104 0708 	add.w	r7, r4, #8
 8004e6a:	46be      	mov	lr, r7
  if (value == 0U)
 8004e6c:	b11e      	cbz	r6, 8004e76 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8004e6e:	fab6 f686 	clz	r6, r6
 8004e72:	42ae      	cmp	r6, r5
 8004e74:	d01d      	beq.n	8004eb2 <HAL_ADC_ConfigChannel+0x3fe>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e76:	68a5      	ldr	r5, [r4, #8]
 8004e78:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e7a:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7e:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e82:	f104 060c 	add.w	r6, r4, #12
 8004e86:	46b0      	mov	r8, r6
  if (value == 0U)
 8004e88:	f1be 0f00 	cmp.w	lr, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8004e8e:	fabe fe8e 	clz	lr, lr
 8004e92:	45ae      	cmp	lr, r5
 8004e94:	d034      	beq.n	8004f00 <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e96:	68e5      	ldr	r5, [r4, #12]
 8004e98:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e9a:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9e:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	f43f ae37 	beq.w	8004b16 <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8004ea8:	fab5 f085 	clz	r0, r5
 8004eac:	e783      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x302>
 8004eae:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8004eb2:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004eb4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004eb8:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004eba:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ebe:	68a0      	ldr	r0, [r4, #8]
 8004ec0:	68a5      	ldr	r5, [r4, #8]
 8004ec2:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ec6:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ec8:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ecc:	4660      	mov	r0, ip
 8004ece:	2e00      	cmp	r6, #0
 8004ed0:	d1d5      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x3ca>
 8004ed2:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004ed6:	e765      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x2f0>
  MODIFY_REG(*preg,
 8004ed8:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8004eda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004ede:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ee0:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ee4:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004ee6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004ee8:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004eec:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ef0:	4660      	mov	r0, ip
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	d1b5      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x3ae>
 8004ef6:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004efa:	e74a      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x2de>
 8004efc:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8004f00:	6838      	ldr	r0, [r7, #0]
 8004f02:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004f06:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f08:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f0c:	68e0      	ldr	r0, [r4, #12]
 8004f0e:	68e4      	ldr	r4, [r4, #12]
 8004f10:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f14:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f16:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f1a:	4660      	mov	r0, ip
 8004f1c:	2d00      	cmp	r5, #0
 8004f1e:	d1be      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x3ea>
 8004f20:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004f24:	e747      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x302>
  MODIFY_REG(*preg,
 8004f26:	6830      	ldr	r0, [r6, #0]
 8004f28:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004f2c:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f2e:	6808      	ldr	r0, [r1, #0]
}
 8004f30:	e5f1      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x62>
 8004f32:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8004f36:	e6de      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x242>
 8004f38:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004f3c:	e6bb      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x202>
 8004f3e:	4804      	ldr	r0, [pc, #16]	@ (8004f50 <HAL_ADC_ConfigChannel+0x49c>)
 8004f40:	e6d9      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x242>
 8004f42:	2502      	movs	r5, #2
 8004f44:	e6c4      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x21c>
 8004f46:	2502      	movs	r5, #2
 8004f48:	e75a      	b.n	8004e00 <HAL_ADC_ConfigChannel+0x34c>
 8004f4a:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004f4e:	e74a      	b.n	8004de6 <HAL_ADC_ConfigChannel+0x332>
 8004f50:	fe500000 	.word	0xfe500000

08004f54 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f58:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8004f60:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8004f62:	2b01      	cmp	r3, #1
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f64:	6955      	ldr	r5, [r2, #20]
  __IO uint32_t wait_loop_index = 0;
 8004f66:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004f68:	f000 8170 	beq.w	800524c <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004f72:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004f76:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	d06a      	beq.n	8005052 <HAL_ADCEx_InjectedConfigChannel+0xfe>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004f7c:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004f7e:	2d01      	cmp	r5, #1
 8004f80:	d067      	beq.n	8005052 <HAL_ADCEx_InjectedConfigChannel+0xfe>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004f82:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004f84:	f000 001f 	and.w	r0, r0, #31
 8004f88:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004f8c:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	f040 8112 	bne.w	80051b8 <HAL_ADCEx_InjectedConfigChannel+0x264>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004f94:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004f96:	3d01      	subs	r5, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f000 8211 	beq.w	80053c0 <HAL_ADCEx_InjectedConfigChannel+0x46c>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004f9e:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004fa0:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 8004fa4:	4328      	orrs	r0, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004fa6:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004fa8:	4330      	orrs	r0, r6
 8004faa:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fae:	6898      	ldr	r0, [r3, #8]
 8004fb0:	0700      	lsls	r0, r0, #28
 8004fb2:	d410      	bmi.n	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x82>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004fb4:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004fb8:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8004fbc:	0540      	lsls	r0, r0, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	f040 80ef 	bne.w	80051a2 <HAL_ADCEx_InjectedConfigChannel+0x24e>
      MODIFY_REG(hadc->Instance->CFGR,
 8004fc4:	68dd      	ldr	r5, [r3, #12]
 8004fc6:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8004fca:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004fce:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8004fd2:	4328      	orrs	r0, r5
 8004fd4:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fd6:	6898      	ldr	r0, [r3, #8]
 8004fd8:	f010 0004 	ands.w	r0, r0, #4
 8004fdc:	d04f      	beq.n	800507e <HAL_ADCEx_InjectedConfigChannel+0x12a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fde:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fe0:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fe2:	689d      	ldr	r5, [r3, #8]
 8004fe4:	07ee      	lsls	r6, r5, #31
 8004fe6:	d40c      	bmi.n	8005002 <HAL_ADCEx_InjectedConfigChannel+0xae>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004fe8:	4ea2      	ldr	r6, [pc, #648]	@ (8005274 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8004fea:	68cf      	ldr	r7, [r1, #12]
 8004fec:	42b7      	cmp	r7, r6
    SET_BIT(ADCx->DIFSEL,
 8004fee:	f3c4 0512 	ubfx	r5, r4, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004ff2:	f000 80fc 	beq.w	80051ee <HAL_ADCEx_InjectedConfigChannel+0x29a>
    CLEAR_BIT(ADCx->DIFSEL,
 8004ff6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8004ffa:	ea21 0105 	bic.w	r1, r1, r5
 8004ffe:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005002:	499d      	ldr	r1, [pc, #628]	@ (8005278 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8005004:	420c      	tst	r4, r1
 8005006:	d01e      	beq.n	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005008:	4e9c      	ldr	r6, [pc, #624]	@ (800527c <HAL_ADCEx_InjectedConfigChannel+0x328>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800500a:	4d9d      	ldr	r5, [pc, #628]	@ (8005280 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800500c:	68b1      	ldr	r1, [r6, #8]
 800500e:	42ac      	cmp	r4, r5
 8005010:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 8005014:	f000 809f 	beq.w	8005156 <HAL_ADCEx_InjectedConfigChannel+0x202>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005018:	4d9a      	ldr	r5, [pc, #616]	@ (8005284 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800501a:	42ac      	cmp	r4, r5
 800501c:	f000 809b 	beq.w	8005156 <HAL_ADCEx_InjectedConfigChannel+0x202>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005020:	4d99      	ldr	r5, [pc, #612]	@ (8005288 <HAL_ADCEx_InjectedConfigChannel+0x334>)
 8005022:	42ac      	cmp	r4, r5
 8005024:	f000 8116 	beq.w	8005254 <HAL_ADCEx_InjectedConfigChannel+0x300>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005028:	4d98      	ldr	r5, [pc, #608]	@ (800528c <HAL_ADCEx_InjectedConfigChannel+0x338>)
 800502a:	42ac      	cmp	r4, r5
 800502c:	d10b      	bne.n	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800502e:	0249      	lsls	r1, r1, #9
 8005030:	d409      	bmi.n	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005032:	4997      	ldr	r1, [pc, #604]	@ (8005290 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8005034:	428b      	cmp	r3, r1
 8005036:	d006      	beq.n	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005038:	68b3      	ldr	r3, [r6, #8]
 800503a:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800503e:	433b      	orrs	r3, r7
 8005040:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005044:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005046:	2300      	movs	r3, #0
 8005048:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800504c:	b003      	add	sp, #12
 800504e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005052:	2809      	cmp	r0, #9
 8005054:	d1ab      	bne.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005056:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005058:	0c65      	lsrs	r5, r4, #17
 800505a:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800505e:	b120      	cbz	r0, 800506a <HAL_ADCEx_InjectedConfigChannel+0x116>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005060:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005062:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005066:	4330      	orrs	r0, r6
 8005068:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800506a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800506c:	4e89      	ldr	r6, [pc, #548]	@ (8005294 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 800506e:	4030      	ands	r0, r6
 8005070:	4328      	orrs	r0, r5
 8005072:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005074:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005076:	6655      	str	r5, [r2, #100]	@ 0x64
 8005078:	0700      	lsls	r0, r0, #28
 800507a:	d4ac      	bmi.n	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x82>
 800507c:	e79a      	b.n	8004fb4 <HAL_ADCEx_InjectedConfigChannel+0x60>
 800507e:	689d      	ldr	r5, [r3, #8]
 8005080:	072f      	lsls	r7, r5, #28
 8005082:	d4ae      	bmi.n	8004fe2 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005084:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005086:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800508a:	2d00      	cmp	r5, #0
 800508c:	f040 80a6 	bne.w	80051dc <HAL_ADCEx_InjectedConfigChannel+0x288>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005090:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005092:	68d8      	ldr	r0, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005094:	f000 8196 	beq.w	80053c4 <HAL_ADCEx_InjectedConfigChannel+0x470>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005098:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 800509c:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800509e:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80050a0:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80050a4:	2d01      	cmp	r5, #1
 80050a6:	f000 8180 	beq.w	80053aa <HAL_ADCEx_InjectedConfigChannel+0x456>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80050aa:	691d      	ldr	r5, [r3, #16]
 80050ac:	f025 0502 	bic.w	r5, r5, #2
 80050b0:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80050b2:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 80050b4:	f3c4 5704 	ubfx	r7, r4, #20, #5
 80050b8:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80050ba:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 80050bc:	40bd      	lsls	r5, r7
 80050be:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80050c2:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80050c6:	ea6f 0505 	mvn.w	r5, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80050ca:	f103 0c14 	add.w	ip, r3, #20
 80050ce:	f000 8162 	beq.w	8005396 <HAL_ADCEx_InjectedConfigChannel+0x442>
  MODIFY_REG(*preg,
 80050d2:	40be      	lsls	r6, r7
 80050d4:	f85c 7004 	ldr.w	r7, [ip, r4]
 80050d8:	403d      	ands	r5, r7
 80050da:	4335      	orrs	r5, r6
 80050dc:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80050e0:	695c      	ldr	r4, [r3, #20]
 80050e2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80050e6:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80050e8:	f8d1 c010 	ldr.w	ip, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80050ec:	680c      	ldr	r4, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80050ee:	694e      	ldr	r6, [r1, #20]
 80050f0:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80050f2:	f1bc 0f04 	cmp.w	ip, #4
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80050f6:	46a6      	mov	lr, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050f8:	f103 0560 	add.w	r5, r3, #96	@ 0x60
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80050fc:	f000 810b 	beq.w	8005316 <HAL_ADCEx_InjectedConfigChannel+0x3c2>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005100:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8005104:	007f      	lsls	r7, r7, #1
  MODIFY_REG(*preg,
 8005106:	f855 e02c 	ldr.w	lr, [r5, ip, lsl #2]
 800510a:	40be      	lsls	r6, r7
 800510c:	4f62      	ldr	r7, [pc, #392]	@ (8005298 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 800510e:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8005112:	ea0e 0707 	and.w	r7, lr, r7
 8005116:	4327      	orrs	r7, r4
 8005118:	433e      	orrs	r6, r7
 800511a:	f046 4600 	orr.w	r6, r6, #2147483648	@ 0x80000000
 800511e:	f845 602c 	str.w	r6, [r5, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005122:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005124:	698e      	ldr	r6, [r1, #24]
 8005126:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 800512a:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 800512e:	4334      	orrs	r4, r6
 8005130:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005134:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005136:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8005138:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 800513c:	f1a6 0601 	sub.w	r6, r6, #1
 8005140:	fab6 f686 	clz	r6, r6
 8005144:	0976      	lsrs	r6, r6, #5
 8005146:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 800514a:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 800514e:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005152:	680c      	ldr	r4, [r1, #0]
}
 8005154:	e745      	b.n	8004fe2 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005156:	020d      	lsls	r5, r1, #8
 8005158:	f53f af75 	bmi.w	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800515c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005160:	f47f af71 	bne.w	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005164:	4945      	ldr	r1, [pc, #276]	@ (800527c <HAL_ADCEx_InjectedConfigChannel+0x328>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005166:	4c4d      	ldr	r4, [pc, #308]	@ (800529c <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8005168:	688b      	ldr	r3, [r1, #8]
 800516a:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800516e:	433b      	orrs	r3, r7
 8005170:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005174:	608b      	str	r3, [r1, #8]
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	4949      	ldr	r1, [pc, #292]	@ (80052a0 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 800517a:	099b      	lsrs	r3, r3, #6
 800517c:	fba1 1303 	umull	r1, r3, r1, r3
 8005180:	099b      	lsrs	r3, r3, #6
 8005182:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	3318      	adds	r3, #24
 800518a:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800518c:	9b01      	ldr	r3, [sp, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f43f af59 	beq.w	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8005194:	9b01      	ldr	r3, [sp, #4]
 8005196:	3b01      	subs	r3, #1
 8005198:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800519a:	9b01      	ldr	r3, [sp, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f9      	bne.n	8005194 <HAL_ADCEx_InjectedConfigChannel+0x240>
 80051a0:	e751      	b.n	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->CFGR,
 80051a2:	68dd      	ldr	r5, [r3, #12]
 80051a4:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80051a8:	4328      	orrs	r0, r5
 80051aa:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051ac:	6898      	ldr	r0, [r3, #8]
 80051ae:	f010 0004 	ands.w	r0, r0, #4
 80051b2:	f43f af64 	beq.w	800507e <HAL_ADCEx_InjectedConfigChannel+0x12a>
 80051b6:	e712      	b.n	8004fde <HAL_ADCEx_InjectedConfigChannel+0x8a>
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80051b8:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 80051ba:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80051bc:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 80051be:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80051c0:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80051c2:	2f00      	cmp	r7, #0
 80051c4:	f47f aef3 	bne.w	8004fae <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80051c8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80051ca:	4e32      	ldr	r6, [pc, #200]	@ (8005294 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 80051cc:	4030      	ands	r0, r6
 80051ce:	4328      	orrs	r0, r5
 80051d0:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051d2:	6898      	ldr	r0, [r3, #8]
 80051d4:	0700      	lsls	r0, r0, #28
 80051d6:	f53f aefe 	bmi.w	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x82>
 80051da:	e6eb      	b.n	8004fb4 <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80051dc:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 80051de:	2d00      	cmp	r5, #0
 80051e0:	f43f af56 	beq.w	8005090 <HAL_ADCEx_InjectedConfigChannel+0x13c>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80051e4:	2801      	cmp	r0, #1
 80051e6:	f000 810f 	beq.w	8005408 <HAL_ADCEx_InjectedConfigChannel+0x4b4>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80051ea:	68d8      	ldr	r0, [r3, #12]
 80051ec:	e754      	b.n	8005098 <HAL_ADCEx_InjectedConfigChannel+0x144>
    SET_BIT(ADCx->DIFSEL,
 80051ee:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 80051f2:	432e      	orrs	r6, r5
 80051f4:	f8c3 60b0 	str.w	r6, [r3, #176]	@ 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	d153      	bne.n	80052a4 <HAL_ADCEx_InjectedConfigChannel+0x350>
 80051fc:	0ea4      	lsrs	r4, r4, #26
 80051fe:	3401      	adds	r4, #1
 8005200:	f004 061f 	and.w	r6, r4, #31
 8005204:	2501      	movs	r5, #1
 8005206:	06a4      	lsls	r4, r4, #26
 8005208:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 800520c:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800520e:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005210:	ea45 0504 	orr.w	r5, r5, r4
 8005214:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005218:	f200 80f1 	bhi.w	80053fe <HAL_ADCEx_InjectedConfigChannel+0x4aa>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800521c:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800521e:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005220:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8005222:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005224:	f006 0604 	and.w	r6, r6, #4
 8005228:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800522c:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8005230:	fa05 fc04 	lsl.w	ip, r5, r4
 8005234:	f04f 0e07 	mov.w	lr, #7
 8005238:	59bd      	ldr	r5, [r7, r6]
 800523a:	fa0e f404 	lsl.w	r4, lr, r4
 800523e:	ea25 0404 	bic.w	r4, r5, r4
 8005242:	ea44 040c 	orr.w	r4, r4, ip
 8005246:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005248:	680c      	ldr	r4, [r1, #0]
}
 800524a:	e6da      	b.n	8005002 <HAL_ADCEx_InjectedConfigChannel+0xae>
  __HAL_LOCK(hadc);
 800524c:	2002      	movs	r0, #2
}
 800524e:	b003      	add	sp, #12
 8005250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005254:	01cc      	lsls	r4, r1, #7
 8005256:	f53f aef6 	bmi.w	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800525a:	490d      	ldr	r1, [pc, #52]	@ (8005290 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 800525c:	428b      	cmp	r3, r1
 800525e:	f43f aef2 	beq.w	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005262:	68b3      	ldr	r3, [r6, #8]
 8005264:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8005268:	433b      	orrs	r3, r7
 800526a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800526e:	60b3      	str	r3, [r6, #8]
}
 8005270:	e6e9      	b.n	8005046 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8005272:	bf00      	nop
 8005274:	407f0000 	.word	0x407f0000
 8005278:	80080000 	.word	0x80080000
 800527c:	50000300 	.word	0x50000300
 8005280:	c3210000 	.word	0xc3210000
 8005284:	90c00010 	.word	0x90c00010
 8005288:	c7520000 	.word	0xc7520000
 800528c:	cb840000 	.word	0xcb840000
 8005290:	50000100 	.word	0x50000100
 8005294:	04104000 	.word	0x04104000
 8005298:	03fff000 	.word	0x03fff000
 800529c:	20000554 	.word	0x20000554
 80052a0:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	f000 80b2 	beq.w	8005412 <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 80052ae:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052b2:	3501      	adds	r5, #1
 80052b4:	f005 051f 	and.w	r5, r5, #31
 80052b8:	2d09      	cmp	r5, #9
 80052ba:	f240 80aa 	bls.w	8005412 <HAL_ADCEx_InjectedConfigChannel+0x4be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052be:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80052c2:	2d00      	cmp	r5, #0
 80052c4:	f000 8111 	beq.w	80054ea <HAL_ADCEx_InjectedConfigChannel+0x596>
  return __builtin_clz(value);
 80052c8:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80052cc:	3501      	adds	r5, #1
 80052ce:	06ad      	lsls	r5, r5, #26
 80052d0:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d4:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80052d8:	2e00      	cmp	r6, #0
 80052da:	f000 8104 	beq.w	80054e6 <HAL_ADCEx_InjectedConfigChannel+0x592>
  return __builtin_clz(value);
 80052de:	fab6 f686 	clz	r6, r6
 80052e2:	3601      	adds	r6, #1
 80052e4:	f006 061f 	and.w	r6, r6, #31
 80052e8:	2701      	movs	r7, #1
 80052ea:	fa07 f606 	lsl.w	r6, r7, r6
 80052ee:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f0:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80052f4:	2c00      	cmp	r4, #0
 80052f6:	f000 80fe 	beq.w	80054f6 <HAL_ADCEx_InjectedConfigChannel+0x5a2>
  return __builtin_clz(value);
 80052fa:	fab4 f484 	clz	r4, r4
 80052fe:	1c66      	adds	r6, r4, #1
 8005300:	f006 061f 	and.w	r6, r6, #31
 8005304:	2403      	movs	r4, #3
 8005306:	f06f 071d 	mvn.w	r7, #29
 800530a:	fb14 7406 	smlabb	r4, r4, r6, r7
 800530e:	0524      	lsls	r4, r4, #20
 8005310:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8005314:	e783      	b.n	800521e <HAL_ADCEx_InjectedConfigChannel+0x2ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005316:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8005318:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800531a:	f3c4 0712 	ubfx	r7, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800531e:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005322:	2f00      	cmp	r7, #0
 8005324:	d052      	beq.n	80053cc <HAL_ADCEx_InjectedConfigChannel+0x478>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 800532a:	b127      	cbz	r7, 8005336 <HAL_ADCEx_InjectedConfigChannel+0x3e2>
  return __builtin_clz(value);
 800532c:	fab7 f787 	clz	r7, r7
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005330:	42be      	cmp	r6, r7
 8005332:	f000 80a7 	beq.w	8005484 <HAL_ADCEx_InjectedConfigChannel+0x530>
 8005336:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8005338:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800533a:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533e:	fa9e f7ae 	rbit	r7, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005342:	f105 0c08 	add.w	ip, r5, #8
 8005346:	46e0      	mov	r8, ip
  if (value == 0U)
 8005348:	b127      	cbz	r7, 8005354 <HAL_ADCEx_InjectedConfigChannel+0x400>
  return __builtin_clz(value);
 800534a:	fab7 f787 	clz	r7, r7
 800534e:	42b7      	cmp	r7, r6
 8005350:	f000 8084 	beq.w	800545c <HAL_ADCEx_InjectedConfigChannel+0x508>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005354:	68ae      	ldr	r6, [r5, #8]
 8005356:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005358:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	fa9e f8ae 	rbit	r8, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005360:	f105 070c 	add.w	r7, r5, #12
 8005364:	46b9      	mov	r9, r7
  if (value == 0U)
 8005366:	f1b8 0f00 	cmp.w	r8, #0
 800536a:	d004      	beq.n	8005376 <HAL_ADCEx_InjectedConfigChannel+0x422>
  return __builtin_clz(value);
 800536c:	fab8 f888 	clz	r8, r8
 8005370:	45b0      	cmp	r8, r6
 8005372:	f000 809c 	beq.w	80054ae <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005376:	68ee      	ldr	r6, [r5, #12]
 8005378:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800537a:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	fa9e f6ae 	rbit	r6, lr
  if (value == 0U)
 8005382:	2e00      	cmp	r6, #0
 8005384:	f43f ae2d 	beq.w	8004fe2 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  return __builtin_clz(value);
 8005388:	fab6 f486 	clz	r4, r6
 800538c:	42ac      	cmp	r4, r5
 800538e:	f000 80a4 	beq.w	80054da <HAL_ADCEx_InjectedConfigChannel+0x586>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005392:	4674      	mov	r4, lr
 8005394:	e625      	b.n	8004fe2 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 8005396:	f85c 6004 	ldr.w	r6, [ip, r4]
 800539a:	4035      	ands	r5, r6
 800539c:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80053a0:	695c      	ldr	r4, [r3, #20]
 80053a2:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80053a6:	615c      	str	r4, [r3, #20]
}
 80053a8:	e69e      	b.n	80050e8 <HAL_ADCEx_InjectedConfigChannel+0x194>
      MODIFY_REG(hadc->Instance->CFGR2,
 80053aa:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 80053ae:	691e      	ldr	r6, [r3, #16]
 80053b0:	433d      	orrs	r5, r7
 80053b2:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 80053b6:	4335      	orrs	r5, r6
 80053b8:	f045 0502 	orr.w	r5, r5, #2
 80053bc:	611d      	str	r5, [r3, #16]
 80053be:	e678      	b.n	80050b2 <HAL_ADCEx_InjectedConfigChannel+0x15e>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80053c0:	4628      	mov	r0, r5
 80053c2:	e5f1      	b.n	8004fa8 <HAL_ADCEx_InjectedConfigChannel+0x54>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80053c4:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 80053c8:	60d8      	str	r0, [r3, #12]
 80053ca:	e668      	b.n	800509e <HAL_ADCEx_InjectedConfigChannel+0x14a>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053cc:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053d0:	42a6      	cmp	r6, r4
 80053d2:	d057      	beq.n	8005484 <HAL_ADCEx_InjectedConfigChannel+0x530>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053d4:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 80053d6:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053d8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80053dc:	42a6      	cmp	r6, r4
 80053de:	d03b      	beq.n	8005458 <HAL_ADCEx_InjectedConfigChannel+0x504>
 80053e0:	68ae      	ldr	r6, [r5, #8]
 80053e2:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053e4:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053e8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80053ec:	42a6      	cmp	r6, r4
 80053ee:	d05c      	beq.n	80054aa <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053f0:	68ee      	ldr	r6, [r5, #12]
 80053f2:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053f4:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80053f8:	f3c6 6584 	ubfx	r5, r6, #26, #5
 80053fc:	e7c6      	b.n	800538c <HAL_ADCEx_InjectedConfigChannel+0x438>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80053fe:	3c1e      	subs	r4, #30
 8005400:	0524      	lsls	r4, r4, #20
 8005402:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8005406:	e70a      	b.n	800521e <HAL_ADCEx_InjectedConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005408:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 800540a:	f045 0520 	orr.w	r5, r5, #32
 800540e:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8005410:	e646      	b.n	80050a0 <HAL_ADCEx_InjectedConfigChannel+0x14c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005412:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005416:	2d00      	cmp	r5, #0
 8005418:	d071      	beq.n	80054fe <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return __builtin_clz(value);
 800541a:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800541e:	3501      	adds	r5, #1
 8005420:	06ad      	lsls	r5, r5, #26
 8005422:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800542a:	2e00      	cmp	r6, #0
 800542c:	d065      	beq.n	80054fa <HAL_ADCEx_InjectedConfigChannel+0x5a6>
  return __builtin_clz(value);
 800542e:	fab6 f686 	clz	r6, r6
 8005432:	3601      	adds	r6, #1
 8005434:	f006 061f 	and.w	r6, r6, #31
 8005438:	2701      	movs	r7, #1
 800543a:	fa07 f606 	lsl.w	r6, r7, r6
 800543e:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005440:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005444:	2c00      	cmp	r4, #0
 8005446:	d053      	beq.n	80054f0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
  return __builtin_clz(value);
 8005448:	fab4 f484 	clz	r4, r4
 800544c:	3401      	adds	r4, #1
 800544e:	f004 041f 	and.w	r4, r4, #31
 8005452:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005456:	e6e1      	b.n	800521c <HAL_ADCEx_InjectedConfigChannel+0x2c8>
 8005458:	f105 0808 	add.w	r8, r5, #8
  MODIFY_REG(*preg,
 800545c:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 800545e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005462:	665c      	str	r4, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005464:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005468:	68ac      	ldr	r4, [r5, #8]
 800546a:	68ae      	ldr	r6, [r5, #8]
 800546c:	f3ce 0712 	ubfx	r7, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005470:	46c4      	mov	ip, r8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005472:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005476:	4674      	mov	r4, lr
 8005478:	2f00      	cmp	r7, #0
 800547a:	f47f af6f 	bne.w	800535c <HAL_ADCEx_InjectedConfigChannel+0x408>
 800547e:	f3ce 6484 	ubfx	r4, lr, #26, #5
 8005482:	e7b3      	b.n	80053ec <HAL_ADCEx_InjectedConfigChannel+0x498>
  MODIFY_REG(*preg,
 8005484:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8005486:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800548a:	661c      	str	r4, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800548c:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005490:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8005492:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8005494:	f3ce 0712 	ubfx	r7, lr, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005498:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800549c:	4674      	mov	r4, lr
 800549e:	2f00      	cmp	r7, #0
 80054a0:	f47f af4d 	bne.w	800533e <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 80054a4:	f3ce 6484 	ubfx	r4, lr, #26, #5
 80054a8:	e798      	b.n	80053dc <HAL_ADCEx_InjectedConfigChannel+0x488>
 80054aa:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 80054ae:	f8dc 4000 	ldr.w	r4, [ip]
 80054b2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80054b6:	f8cc 4000 	str.w	r4, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80054ba:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054be:	68ec      	ldr	r4, [r5, #12]
 80054c0:	68ed      	ldr	r5, [r5, #12]
 80054c2:	f3ce 0612 	ubfx	r6, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054c6:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054c8:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80054cc:	4674      	mov	r4, lr
 80054ce:	2e00      	cmp	r6, #0
 80054d0:	f47f af55 	bne.w	800537e <HAL_ADCEx_InjectedConfigChannel+0x42a>
 80054d4:	f3ce 6484 	ubfx	r4, lr, #26, #5
 80054d8:	e758      	b.n	800538c <HAL_ADCEx_InjectedConfigChannel+0x438>
  MODIFY_REG(*preg,
 80054da:	683c      	ldr	r4, [r7, #0]
 80054dc:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80054e0:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80054e2:	680c      	ldr	r4, [r1, #0]
}
 80054e4:	e57d      	b.n	8004fe2 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 80054e6:	2602      	movs	r6, #2
 80054e8:	e701      	b.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0x39a>
 80054ea:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 80054ee:	e6f1      	b.n	80052d4 <HAL_ADCEx_InjectedConfigChannel+0x380>
 80054f0:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 80054f4:	e693      	b.n	800521e <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 80054f6:	4c03      	ldr	r4, [pc, #12]	@ (8005504 <HAL_ADCEx_InjectedConfigChannel+0x5b0>)
 80054f8:	e691      	b.n	800521e <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 80054fa:	2602      	movs	r6, #2
 80054fc:	e79f      	b.n	800543e <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 80054fe:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8005502:	e790      	b.n	8005426 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 8005504:	fe500000 	.word	0xfe500000

08005508 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005508:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800550a:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800550e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005510:	2a01      	cmp	r2, #1
{
 8005512:	b09c      	sub	sp, #112	@ 0x70
  __HAL_LOCK(hadc);
 8005514:	d042      	beq.n	800559c <HAL_ADCEx_MultiModeConfigChannel+0x94>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005516:	6804      	ldr	r4, [r0, #0]
 8005518:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800551a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800551c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800551e:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005522:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8005524:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005528:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800552a:	d008      	beq.n	800553e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800552c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800552e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005532:	f041 0120 	orr.w	r1, r1, #32
 8005536:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005538:	b01c      	add	sp, #112	@ 0x70
 800553a:	bcf0      	pop	{r4, r5, r6, r7}
 800553c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800553e:	4a23      	ldr	r2, [pc, #140]	@ (80055cc <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005540:	6890      	ldr	r0, [r2, #8]
 8005542:	0740      	lsls	r0, r0, #29
 8005544:	d50b      	bpl.n	800555e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005546:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005548:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800554a:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 800554e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005550:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8005558:	b01c      	add	sp, #112	@ 0x70
 800555a:	bcf0      	pop	{r4, r5, r6, r7}
 800555c:	4770      	bx	lr
 800555e:	68a0      	ldr	r0, [r4, #8]
 8005560:	0746      	lsls	r6, r0, #29
 8005562:	d4f1      	bmi.n	8005548 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005564:	b1f5      	cbz	r5, 80055a4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005566:	4e1a      	ldr	r6, [pc, #104]	@ (80055d0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005568:	684f      	ldr	r7, [r1, #4]
 800556a:	68b0      	ldr	r0, [r6, #8]
 800556c:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8005570:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8005574:	4338      	orrs	r0, r7
 8005576:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800557a:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800557c:	68a0      	ldr	r0, [r4, #8]
 800557e:	6892      	ldr	r2, [r2, #8]
 8005580:	07c0      	lsls	r0, r0, #31
 8005582:	d420      	bmi.n	80055c6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8005584:	07d7      	lsls	r7, r2, #31
 8005586:	d41e      	bmi.n	80055c6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        MODIFY_REG(tmpADC_Common->CCR,
 8005588:	68b0      	ldr	r0, [r6, #8]
 800558a:	688a      	ldr	r2, [r1, #8]
 800558c:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 8005590:	432a      	orrs	r2, r5
 8005592:	f021 010f 	bic.w	r1, r1, #15
 8005596:	430a      	orrs	r2, r1
 8005598:	60b2      	str	r2, [r6, #8]
 800559a:	e014      	b.n	80055c6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  __HAL_LOCK(hadc);
 800559c:	2002      	movs	r0, #2
}
 800559e:	b01c      	add	sp, #112	@ 0x70
 80055a0:	bcf0      	pop	{r4, r5, r6, r7}
 80055a2:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80055a4:	480a      	ldr	r0, [pc, #40]	@ (80055d0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80055a6:	6881      	ldr	r1, [r0, #8]
 80055a8:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80055ac:	6081      	str	r1, [r0, #8]
 80055ae:	68a1      	ldr	r1, [r4, #8]
 80055b0:	6892      	ldr	r2, [r2, #8]
 80055b2:	07cd      	lsls	r5, r1, #31
 80055b4:	d407      	bmi.n	80055c6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80055b6:	07d4      	lsls	r4, r2, #31
 80055b8:	d405      	bmi.n	80055c6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055ba:	6882      	ldr	r2, [r0, #8]
 80055bc:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 80055c0:	f022 020f 	bic.w	r2, r2, #15
 80055c4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055c6:	2000      	movs	r0, #0
 80055c8:	e7c3      	b.n	8005552 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80055ca:	bf00      	nop
 80055cc:	50000100 	.word	0x50000100
 80055d0:	50000300 	.word	0x50000300

080055d4 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80055d4:	b1b0      	cbz	r0, 8005604 <HAL_CORDIC_Init+0x30>
{
 80055d6:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80055d8:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80055dc:	4604      	mov	r4, r0
 80055de:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80055e2:	b153      	cbz	r3, 80055fa <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80055e4:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80055e6:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80055e8:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 80055ea:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 80055ee:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 80055f2:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80055f6:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 80055f8:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80055fa:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80055fe:	f7fe fe2d 	bl	800425c <HAL_CORDIC_MspInit>
 8005602:	e7ef      	b.n	80055e4 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005604:	2001      	movs	r0, #1
}
 8005606:	4770      	bx	lr

08005608 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005608:	4907      	ldr	r1, [pc, #28]	@ (8005628 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800560a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800560c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800560e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005612:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005616:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005618:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800561a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800561e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005622:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	e000ed00 	.word	0xe000ed00

0800562c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800562c:	4b1b      	ldr	r3, [pc, #108]	@ (800569c <HAL_NVIC_SetPriority+0x70>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005634:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005636:	f1c3 0e07 	rsb	lr, r3, #7
 800563a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800563e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005642:	bf28      	it	cs
 8005644:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005648:	f1bc 0f06 	cmp.w	ip, #6
 800564c:	d91c      	bls.n	8005688 <HAL_NVIC_SetPriority+0x5c>
 800564e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005652:	f04f 33ff 	mov.w	r3, #4294967295
 8005656:	fa03 f30c 	lsl.w	r3, r3, ip
 800565a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800565e:	f04f 33ff 	mov.w	r3, #4294967295
 8005662:	fa03 f30e 	lsl.w	r3, r3, lr
 8005666:	ea21 0303 	bic.w	r3, r1, r3
 800566a:	fa03 f30c 	lsl.w	r3, r3, ip
 800566e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005670:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8005672:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005674:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005676:	db0a      	blt.n	800568e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005678:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800567c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005680:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005684:	f85d fb04 	ldr.w	pc, [sp], #4
 8005688:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800568a:	4694      	mov	ip, r2
 800568c:	e7e7      	b.n	800565e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800568e:	4a04      	ldr	r2, [pc, #16]	@ (80056a0 <HAL_NVIC_SetPriority+0x74>)
 8005690:	f000 000f 	and.w	r0, r0, #15
 8005694:	4402      	add	r2, r0
 8005696:	7613      	strb	r3, [r2, #24]
 8005698:	f85d fb04 	ldr.w	pc, [sp], #4
 800569c:	e000ed00 	.word	0xe000ed00
 80056a0:	e000ecfc 	.word	0xe000ecfc

080056a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80056a4:	2800      	cmp	r0, #0
 80056a6:	db07      	blt.n	80056b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056a8:	4a04      	ldr	r2, [pc, #16]	@ (80056bc <HAL_NVIC_EnableIRQ+0x18>)
 80056aa:	0941      	lsrs	r1, r0, #5
 80056ac:	2301      	movs	r3, #1
 80056ae:	f000 001f 	and.w	r0, r0, #31
 80056b2:	4083      	lsls	r3, r0
 80056b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	e000e100 	.word	0xe000e100

080056c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056c0:	3801      	subs	r0, #1
 80056c2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80056c6:	d301      	bcc.n	80056cc <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80056ca:	4770      	bx	lr
{
 80056cc:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d2:	4c07      	ldr	r4, [pc, #28]	@ (80056f0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056d4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d6:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80056da:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056de:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056e0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056e2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056e4:	619a      	str	r2, [r3, #24]
}
 80056e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ea:	6119      	str	r1, [r3, #16]
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000ed00 	.word	0xe000ed00

080056f4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop

080056f8 <HAL_SYSTICK_IRQHandler>:
{
 80056f8:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80056fa:	f7ff fffb 	bl	80056f4 <HAL_SYSTICK_Callback>
}
 80056fe:	bd08      	pop	{r3, pc}

08005700 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005700:	2800      	cmp	r0, #0
 8005702:	d076      	beq.n	80057f2 <HAL_DMA_Init+0xf2>
{
 8005704:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005706:	4a3c      	ldr	r2, [pc, #240]	@ (80057f8 <HAL_DMA_Init+0xf8>)
 8005708:	6804      	ldr	r4, [r0, #0]
 800570a:	4294      	cmp	r4, r2
 800570c:	4603      	mov	r3, r0
 800570e:	d95c      	bls.n	80057ca <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005710:	493a      	ldr	r1, [pc, #232]	@ (80057fc <HAL_DMA_Init+0xfc>)
 8005712:	4a3b      	ldr	r2, [pc, #236]	@ (8005800 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8005714:	483b      	ldr	r0, [pc, #236]	@ (8005804 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005716:	4421      	add	r1, r4
 8005718:	fba2 2101 	umull	r2, r1, r2, r1
 800571c:	0909      	lsrs	r1, r1, #4
 800571e:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005720:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005722:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005724:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8005728:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800572a:	4e35      	ldr	r6, [pc, #212]	@ (8005800 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800572c:	4f36      	ldr	r7, [pc, #216]	@ (8005808 <HAL_DMA_Init+0x108>)
 800572e:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005732:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8005734:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005736:	4302      	orrs	r2, r0
 8005738:	6958      	ldr	r0, [r3, #20]
 800573a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800573c:	6998      	ldr	r0, [r3, #24]
 800573e:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 8005740:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005742:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005746:	69d8      	ldr	r0, [r3, #28]
 8005748:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800574a:	b2e0      	uxtb	r0, r4
 800574c:	3808      	subs	r0, #8
 800574e:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005752:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005754:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005758:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 800575a:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 800575e:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005760:	4e25      	ldr	r6, [pc, #148]	@ (80057f8 <HAL_DMA_Init+0xf8>)
 8005762:	4a2a      	ldr	r2, [pc, #168]	@ (800580c <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005764:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005768:	42b4      	cmp	r4, r6
 800576a:	bf98      	it	ls
 800576c:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800576e:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005772:	2401      	movs	r4, #1
 8005774:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005778:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800577a:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800577e:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005782:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005784:	649e      	str	r6, [r3, #72]	@ 0x48
 8005786:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800578a:	d027      	beq.n	80057dc <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800578c:	685e      	ldr	r6, [r3, #4]
 800578e:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005790:	3e01      	subs	r6, #1
 8005792:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005794:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005798:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800579c:	d824      	bhi.n	80057e8 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800579e:	4a1c      	ldr	r2, [pc, #112]	@ (8005810 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057a0:	481c      	ldr	r0, [pc, #112]	@ (8005814 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057a2:	442a      	add	r2, r5
 80057a4:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057a6:	3d01      	subs	r5, #1
 80057a8:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057aa:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057ac:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057b0:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057b2:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057b4:	4a18      	ldr	r2, [pc, #96]	@ (8005818 <HAL_DMA_Init+0x118>)
 80057b6:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b8:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80057ba:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057bc:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80057be:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80057c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 80057c6:	bcf0      	pop	{r4, r5, r6, r7}
 80057c8:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057ca:	4914      	ldr	r1, [pc, #80]	@ (800581c <HAL_DMA_Init+0x11c>)
 80057cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005800 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 80057ce:	4814      	ldr	r0, [pc, #80]	@ (8005820 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057d0:	4421      	add	r1, r4
 80057d2:	fba2 2101 	umull	r2, r1, r2, r1
 80057d6:	0909      	lsrs	r1, r1, #4
 80057d8:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 80057da:	e7a1      	b.n	8005720 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80057dc:	2400      	movs	r4, #0
 80057de:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057e0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057e4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 80057e8:	2200      	movs	r2, #0
 80057ea:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057f0:	e7e2      	b.n	80057b8 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 80057f2:	2001      	movs	r0, #1
}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40020407 	.word	0x40020407
 80057fc:	bffdfbf8 	.word	0xbffdfbf8
 8005800:	cccccccd 	.word	0xcccccccd
 8005804:	40020400 	.word	0x40020400
 8005808:	40020800 	.word	0x40020800
 800580c:	40020820 	.word	0x40020820
 8005810:	1000823f 	.word	0x1000823f
 8005814:	40020940 	.word	0x40020940
 8005818:	40020900 	.word	0x40020900
 800581c:	bffdfff8 	.word	0xbffdfff8
 8005820:	40020000 	.word	0x40020000

08005824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005828:	680c      	ldr	r4, [r1, #0]
{
 800582a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 800582c:	2c00      	cmp	r4, #0
 800582e:	f000 8089 	beq.w	8005944 <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8005832:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005834:	f04f 0b01 	mov.w	fp, #1
 8005838:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 800583c:	ea1e 0a04 	ands.w	sl, lr, r4
 8005840:	d07b      	beq.n	800593a <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005842:	684d      	ldr	r5, [r1, #4]
 8005844:	f005 0203 	and.w	r2, r5, #3
 8005848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800584c:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800584e:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005852:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005856:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800585a:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800585e:	d974      	bls.n	800594a <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005860:	2a03      	cmp	r2, #3
 8005862:	f040 80b0 	bne.w	80059c6 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005866:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 800586a:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800586e:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005872:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005874:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005878:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800587a:	d05e      	beq.n	800593a <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800587c:	4f66      	ldr	r7, [pc, #408]	@ (8005a18 <HAL_GPIO_Init+0x1f4>)
 800587e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	663a      	str	r2, [r7, #96]	@ 0x60
 8005886:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005888:	f002 0201 	and.w	r2, r2, #1
 800588c:	9203      	str	r2, [sp, #12]
 800588e:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005890:	f023 0203 	bic.w	r2, r3, #3
 8005894:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005898:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800589c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80058a0:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058a2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80058a6:	260f      	movs	r6, #15
 80058a8:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058ac:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058b0:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058b4:	d01d      	beq.n	80058f2 <HAL_GPIO_Init+0xce>
 80058b6:	4e59      	ldr	r6, [pc, #356]	@ (8005a1c <HAL_GPIO_Init+0x1f8>)
 80058b8:	42b0      	cmp	r0, r6
 80058ba:	f000 8097 	beq.w	80059ec <HAL_GPIO_Init+0x1c8>
 80058be:	4e58      	ldr	r6, [pc, #352]	@ (8005a20 <HAL_GPIO_Init+0x1fc>)
 80058c0:	42b0      	cmp	r0, r6
 80058c2:	f000 809a 	beq.w	80059fa <HAL_GPIO_Init+0x1d6>
 80058c6:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8005a28 <HAL_GPIO_Init+0x204>
 80058ca:	4570      	cmp	r0, lr
 80058cc:	f000 8087 	beq.w	80059de <HAL_GPIO_Init+0x1ba>
 80058d0:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8005a2c <HAL_GPIO_Init+0x208>
 80058d4:	4570      	cmp	r0, lr
 80058d6:	f000 8097 	beq.w	8005a08 <HAL_GPIO_Init+0x1e4>
 80058da:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8005a30 <HAL_GPIO_Init+0x20c>
 80058de:	4570      	cmp	r0, lr
 80058e0:	bf0c      	ite	eq
 80058e2:	f04f 0e05 	moveq.w	lr, #5
 80058e6:	f04f 0e06 	movne.w	lr, #6
 80058ea:	fa0e fc0c 	lsl.w	ip, lr, ip
 80058ee:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058f2:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058f4:	4a4b      	ldr	r2, [pc, #300]	@ (8005a24 <HAL_GPIO_Init+0x200>)
 80058f6:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058f8:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80058fa:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80058fe:	4e49      	ldr	r6, [pc, #292]	@ (8005a24 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005900:	bf54      	ite	pl
 8005902:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005904:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8005908:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800590a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800590c:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800590e:	4e45      	ldr	r6, [pc, #276]	@ (8005a24 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005910:	bf54      	ite	pl
 8005912:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005914:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8005918:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 800591a:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800591c:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800591e:	4e41      	ldr	r6, [pc, #260]	@ (8005a24 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005920:	bf54      	ite	pl
 8005922:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005924:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8005928:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800592a:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800592c:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800592e:	4d3d      	ldr	r5, [pc, #244]	@ (8005a24 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005930:	bf54      	ite	pl
 8005932:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005934:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8005938:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 800593a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800593c:	fa34 f203 	lsrs.w	r2, r4, r3
 8005940:	f47f af7a 	bne.w	8005838 <HAL_GPIO_Init+0x14>
  }
}
 8005944:	b005      	add	sp, #20
 8005946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800594a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800594e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005950:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005954:	fa06 f80c 	lsl.w	r8, r6, ip
 8005958:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800595c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8005960:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005964:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005966:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800596a:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800596e:	fa0e fe03 	lsl.w	lr, lr, r3
 8005972:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8005976:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800597a:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800597e:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005982:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005986:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800598a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800598c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005990:	f47f af69 	bne.w	8005866 <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005994:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005996:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800599a:	f003 0e07 	and.w	lr, r3, #7
 800599e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80059a2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059a6:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 80059aa:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059ae:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059b0:	260f      	movs	r6, #15
 80059b2:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059b6:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059b8:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059bc:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 80059c0:	f8c8 e020 	str.w	lr, [r8, #32]
 80059c4:	e74f      	b.n	8005866 <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 80059c6:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059ca:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059cc:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059d0:	fa06 fe0c 	lsl.w	lr, r6, ip
 80059d4:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 80059d8:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059dc:	e743      	b.n	8005866 <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059de:	f04f 0e03 	mov.w	lr, #3
 80059e2:	fa0e fc0c 	lsl.w	ip, lr, ip
 80059e6:	ea47 070c 	orr.w	r7, r7, ip
 80059ea:	e782      	b.n	80058f2 <HAL_GPIO_Init+0xce>
 80059ec:	f04f 0e01 	mov.w	lr, #1
 80059f0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80059f4:	ea47 070c 	orr.w	r7, r7, ip
 80059f8:	e77b      	b.n	80058f2 <HAL_GPIO_Init+0xce>
 80059fa:	f04f 0e02 	mov.w	lr, #2
 80059fe:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005a02:	ea47 070c 	orr.w	r7, r7, ip
 8005a06:	e774      	b.n	80058f2 <HAL_GPIO_Init+0xce>
 8005a08:	f04f 0e04 	mov.w	lr, #4
 8005a0c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005a10:	ea47 070c 	orr.w	r7, r7, ip
 8005a14:	e76d      	b.n	80058f2 <HAL_GPIO_Init+0xce>
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	48000400 	.word	0x48000400
 8005a20:	48000800 	.word	0x48000800
 8005a24:	40010400 	.word	0x40010400
 8005a28:	48000c00 	.word	0x48000c00
 8005a2c:	48001000 	.word	0x48001000
 8005a30:	48001400 	.word	0x48001400

08005a34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a34:	b10a      	cbz	r2, 8005a3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a36:	6181      	str	r1, [r0, #24]
 8005a38:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a3a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop

08005a40 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a40:	4a35      	ldr	r2, [pc, #212]	@ (8005b18 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005a42:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a44:	b960      	cbnz	r0, 8005a60 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a52:	d01b      	beq.n	8005a8c <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a5c:	2000      	movs	r0, #0
}
 8005a5e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a60:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005a64:	d006      	beq.n	8005a74 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a6e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005a70:	2000      	movs	r0, #0
}
 8005a72:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a7c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a80:	d029      	beq.n	8005ad6 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a86:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005a8a:	e7f1      	b.n	8005a70 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a94:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a96:	4821      	ldr	r0, [pc, #132]	@ (8005b1c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005a98:	4921      	ldr	r1, [pc, #132]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005aa2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aa4:	6803      	ldr	r3, [r0, #0]
 8005aa6:	2032      	movs	r0, #50	@ 0x32
 8005aa8:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aac:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aae:	fba1 1303 	umull	r1, r3, r1, r3
 8005ab2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ab4:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ab6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aba:	d506      	bpl.n	8005aca <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005abc:	e000      	b.n	8005ac0 <HAL_PWREx_ControlVoltageScaling+0x80>
 8005abe:	b123      	cbz	r3, 8005aca <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005ac0:	6951      	ldr	r1, [r2, #20]
 8005ac2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005ac4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ac8:	d4f9      	bmi.n	8005abe <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005aca:	4b13      	ldr	r3, [pc, #76]	@ (8005b18 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	055b      	lsls	r3, r3, #21
 8005ad0:	d5ce      	bpl.n	8005a70 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8005ad2:	2003      	movs	r0, #3
 8005ad4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ada:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ade:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ae0:	480e      	ldr	r0, [pc, #56]	@ (8005b1c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005ae2:	490f      	ldr	r1, [pc, #60]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ae4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ae8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005aec:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aee:	6803      	ldr	r3, [r0, #0]
 8005af0:	2032      	movs	r0, #50	@ 0x32
 8005af2:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005af6:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005af8:	fba1 1303 	umull	r1, r3, r1, r3
 8005afc:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005afe:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b00:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b04:	d5e1      	bpl.n	8005aca <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005b06:	e001      	b.n	8005b0c <HAL_PWREx_ControlVoltageScaling+0xcc>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0de      	beq.n	8005aca <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005b0c:	6951      	ldr	r1, [r2, #20]
 8005b0e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005b10:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b14:	d5d9      	bpl.n	8005aca <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005b16:	e7f7      	b.n	8005b08 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8005b18:	40007000 	.word	0x40007000
 8005b1c:	20000554 	.word	0x20000554
 8005b20:	431bde83 	.word	0x431bde83

08005b24 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b24:	4a02      	ldr	r2, [pc, #8]	@ (8005b30 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005b26:	6893      	ldr	r3, [r2, #8]
 8005b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b2c:	6093      	str	r3, [r2, #8]
}
 8005b2e:	4770      	bx	lr
 8005b30:	40007000 	.word	0x40007000

08005b34 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b34:	2800      	cmp	r0, #0
 8005b36:	f000 8239 	beq.w	8005fac <HAL_RCC_OscConfig+0x478>
{
 8005b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b3e:	6803      	ldr	r3, [r0, #0]
 8005b40:	07d9      	lsls	r1, r3, #31
{
 8005b42:	b082      	sub	sp, #8
 8005b44:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b46:	d512      	bpl.n	8005b6e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b48:	49a3      	ldr	r1, [pc, #652]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005b4a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b4c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b52:	2a0c      	cmp	r2, #12
 8005b54:	f000 80d6 	beq.w	8005d04 <HAL_RCC_OscConfig+0x1d0>
 8005b58:	2a08      	cmp	r2, #8
 8005b5a:	f040 80d8 	bne.w	8005d0e <HAL_RCC_OscConfig+0x1da>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b5e:	4a9e      	ldr	r2, [pc, #632]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	0392      	lsls	r2, r2, #14
 8005b64:	d503      	bpl.n	8005b6e <HAL_RCC_OscConfig+0x3a>
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	2a00      	cmp	r2, #0
 8005b6a:	f000 81a4 	beq.w	8005eb6 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b6e:	079a      	lsls	r2, r3, #30
 8005b70:	d522      	bpl.n	8005bb8 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b72:	4a99      	ldr	r2, [pc, #612]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005b74:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b76:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b78:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b7c:	2b0c      	cmp	r3, #12
 8005b7e:	f000 80fe 	beq.w	8005d7e <HAL_RCC_OscConfig+0x24a>
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	f040 8100 	bne.w	8005d88 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b88:	4b93      	ldr	r3, [pc, #588]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	055b      	lsls	r3, r3, #21
 8005b8e:	d503      	bpl.n	8005b98 <HAL_RCC_OscConfig+0x64>
 8005b90:	68e3      	ldr	r3, [r4, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 818f 	beq.w	8005eb6 <HAL_RCC_OscConfig+0x382>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b98:	4a8f      	ldr	r2, [pc, #572]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005b9a:	6920      	ldr	r0, [r4, #16]
 8005b9c:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b9e:	498f      	ldr	r1, [pc, #572]	@ (8005ddc <HAL_RCC_OscConfig+0x2a8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005ba4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005ba8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005baa:	6808      	ldr	r0, [r1, #0]
 8005bac:	f7fe fe3a 	bl	8004824 <HAL_InitTick>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	f040 8180 	bne.w	8005eb6 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	071a      	lsls	r2, r3, #28
 8005bba:	d519      	bpl.n	8005bf0 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bbc:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bbe:	4d86      	ldr	r5, [pc, #536]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80c8 	beq.w	8005d56 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_ENABLE();
 8005bc6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd2:	f7fe fe69 	bl	80048a8 <HAL_GetTick>
 8005bd6:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bd8:	e005      	b.n	8005be6 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bda:	f7fe fe65 	bl	80048a8 <HAL_GetTick>
 8005bde:	1b80      	subs	r0, r0, r6
 8005be0:	2802      	cmp	r0, #2
 8005be2:	f200 8118 	bhi.w	8005e16 <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005be6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005bea:	079b      	lsls	r3, r3, #30
 8005bec:	d5f5      	bpl.n	8005bda <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	075d      	lsls	r5, r3, #29
 8005bf2:	d541      	bpl.n	8005c78 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bf4:	4b78      	ldr	r3, [pc, #480]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005bf6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005bf8:	00d0      	lsls	r0, r2, #3
 8005bfa:	f100 8110 	bmi.w	8005e1e <HAL_RCC_OscConfig+0x2ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c00:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005c04:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c10:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c12:	4e73      	ldr	r6, [pc, #460]	@ (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	05d9      	lsls	r1, r3, #23
 8005c18:	f140 812f 	bpl.w	8005e7a <HAL_RCC_OscConfig+0x346>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c1c:	68a3      	ldr	r3, [r4, #8]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	f000 80ff 	beq.w	8005e22 <HAL_RCC_OscConfig+0x2ee>
 8005c24:	2b05      	cmp	r3, #5
 8005c26:	f000 8185 	beq.w	8005f34 <HAL_RCC_OscConfig+0x400>
 8005c2a:	4e6b      	ldr	r6, [pc, #428]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005c2c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005c30:	f022 0201 	bic.w	r2, r2, #1
 8005c34:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8005c38:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005c3c:	f022 0204 	bic.w	r2, r2, #4
 8005c40:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f040 80f3 	bne.w	8005e30 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4a:	f7fe fe2d 	bl	80048a8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005c52:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c54:	e005      	b.n	8005c62 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c56:	f7fe fe27 	bl	80048a8 <HAL_GetTick>
 8005c5a:	1bc0      	subs	r0, r0, r7
 8005c5c:	4540      	cmp	r0, r8
 8005c5e:	f200 80da 	bhi.w	8005e16 <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c62:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8005c66:	0799      	lsls	r1, r3, #30
 8005c68:	d4f5      	bmi.n	8005c56 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c6a:	b125      	cbz	r5, 8005c76 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6c:	4a5a      	ldr	r2, [pc, #360]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005c6e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	069a      	lsls	r2, r3, #26
 8005c7a:	d518      	bpl.n	8005cae <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c7c:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c7e:	4d56      	ldr	r5, [pc, #344]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80e6 	beq.w	8005e52 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 8005c86:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c92:	f7fe fe09 	bl	80048a8 <HAL_GetTick>
 8005c96:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c98:	e005      	b.n	8005ca6 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c9a:	f7fe fe05 	bl	80048a8 <HAL_GetTick>
 8005c9e:	1b80      	subs	r0, r0, r6
 8005ca0:	2802      	cmp	r0, #2
 8005ca2:	f200 80b8 	bhi.w	8005e16 <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ca6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005caa:	079b      	lsls	r3, r3, #30
 8005cac:	d5f5      	bpl.n	8005c9a <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cae:	69e3      	ldr	r3, [r4, #28]
 8005cb0:	b323      	cbz	r3, 8005cfc <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb2:	4d49      	ldr	r5, [pc, #292]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005cb4:	68aa      	ldr	r2, [r5, #8]
 8005cb6:	f002 020c 	and.w	r2, r2, #12
 8005cba:	2a0c      	cmp	r2, #12
 8005cbc:	f000 8148 	beq.w	8005f50 <HAL_RCC_OscConfig+0x41c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cc0:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc2:	682b      	ldr	r3, [r5, #0]
 8005cc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cc8:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cca:	f000 80f6 	beq.w	8005eba <HAL_RCC_OscConfig+0x386>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005cce:	68eb      	ldr	r3, [r5, #12]
 8005cd0:	f023 0303 	bic.w	r3, r3, #3
 8005cd4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005cd6:	68eb      	ldr	r3, [r5, #12]
 8005cd8:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ce0:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce2:	f7fe fde1 	bl	80048a8 <HAL_GetTick>
 8005ce6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce8:	e005      	b.n	8005cf6 <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cea:	f7fe fddd 	bl	80048a8 <HAL_GetTick>
 8005cee:	1b00      	subs	r0, r0, r4
 8005cf0:	2802      	cmp	r0, #2
 8005cf2:	f200 8090 	bhi.w	8005e16 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf6:	682b      	ldr	r3, [r5, #0]
 8005cf8:	019b      	lsls	r3, r3, #6
 8005cfa:	d4f6      	bmi.n	8005cea <HAL_RCC_OscConfig+0x1b6>
      }
    }
  }
  }

  return HAL_OK;
 8005cfc:	2000      	movs	r0, #0
}
 8005cfe:	b002      	add	sp, #8
 8005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d04:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d08:	2903      	cmp	r1, #3
 8005d0a:	f43f af28 	beq.w	8005b5e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d0e:	6863      	ldr	r3, [r4, #4]
 8005d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d14:	d055      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x28e>
 8005d16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d1a:	f000 80bf 	beq.w	8005e9c <HAL_RCC_OscConfig+0x368>
 8005d1e:	4d2e      	ldr	r5, [pc, #184]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005d20:	682a      	ldr	r2, [r5, #0]
 8005d22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005d26:	602a      	str	r2, [r5, #0]
 8005d28:	682a      	ldr	r2, [r5, #0]
 8005d2a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005d2e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d14b      	bne.n	8005dcc <HAL_RCC_OscConfig+0x298>
        tickstart = HAL_GetTick();
 8005d34:	f7fe fdb8 	bl	80048a8 <HAL_GetTick>
 8005d38:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d3a:	e004      	b.n	8005d46 <HAL_RCC_OscConfig+0x212>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d3c:	f7fe fdb4 	bl	80048a8 <HAL_GetTick>
 8005d40:	1b80      	subs	r0, r0, r6
 8005d42:	2864      	cmp	r0, #100	@ 0x64
 8005d44:	d867      	bhi.n	8005e16 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	0399      	lsls	r1, r3, #14
 8005d4a:	d4f7      	bmi.n	8005d3c <HAL_RCC_OscConfig+0x208>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	079a      	lsls	r2, r3, #30
 8005d50:	f57f af32 	bpl.w	8005bb8 <HAL_RCC_OscConfig+0x84>
 8005d54:	e70d      	b.n	8005b72 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8005d56:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005d62:	f7fe fda1 	bl	80048a8 <HAL_GetTick>
 8005d66:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d68:	e004      	b.n	8005d74 <HAL_RCC_OscConfig+0x240>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d6a:	f7fe fd9d 	bl	80048a8 <HAL_GetTick>
 8005d6e:	1b80      	subs	r0, r0, r6
 8005d70:	2802      	cmp	r0, #2
 8005d72:	d850      	bhi.n	8005e16 <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d74:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005d78:	079f      	lsls	r7, r3, #30
 8005d7a:	d4f6      	bmi.n	8005d6a <HAL_RCC_OscConfig+0x236>
 8005d7c:	e737      	b.n	8005bee <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d7e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d82:	2a02      	cmp	r2, #2
 8005d84:	f43f af00 	beq.w	8005b88 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d88:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8005d8a:	4d13      	ldr	r5, [pc, #76]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d032      	beq.n	8005df6 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_HSI_ENABLE();
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005d98:	f7fe fd86 	bl	80048a8 <HAL_GetTick>
 8005d9c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d9e:	e004      	b.n	8005daa <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da0:	f7fe fd82 	bl	80048a8 <HAL_GetTick>
 8005da4:	1b80      	subs	r0, r0, r6
 8005da6:	2802      	cmp	r0, #2
 8005da8:	d835      	bhi.n	8005e16 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	055f      	lsls	r7, r3, #21
 8005dae:	d5f7      	bpl.n	8005da0 <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db0:	686b      	ldr	r3, [r5, #4]
 8005db2:	6922      	ldr	r2, [r4, #16]
 8005db4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005db8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005dbc:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	e6fa      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc2:	4a05      	ldr	r2, [pc, #20]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
 8005dc4:	6813      	ldr	r3, [r2, #0]
 8005dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005dcc:	f7fe fd6c 	bl	80048a8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd0:	4e01      	ldr	r6, [pc, #4]	@ (8005dd8 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8005dd2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd4:	e00b      	b.n	8005dee <HAL_RCC_OscConfig+0x2ba>
 8005dd6:	bf00      	nop
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	2000055c 	.word	0x2000055c
 8005de0:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de4:	f7fe fd60 	bl	80048a8 <HAL_GetTick>
 8005de8:	1b40      	subs	r0, r0, r5
 8005dea:	2864      	cmp	r0, #100	@ 0x64
 8005dec:	d813      	bhi.n	8005e16 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dee:	6833      	ldr	r3, [r6, #0]
 8005df0:	039f      	lsls	r7, r3, #14
 8005df2:	d5f7      	bpl.n	8005de4 <HAL_RCC_OscConfig+0x2b0>
 8005df4:	e7aa      	b.n	8005d4c <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_DISABLE();
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005dfe:	f7fe fd53 	bl	80048a8 <HAL_GetTick>
 8005e02:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	0559      	lsls	r1, r3, #21
 8005e08:	f57f aed5 	bpl.w	8005bb6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e0c:	f7fe fd4c 	bl	80048a8 <HAL_GetTick>
 8005e10:	1b80      	subs	r0, r0, r6
 8005e12:	2802      	cmp	r0, #2
 8005e14:	d9f6      	bls.n	8005e04 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 8005e16:	2003      	movs	r0, #3
}
 8005e18:	b002      	add	sp, #8
 8005e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005e1e:	2500      	movs	r5, #0
 8005e20:	e6f7      	b.n	8005c12 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e22:	4a63      	ldr	r2, [pc, #396]	@ (8005fb0 <HAL_RCC_OscConfig+0x47c>)
 8005e24:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8005e30:	f7fe fd3a 	bl	80048a8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e34:	4f5e      	ldr	r7, [pc, #376]	@ (8005fb0 <HAL_RCC_OscConfig+0x47c>)
      tickstart = HAL_GetTick();
 8005e36:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e38:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e3c:	e004      	b.n	8005e48 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3e:	f7fe fd33 	bl	80048a8 <HAL_GetTick>
 8005e42:	1b80      	subs	r0, r0, r6
 8005e44:	4540      	cmp	r0, r8
 8005e46:	d8e6      	bhi.n	8005e16 <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e4c:	079b      	lsls	r3, r3, #30
 8005e4e:	d5f6      	bpl.n	8005e3e <HAL_RCC_OscConfig+0x30a>
 8005e50:	e70b      	b.n	8005c6a <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8005e52:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005e5e:	f7fe fd23 	bl	80048a8 <HAL_GetTick>
 8005e62:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e64:	e004      	b.n	8005e70 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e66:	f7fe fd1f 	bl	80048a8 <HAL_GetTick>
 8005e6a:	1b80      	subs	r0, r0, r6
 8005e6c:	2802      	cmp	r0, #2
 8005e6e:	d8d2      	bhi.n	8005e16 <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e70:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005e74:	079f      	lsls	r7, r3, #30
 8005e76:	d4f6      	bmi.n	8005e66 <HAL_RCC_OscConfig+0x332>
 8005e78:	e719      	b.n	8005cae <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e7a:	6833      	ldr	r3, [r6, #0]
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e80:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005e82:	f7fe fd11 	bl	80048a8 <HAL_GetTick>
 8005e86:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	05da      	lsls	r2, r3, #23
 8005e8c:	f53f aec6 	bmi.w	8005c1c <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e90:	f7fe fd0a 	bl	80048a8 <HAL_GetTick>
 8005e94:	1bc0      	subs	r0, r0, r7
 8005e96:	2802      	cmp	r0, #2
 8005e98:	d9f6      	bls.n	8005e88 <HAL_RCC_OscConfig+0x354>
 8005e9a:	e7bc      	b.n	8005e16 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ea0:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005eb2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eb4:	e78a      	b.n	8005dcc <HAL_RCC_OscConfig+0x298>
    return HAL_ERROR;
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	e721      	b.n	8005cfe <HAL_RCC_OscConfig+0x1ca>
        tickstart = HAL_GetTick();
 8005eba:	f7fe fcf5 	bl	80048a8 <HAL_GetTick>
 8005ebe:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ec0:	e004      	b.n	8005ecc <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec2:	f7fe fcf1 	bl	80048a8 <HAL_GetTick>
 8005ec6:	1b80      	subs	r0, r0, r6
 8005ec8:	2802      	cmp	r0, #2
 8005eca:	d8a4      	bhi.n	8005e16 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	0199      	lsls	r1, r3, #6
 8005ed0:	d4f7      	bmi.n	8005ec2 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ed2:	68e9      	ldr	r1, [r5, #12]
 8005ed4:	4b37      	ldr	r3, [pc, #220]	@ (8005fb4 <HAL_RCC_OscConfig+0x480>)
 8005ed6:	6a22      	ldr	r2, [r4, #32]
 8005ed8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eda:	4e35      	ldr	r6, [pc, #212]	@ (8005fb0 <HAL_RCC_OscConfig+0x47c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005edc:	400b      	ands	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8005ee4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005ee8:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005eec:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8005ef0:	3801      	subs	r0, #1
 8005ef2:	0849      	lsrs	r1, r1, #1
 8005ef4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005ef8:	3901      	subs	r1, #1
 8005efa:	0852      	lsrs	r2, r2, #1
 8005efc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005f00:	3a01      	subs	r2, #1
 8005f02:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005f06:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f0e:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f10:	68eb      	ldr	r3, [r5, #12]
 8005f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f16:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005f18:	f7fe fcc6 	bl	80048a8 <HAL_GetTick>
 8005f1c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f1e:	e005      	b.n	8005f2c <HAL_RCC_OscConfig+0x3f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f20:	f7fe fcc2 	bl	80048a8 <HAL_GetTick>
 8005f24:	1b00      	subs	r0, r0, r4
 8005f26:	2802      	cmp	r0, #2
 8005f28:	f63f af75 	bhi.w	8005e16 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f2c:	6833      	ldr	r3, [r6, #0]
 8005f2e:	019a      	lsls	r2, r3, #6
 8005f30:	d5f6      	bpl.n	8005f20 <HAL_RCC_OscConfig+0x3ec>
 8005f32:	e6e3      	b.n	8005cfc <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f34:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb0 <HAL_RCC_OscConfig+0x47c>)
 8005f36:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005f3a:	f042 0204 	orr.w	r2, r2, #4
 8005f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8005f42:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f4e:	e76f      	b.n	8005e30 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d0b0      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x382>
      temp_pllckcfg = RCC->PLLCFGR;
 8005f54:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f56:	6a22      	ldr	r2, [r4, #32]
 8005f58:	f003 0103 	and.w	r1, r3, #3
 8005f5c:	4291      	cmp	r1, r2
 8005f5e:	d1aa      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f60:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005f62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f66:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f68:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005f6c:	d1a3      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f6e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005f70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f74:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005f78:	d19d      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005f7c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f80:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005f84:	d197      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f86:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005f88:	0852      	lsrs	r2, r2, #1
 8005f8a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8005f8e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f90:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005f94:	d18f      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f96:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005f98:	0852      	lsrs	r2, r2, #1
 8005f9a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005f9e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fa0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005fa4:	bf14      	ite	ne
 8005fa6:	2001      	movne	r0, #1
 8005fa8:	2000      	moveq	r0, #0
 8005faa:	e6a8      	b.n	8005cfe <HAL_RCC_OscConfig+0x1ca>
    return HAL_ERROR;
 8005fac:	2001      	movs	r0, #1
}
 8005fae:	4770      	bx	lr
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	019f800c 	.word	0x019f800c

08005fb8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005fb8:	4b18      	ldr	r3, [pc, #96]	@ (800601c <HAL_RCC_GetSysClockFreq+0x64>)
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	f002 020c 	and.w	r2, r2, #12
 8005fc0:	2a04      	cmp	r2, #4
 8005fc2:	d026      	beq.n	8006012 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	f002 020c 	and.w	r2, r2, #12
 8005fca:	2a08      	cmp	r2, #8
 8005fcc:	d023      	beq.n	8006016 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	f002 020c 	and.w	r2, r2, #12
 8005fd4:	2a0c      	cmp	r2, #12
 8005fd6:	d001      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005fd8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005fda:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fdc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fde:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fe0:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fe2:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005fe6:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fe8:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fec:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ff0:	bf0c      	ite	eq
 8005ff2:	4b0b      	ldreq	r3, [pc, #44]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ff4:	4b0b      	ldrne	r3, [pc, #44]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ff6:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ff8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ffc:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006000:	4b06      	ldr	r3, [pc, #24]	@ (800601c <HAL_RCC_GetSysClockFreq+0x64>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006008:	3301      	adds	r3, #1
 800600a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800600c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006010:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006012:	4804      	ldr	r0, [pc, #16]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006014:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006016:	4802      	ldr	r0, [pc, #8]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x68>)
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
 8006020:	016e3600 	.word	0x016e3600
 8006024:	00f42400 	.word	0x00f42400

08006028 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006028:	2800      	cmp	r0, #0
 800602a:	f000 80ee 	beq.w	800620a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800602e:	4a78      	ldr	r2, [pc, #480]	@ (8006210 <HAL_RCC_ClockConfig+0x1e8>)
{
 8006030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006034:	6813      	ldr	r3, [r2, #0]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	428b      	cmp	r3, r1
 800603c:	460d      	mov	r5, r1
 800603e:	4604      	mov	r4, r0
 8006040:	d20c      	bcs.n	800605c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	f023 030f 	bic.w	r3, r3, #15
 8006048:	430b      	orrs	r3, r1
 800604a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800604c:	6813      	ldr	r3, [r2, #0]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	428b      	cmp	r3, r1
 8006054:	d002      	beq.n	800605c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006056:	2001      	movs	r0, #1
}
 8006058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	07df      	lsls	r7, r3, #31
 8006060:	d569      	bpl.n	8006136 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006062:	6867      	ldr	r7, [r4, #4]
 8006064:	2f03      	cmp	r7, #3
 8006066:	f000 80a0 	beq.w	80061aa <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800606a:	4b6a      	ldr	r3, [pc, #424]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800606c:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800606e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006070:	f000 8097 	beq.w	80061a2 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006074:	055b      	lsls	r3, r3, #21
 8006076:	d5ee      	bpl.n	8006056 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006078:	f7ff ff9e 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800607c:	4b66      	ldr	r3, [pc, #408]	@ (8006218 <HAL_RCC_ClockConfig+0x1f0>)
 800607e:	4298      	cmp	r0, r3
 8006080:	f240 80c0 	bls.w	8006204 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006084:	4a63      	ldr	r2, [pc, #396]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
 8006086:	6893      	ldr	r3, [r2, #8]
 8006088:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800608c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006090:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006092:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006096:	4e5f      	ldr	r6, [pc, #380]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
 8006098:	68b3      	ldr	r3, [r6, #8]
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	433b      	orrs	r3, r7
 80060a0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80060a2:	f7fe fc01 	bl	80048a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80060aa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ac:	e004      	b.n	80060b8 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ae:	f7fe fbfb 	bl	80048a8 <HAL_GetTick>
 80060b2:	1bc0      	subs	r0, r0, r7
 80060b4:	4540      	cmp	r0, r8
 80060b6:	d871      	bhi.n	800619c <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b8:	68b3      	ldr	r3, [r6, #8]
 80060ba:	6862      	ldr	r2, [r4, #4]
 80060bc:	f003 030c 	and.w	r3, r3, #12
 80060c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80060c4:	d1f3      	bne.n	80060ae <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	079f      	lsls	r7, r3, #30
 80060ca:	d436      	bmi.n	800613a <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 80060cc:	f1b9 0f00 	cmp.w	r9, #0
 80060d0:	d003      	beq.n	80060da <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060d2:	68b3      	ldr	r3, [r6, #8]
 80060d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060d8:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060da:	4e4d      	ldr	r6, [pc, #308]	@ (8006210 <HAL_RCC_ClockConfig+0x1e8>)
 80060dc:	6833      	ldr	r3, [r6, #0]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	42ab      	cmp	r3, r5
 80060e4:	d846      	bhi.n	8006174 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	075a      	lsls	r2, r3, #29
 80060ea:	d506      	bpl.n	80060fa <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ec:	4949      	ldr	r1, [pc, #292]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
 80060ee:	68e0      	ldr	r0, [r4, #12]
 80060f0:	688a      	ldr	r2, [r1, #8]
 80060f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060f6:	4302      	orrs	r2, r0
 80060f8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fa:	071b      	lsls	r3, r3, #28
 80060fc:	d507      	bpl.n	800610e <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060fe:	4a45      	ldr	r2, [pc, #276]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
 8006100:	6921      	ldr	r1, [r4, #16]
 8006102:	6893      	ldr	r3, [r2, #8]
 8006104:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8006108:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800610c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800610e:	f7ff ff53 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8006112:	4a40      	ldr	r2, [pc, #256]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
 8006114:	4c41      	ldr	r4, [pc, #260]	@ (800621c <HAL_RCC_ClockConfig+0x1f4>)
 8006116:	6892      	ldr	r2, [r2, #8]
 8006118:	4941      	ldr	r1, [pc, #260]	@ (8006220 <HAL_RCC_ClockConfig+0x1f8>)
 800611a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800611e:	4603      	mov	r3, r0
 8006120:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006122:	4840      	ldr	r0, [pc, #256]	@ (8006224 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006124:	f002 021f 	and.w	r2, r2, #31
 8006128:	40d3      	lsrs	r3, r2
 800612a:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800612c:	6800      	ldr	r0, [r0, #0]
}
 800612e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006132:	f7fe bb77 	b.w	8004824 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006136:	079e      	lsls	r6, r3, #30
 8006138:	d5cf      	bpl.n	80060da <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613a:	0758      	lsls	r0, r3, #29
 800613c:	d504      	bpl.n	8006148 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800613e:	4935      	ldr	r1, [pc, #212]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
 8006140:	688a      	ldr	r2, [r1, #8]
 8006142:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8006146:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006148:	0719      	lsls	r1, r3, #28
 800614a:	d506      	bpl.n	800615a <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800614c:	4a31      	ldr	r2, [pc, #196]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
 800614e:	6893      	ldr	r3, [r2, #8]
 8006150:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006154:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006158:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800615a:	4a2e      	ldr	r2, [pc, #184]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
 800615c:	68a1      	ldr	r1, [r4, #8]
 800615e:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006160:	4e2b      	ldr	r6, [pc, #172]	@ (8006210 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006166:	430b      	orrs	r3, r1
 8006168:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800616a:	6833      	ldr	r3, [r6, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	42ab      	cmp	r3, r5
 8006172:	d9b8      	bls.n	80060e6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	f023 030f 	bic.w	r3, r3, #15
 800617a:	432b      	orrs	r3, r5
 800617c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800617e:	f7fe fb93 	bl	80048a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006182:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006186:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	42ab      	cmp	r3, r5
 8006190:	d0a9      	beq.n	80060e6 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006192:	f7fe fb89 	bl	80048a8 <HAL_GetTick>
 8006196:	1bc0      	subs	r0, r0, r7
 8006198:	4540      	cmp	r0, r8
 800619a:	d9f5      	bls.n	8006188 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 800619c:	2003      	movs	r0, #3
}
 800619e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061a2:	039a      	lsls	r2, r3, #14
 80061a4:	f53f af68 	bmi.w	8006078 <HAL_RCC_ClockConfig+0x50>
 80061a8:	e755      	b.n	8006056 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
 80061ac:	6811      	ldr	r1, [r2, #0]
 80061ae:	0188      	lsls	r0, r1, #6
 80061b0:	f57f af51 	bpl.w	8006056 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061b4:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061b6:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061b8:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 80061ba:	4e17      	ldr	r6, [pc, #92]	@ (8006218 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061bc:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80061c0:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061c2:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061c6:	bf0c      	ite	eq
 80061c8:	4817      	ldreq	r0, [pc, #92]	@ (8006228 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ca:	4818      	ldrne	r0, [pc, #96]	@ (800622c <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061cc:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ce:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061d2:	4810      	ldr	r0, [pc, #64]	@ (8006214 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061d4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80061d8:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061dc:	68c1      	ldr	r1, [r0, #12]
 80061de:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80061e2:	3101      	adds	r1, #1
 80061e4:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80061e6:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80061ea:	42b2      	cmp	r2, r6
 80061ec:	d90a      	bls.n	8006204 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061ee:	6882      	ldr	r2, [r0, #8]
 80061f0:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 80061f4:	f43f af46 	beq.w	8006084 <HAL_RCC_ClockConfig+0x5c>
 80061f8:	0799      	lsls	r1, r3, #30
 80061fa:	d503      	bpl.n	8006204 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80061fc:	68a3      	ldr	r3, [r4, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f43f af40 	beq.w	8006084 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006204:	f04f 0900 	mov.w	r9, #0
 8006208:	e745      	b.n	8006096 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800620a:	2001      	movs	r0, #1
}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40022000 	.word	0x40022000
 8006214:	40021000 	.word	0x40021000
 8006218:	04c4b400 	.word	0x04c4b400
 800621c:	0800a5b8 	.word	0x0800a5b8
 8006220:	20000554 	.word	0x20000554
 8006224:	2000055c 	.word	0x2000055c
 8006228:	016e3600 	.word	0x016e3600
 800622c:	00f42400 	.word	0x00f42400

08006230 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006230:	4b01      	ldr	r3, [pc, #4]	@ (8006238 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000554 	.word	0x20000554

0800623c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800623c:	4b05      	ldr	r3, [pc, #20]	@ (8006254 <HAL_RCC_GetPCLK1Freq+0x18>)
 800623e:	4a06      	ldr	r2, [pc, #24]	@ (8006258 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006240:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006242:	4906      	ldr	r1, [pc, #24]	@ (800625c <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006244:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006248:	6808      	ldr	r0, [r1, #0]
 800624a:	5cd3      	ldrb	r3, [r2, r3]
 800624c:	f003 031f 	and.w	r3, r3, #31
}
 8006250:	40d8      	lsrs	r0, r3
 8006252:	4770      	bx	lr
 8006254:	40021000 	.word	0x40021000
 8006258:	0800a5b0 	.word	0x0800a5b0
 800625c:	20000554 	.word	0x20000554

08006260 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006260:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006262:	4a06      	ldr	r2, [pc, #24]	@ (800627c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006264:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006266:	4906      	ldr	r1, [pc, #24]	@ (8006280 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006268:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800626c:	6808      	ldr	r0, [r1, #0]
 800626e:	5cd3      	ldrb	r3, [r2, r3]
 8006270:	f003 031f 	and.w	r3, r3, #31
}
 8006274:	40d8      	lsrs	r0, r3
 8006276:	4770      	bx	lr
 8006278:	40021000 	.word	0x40021000
 800627c:	0800a5b0 	.word	0x0800a5b0
 8006280:	20000554 	.word	0x20000554

08006284 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8006284:	4a02      	ldr	r2, [pc, #8]	@ (8006290 <HAL_RCC_EnableCSS+0xc>)
 8006286:	6813      	ldr	r3, [r2, #0]
 8006288:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800628c:	6013      	str	r3, [r2, #0]
}
 800628e:	4770      	bx	lr
 8006290:	40021000 	.word	0x40021000

08006294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006298:	6803      	ldr	r3, [r0, #0]
{
 800629a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800629c:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 80062a0:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062a2:	d052      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062a4:	4ba1      	ldr	r3, [pc, #644]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80062a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80062a8:	00d5      	lsls	r5, r2, #3
 80062aa:	f140 8108 	bpl.w	80064be <HAL_RCCEx_PeriphCLKConfig+0x22a>
    FlagStatus       pwrclkchanged = RESET;
 80062ae:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062b0:	4d9f      	ldr	r5, [pc, #636]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b8:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062ba:	f7fe faf5 	bl	80048a8 <HAL_GetTick>
 80062be:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c0:	e005      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c2:	f7fe faf1 	bl	80048a8 <HAL_GetTick>
 80062c6:	1b83      	subs	r3, r0, r6
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	f200 8103 	bhi.w	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ce:	682b      	ldr	r3, [r5, #0]
 80062d0:	05d8      	lsls	r0, r3, #23
 80062d2:	d5f6      	bpl.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062d4:	4d95      	ldr	r5, [pc, #596]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062d6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062d8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062dc:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80062e0:	d026      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d024      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062e6:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062ea:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80062ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062f2:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062f6:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80062fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062fe:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006302:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006306:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8006308:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800630c:	d510      	bpl.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630e:	f7fe facb 	bl	80048a8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006312:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8006316:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006318:	e005      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631a:	f7fe fac5 	bl	80048a8 <HAL_GetTick>
 800631e:	1b80      	subs	r0, r0, r6
 8006320:	4540      	cmp	r0, r8
 8006322:	f200 80d7 	bhi.w	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006326:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800632a:	079b      	lsls	r3, r3, #30
 800632c:	d5f5      	bpl.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800632e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006330:	497e      	ldr	r1, [pc, #504]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006332:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8006336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006340:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006342:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 8006344:	2f00      	cmp	r7, #0
 8006346:	f040 80ca 	bne.w	80064de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800634a:	07de      	lsls	r6, r3, #31
 800634c:	d508      	bpl.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800634e:	4977      	ldr	r1, [pc, #476]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006350:	6865      	ldr	r5, [r4, #4]
 8006352:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006356:	f022 0203 	bic.w	r2, r2, #3
 800635a:	432a      	orrs	r2, r5
 800635c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006360:	079d      	lsls	r5, r3, #30
 8006362:	d508      	bpl.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006364:	4971      	ldr	r1, [pc, #452]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006366:	68a5      	ldr	r5, [r4, #8]
 8006368:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800636c:	f022 020c 	bic.w	r2, r2, #12
 8006370:	432a      	orrs	r2, r5
 8006372:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006376:	0759      	lsls	r1, r3, #29
 8006378:	d508      	bpl.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800637a:	496c      	ldr	r1, [pc, #432]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800637c:	68e5      	ldr	r5, [r4, #12]
 800637e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006382:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8006386:	432a      	orrs	r2, r5
 8006388:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800638c:	071a      	lsls	r2, r3, #28
 800638e:	d508      	bpl.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006390:	4966      	ldr	r1, [pc, #408]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006392:	6925      	ldr	r5, [r4, #16]
 8006394:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006398:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800639c:	432a      	orrs	r2, r5
 800639e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063a2:	069f      	lsls	r7, r3, #26
 80063a4:	d508      	bpl.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063a6:	4961      	ldr	r1, [pc, #388]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80063a8:	6965      	ldr	r5, [r4, #20]
 80063aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80063ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80063b2:	432a      	orrs	r2, r5
 80063b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063b8:	065e      	lsls	r6, r3, #25
 80063ba:	d508      	bpl.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063bc:	495b      	ldr	r1, [pc, #364]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80063be:	69a5      	ldr	r5, [r4, #24]
 80063c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80063c4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80063c8:	432a      	orrs	r2, r5
 80063ca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063ce:	061d      	lsls	r5, r3, #24
 80063d0:	d508      	bpl.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063d2:	4956      	ldr	r1, [pc, #344]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80063d4:	69e5      	ldr	r5, [r4, #28]
 80063d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80063da:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80063de:	432a      	orrs	r2, r5
 80063e0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063e4:	05d9      	lsls	r1, r3, #23
 80063e6:	d508      	bpl.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063e8:	4950      	ldr	r1, [pc, #320]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80063ea:	6a25      	ldr	r5, [r4, #32]
 80063ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80063f0:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80063f4:	432a      	orrs	r2, r5
 80063f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063fa:	059a      	lsls	r2, r3, #22
 80063fc:	d508      	bpl.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063fe:	494b      	ldr	r1, [pc, #300]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006400:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006402:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006406:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800640a:	432a      	orrs	r2, r5
 800640c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006410:	055f      	lsls	r7, r3, #21
 8006412:	d50b      	bpl.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006414:	4945      	ldr	r1, [pc, #276]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006416:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8006418:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800641c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006420:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006422:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006426:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800642a:	d05e      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x256>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800642c:	051e      	lsls	r6, r3, #20
 800642e:	d50b      	bpl.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006430:	493e      	ldr	r1, [pc, #248]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006432:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006434:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006438:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800643c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800643e:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006442:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006446:	d055      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006448:	04dd      	lsls	r5, r3, #19
 800644a:	d50b      	bpl.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800644c:	4937      	ldr	r1, [pc, #220]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800644e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8006450:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006454:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006458:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800645a:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800645e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006462:	d04c      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006464:	0499      	lsls	r1, r3, #18
 8006466:	d50b      	bpl.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006468:	4930      	ldr	r1, [pc, #192]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800646a:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800646c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006470:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006474:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006476:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800647a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800647e:	d043      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x274>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006480:	045a      	lsls	r2, r3, #17
 8006482:	d50b      	bpl.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006484:	4929      	ldr	r1, [pc, #164]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006486:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8006488:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800648c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006490:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006492:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006496:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800649a:	d03a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800649c:	041b      	lsls	r3, r3, #16
 800649e:	d50b      	bpl.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064a0:	4a22      	ldr	r2, [pc, #136]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80064a2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80064a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80064a8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80064ac:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064ae:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064b6:	d031      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x288>
  }

#endif /* QUADSPI */

  return status;
}
 80064b8:	b002      	add	sp, #8
 80064ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80064be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80064c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80064c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80064c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80064d0:	2701      	movs	r7, #1
 80064d2:	e6ed      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064d4:	6823      	ldr	r3, [r4, #0]
        status = ret;
 80064d6:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 80064d8:	2f00      	cmp	r7, #0
 80064da:	f43f af36 	beq.w	800634a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80064de:	4913      	ldr	r1, [pc, #76]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80064e0:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80064e2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80064e6:	658a      	str	r2, [r1, #88]	@ 0x58
 80064e8:	e72f      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ea:	68ca      	ldr	r2, [r1, #12]
 80064ec:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80064f0:	60ca      	str	r2, [r1, #12]
 80064f2:	e79b      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064f4:	68ca      	ldr	r2, [r1, #12]
 80064f6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80064fa:	60ca      	str	r2, [r1, #12]
 80064fc:	e7a4      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064fe:	68ca      	ldr	r2, [r1, #12]
 8006500:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006504:	60ca      	str	r2, [r1, #12]
 8006506:	e7ad      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006508:	68ca      	ldr	r2, [r1, #12]
 800650a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800650e:	60ca      	str	r2, [r1, #12]
 8006510:	e7b6      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006512:	68ca      	ldr	r2, [r1, #12]
 8006514:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006518:	60ca      	str	r2, [r1, #12]
 800651a:	e7bf      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800651c:	68d3      	ldr	r3, [r2, #12]
 800651e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006522:	60d3      	str	r3, [r2, #12]
}
 8006524:	b002      	add	sp, #8
 8006526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652a:	bf00      	nop
 800652c:	40021000 	.word	0x40021000
 8006530:	40007000 	.word	0x40007000

08006534 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800653a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800653c:	460e      	mov	r6, r1
 800653e:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8006540:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006544:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006546:	f7fe f9af 	bl	80048a8 <HAL_GetTick>
 800654a:	4437      	add	r7, r6
 800654c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800654e:	f7fe f9ab 	bl	80048a8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006552:	4b32      	ldr	r3, [pc, #200]	@ (800661c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006554:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800655c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006560:	0d1b      	lsrs	r3, r3, #20
 8006562:	fb07 f303 	mul.w	r3, r7, r3
 8006566:	3601      	adds	r6, #1
 8006568:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800656a:	d111      	bne.n	8006590 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 800656c:	68a3      	ldr	r3, [r4, #8]
 800656e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8006572:	d009      	beq.n	8006588 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006574:	7b23      	ldrb	r3, [r4, #12]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800657c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8006580:	68a3      	ldr	r3, [r4, #8]
 8006582:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8006586:	d1f5      	bne.n	8006574 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8006588:	2000      	movs	r0, #0
}
 800658a:	b002      	add	sp, #8
 800658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006590:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006592:	4623      	mov	r3, r4
 8006594:	e013      	b.n	80065be <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 8006596:	7b23      	ldrb	r3, [r4, #12]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800659e:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065a2:	f7fe f981 	bl	80048a8 <HAL_GetTick>
 80065a6:	eba0 0008 	sub.w	r0, r0, r8
 80065aa:	42b8      	cmp	r0, r7
 80065ac:	d20c      	bcs.n	80065c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 80065ae:	9a01      	ldr	r2, [sp, #4]
      count--;
 80065b0:	9b01      	ldr	r3, [sp, #4]
 80065b2:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 80065b4:	2a00      	cmp	r2, #0
      count--;
 80065b6:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065b8:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 80065ba:	bf08      	it	eq
 80065bc:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80065c4:	d1e7      	bne.n	8006596 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 80065c6:	e7df      	b.n	8006588 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c8:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065cc:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ce:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065d6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065d8:	d013      	beq.n	8006602 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065da:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80065dc:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80065e0:	d107      	bne.n	80065f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065f0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80065f2:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80065f4:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80065f6:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80065fa:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80065fe:	2003      	movs	r0, #3
 8006600:	e7c3      	b.n	800658a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006602:	68aa      	ldr	r2, [r5, #8]
 8006604:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006608:	d002      	beq.n	8006610 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800660e:	d1e4      	bne.n	80065da <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e7df      	b.n	80065da <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 800661a:	bf00      	nop
 800661c:	20000554 	.word	0x20000554

08006620 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8006626:	2300      	movs	r3, #0
{
 8006628:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 800662a:	f88d 3007 	strb.w	r3, [sp, #7]
 800662e:	eb01 0902 	add.w	r9, r1, r2
{
 8006632:	4617      	mov	r7, r2
 8006634:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006636:	f7fe f937 	bl	80048a8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800663a:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8006760 <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800663e:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8006642:	f7fe f931 	bl	80048a8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006646:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 800664a:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800664c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006650:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006654:	0d1b      	lsrs	r3, r3, #20
 8006656:	fb0a f303 	mul.w	r3, sl, r3
 800665a:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800665c:	1c73      	adds	r3, r6, #1
 800665e:	bf18      	it	ne
 8006660:	4683      	movne	fp, r0
 8006662:	d130      	bne.n	80066c6 <SPI_EndRxTxTransaction+0xa6>
 8006664:	68a3      	ldr	r3, [r4, #8]
 8006666:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800666a:	d1fb      	bne.n	8006664 <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800666c:	f7fe f91c 	bl	80048a8 <HAL_GetTick>
 8006670:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8006674:	f7fe f918 	bl	80048a8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006678:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667c:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800667e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006682:	fb09 f303 	mul.w	r3, r9, r3
 8006686:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 8006688:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800668a:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800668c:	d130      	bne.n	80066f0 <SPI_EndRxTxTransaction+0xd0>
 800668e:	68a3      	ldr	r3, [r4, #8]
 8006690:	061a      	lsls	r2, r3, #24
 8006692:	d4fc      	bmi.n	800668e <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006694:	463a      	mov	r2, r7
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	f7ff ff4b 	bl	8006534 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800669e:	bb58      	cbnz	r0, 80066f8 <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80066a0:	b005      	add	sp, #20
 80066a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066a6:	f7fe f8ff 	bl	80048a8 <HAL_GetTick>
 80066aa:	eba0 000b 	sub.w	r0, r0, fp
 80066ae:	4582      	cmp	sl, r0
 80066b0:	d92a      	bls.n	8006708 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 80066b2:	9a02      	ldr	r2, [sp, #8]
      count--;
 80066b4:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80066b6:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 80066b8:	2a00      	cmp	r2, #0
      count--;
 80066ba:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80066be:	bf08      	it	eq
 80066c0:	f04f 0a00 	moveq.w	sl, #0
      count--;
 80066c4:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80066c6:	68a3      	ldr	r3, [r4, #8]
 80066c8:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80066cc:	d1eb      	bne.n	80066a6 <SPI_EndRxTxTransaction+0x86>
 80066ce:	e7cd      	b.n	800666c <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066d0:	f7fe f8ea 	bl	80048a8 <HAL_GetTick>
 80066d4:	eba0 0008 	sub.w	r0, r0, r8
 80066d8:	4581      	cmp	r9, r0
 80066da:	d915      	bls.n	8006708 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 80066dc:	9a03      	ldr	r2, [sp, #12]
      count--;
 80066de:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066e0:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 80066e2:	2a00      	cmp	r2, #0
      count--;
 80066e4:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80066e8:	bf08      	it	eq
 80066ea:	f04f 0900 	moveq.w	r9, #0
      count--;
 80066ee:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066f0:	68a3      	ldr	r3, [r4, #8]
 80066f2:	061b      	lsls	r3, r3, #24
 80066f4:	d4ec      	bmi.n	80066d0 <SPI_EndRxTxTransaction+0xb0>
 80066f6:	e7cd      	b.n	8006694 <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f8:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80066fa:	f043 0320 	orr.w	r3, r3, #32
 80066fe:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006700:	2003      	movs	r0, #3
}
 8006702:	b005      	add	sp, #20
 8006704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006708:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800670c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800670e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006712:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006716:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006718:	d016      	beq.n	8006748 <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800671a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800671c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006720:	d107      	bne.n	8006732 <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006730:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006732:	2301      	movs	r3, #1
 8006734:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006738:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 800673a:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8006740:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006744:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006746:	e7db      	b.n	8006700 <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006748:	68aa      	ldr	r2, [r5, #8]
 800674a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800674e:	d002      	beq.n	8006756 <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006750:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006754:	d1e1      	bne.n	800671a <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e7dc      	b.n	800671a <SPI_EndRxTxTransaction+0xfa>
 8006760:	20000554 	.word	0x20000554

08006764 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006764:	2800      	cmp	r0, #0
 8006766:	d077      	beq.n	8006858 <HAL_SPI_Init+0xf4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006768:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800676a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800676e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006770:	2a00      	cmp	r2, #0
 8006772:	d057      	beq.n	8006824 <HAL_SPI_Init+0xc0>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006774:	2300      	movs	r3, #0
 8006776:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800677a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800677e:	2100      	movs	r1, #0
 8006780:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006782:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8006786:	2b00      	cmp	r3, #0
 8006788:	d05a      	beq.n	8006840 <HAL_SPI_Init+0xdc>
  __HAL_SPI_DISABLE(hspi);
 800678a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800678c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800678e:	2302      	movs	r3, #2
 8006790:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006794:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006796:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 800679a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800679e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067a0:	d846      	bhi.n	8006830 <HAL_SPI_Init+0xcc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067a2:	d154      	bne.n	800684e <HAL_SPI_Init+0xea>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067a4:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067a6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067aa:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 80067ae:	68a3      	ldr	r3, [r4, #8]
 80067b0:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067b2:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067b6:	6862      	ldr	r2, [r4, #4]
 80067b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80067bc:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 80067c0:	431a      	orrs	r2, r3
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	4313      	orrs	r3, r2
 80067ca:	6962      	ldr	r2, [r4, #20]
 80067cc:	f002 0201 	and.w	r2, r2, #1
 80067d0:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067d4:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067e0:	69e3      	ldr	r3, [r4, #28]
 80067e2:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 80067e6:	6a23      	ldr	r3, [r4, #32]
 80067e8:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 80067ec:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 80067f0:	4313      	orrs	r3, r2
 80067f2:	ea43 0308 	orr.w	r3, r3, r8
 80067f6:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067f8:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067fa:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067fc:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006800:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006802:	ea4e 0306 	orr.w	r3, lr, r6
 8006806:	ea43 030c 	orr.w	r3, r3, ip
 800680a:	4303      	orrs	r3, r0
 800680c:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800680e:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006810:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006812:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8006816:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006818:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800681a:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800681c:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
}
 8006820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006824:	6843      	ldr	r3, [r0, #4]
 8006826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800682a:	d0a6      	beq.n	800677a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800682c:	61c2      	str	r2, [r0, #28]
 800682e:	e7a4      	b.n	800677a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006830:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8006834:	d112      	bne.n	800685c <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006836:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006838:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800683a:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800683e:	e7b6      	b.n	80067ae <HAL_SPI_Init+0x4a>
    hspi->Lock = HAL_UNLOCKED;
 8006840:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006844:	4620      	mov	r0, r4
 8006846:	f7fd fd23 	bl	8004290 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800684a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800684c:	e79d      	b.n	800678a <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800684e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006852:	2500      	movs	r5, #0
 8006854:	62a5      	str	r5, [r4, #40]	@ 0x28
 8006856:	e7aa      	b.n	80067ae <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8006858:	2001      	movs	r0, #1
}
 800685a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800685c:	2000      	movs	r0, #0
 800685e:	e7f8      	b.n	8006852 <HAL_SPI_Init+0xee>

08006860 <HAL_SPI_TransmitReceive>:
{
 8006860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006864:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006866:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
{
 800686a:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 800686c:	2801      	cmp	r0, #1
 800686e:	f000 809e 	beq.w	80069ae <HAL_SPI_TransmitReceive+0x14e>
 8006872:	461f      	mov	r7, r3
 8006874:	2301      	movs	r3, #1
 8006876:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800687a:	4689      	mov	r9, r1
 800687c:	4690      	mov	r8, r2
 800687e:	f7fe f813 	bl	80048a8 <HAL_GetTick>
 8006882:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8006884:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006888:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800688a:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800688c:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800688e:	d010      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x52>
 8006890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006894:	d008      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8006896:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006898:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800689a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800689c:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80068a0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80068a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068a8:	68a2      	ldr	r2, [r4, #8]
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	d1f3      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x36>
 80068ae:	2904      	cmp	r1, #4
 80068b0:	d1f1      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068b2:	f1b9 0f00 	cmp.w	r9, #0
 80068b6:	f000 80d4 	beq.w	8006a62 <HAL_SPI_TransmitReceive+0x202>
 80068ba:	f1b8 0f00 	cmp.w	r8, #0
 80068be:	f000 80d0 	beq.w	8006a62 <HAL_SPI_TransmitReceive+0x202>
 80068c2:	2f00      	cmp	r7, #0
 80068c4:	f000 80cd 	beq.w	8006a62 <HAL_SPI_TransmitReceive+0x202>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068c8:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068cc:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068ce:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068d2:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068d4:	bf1c      	itt	ne
 80068d6:	2205      	movne	r2, #5
 80068d8:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068dc:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e2:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80068e4:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 80068e8:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068ec:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 80068ee:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068f2:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80068f6:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80068f8:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068fa:	d85b      	bhi.n	80069b4 <HAL_SPI_TransmitReceive+0x154>
 80068fc:	2f01      	cmp	r7, #1
 80068fe:	f000 8124 	beq.w	8006b4a <HAL_SPI_TransmitReceive+0x2ea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006902:	6851      	ldr	r1, [r2, #4]
 8006904:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8006908:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800690a:	6811      	ldr	r1, [r2, #0]
 800690c:	0649      	lsls	r1, r1, #25
 800690e:	d403      	bmi.n	8006918 <HAL_SPI_TransmitReceive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 8006910:	6811      	ldr	r1, [r2, #0]
 8006912:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8006916:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006918:	b96b      	cbnz	r3, 8006936 <HAL_SPI_TransmitReceive+0xd6>
      if (hspi->TxXferCount > 1U)
 800691a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b01      	cmp	r3, #1
 8006920:	f240 80fd 	bls.w	8006b1e <HAL_SPI_TransmitReceive+0x2be>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006924:	4649      	mov	r1, r9
 8006926:	f831 3b02 	ldrh.w	r3, [r1], #2
 800692a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 800692c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800692e:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006930:	3b02      	subs	r3, #2
 8006932:	b29b      	uxth	r3, r3
 8006934:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006936:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006938:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800693a:	b29b      	uxth	r3, r3
 800693c:	b92b      	cbnz	r3, 800694a <HAL_SPI_TransmitReceive+0xea>
 800693e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8082 	beq.w	8006a4e <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800694a:	6821      	ldr	r1, [r4, #0]
 800694c:	688b      	ldr	r3, [r1, #8]
 800694e:	079a      	lsls	r2, r3, #30
 8006950:	d506      	bpl.n	8006960 <HAL_SPI_TransmitReceive+0x100>
 8006952:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006954:	b29b      	uxth	r3, r3
 8006956:	b11b      	cbz	r3, 8006960 <HAL_SPI_TransmitReceive+0x100>
 8006958:	2f00      	cmp	r7, #0
 800695a:	f040 8095 	bne.w	8006a88 <HAL_SPI_TransmitReceive+0x228>
        txallowed = 0U;
 800695e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006960:	688b      	ldr	r3, [r1, #8]
 8006962:	f013 0301 	ands.w	r3, r3, #1
 8006966:	d019      	beq.n	800699c <HAL_SPI_TransmitReceive+0x13c>
 8006968:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800696c:	b292      	uxth	r2, r2
 800696e:	b1aa      	cbz	r2, 800699c <HAL_SPI_TransmitReceive+0x13c>
        if (hspi->RxXferCount > 1U)
 8006970:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006974:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8006976:	b280      	uxth	r0, r0
 8006978:	2801      	cmp	r0, #1
 800697a:	d979      	bls.n	8006a70 <HAL_SPI_TransmitReceive+0x210>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800697c:	68c8      	ldr	r0, [r1, #12]
 800697e:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006982:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006984:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8006988:	3a02      	subs	r2, #2
 800698a:	b292      	uxth	r2, r2
 800698c:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006990:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8006994:	b292      	uxth	r2, r2
 8006996:	2a01      	cmp	r2, #1
 8006998:	d965      	bls.n	8006a66 <HAL_SPI_TransmitReceive+0x206>
        txallowed = 1U;
 800699a:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800699c:	f7fd ff84 	bl	80048a8 <HAL_GetTick>
 80069a0:	1b40      	subs	r0, r0, r5
 80069a2:	42b0      	cmp	r0, r6
 80069a4:	d3c8      	bcc.n	8006938 <HAL_SPI_TransmitReceive+0xd8>
 80069a6:	1c73      	adds	r3, r6, #1
 80069a8:	d0c6      	beq.n	8006938 <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 80069aa:	2003      	movs	r0, #3
 80069ac:	e774      	b.n	8006898 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80069ae:	2002      	movs	r0, #2
}
 80069b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069b4:	6851      	ldr	r1, [r2, #4]
 80069b6:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80069ba:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069bc:	6811      	ldr	r1, [r2, #0]
 80069be:	0648      	lsls	r0, r1, #25
 80069c0:	d403      	bmi.n	80069ca <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 80069c2:	6811      	ldr	r1, [r2, #0]
 80069c4:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80069c8:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 8082 	bne.w	8006ad4 <HAL_SPI_TransmitReceive+0x274>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d0:	4649      	mov	r1, r9
 80069d2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80069d6:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80069d8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069da:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80069e2:	1c73      	adds	r3, r6, #1
{
 80069e4:	f04f 0701 	mov.w	r7, #1
 80069e8:	d028      	beq.n	8006a3c <HAL_SPI_TransmitReceive+0x1dc>
 80069ea:	e06e      	b.n	8006aca <HAL_SPI_TransmitReceive+0x26a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	6893      	ldr	r3, [r2, #8]
 80069f0:	0798      	lsls	r0, r3, #30
 80069f2:	d50d      	bpl.n	8006a10 <HAL_SPI_TransmitReceive+0x1b0>
 80069f4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	b153      	cbz	r3, 8006a10 <HAL_SPI_TransmitReceive+0x1b0>
 80069fa:	b147      	cbz	r7, 8006a0e <HAL_SPI_TransmitReceive+0x1ae>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80069fe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006a02:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a04:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a06:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 8006a0e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a10:	6893      	ldr	r3, [r2, #8]
 8006a12:	f013 0301 	ands.w	r3, r3, #1
 8006a16:	d00f      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x1d8>
 8006a18:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8006a1c:	b289      	uxth	r1, r1
 8006a1e:	b159      	cbz	r1, 8006a38 <HAL_SPI_TransmitReceive+0x1d8>
        txallowed = 1U;
 8006a20:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a24:	68d2      	ldr	r2, [r2, #12]
 8006a26:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a2a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006a2c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a38:	f7fd ff36 	bl	80048a8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a3c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1d3      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x18c>
 8006a44:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1ce      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a4e:	462a      	mov	r2, r5
 8006a50:	4631      	mov	r1, r6
 8006a52:	4620      	mov	r0, r4
 8006a54:	f7ff fde4 	bl	8006620 <SPI_EndRxTxTransaction>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f43f af1d 	beq.w	8006898 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a5e:	2320      	movs	r3, #32
 8006a60:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8006a62:	2001      	movs	r0, #1
 8006a64:	e718      	b.n	8006898 <HAL_SPI_TransmitReceive+0x38>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a66:	684a      	ldr	r2, [r1, #4]
 8006a68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a6c:	604a      	str	r2, [r1, #4]
 8006a6e:	e794      	b.n	800699a <HAL_SPI_TransmitReceive+0x13a>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a70:	7b09      	ldrb	r1, [r1, #12]
 8006a72:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8006a74:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006a76:	3201      	adds	r2, #1
 8006a78:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006a7a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8006a7e:	3a01      	subs	r2, #1
 8006a80:	b292      	uxth	r2, r2
 8006a82:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8006a86:	e788      	b.n	800699a <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 8006a88:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a8a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8006a8c:	b292      	uxth	r2, r2
 8006a8e:	2a01      	cmp	r2, #1
 8006a90:	d950      	bls.n	8006b34 <HAL_SPI_TransmitReceive+0x2d4>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a92:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006a96:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a98:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a9a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006a9c:	3b02      	subs	r3, #2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006aa2:	e75c      	b.n	800695e <HAL_SPI_TransmitReceive+0xfe>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0cf      	beq.n	8006a4e <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	6893      	ldr	r3, [r2, #8]
 8006ab2:	0799      	lsls	r1, r3, #30
 8006ab4:	d423      	bmi.n	8006afe <HAL_SPI_TransmitReceive+0x29e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ab6:	6893      	ldr	r3, [r2, #8]
 8006ab8:	f013 0301 	ands.w	r3, r3, #1
 8006abc:	d10d      	bne.n	8006ada <HAL_SPI_TransmitReceive+0x27a>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006abe:	f7fd fef3 	bl	80048a8 <HAL_GetTick>
 8006ac2:	1b40      	subs	r0, r0, r5
 8006ac4:	42b0      	cmp	r0, r6
 8006ac6:	f4bf af70 	bcs.w	80069aa <HAL_SPI_TransmitReceive+0x14a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1ed      	bne.n	8006aae <HAL_SPI_TransmitReceive+0x24e>
 8006ad2:	e7e7      	b.n	8006aa4 <HAL_SPI_TransmitReceive+0x244>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ad4:	2f01      	cmp	r7, #1
 8006ad6:	d184      	bne.n	80069e2 <HAL_SPI_TransmitReceive+0x182>
 8006ad8:	e77a      	b.n	80069d0 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ada:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8006ade:	b289      	uxth	r1, r1
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d0ec      	beq.n	8006abe <HAL_SPI_TransmitReceive+0x25e>
        txallowed = 1U;
 8006ae4:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ae6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ae8:	68d2      	ldr	r2, [r2, #12]
 8006aea:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aee:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006af0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8006afc:	e7df      	b.n	8006abe <HAL_SPI_TransmitReceive+0x25e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006afe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0d7      	beq.n	8006ab6 <HAL_SPI_TransmitReceive+0x256>
 8006b06:	b147      	cbz	r7, 8006b1a <HAL_SPI_TransmitReceive+0x2ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b0a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006b0e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b10:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b12:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8006b1a:	2700      	movs	r7, #0
 8006b1c:	e7cb      	b.n	8006ab6 <HAL_SPI_TransmitReceive+0x256>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b1e:	f899 3000 	ldrb.w	r3, [r9]
 8006b22:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8006b24:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 8006b26:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b28:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8006b2a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8006b2c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8006b2e:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b30:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006b32:	e700      	b.n	8006936 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 8006b38:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8006b3a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b3c:	6821      	ldr	r1, [r4, #0]
          hspi->TxXferCount--;
 8006b3e:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8006b40:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8006b42:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8006b44:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8006b46:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006b48:	e709      	b.n	800695e <HAL_SPI_TransmitReceive+0xfe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b4a:	6853      	ldr	r3, [r2, #4]
 8006b4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006b50:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b52:	6813      	ldr	r3, [r2, #0]
 8006b54:	0659      	lsls	r1, r3, #25
 8006b56:	f53f aee0 	bmi.w	800691a <HAL_SPI_TransmitReceive+0xba>
    __HAL_SPI_ENABLE(hspi);
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b60:	6013      	str	r3, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b62:	e6da      	b.n	800691a <HAL_SPI_TransmitReceive+0xba>

08006b64 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b64:	6a03      	ldr	r3, [r0, #32]
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6c:	6a03      	ldr	r3, [r0, #32]
{
 8006b6e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b72:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006b7a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006b7e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b80:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006b82:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006b86:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b88:	4d13      	ldr	r5, [pc, #76]	@ (8006bd8 <TIM_OC1_SetConfig+0x74>)
 8006b8a:	42a8      	cmp	r0, r5
 8006b8c:	d00f      	beq.n	8006bae <TIM_OC1_SetConfig+0x4a>
 8006b8e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006b92:	42a8      	cmp	r0, r5
 8006b94:	d00b      	beq.n	8006bae <TIM_OC1_SetConfig+0x4a>
 8006b96:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8006b9a:	42a8      	cmp	r0, r5
 8006b9c:	d007      	beq.n	8006bae <TIM_OC1_SetConfig+0x4a>
 8006b9e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ba2:	42a8      	cmp	r0, r5
 8006ba4:	d003      	beq.n	8006bae <TIM_OC1_SetConfig+0x4a>
 8006ba6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006baa:	42a8      	cmp	r0, r5
 8006bac:	d10d      	bne.n	8006bca <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bb0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006bb4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bba:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bbe:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bc2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bc6:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bca:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006bcc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006bce:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006bd0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8006bd2:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8006bd4:	6203      	str	r3, [r0, #32]
}
 8006bd6:	4770      	bx	lr
 8006bd8:	40012c00 	.word	0x40012c00

08006bdc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bdc:	6a03      	ldr	r3, [r0, #32]
 8006bde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006be2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be4:	6a03      	ldr	r3, [r0, #32]
{
 8006be6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006bf2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006bf6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bf8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006bfa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bfe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c02:	4d14      	ldr	r5, [pc, #80]	@ (8006c54 <TIM_OC3_SetConfig+0x78>)
 8006c04:	42a8      	cmp	r0, r5
 8006c06:	d00f      	beq.n	8006c28 <TIM_OC3_SetConfig+0x4c>
 8006c08:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006c0c:	42a8      	cmp	r0, r5
 8006c0e:	d00b      	beq.n	8006c28 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c10:	4d11      	ldr	r5, [pc, #68]	@ (8006c58 <TIM_OC3_SetConfig+0x7c>)
 8006c12:	42a8      	cmp	r0, r5
 8006c14:	d00f      	beq.n	8006c36 <TIM_OC3_SetConfig+0x5a>
 8006c16:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006c1a:	42a8      	cmp	r0, r5
 8006c1c:	d00b      	beq.n	8006c36 <TIM_OC3_SetConfig+0x5a>
 8006c1e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006c22:	42a8      	cmp	r0, r5
 8006c24:	d10f      	bne.n	8006c46 <TIM_OC3_SetConfig+0x6a>
 8006c26:	e006      	b.n	8006c36 <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c28:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c36:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c3a:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c3e:	ea46 0c05 	orr.w	ip, r6, r5
 8006c42:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c46:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006c48:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006c4a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006c4c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8006c4e:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8006c50:	6203      	str	r3, [r0, #32]
}
 8006c52:	4770      	bx	lr
 8006c54:	40012c00 	.word	0x40012c00
 8006c58:	40014000 	.word	0x40014000

08006c5c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c5c:	6a03      	ldr	r3, [r0, #32]
 8006c5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c62:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c64:	6a03      	ldr	r3, [r0, #32]
{
 8006c66:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c6a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c6e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006c72:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c7a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c80:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c84:	4d14      	ldr	r5, [pc, #80]	@ (8006cd8 <TIM_OC4_SetConfig+0x7c>)
 8006c86:	42a8      	cmp	r0, r5
 8006c88:	d00f      	beq.n	8006caa <TIM_OC4_SetConfig+0x4e>
 8006c8a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006c8e:	42a8      	cmp	r0, r5
 8006c90:	d00b      	beq.n	8006caa <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c92:	4d12      	ldr	r5, [pc, #72]	@ (8006cdc <TIM_OC4_SetConfig+0x80>)
 8006c94:	42a8      	cmp	r0, r5
 8006c96:	d00f      	beq.n	8006cb8 <TIM_OC4_SetConfig+0x5c>
 8006c98:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006c9c:	42a8      	cmp	r0, r5
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_OC4_SetConfig+0x5c>
 8006ca0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ca4:	42a8      	cmp	r0, r5
 8006ca6:	d10f      	bne.n	8006cc8 <TIM_OC4_SetConfig+0x6c>
 8006ca8:	e006      	b.n	8006cb8 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006caa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006cac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006cb0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006cb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006cb8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006cbc:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006cc0:	ea46 0c05 	orr.w	ip, r6, r5
 8006cc4:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006cca:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006ccc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006cce:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8006cd0:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8006cd2:	6203      	str	r3, [r0, #32]
}
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40014000 	.word	0x40014000

08006ce0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d06d      	beq.n	8006dc0 <HAL_TIM_Base_Init+0xe0>
{
 8006ce4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006ce6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006cea:	4604      	mov	r4, r0
 8006cec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d060      	beq.n	8006db6 <HAL_TIM_Base_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cf6:	4e33      	ldr	r6, [pc, #204]	@ (8006dc4 <HAL_TIM_Base_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8006cf8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cfa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cfc:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d04:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8006d06:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d08:	d044      	beq.n	8006d94 <HAL_TIM_Base_Init+0xb4>
 8006d0a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006d0e:	d017      	beq.n	8006d40 <HAL_TIM_Base_Init+0x60>
 8006d10:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8006d14:	42b2      	cmp	r2, r6
 8006d16:	d013      	beq.n	8006d40 <HAL_TIM_Base_Init+0x60>
 8006d18:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006d1c:	42b2      	cmp	r2, r6
 8006d1e:	d00f      	beq.n	8006d40 <HAL_TIM_Base_Init+0x60>
 8006d20:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8006d24:	42b2      	cmp	r2, r6
 8006d26:	d035      	beq.n	8006d94 <HAL_TIM_Base_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d28:	4e27      	ldr	r6, [pc, #156]	@ (8006dc8 <HAL_TIM_Base_Init+0xe8>)
 8006d2a:	42b2      	cmp	r2, r6
 8006d2c:	d036      	beq.n	8006d9c <HAL_TIM_Base_Init+0xbc>
 8006d2e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006d32:	42b2      	cmp	r2, r6
 8006d34:	d032      	beq.n	8006d9c <HAL_TIM_Base_Init+0xbc>
 8006d36:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006d3a:	42b2      	cmp	r2, r6
 8006d3c:	d108      	bne.n	8006d50 <HAL_TIM_Base_Init+0x70>
 8006d3e:	e02d      	b.n	8006d9c <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8006d40:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006d46:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d48:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d4e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d54:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006d56:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d58:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006d5a:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d60:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d64:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006d68:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006d6c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006d70:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006d80:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006d84:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006d88:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006d8c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006d90:	2000      	movs	r0, #0
}
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8006d94:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006d9a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d9c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006da2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006da8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006daa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dac:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006dae:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006db0:	6963      	ldr	r3, [r4, #20]
 8006db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006db4:	e7d2      	b.n	8006d5c <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8006db6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006dba:	f7fd faa5 	bl	8004308 <HAL_TIM_Base_MspInit>
 8006dbe:	e799      	b.n	8006cf4 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8006dc0:	2001      	movs	r0, #1
}
 8006dc2:	4770      	bx	lr
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40014000 	.word	0x40014000

08006dcc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006dcc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d122      	bne.n	8006e1a <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dd4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd6:	4916      	ldr	r1, [pc, #88]	@ (8006e30 <HAL_TIM_Base_Start_IT+0x64>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dde:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de8:	d019      	beq.n	8006e1e <HAL_TIM_Base_Start_IT+0x52>
 8006dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dee:	d016      	beq.n	8006e1e <HAL_TIM_Base_Start_IT+0x52>
 8006df0:	4a10      	ldr	r2, [pc, #64]	@ (8006e34 <HAL_TIM_Base_Start_IT+0x68>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <HAL_TIM_Base_Start_IT+0x52>
 8006df6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00f      	beq.n	8006e1e <HAL_TIM_Base_Start_IT+0x52>
 8006dfe:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00b      	beq.n	8006e1e <HAL_TIM_Base_Start_IT+0x52>
 8006e06:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d007      	beq.n	8006e1e <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	f042 0201 	orr.w	r2, r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006e16:	2000      	movs	r0, #0
 8006e18:	4770      	bx	lr
    return HAL_ERROR;
 8006e1a:	2001      	movs	r0, #1
}
 8006e1c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1e:	6899      	ldr	r1, [r3, #8]
 8006e20:	4a05      	ldr	r2, [pc, #20]	@ (8006e38 <HAL_TIM_Base_Start_IT+0x6c>)
 8006e22:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e24:	2a06      	cmp	r2, #6
 8006e26:	d0f6      	beq.n	8006e16 <HAL_TIM_Base_Start_IT+0x4a>
 8006e28:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006e2c:	d1ef      	bne.n	8006e0e <HAL_TIM_Base_Start_IT+0x42>
 8006e2e:	e7f2      	b.n	8006e16 <HAL_TIM_Base_Start_IT+0x4a>
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	40000400 	.word	0x40000400
 8006e38:	00010007 	.word	0x00010007

08006e3c <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop

08006e40 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d06d      	beq.n	8006f20 <HAL_TIM_PWM_Init+0xe0>
{
 8006e44:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e46:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d060      	beq.n	8006f16 <HAL_TIM_PWM_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e54:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e56:	4e33      	ldr	r6, [pc, #204]	@ (8006f24 <HAL_TIM_PWM_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8006e58:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e5a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e5c:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e64:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8006e66:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e68:	d044      	beq.n	8006ef4 <HAL_TIM_PWM_Init+0xb4>
 8006e6a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006e6e:	d017      	beq.n	8006ea0 <HAL_TIM_PWM_Init+0x60>
 8006e70:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8006e74:	42b2      	cmp	r2, r6
 8006e76:	d013      	beq.n	8006ea0 <HAL_TIM_PWM_Init+0x60>
 8006e78:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006e7c:	42b2      	cmp	r2, r6
 8006e7e:	d00f      	beq.n	8006ea0 <HAL_TIM_PWM_Init+0x60>
 8006e80:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8006e84:	42b2      	cmp	r2, r6
 8006e86:	d035      	beq.n	8006ef4 <HAL_TIM_PWM_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e88:	4e27      	ldr	r6, [pc, #156]	@ (8006f28 <HAL_TIM_PWM_Init+0xe8>)
 8006e8a:	42b2      	cmp	r2, r6
 8006e8c:	d036      	beq.n	8006efc <HAL_TIM_PWM_Init+0xbc>
 8006e8e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006e92:	42b2      	cmp	r2, r6
 8006e94:	d032      	beq.n	8006efc <HAL_TIM_PWM_Init+0xbc>
 8006e96:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006e9a:	42b2      	cmp	r2, r6
 8006e9c:	d108      	bne.n	8006eb0 <HAL_TIM_PWM_Init+0x70>
 8006e9e:	e02d      	b.n	8006efc <HAL_TIM_PWM_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8006ea0:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ea6:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ea8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eae:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eb4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006eb6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006eba:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec0:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006ec8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006ecc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006ed0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006edc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006ee0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006ee4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006ee8:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006ef0:	2000      	movs	r0, #0
}
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8006ef4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006efa:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006efc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f02:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f08:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006f0a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f0c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006f0e:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006f10:	6963      	ldr	r3, [r4, #20]
 8006f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f14:	e7d2      	b.n	8006ebc <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8006f16:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006f1a:	f7ff ff8f 	bl	8006e3c <HAL_TIM_PWM_MspInit>
 8006f1e:	e799      	b.n	8006e54 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8006f20:	2001      	movs	r0, #1
}
 8006f22:	4770      	bx	lr
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40014000 	.word	0x40014000

08006f2c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006f2c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	f000 8086 	beq.w	8007042 <HAL_TIM_ConfigClockSource+0x116>
 8006f36:	4602      	mov	r2, r0
{
 8006f38:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3a:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8006f3c:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8006f42:	2001      	movs	r0, #1
 8006f44:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006f48:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80070bc <HAL_TIM_ConfigClockSource+0x190>)
 8006f4c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006f4e:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006f50:	680b      	ldr	r3, [r1, #0]
 8006f52:	2b70      	cmp	r3, #112	@ 0x70
 8006f54:	f000 80a1 	beq.w	800709a <HAL_TIM_ConfigClockSource+0x16e>
 8006f58:	d827      	bhi.n	8006faa <HAL_TIM_ConfigClockSource+0x7e>
 8006f5a:	2b50      	cmp	r3, #80	@ 0x50
 8006f5c:	d073      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x11a>
 8006f5e:	d93c      	bls.n	8006fda <HAL_TIM_ConfigClockSource+0xae>
 8006f60:	2b60      	cmp	r3, #96	@ 0x60
 8006f62:	d11a      	bne.n	8006f9a <HAL_TIM_ConfigClockSource+0x6e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f64:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f66:	6848      	ldr	r0, [r1, #4]
 8006f68:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6a:	f023 0310 	bic.w	r3, r3, #16
 8006f6e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f70:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8006f72:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f74:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f7c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f80:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f84:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8006f86:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f88:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f8a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f92:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f96:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006f98:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006f9a:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006f9c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006f9e:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006fa2:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8006fa6:	bc30      	pop	{r4, r5}
 8006fa8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fae:	d064      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x14e>
 8006fb0:	d936      	bls.n	8007020 <HAL_TIM_ConfigClockSource+0xf4>
 8006fb2:	4943      	ldr	r1, [pc, #268]	@ (80070c0 <HAL_TIM_ConfigClockSource+0x194>)
 8006fb4:	428b      	cmp	r3, r1
 8006fb6:	d006      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x9a>
 8006fb8:	d92b      	bls.n	8007012 <HAL_TIM_ConfigClockSource+0xe6>
 8006fba:	4942      	ldr	r1, [pc, #264]	@ (80070c4 <HAL_TIM_ConfigClockSource+0x198>)
 8006fbc:	428b      	cmp	r3, r1
 8006fbe:	d002      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x9a>
 8006fc0:	3130      	adds	r1, #48	@ 0x30
 8006fc2:	428b      	cmp	r3, r1
 8006fc4:	d1e9      	bne.n	8006f9a <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8006fc6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fc8:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006fcc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fd0:	4319      	orrs	r1, r3
 8006fd2:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8006fd6:	60a1      	str	r1, [r4, #8]
}
 8006fd8:	e025      	b.n	8007026 <HAL_TIM_ConfigClockSource+0xfa>
  switch (sClockSourceConfig->ClockSource)
 8006fda:	2b40      	cmp	r3, #64	@ 0x40
 8006fdc:	d125      	bne.n	800702a <HAL_TIM_ConfigClockSource+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fde:	684b      	ldr	r3, [r1, #4]
 8006fe0:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8006fe2:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fe4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006fe8:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fea:	6a23      	ldr	r3, [r4, #32]
 8006fec:	f023 0301 	bic.w	r3, r3, #1
 8006ff0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ff4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ff8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006ffc:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006ffe:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007000:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007002:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800700a:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800700e:	60a3      	str	r3, [r4, #8]
}
 8007010:	e009      	b.n	8007026 <HAL_TIM_ConfigClockSource+0xfa>
  switch (sClockSourceConfig->ClockSource)
 8007012:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007016:	d0d6      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x9a>
 8007018:	3910      	subs	r1, #16
 800701a:	428b      	cmp	r3, r1
 800701c:	d0d3      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x9a>
 800701e:	e7bc      	b.n	8006f9a <HAL_TIM_ConfigClockSource+0x6e>
 8007020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007024:	d1b9      	bne.n	8006f9a <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8007026:	2000      	movs	r0, #0
 8007028:	e7b7      	b.n	8006f9a <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 800702a:	d8b6      	bhi.n	8006f9a <HAL_TIM_ConfigClockSource+0x6e>
 800702c:	2b20      	cmp	r3, #32
 800702e:	d0ca      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x9a>
 8007030:	d903      	bls.n	800703a <HAL_TIM_ConfigClockSource+0x10e>
 8007032:	2b30      	cmp	r3, #48	@ 0x30
 8007034:	d0c7      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8007036:	2001      	movs	r0, #1
 8007038:	e7af      	b.n	8006f9a <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 800703a:	f033 0110 	bics.w	r1, r3, #16
 800703e:	d1ac      	bne.n	8006f9a <HAL_TIM_ConfigClockSource+0x6e>
 8007040:	e7c1      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8007042:	2002      	movs	r0, #2
}
 8007044:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007046:	684b      	ldr	r3, [r1, #4]
 8007048:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800704a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800704c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007050:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007052:	6a23      	ldr	r3, [r4, #32]
 8007054:	f023 0301 	bic.w	r3, r3, #1
 8007058:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800705a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800705c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007060:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007064:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007066:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007068:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800706a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800706e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007072:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8007076:	60a3      	str	r3, [r4, #8]
}
 8007078:	e7d5      	b.n	8007026 <HAL_TIM_ConfigClockSource+0xfa>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800707a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800707e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007080:	432b      	orrs	r3, r5
 8007082:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007084:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007088:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800708c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800708e:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007090:	68a3      	ldr	r3, [r4, #8]
 8007092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007096:	60a3      	str	r3, [r4, #8]
      break;
 8007098:	e7c5      	b.n	8007026 <HAL_TIM_ConfigClockSource+0xfa>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800709a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800709e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070a0:	432b      	orrs	r3, r5
 80070a2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070a4:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070a8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80070ac:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80070ae:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80070b0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070b2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80070b6:	60a3      	str	r3, [r4, #8]
      break;
 80070b8:	e7b5      	b.n	8007026 <HAL_TIM_ConfigClockSource+0xfa>
 80070ba:	bf00      	nop
 80070bc:	ffce0088 	.word	0xffce0088
 80070c0:	00100030 	.word	0x00100030
 80070c4:	00100040 	.word	0x00100040

080070c8 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80070c8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d069      	beq.n	80071a4 <HAL_TIM_SlaveConfigSynchro+0xdc>
 80070d0:	4684      	mov	ip, r0
 80070d2:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 80070d4:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80070d6:	2302      	movs	r3, #2
{
 80070d8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80070da:	f88c 203c 	strb.w	r2, [ip, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80070de:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80070e2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070e4:	684b      	ldr	r3, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80070e6:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80070e8:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80070ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070f0:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 80070f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80070f6:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80070fa:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 80070fc:	2b60      	cmp	r3, #96	@ 0x60
  htim->Instance->SMCR = tmpsmcr;
 80070fe:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8007100:	d05e      	beq.n	80071c0 <HAL_TIM_SlaveConfigSynchro+0xf8>
 8007102:	d816      	bhi.n	8007132 <HAL_TIM_SlaveConfigSynchro+0x6a>
 8007104:	2b40      	cmp	r3, #64	@ 0x40
 8007106:	d06e      	beq.n	80071e6 <HAL_TIM_SlaveConfigSynchro+0x11e>
 8007108:	d933      	bls.n	8007172 <HAL_TIM_SlaveConfigSynchro+0xaa>
 800710a:	2b50      	cmp	r3, #80	@ 0x50
 800710c:	d141      	bne.n	8007192 <HAL_TIM_SlaveConfigSynchro+0xca>
  tmpccer = TIMx->CCER;
 800710e:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007110:	688a      	ldr	r2, [r1, #8]
 8007112:	6909      	ldr	r1, [r1, #16]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007114:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8007118:	431a      	orrs	r2, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800711a:	6a03      	ldr	r3, [r0, #32]
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007122:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007124:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007128:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800712c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800712e:	6202      	str	r2, [r0, #32]
 8007130:	e00d      	b.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8007132:	2b70      	cmp	r3, #112	@ 0x70
 8007134:	d038      	beq.n	80071a8 <HAL_TIM_SlaveConfigSynchro+0xe0>
 8007136:	2b6f      	cmp	r3, #111	@ 0x6f
 8007138:	d92b      	bls.n	8007192 <HAL_TIM_SlaveConfigSynchro+0xca>
 800713a:	4a2f      	ldr	r2, [pc, #188]	@ (80071f8 <HAL_TIM_SlaveConfigSynchro+0x130>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d006      	beq.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
 8007140:	d91d      	bls.n	800717e <HAL_TIM_SlaveConfigSynchro+0xb6>
 8007142:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <HAL_TIM_SlaveConfigSynchro+0x134>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d002      	beq.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
 8007148:	3230      	adds	r2, #48	@ 0x30
 800714a:	4293      	cmp	r3, r2
 800714c:	d121      	bne.n	8007192 <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800714e:	68c3      	ldr	r3, [r0, #12]
 8007150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007154:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007156:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8007158:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800715a:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800715c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007160:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8007162:	f88c 103d 	strb.w	r1, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007166:	f88c 203c 	strb.w	r2, [ip, #60]	@ 0x3c
  return HAL_OK;
 800716a:	4610      	mov	r0, r2
}
 800716c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007170:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8007172:	2b20      	cmp	r3, #32
 8007174:	d0eb      	beq.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
 8007176:	d909      	bls.n	800718c <HAL_TIM_SlaveConfigSynchro+0xc4>
 8007178:	2b30      	cmp	r3, #48	@ 0x30
 800717a:	d10a      	bne.n	8007192 <HAL_TIM_SlaveConfigSynchro+0xca>
 800717c:	e7e7      	b.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
 800717e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007182:	d0e4      	beq.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
 8007184:	3a10      	subs	r2, #16
 8007186:	4293      	cmp	r3, r2
 8007188:	d0e1      	beq.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
 800718a:	e002      	b.n	8007192 <HAL_TIM_SlaveConfigSynchro+0xca>
 800718c:	f033 0310 	bics.w	r3, r3, #16
 8007190:	d0dd      	beq.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8007192:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8007194:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8007196:	f88c 003d 	strb.w	r0, [ip, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800719a:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 800719e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071a2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80071a4:	2002      	movs	r0, #2
}
 80071a6:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071a8:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80071ac:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071ae:	6909      	ldr	r1, [r1, #16]
 80071b0:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071b2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80071ba:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80071bc:	6083      	str	r3, [r0, #8]
 80071be:	e7c6      	b.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071c0:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c2:	688c      	ldr	r4, [r1, #8]
 80071c4:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071c6:	f023 0310 	bic.w	r3, r3, #16
 80071ca:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071cc:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80071ce:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071d0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071d8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80071dc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80071e0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80071e2:	6203      	str	r3, [r0, #32]
 80071e4:	e7b3      	b.n	800714e <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80071e6:	2c05      	cmp	r4, #5
 80071e8:	d0d3      	beq.n	8007192 <HAL_TIM_SlaveConfigSynchro+0xca>
 80071ea:	f1b4 1f01 	cmp.w	r4, #65537	@ 0x10001
 80071ee:	d0d0      	beq.n	8007192 <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 80071f0:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80071f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80071f4:	6a03      	ldr	r3, [r0, #32]
 80071f6:	e791      	b.n	800711c <HAL_TIM_SlaveConfigSynchro+0x54>
 80071f8:	00100030 	.word	0x00100030
 80071fc:	00100040 	.word	0x00100040

08007200 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop

08007204 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop

08007208 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop

0800720c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop

08007210 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007210:	6803      	ldr	r3, [r0, #0]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	0791      	lsls	r1, r2, #30
{
 8007216:	b510      	push	{r4, lr}
 8007218:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800721a:	d503      	bpl.n	8007224 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	0792      	lsls	r2, r2, #30
 8007220:	f100 808a 	bmi.w	8007338 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	0752      	lsls	r2, r2, #29
 8007228:	d502      	bpl.n	8007230 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	0750      	lsls	r0, r2, #29
 800722e:	d470      	bmi.n	8007312 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	0711      	lsls	r1, r2, #28
 8007234:	d502      	bpl.n	800723c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	0712      	lsls	r2, r2, #28
 800723a:	d458      	bmi.n	80072ee <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	06d1      	lsls	r1, r2, #27
 8007240:	d502      	bpl.n	8007248 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	06d2      	lsls	r2, r2, #27
 8007246:	d43e      	bmi.n	80072c6 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	07d0      	lsls	r0, r2, #31
 800724c:	d503      	bpl.n	8007256 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	07d1      	lsls	r1, r2, #31
 8007252:	f100 808a 	bmi.w	800736a <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007256:	691a      	ldr	r2, [r3, #16]
 8007258:	0612      	lsls	r2, r2, #24
 800725a:	d503      	bpl.n	8007264 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	0610      	lsls	r0, r2, #24
 8007260:	f100 808b 	bmi.w	800737a <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	05d1      	lsls	r1, r2, #23
 8007268:	d503      	bpl.n	8007272 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	0612      	lsls	r2, r2, #24
 800726e:	f100 808c 	bmi.w	800738a <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	0650      	lsls	r0, r2, #25
 8007276:	d503      	bpl.n	8007280 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	0651      	lsls	r1, r2, #25
 800727c:	f100 808d 	bmi.w	800739a <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007280:	691a      	ldr	r2, [r3, #16]
 8007282:	0692      	lsls	r2, r2, #26
 8007284:	d503      	bpl.n	800728e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	0690      	lsls	r0, r2, #26
 800728a:	f100 808e 	bmi.w	80073aa <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	02d1      	lsls	r1, r2, #11
 8007292:	d503      	bpl.n	800729c <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	02d2      	lsls	r2, r2, #11
 8007298:	f100 808f 	bmi.w	80073ba <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	0290      	lsls	r0, r2, #10
 80072a0:	d503      	bpl.n	80072aa <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	0291      	lsls	r1, r2, #10
 80072a6:	f100 8090 	bmi.w	80073ca <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	0252      	lsls	r2, r2, #9
 80072ae:	d503      	bpl.n	80072b8 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	0250      	lsls	r0, r2, #9
 80072b4:	f100 8091 	bmi.w	80073da <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	0211      	lsls	r1, r2, #8
 80072bc:	d502      	bpl.n	80072c4 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	0212      	lsls	r2, r2, #8
 80072c2:	d44a      	bmi.n	800735a <HAL_TIM_IRQHandler+0x14a>
}
 80072c4:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072c6:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ca:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072cc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ce:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80072d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072d8:	f040 8090 	bne.w	80073fc <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072dc:	f7ff ff90 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e0:	4620      	mov	r0, r4
 80072e2:	f7ff ff91 	bl	8007208 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072e8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ea:	7722      	strb	r2, [r4, #28]
 80072ec:	e7ac      	b.n	8007248 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072ee:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072f2:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072f4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80072fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072fe:	d17a      	bne.n	80073f6 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007300:	f7ff ff7e 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007304:	4620      	mov	r0, r4
 8007306:	f7ff ff7f 	bl	8007208 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800730c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730e:	7722      	strb	r2, [r4, #28]
 8007310:	e794      	b.n	800723c <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007312:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007316:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007318:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800731a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007322:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007324:	d164      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	f7ff ff6b 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732a:	4620      	mov	r0, r4
 800732c:	f7ff ff6c 	bl	8007208 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007330:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007332:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007334:	7722      	strb	r2, [r4, #28]
 8007336:	e77b      	b.n	8007230 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007338:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800733c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800733e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007340:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	0799      	lsls	r1, r3, #30
 8007346:	d150      	bne.n	80073ea <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007348:	f7ff ff5a 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734c:	4620      	mov	r0, r4
 800734e:	f7ff ff5b 	bl	8007208 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007352:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007354:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007356:	7722      	strb	r2, [r4, #28]
 8007358:	e764      	b.n	8007224 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800735a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 800735e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007360:	611a      	str	r2, [r3, #16]
}
 8007362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007366:	f000 ba79 	b.w	800785c <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800736a:	f06f 0201 	mvn.w	r2, #1
 800736e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007370:	4620      	mov	r0, r4
 8007372:	f7fa fb85 	bl	8001a80 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	e76d      	b.n	8007256 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800737a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800737e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fa61 	bl	8007848 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	e76c      	b.n	8007264 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800738a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800738e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fa5b 	bl	800784c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	e76b      	b.n	8007272 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800739a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800739e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80073a0:	4620      	mov	r0, r4
 80073a2:	f7ff ff33 	bl	800720c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	e76a      	b.n	8007280 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073aa:	f06f 0220 	mvn.w	r2, #32
 80073ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 fa47 	bl	8007844 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	e769      	b.n	800728e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80073ba:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80073be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 fa45 	bl	8007850 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	e768      	b.n	800729c <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80073ca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80073ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 fa3f 	bl	8007854 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	e767      	b.n	80072aa <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80073da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80073de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80073e0:	4620      	mov	r0, r4
 80073e2:	f000 fa39 	bl	8007858 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	e766      	b.n	80072b8 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 80073ea:	f7ff ff0b 	bl	8007204 <HAL_TIM_IC_CaptureCallback>
 80073ee:	e7b0      	b.n	8007352 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 80073f0:	f7ff ff08 	bl	8007204 <HAL_TIM_IC_CaptureCallback>
 80073f4:	e79c      	b.n	8007330 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80073f6:	f7ff ff05 	bl	8007204 <HAL_TIM_IC_CaptureCallback>
 80073fa:	e786      	b.n	800730a <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 80073fc:	f7ff ff02 	bl	8007204 <HAL_TIM_IC_CaptureCallback>
 8007400:	e771      	b.n	80072e6 <HAL_TIM_IRQHandler+0xd6>
 8007402:	bf00      	nop

08007404 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007404:	6a03      	ldr	r3, [r0, #32]
 8007406:	f023 0310 	bic.w	r3, r3, #16
 800740a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800740c:	6a03      	ldr	r3, [r0, #32]
{
 800740e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8007410:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007412:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007414:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007416:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800741a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800741e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007422:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007424:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007428:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800742c:	4d14      	ldr	r5, [pc, #80]	@ (8007480 <TIM_OC2_SetConfig+0x7c>)
 800742e:	42a8      	cmp	r0, r5
 8007430:	d00f      	beq.n	8007452 <TIM_OC2_SetConfig+0x4e>
 8007432:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007436:	42a8      	cmp	r0, r5
 8007438:	d00b      	beq.n	8007452 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800743a:	4d12      	ldr	r5, [pc, #72]	@ (8007484 <TIM_OC2_SetConfig+0x80>)
 800743c:	42a8      	cmp	r0, r5
 800743e:	d00f      	beq.n	8007460 <TIM_OC2_SetConfig+0x5c>
 8007440:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007444:	42a8      	cmp	r0, r5
 8007446:	d00b      	beq.n	8007460 <TIM_OC2_SetConfig+0x5c>
 8007448:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800744c:	42a8      	cmp	r0, r5
 800744e:	d10f      	bne.n	8007470 <TIM_OC2_SetConfig+0x6c>
 8007450:	e006      	b.n	8007460 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007452:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007458:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800745c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007460:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007464:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007468:	ea46 0c05 	orr.w	ip, r6, r5
 800746c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8007470:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007472:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007474:	6182      	str	r2, [r0, #24]
}
 8007476:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8007478:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800747a:	6203      	str	r3, [r0, #32]
}
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	40012c00 	.word	0x40012c00
 8007484:	40014000 	.word	0x40014000

08007488 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8007488:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800748c:	2b01      	cmp	r3, #1
 800748e:	f000 80dc 	beq.w	800764a <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8007492:	2301      	movs	r3, #1
{
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4604      	mov	r4, r0
 8007498:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800749a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800749e:	2a14      	cmp	r2, #20
 80074a0:	d80c      	bhi.n	80074bc <HAL_TIM_PWM_ConfigChannel+0x34>
 80074a2:	e8df f002 	tbb	[pc, r2]
 80074a6:	0b4f      	.short	0x0b4f
 80074a8:	0b630b0b 	.word	0x0b630b0b
 80074ac:	0b740b0b 	.word	0x0b740b0b
 80074b0:	0b840b0b 	.word	0x0b840b0b
 80074b4:	0b950b0b 	.word	0x0b950b0b
 80074b8:	0b0b      	.short	0x0b0b
 80074ba:	10          	.byte	0x10
 80074bb:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80074bc:	2300      	movs	r3, #0
 80074be:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 80074c2:	2001      	movs	r0, #1
}
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074c6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c8:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074ca:	6a1a      	ldr	r2, [r3, #32]
 80074cc:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80074d0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80074d2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80074d4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80074d6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074d8:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80074dc:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074e4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074e6:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074ea:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ee:	4e58      	ldr	r6, [pc, #352]	@ (8007650 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80074f0:	42b3      	cmp	r3, r6
 80074f2:	d00f      	beq.n	8007514 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80074f4:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80074f8:	42b3      	cmp	r3, r6
 80074fa:	d00b      	beq.n	8007514 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80074fc:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8007500:	42b3      	cmp	r3, r6
 8007502:	d007      	beq.n	8007514 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007504:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007508:	42b3      	cmp	r3, r6
 800750a:	d003      	beq.n	8007514 <HAL_TIM_PWM_ConfigChannel+0x8c>
 800750c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007510:	42b3      	cmp	r3, r6
 8007512:	d104      	bne.n	800751e <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007514:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007516:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800751a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 800751e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007520:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8007522:	6869      	ldr	r1, [r5, #4]
 8007524:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8007526:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007528:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800752a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800752c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007530:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007532:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007538:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800753a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800753c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007540:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007542:	e00e      	b.n	8007562 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007544:	6800      	ldr	r0, [r0, #0]
 8007546:	f7ff fb0d 	bl	8006b64 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800754a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800754c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800754e:	f043 0308 	orr.w	r3, r3, #8
 8007552:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007554:	6983      	ldr	r3, [r0, #24]
 8007556:	f023 0304 	bic.w	r3, r3, #4
 800755a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800755c:	6983      	ldr	r3, [r0, #24]
 800755e:	4313      	orrs	r3, r2
 8007560:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8007562:	2300      	movs	r3, #0
 8007564:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007568:	2000      	movs	r0, #0
}
 800756a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800756c:	6800      	ldr	r0, [r0, #0]
 800756e:	f7ff ff49 	bl	8007404 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007572:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007574:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007576:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800757a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800757c:	6983      	ldr	r3, [r0, #24]
 800757e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007582:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007584:	6983      	ldr	r3, [r0, #24]
 8007586:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800758a:	6183      	str	r3, [r0, #24]
      break;
 800758c:	e7e9      	b.n	8007562 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800758e:	6800      	ldr	r0, [r0, #0]
 8007590:	f7ff fb24 	bl	8006bdc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007594:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007596:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007598:	f043 0308 	orr.w	r3, r3, #8
 800759c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800759e:	69c3      	ldr	r3, [r0, #28]
 80075a0:	f023 0304 	bic.w	r3, r3, #4
 80075a4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075a6:	69c3      	ldr	r3, [r0, #28]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	61c3      	str	r3, [r0, #28]
      break;
 80075ac:	e7d9      	b.n	8007562 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075ae:	6800      	ldr	r0, [r0, #0]
 80075b0:	f7ff fb54 	bl	8006c5c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075b4:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075b6:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80075bc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075be:	69c3      	ldr	r3, [r0, #28]
 80075c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075c4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075c6:	69c3      	ldr	r3, [r0, #28]
 80075c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80075cc:	61c3      	str	r3, [r0, #28]
      break;
 80075ce:	e7c8      	b.n	8007562 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075d0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80075d2:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075d4:	6a1a      	ldr	r2, [r3, #32]
 80075d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80075da:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80075dc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80075de:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80075e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075e2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80075e6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 80075ea:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075ec:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80075ee:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f6:	4e16      	ldr	r6, [pc, #88]	@ (8007650 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80075f8:	42b3      	cmp	r3, r6
 80075fa:	d00f      	beq.n	800761c <HAL_TIM_PWM_ConfigChannel+0x194>
 80075fc:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8007600:	42b3      	cmp	r3, r6
 8007602:	d00b      	beq.n	800761c <HAL_TIM_PWM_ConfigChannel+0x194>
 8007604:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8007608:	42b3      	cmp	r3, r6
 800760a:	d007      	beq.n	800761c <HAL_TIM_PWM_ConfigChannel+0x194>
 800760c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007610:	42b3      	cmp	r3, r6
 8007612:	d003      	beq.n	800761c <HAL_TIM_PWM_ConfigChannel+0x194>
 8007614:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007618:	42b3      	cmp	r3, r6
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800761c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800761e:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007622:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8007626:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007628:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 800762a:	6869      	ldr	r1, [r5, #4]
 800762c:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 800762e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007630:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007632:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007634:	f042 0208 	orr.w	r2, r2, #8
 8007638:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800763a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800763c:	f022 0204 	bic.w	r2, r2, #4
 8007640:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007642:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007644:	430a      	orrs	r2, r1
 8007646:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007648:	e78b      	b.n	8007562 <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 800764a:	2002      	movs	r0, #2
}
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	40012c00 	.word	0x40012c00

08007654 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007654:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007658:	2b01      	cmp	r3, #1
 800765a:	d046      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 800765c:	b470      	push	{r4, r5, r6}
 800765e:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007660:	4e23      	ldr	r6, [pc, #140]	@ (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8007662:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007664:	2302      	movs	r3, #2
 8007666:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800766a:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 800766c:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800766e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8007670:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007672:	d024      	beq.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8007674:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8007678:	42b0      	cmp	r0, r6
 800767a:	d02b      	beq.n	80076d4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 800767c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007684:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007686:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800768a:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800768c:	d00a      	beq.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800768e:	4b19      	ldr	r3, [pc, #100]	@ (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8007690:	4298      	cmp	r0, r3
 8007692:	d007      	beq.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8007694:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007698:	4298      	cmp	r0, r3
 800769a:	d003      	beq.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800769c:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80076a0:	4298      	cmp	r0, r3
 80076a2:	d104      	bne.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076a4:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076a6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076aa:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ac:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80076ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80076b6:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 80076ba:	bc70      	pop	{r4, r5, r6}
 80076bc:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076be:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076c4:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80076c6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80076ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076ce:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80076d0:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d2:	e7e7      	b.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076d4:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076da:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80076dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80076e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076e4:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 80076e6:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e8:	e7dc      	b.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 80076ea:	2002      	movs	r0, #2
}
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40000400 	.word	0x40000400

080076f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076f8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d045      	beq.n	800778c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8007700:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007702:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8007706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800770a:	4602      	mov	r2, r0
 800770c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800770e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007710:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007712:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007716:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007718:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800771c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800771e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007724:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007726:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800772c:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800772e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007734:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007736:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007738:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800773c:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800773e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007742:	4c13      	ldr	r4, [pc, #76]	@ (8007790 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007744:	42a0      	cmp	r0, r4
 8007746:	d00b      	beq.n	8007760 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8007748:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800774c:	42a0      	cmp	r0, r4
 800774e:	d007      	beq.n	8007760 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007750:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007752:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8007754:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8007758:	4608      	mov	r0, r1
}
 800775a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800775e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007760:	69cc      	ldr	r4, [r1, #28]
 8007762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007766:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007768:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800776a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800776e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007772:	6a0c      	ldr	r4, [r1, #32]
 8007774:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007778:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800777a:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800777c:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800777e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007782:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007784:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007788:	430b      	orrs	r3, r1
 800778a:	e7e1      	b.n	8007750 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800778c:	2002      	movs	r0, #2
}
 800778e:	4770      	bx	lr
 8007790:	40012c00 	.word	0x40012c00

08007794 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8007794:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007796:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800779a:	2801      	cmp	r0, #1
 800779c:	d047      	beq.n	800782e <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 800779e:	6810      	ldr	r0, [r2, #0]
 80077a0:	3801      	subs	r0, #1
 80077a2:	280f      	cmp	r0, #15
{
 80077a4:	b4f0      	push	{r4, r5, r6, r7}
 80077a6:	d825      	bhi.n	80077f4 <HAL_TIMEx_ConfigBreakInput+0x60>
 80077a8:	4c22      	ldr	r4, [pc, #136]	@ (8007834 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 80077aa:	4e23      	ldr	r6, [pc, #140]	@ (8007838 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 80077ac:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 80077b0:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 80077b4:	4c21      	ldr	r4, [pc, #132]	@ (800783c <HAL_TIMEx_ConfigBreakInput+0xa8>)
 80077b6:	4e22      	ldr	r6, [pc, #136]	@ (8007840 <HAL_TIMEx_ConfigBreakInput+0xac>)
 80077b8:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80077bc:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 80077c0:	2901      	cmp	r1, #1
 80077c2:	d01d      	beq.n	8007800 <HAL_TIMEx_ConfigBreakInput+0x6c>
 80077c4:	2902      	cmp	r1, #2
 80077c6:	d12c      	bne.n	8007822 <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80077c8:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 80077ca:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80077cc:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80077ce:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 80077d0:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80077d2:	fa01 f10c 	lsl.w	r1, r1, ip
 80077d6:	ea81 0207 	eor.w	r2, r1, r7
 80077da:	402a      	ands	r2, r5
 80077dc:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80077de:	ea80 0102 	eor.w	r1, r0, r2
 80077e2:	4021      	ands	r1, r4
 80077e4:	404a      	eors	r2, r1

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80077e6:	6672      	str	r2, [r6, #100]	@ 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80077ee:	2000      	movs	r0, #0

  return status;
}
 80077f0:	bcf0      	pop	{r4, r5, r6, r7}
 80077f2:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 80077f4:	2700      	movs	r7, #0
  switch (BreakInput)
 80077f6:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 80077f8:	46bc      	mov	ip, r7
 80077fa:	463c      	mov	r4, r7
 80077fc:	463d      	mov	r5, r7
  switch (BreakInput)
 80077fe:	d1e1      	bne.n	80077c4 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007800:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8007802:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007804:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007806:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8007808:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800780a:	fa01 f10c 	lsl.w	r1, r1, ip
 800780e:	ea81 0207 	eor.w	r2, r1, r7
 8007812:	402a      	ands	r2, r5
 8007814:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007816:	ea80 0102 	eor.w	r1, r0, r2
 800781a:	4021      	ands	r1, r4
 800781c:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 800781e:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8007820:	e7e2      	b.n	80077e8 <HAL_TIMEx_ConfigBreakInput+0x54>
  __HAL_UNLOCK(htim);
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8007828:	2001      	movs	r0, #1
}
 800782a:	bcf0      	pop	{r4, r5, r6, r7}
 800782c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800782e:	2002      	movs	r0, #2
}
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	0800a688 	.word	0x0800a688
 8007838:	0800a608 	.word	0x0800a608
 800783c:	0800a648 	.word	0x0800a648
 8007840:	0800a5c8 	.word	0x0800a5c8

08007844 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop

08007848 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop

0800784c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop

08007850 <HAL_TIMEx_EncoderIndexCallback>:
/**
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop

08007854 <HAL_TIMEx_DirectionChangeCallback>:
/**
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop

08007858 <HAL_TIMEx_IndexErrorCallback>:
/**
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop

0800785c <HAL_TIMEx_TransitionErrorCallback>:
/**
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop

08007860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007864:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007866:	6882      	ldr	r2, [r0, #8]
 8007868:	6900      	ldr	r0, [r0, #16]
 800786a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800786c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800786e:	4302      	orrs	r2, r0
 8007870:	430a      	orrs	r2, r1
 8007872:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007874:	4995      	ldr	r1, [pc, #596]	@ (8007acc <UART_SetConfig+0x26c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007876:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007878:	4029      	ands	r1, r5
 800787a:	430a      	orrs	r2, r1
 800787c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007882:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007884:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007888:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800788a:	4991      	ldr	r1, [pc, #580]	@ (8007ad0 <UART_SetConfig+0x270>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800788c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800788e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007890:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007892:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007894:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8007898:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800789c:	f000 80bb 	beq.w	8007a16 <UART_SetConfig+0x1b6>
    tmpreg |= huart->Init.OneBitSampling;
 80078a0:	6a26      	ldr	r6, [r4, #32]
 80078a2:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078a4:	430a      	orrs	r2, r1
 80078a6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078aa:	f022 020f 	bic.w	r2, r2, #15
 80078ae:	432a      	orrs	r2, r5
 80078b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078b2:	4a88      	ldr	r2, [pc, #544]	@ (8007ad4 <UART_SetConfig+0x274>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d035      	beq.n	8007924 <UART_SetConfig+0xc4>
 80078b8:	4a87      	ldr	r2, [pc, #540]	@ (8007ad8 <UART_SetConfig+0x278>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00e      	beq.n	80078dc <UART_SetConfig+0x7c>
 80078be:	4a87      	ldr	r2, [pc, #540]	@ (8007adc <UART_SetConfig+0x27c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	f000 8098 	beq.w	80079f6 <UART_SetConfig+0x196>
 80078c6:	4a86      	ldr	r2, [pc, #536]	@ (8007ae0 <UART_SetConfig+0x280>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d03f      	beq.n	800794c <UART_SetConfig+0xec>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 80078cc:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078ce:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80078d0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 80078d4:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 80078d8:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 80078da:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078dc:	4b81      	ldr	r3, [pc, #516]	@ (8007ae4 <UART_SetConfig+0x284>)
 80078de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e2:	f003 030c 	and.w	r3, r3, #12
 80078e6:	2b0c      	cmp	r3, #12
 80078e8:	d8f0      	bhi.n	80078cc <UART_SetConfig+0x6c>
 80078ea:	a201      	add	r2, pc, #4	@ (adr r2, 80078f0 <UART_SetConfig+0x90>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	080079eb 	.word	0x080079eb
 80078f4:	080078cd 	.word	0x080078cd
 80078f8:	080078cd 	.word	0x080078cd
 80078fc:	080078cd 	.word	0x080078cd
 8007900:	08007965 	.word	0x08007965
 8007904:	080078cd 	.word	0x080078cd
 8007908:	080078cd 	.word	0x080078cd
 800790c:	080078cd 	.word	0x080078cd
 8007910:	080079ad 	.word	0x080079ad
 8007914:	080078cd 	.word	0x080078cd
 8007918:	080078cd 	.word	0x080078cd
 800791c:	080078cd 	.word	0x080078cd
 8007920:	0800797d 	.word	0x0800797d
 8007924:	4b6f      	ldr	r3, [pc, #444]	@ (8007ae4 <UART_SetConfig+0x284>)
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d03c      	beq.n	80079ac <UART_SetConfig+0x14c>
 8007932:	2b03      	cmp	r3, #3
 8007934:	d022      	beq.n	800797c <UART_SetConfig+0x11c>
 8007936:	2b01      	cmp	r3, #1
 8007938:	d014      	beq.n	8007964 <UART_SetConfig+0x104>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800793e:	f000 80bc 	beq.w	8007aba <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007942:	f7fe fc8d 	bl	8006260 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007946:	b9a8      	cbnz	r0, 8007974 <UART_SetConfig+0x114>
        pclk = (uint32_t) HSI_VALUE;
 8007948:	2000      	movs	r0, #0
 800794a:	e7c0      	b.n	80078ce <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800794c:	4b65      	ldr	r3, [pc, #404]	@ (8007ae4 <UART_SetConfig+0x284>)
 800794e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007952:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007956:	2b80      	cmp	r3, #128	@ 0x80
 8007958:	d028      	beq.n	80079ac <UART_SetConfig+0x14c>
 800795a:	d859      	bhi.n	8007a10 <UART_SetConfig+0x1b0>
 800795c:	2b00      	cmp	r3, #0
 800795e:	d044      	beq.n	80079ea <UART_SetConfig+0x18a>
 8007960:	2b40      	cmp	r3, #64	@ 0x40
 8007962:	d1b3      	bne.n	80078cc <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007964:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007968:	f000 80aa 	beq.w	8007ac0 <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 800796c:	f7fe fb24 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007970:	2800      	cmp	r0, #0
 8007972:	d0e9      	beq.n	8007948 <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007974:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007976:	e006      	b.n	8007986 <UART_SetConfig+0x126>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007978:	2b30      	cmp	r3, #48	@ 0x30
 800797a:	d1a7      	bne.n	80078cc <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800797c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007980:	d018      	beq.n	80079b4 <UART_SetConfig+0x154>
        pclk = (uint32_t) LSE_VALUE;
 8007982:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007986:	6863      	ldr	r3, [r4, #4]
 8007988:	4a57      	ldr	r2, [pc, #348]	@ (8007ae8 <UART_SetConfig+0x288>)
 800798a:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 800798e:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007992:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007996:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800799a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800799e:	f1a0 0310 	sub.w	r3, r0, #16
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d892      	bhi.n	80078cc <UART_SetConfig+0x6c>
          huart->Instance->BRR = usartdiv;
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	60d8      	str	r0, [r3, #12]
 80079aa:	e7cd      	b.n	8007948 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80079b0:	484e      	ldr	r0, [pc, #312]	@ (8007aec <UART_SetConfig+0x28c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079b2:	d1e8      	bne.n	8007986 <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b4:	6862      	ldr	r2, [r4, #4]
 80079b6:	4b4c      	ldr	r3, [pc, #304]	@ (8007ae8 <UART_SetConfig+0x288>)
 80079b8:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80079bc:	fbb0 f0f1 	udiv	r0, r0, r1
 80079c0:	0853      	lsrs	r3, r2, #1
 80079c2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c6:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ca:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ce:	f1a3 0210 	sub.w	r2, r3, #16
 80079d2:	428a      	cmp	r2, r1
 80079d4:	f63f af7a 	bhi.w	80078cc <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079d8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80079dc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079de:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079e0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60cb      	str	r3, [r1, #12]
 80079e8:	e7ae      	b.n	8007948 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ea:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80079ee:	d05d      	beq.n	8007aac <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f0:	f7fe fc24 	bl	800623c <HAL_RCC_GetPCLK1Freq>
        break;
 80079f4:	e7a7      	b.n	8007946 <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079f6:	4b3b      	ldr	r3, [pc, #236]	@ (8007ae4 <UART_SetConfig+0x284>)
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d0d3      	beq.n	80079ac <UART_SetConfig+0x14c>
 8007a04:	d8b8      	bhi.n	8007978 <UART_SetConfig+0x118>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0ef      	beq.n	80079ea <UART_SetConfig+0x18a>
 8007a0a:	2b10      	cmp	r3, #16
 8007a0c:	d0aa      	beq.n	8007964 <UART_SetConfig+0x104>
 8007a0e:	e75d      	b.n	80078cc <UART_SetConfig+0x6c>
 8007a10:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a12:	d0b3      	beq.n	800797c <UART_SetConfig+0x11c>
 8007a14:	e75a      	b.n	80078cc <UART_SetConfig+0x6c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a16:	4311      	orrs	r1, r2
 8007a18:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a1c:	4931      	ldr	r1, [pc, #196]	@ (8007ae4 <UART_SetConfig+0x284>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a1e:	f022 020f 	bic.w	r2, r2, #15
 8007a22:	432a      	orrs	r2, r5
 8007a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a26:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8007a2a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a32:	d048      	beq.n	8007ac6 <UART_SetConfig+0x266>
 8007a34:	d833      	bhi.n	8007a9e <UART_SetConfig+0x23e>
 8007a36:	b37b      	cbz	r3, 8007a98 <UART_SetConfig+0x238>
 8007a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a3c:	f47f af46 	bne.w	80078cc <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007a40:	f7fe faba 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007a44:	2800      	cmp	r0, #0
 8007a46:	f43f af7f 	beq.w	8007948 <UART_SetConfig+0xe8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a4a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a4c:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a4e:	4b26      	ldr	r3, [pc, #152]	@ (8007ae8 <UART_SetConfig+0x288>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a50:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a54:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8007a58:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a5c:	4299      	cmp	r1, r3
 8007a5e:	f63f af35 	bhi.w	80078cc <UART_SetConfig+0x6c>
 8007a62:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8007a66:	f63f af31 	bhi.w	80078cc <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f7f8 ff09 	bl	8000884 <__aeabi_uldivmod>
 8007a72:	0872      	lsrs	r2, r6, #1
 8007a74:	0203      	lsls	r3, r0, #8
 8007a76:	0209      	lsls	r1, r1, #8
 8007a78:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007a7c:	1898      	adds	r0, r3, r2
 8007a7e:	f141 0100 	adc.w	r1, r1, #0
 8007a82:	4632      	mov	r2, r6
 8007a84:	2300      	movs	r3, #0
 8007a86:	f7f8 fefd 	bl	8000884 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a8a:	4b19      	ldr	r3, [pc, #100]	@ (8007af0 <UART_SetConfig+0x290>)
 8007a8c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007a90:	429a      	cmp	r2, r3
 8007a92:	f63f af1b 	bhi.w	80078cc <UART_SetConfig+0x6c>
 8007a96:	e786      	b.n	80079a6 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a98:	f7fe fbd0 	bl	800623c <HAL_RCC_GetPCLK1Freq>
        break;
 8007a9c:	e7d2      	b.n	8007a44 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007aa2:	f47f af13 	bne.w	80078cc <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8007aa6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007aaa:	e7cf      	b.n	8007a4c <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aac:	f7fe fbc6 	bl	800623c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	f43f af49 	beq.w	8007948 <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007ab8:	e77c      	b.n	80079b4 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aba:	f7fe fbd1 	bl	8006260 <HAL_RCC_GetPCLK2Freq>
        break;
 8007abe:	e7f7      	b.n	8007ab0 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetSysClockFreq();
 8007ac0:	f7fe fa7a 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
        break;
 8007ac4:	e7f4      	b.n	8007ab0 <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 8007ac6:	4809      	ldr	r0, [pc, #36]	@ (8007aec <UART_SetConfig+0x28c>)
 8007ac8:	e7c0      	b.n	8007a4c <UART_SetConfig+0x1ec>
 8007aca:	bf00      	nop
 8007acc:	cfff69f3 	.word	0xcfff69f3
 8007ad0:	40008000 	.word	0x40008000
 8007ad4:	40013800 	.word	0x40013800
 8007ad8:	40004400 	.word	0x40004400
 8007adc:	40004800 	.word	0x40004800
 8007ae0:	40004c00 	.word	0x40004c00
 8007ae4:	40021000 	.word	0x40021000
 8007ae8:	0800a6c8 	.word	0x0800a6c8
 8007aec:	00f42400 	.word	0x00f42400
 8007af0:	000ffcff 	.word	0x000ffcff

08007af4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007af4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007af6:	07da      	lsls	r2, r3, #31
{
 8007af8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007afa:	d506      	bpl.n	8007b0a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007afc:	6801      	ldr	r1, [r0, #0]
 8007afe:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007b00:	684a      	ldr	r2, [r1, #4]
 8007b02:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007b06:	4322      	orrs	r2, r4
 8007b08:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b0a:	079c      	lsls	r4, r3, #30
 8007b0c:	d506      	bpl.n	8007b1c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b0e:	6801      	ldr	r1, [r0, #0]
 8007b10:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007b12:	684a      	ldr	r2, [r1, #4]
 8007b14:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007b18:	4322      	orrs	r2, r4
 8007b1a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b1c:	0759      	lsls	r1, r3, #29
 8007b1e:	d506      	bpl.n	8007b2e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b20:	6801      	ldr	r1, [r0, #0]
 8007b22:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007b24:	684a      	ldr	r2, [r1, #4]
 8007b26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007b2a:	4322      	orrs	r2, r4
 8007b2c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b2e:	071a      	lsls	r2, r3, #28
 8007b30:	d506      	bpl.n	8007b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b32:	6801      	ldr	r1, [r0, #0]
 8007b34:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007b36:	684a      	ldr	r2, [r1, #4]
 8007b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b3c:	4322      	orrs	r2, r4
 8007b3e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b40:	06dc      	lsls	r4, r3, #27
 8007b42:	d506      	bpl.n	8007b52 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b44:	6801      	ldr	r1, [r0, #0]
 8007b46:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007b48:	688a      	ldr	r2, [r1, #8]
 8007b4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b4e:	4322      	orrs	r2, r4
 8007b50:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b52:	0699      	lsls	r1, r3, #26
 8007b54:	d506      	bpl.n	8007b64 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b56:	6801      	ldr	r1, [r0, #0]
 8007b58:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007b5a:	688a      	ldr	r2, [r1, #8]
 8007b5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b60:	4322      	orrs	r2, r4
 8007b62:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b64:	065a      	lsls	r2, r3, #25
 8007b66:	d509      	bpl.n	8007b7c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b68:	6801      	ldr	r1, [r0, #0]
 8007b6a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007b6c:	684a      	ldr	r2, [r1, #4]
 8007b6e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007b72:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b74:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b78:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b7a:	d00b      	beq.n	8007b94 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b7c:	061b      	lsls	r3, r3, #24
 8007b7e:	d506      	bpl.n	8007b8e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b80:	6802      	ldr	r2, [r0, #0]
 8007b82:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007b84:	6853      	ldr	r3, [r2, #4]
 8007b86:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	6053      	str	r3, [r2, #4]
  }
}
 8007b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b92:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b94:	684a      	ldr	r2, [r1, #4]
 8007b96:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8007b98:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007b9c:	4322      	orrs	r2, r4
 8007b9e:	604a      	str	r2, [r1, #4]
 8007ba0:	e7ec      	b.n	8007b7c <UART_AdvFeatureConfig+0x88>
 8007ba2:	bf00      	nop

08007ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bac:	6804      	ldr	r4, [r0, #0]
 8007bae:	f1b8 3fff 	cmp.w	r8, #4294967295
{
 8007bb2:	460d      	mov	r5, r1
 8007bb4:	4616      	mov	r6, r2
 8007bb6:	d10a      	bne.n	8007bce <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb8:	69e3      	ldr	r3, [r4, #28]
 8007bba:	ea35 0303 	bics.w	r3, r5, r3
 8007bbe:	bf0c      	ite	eq
 8007bc0:	2301      	moveq	r3, #1
 8007bc2:	2300      	movne	r3, #0
 8007bc4:	429e      	cmp	r6, r3
 8007bc6:	d0f7      	beq.n	8007bb8 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8007bc8:	2000      	movs	r0, #0
}
 8007bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bce:	4607      	mov	r7, r0
 8007bd0:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd2:	69e2      	ldr	r2, [r4, #28]
 8007bd4:	ea35 0202 	bics.w	r2, r5, r2
 8007bd8:	bf0c      	ite	eq
 8007bda:	2301      	moveq	r3, #1
 8007bdc:	2300      	movne	r3, #0
 8007bde:	42b3      	cmp	r3, r6
 8007be0:	d1f2      	bne.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be2:	f7fc fe61 	bl	80048a8 <HAL_GetTick>
 8007be6:	eba0 0009 	sub.w	r0, r0, r9
 8007bea:	4540      	cmp	r0, r8
 8007bec:	d830      	bhi.n	8007c50 <UART_WaitOnFlagUntilTimeout+0xac>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bee:	683c      	ldr	r4, [r7, #0]
 8007bf0:	4622      	mov	r2, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf2:	f1b8 0f00 	cmp.w	r8, #0
 8007bf6:	d02c      	beq.n	8007c52 <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	0758      	lsls	r0, r3, #29
 8007bfc:	d5e9      	bpl.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bfe:	69e3      	ldr	r3, [r4, #28]
 8007c00:	0519      	lsls	r1, r3, #20
 8007c02:	d5e6      	bpl.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c08:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c0e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	e844 3100 	strex	r1, r3, [r4]
 8007c16:	b139      	cbz	r1, 8007c28 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	e852 3f00 	ldrex	r3, [r2]
 8007c1c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	e842 3100 	strex	r1, r3, [r2]
 8007c24:	2900      	cmp	r1, #0
 8007c26:	d1f7      	bne.n	8007c18 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	f102 0308 	add.w	r3, r2, #8
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c30:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	f102 0008 	add.w	r0, r2, #8
 8007c38:	e840 3100 	strex	r1, r3, [r0]
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d1f3      	bne.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8007c40:	2320      	movs	r3, #32
 8007c42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007c46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          return HAL_TIMEOUT;
 8007c4e:	e019      	b.n	8007c84 <UART_WaitOnFlagUntilTimeout+0xe0>
 8007c50:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c56:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	e842 3100 	strex	r1, r3, [r2]
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	d1f7      	bne.n	8007c52 <UART_WaitOnFlagUntilTimeout+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	f102 0308 	add.w	r3, r2, #8
 8007c66:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	f102 0008 	add.w	r0, r2, #8
 8007c72:	e840 3100 	strex	r1, r3, [r0]
 8007c76:	2900      	cmp	r1, #0
 8007c78:	d1f3      	bne.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xbe>
        huart->gState = HAL_UART_STATE_READY;
 8007c7a:	2320      	movs	r3, #32
 8007c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          __HAL_UNLOCK(huart);
 8007c84:	2300      	movs	r3, #0
 8007c86:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 8007c8a:	2003      	movs	r0, #3
 8007c8c:	e79d      	b.n	8007bca <UART_WaitOnFlagUntilTimeout+0x26>
 8007c8e:	bf00      	nop

08007c90 <HAL_UART_Init>:
  if (huart == NULL)
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d066      	beq.n	8007d62 <HAL_UART_Init+0xd2>
{
 8007c94:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8007c96:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d04c      	beq.n	8007d3c <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8007ca2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007ca4:	2324      	movs	r3, #36	@ 0x24
 8007ca6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 8007caa:	6813      	ldr	r3, [r2, #0]
 8007cac:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cb0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007cb2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cb4:	f7ff fdd4 	bl	8007860 <UART_SetConfig>
 8007cb8:	2801      	cmp	r0, #1
 8007cba:	d03c      	beq.n	8007d36 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d135      	bne.n	8007d2e <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	6859      	ldr	r1, [r3, #4]
 8007cc6:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 8007cca:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ccc:	6899      	ldr	r1, [r3, #8]
 8007cce:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 8007cd2:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007cd4:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd6:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8007cd8:	f041 0101 	orr.w	r1, r1, #1
 8007cdc:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cde:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 8007ce2:	f7fc fde1 	bl	80048a8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8007cec:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cee:	d40e      	bmi.n	8007d0e <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	075b      	lsls	r3, r3, #29
 8007cf4:	d427      	bmi.n	8007d46 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 8007cfe:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007d02:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8007d06:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d08:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8007d0a:	b002      	add	sp, #8
 8007d0c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	462a      	mov	r2, r5
 8007d16:	4603      	mov	r3, r0
 8007d18:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f7ff ff41 	bl	8007ba4 <UART_WaitOnFlagUntilTimeout>
 8007d22:	b9e0      	cbnz	r0, 8007d5e <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	075b      	lsls	r3, r3, #29
 8007d2a:	d40c      	bmi.n	8007d46 <HAL_UART_Init+0xb6>
 8007d2c:	e7e3      	b.n	8007cf6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f7ff fee0 	bl	8007af4 <UART_AdvFeatureConfig>
 8007d34:	e7c5      	b.n	8007cc2 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8007d36:	2001      	movs	r0, #1
}
 8007d38:	b002      	add	sp, #8
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8007d3c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 8007d40:	f7fc fb68 	bl	8004414 <HAL_UART_MspInit>
 8007d44:	e7ad      	b.n	8007ca2 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4633      	mov	r3, r6
 8007d50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d54:	4620      	mov	r0, r4
 8007d56:	f7ff ff25 	bl	8007ba4 <UART_WaitOnFlagUntilTimeout>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d0cb      	beq.n	8007cf6 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8007d5e:	2003      	movs	r0, #3
 8007d60:	e7d3      	b.n	8007d0a <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8007d62:	2001      	movs	r0, #1
}
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop

08007d68 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d68:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d017      	beq.n	8007da0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d70:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007d72:	2324      	movs	r3, #36	@ 0x24
{
 8007d74:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8007d76:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d7a:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d7c:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d7e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8007d80:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d84:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8007d88:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d8a:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d8c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d8e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 8007d92:	2220      	movs	r2, #32
 8007d94:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  return HAL_OK;
}
 8007d98:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007d9c:	4618      	mov	r0, r3
}
 8007d9e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007da0:	2002      	movs	r0, #2
}
 8007da2:	4770      	bx	lr

08007da4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007da4:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 8007da8:	2a01      	cmp	r2, #1
 8007daa:	d037      	beq.n	8007e1c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007dac:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dae:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007db0:	2024      	movs	r0, #36	@ 0x24
{
 8007db2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007db4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007db8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dba:	6810      	ldr	r0, [r2, #0]
 8007dbc:	f020 0001 	bic.w	r0, r0, #1
 8007dc0:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dc2:	6890      	ldr	r0, [r2, #8]
 8007dc4:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8007dc8:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dca:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dcc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dce:	b310      	cbz	r0, 8007e16 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dd0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dd2:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dd4:	4d12      	ldr	r5, [pc, #72]	@ (8007e20 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dd6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dda:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dde:	4911      	ldr	r1, [pc, #68]	@ (8007e24 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8007de0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007de4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007de8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dec:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007df0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007df2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007df4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007df8:	fbb1 f1f5 	udiv	r1, r1, r5
 8007dfc:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007e00:	2100      	movs	r1, #0
 8007e02:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007e06:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e08:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007e0a:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 8007e0e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007e10:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 8007e14:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007e16:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007e18:	4608      	mov	r0, r1
 8007e1a:	e7ef      	b.n	8007dfc <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007e1c:	2002      	movs	r0, #2
}
 8007e1e:	4770      	bx	lr
 8007e20:	0800a6e0 	.word	0x0800a6e0
 8007e24:	0800a6e8 	.word	0x0800a6e8

08007e28 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007e28:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 8007e2c:	2a01      	cmp	r2, #1
 8007e2e:	d037      	beq.n	8007ea0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8007e30:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e32:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007e34:	2024      	movs	r0, #36	@ 0x24
{
 8007e36:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007e38:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e3c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007e3e:	6810      	ldr	r0, [r2, #0]
 8007e40:	f020 0001 	bic.w	r0, r0, #1
 8007e44:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e46:	6890      	ldr	r0, [r2, #8]
 8007e48:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8007e4c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e4e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e50:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e52:	b310      	cbz	r0, 8007e9a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e54:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e56:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e58:	4d12      	ldr	r5, [pc, #72]	@ (8007ea4 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e5a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e5e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e62:	4911      	ldr	r1, [pc, #68]	@ (8007ea8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007e64:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e68:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e6c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e70:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e74:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e76:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e78:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e7c:	fbb1 f1f5 	udiv	r1, r1, r5
 8007e80:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007e84:	2100      	movs	r1, #0
 8007e86:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007e8a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e8c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007e8e:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 8007e92:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007e94:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 8007e98:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007e9a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007e9c:	4608      	mov	r0, r1
 8007e9e:	e7ef      	b.n	8007e80 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007ea0:	2002      	movs	r0, #2
}
 8007ea2:	4770      	bx	lr
 8007ea4:	0800a6e0 	.word	0x0800a6e0
 8007ea8:	0800a6e8 	.word	0x0800a6e8

08007eac <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8007eac:	88c0      	ldrh	r0, [r0, #6]
 8007eae:	4770      	bx	lr

08007eb0 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8007eb0:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8007eb2:	8840      	ldrh	r0, [r0, #2]
 8007eb4:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8007eb8:	0c00      	lsrs	r0, r0, #16
 8007eba:	4770      	bx	lr

08007ebc <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8007ebc:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8007ebe:	8803      	ldrh	r3, [r0, #0]
 8007ec0:	140d      	asrs	r5, r1, #16
 8007ec2:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8007ec4:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8007ec8:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8007ecc:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8007ed0:	428b      	cmp	r3, r1
{
 8007ed2:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8007ed4:	da0f      	bge.n	8007ef6 <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8007ed6:	8846      	ldrh	r6, [r0, #2]
 8007ed8:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8007edc:	4282      	cmp	r2, r0
 8007ede:	dd13      	ble.n	8007f08 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8007ee0:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8007ee2:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8007ee6:	bfb8      	it	lt
 8007ee8:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8007eea:	f7fa f827 	bl	8001f3c <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8007eee:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 8007ef0:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8007ef2:	db0e      	blt.n	8007f12 <Circle_Limitation+0x56>
      Local_Vqd.q = (int16_t)new_q;
 8007ef4:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8007ef6:	b2a4      	uxth	r4, r4
 8007ef8:	2000      	movs	r0, #0
 8007efa:	f364 000f 	bfi	r0, r4, #0, #16
 8007efe:	b2ad      	uxth	r5, r5
 8007f00:	f365 401f 	bfi	r0, r5, #16, #16
}
 8007f04:	b004      	add	sp, #16
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8007f08:	1a98      	subs	r0, r3, r2
 8007f0a:	f7fa f817 	bl	8001f3c <MCM_Sqrt>
        if (Vqd.q < 0)
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	daf0      	bge.n	8007ef4 <Circle_Limitation+0x38>
          new_q = - new_q;
 8007f12:	4240      	negs	r0, r0
      Local_Vqd.q = (int16_t)new_q;
 8007f14:	b204      	sxth	r4, r0
      Local_Vqd.d = (int16_t)new_d;
 8007f16:	e7ee      	b.n	8007ef6 <Circle_Limitation+0x3a>

08007f18 <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8007f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1a:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8007f1c:	6846      	ldr	r6, [r0, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007f1e:	6823      	ldr	r3, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8007f20:	f836 cb02 	ldrh.w	ip, [r6], #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007f24:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007f26:	8980      	ldrh	r0, [r0, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007f28:	f40c 457f 	and.w	r5, ip, #65280	@ 0xff00
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007f2c:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007f2e:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8007f30:	f02c 0307 	bic.w	r3, ip, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007f34:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007f38:	b291      	uxth	r1, r2
{
 8007f3a:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007f3c:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8007f3e:	b29b      	uxth	r3, r3
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007f40:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007f42:	d040      	beq.n	8007fc6 <MCP_ReceivedPacket+0xae>
    MCI_Handle_t *pMCI = &Mci[motorID];
 8007f44:	4f4e      	ldr	r7, [pc, #312]	@ (8008080 <MCP_ReceivedPacket+0x168>)
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007f46:	81a0      	strh	r0, [r4, #12]
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8007f48:	f10c 3cff 	add.w	ip, ip, #4294967295
    MCI_Handle_t *pMCI = &Mci[motorID];
 8007f4c:	f00c 0c07 	and.w	ip, ip, #7
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8007f50:	2500      	movs	r5, #0

    switch (command)
 8007f52:	2b38      	cmp	r3, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007f54:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8007f56:	eb07 174c 	add.w	r7, r7, ip, lsl #5
    pHandle->txLength = 0;
 8007f5a:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8007f5c:	d829      	bhi.n	8007fb2 <MCP_ReceivedPacket+0x9a>
 8007f5e:	2b38      	cmp	r3, #56	@ 0x38
 8007f60:	d81e      	bhi.n	8007fa0 <MCP_ReceivedPacket+0x88>
 8007f62:	e8df f003 	tbb	[pc, r3]
 8007f66:	1d53      	.short	0x1d53
 8007f68:	1d1d1d1d 	.word	0x1d1d1d1d
 8007f6c:	1d5b1d1d 	.word	0x1d5b1d1d
 8007f70:	1d1d1d1d 	.word	0x1d1d1d1d
 8007f74:	1d4e1d1d 	.word	0x1d4e1d1d
 8007f78:	1d1d1d1d 	.word	0x1d1d1d1d
 8007f7c:	1d461d1d 	.word	0x1d461d1d
 8007f80:	1d1d1d1d 	.word	0x1d1d1d1d
 8007f84:	1d401d1d 	.word	0x1d401d1d
 8007f88:	1d1d1d1d 	.word	0x1d1d1d1d
 8007f8c:	1d601d1d 	.word	0x1d601d1d
 8007f90:	1d1d1d1d 	.word	0x1d1d1d1d
 8007f94:	1d3c1d1d 	.word	0x1d3c1d1d
 8007f98:	1d1d1d1d 	.word	0x1d1d1d1d
 8007f9c:	1d1d      	.short	0x1d1d
 8007f9e:	68          	.byte	0x68
 8007f9f:	00          	.byte	0x00
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007fa4:	68a2      	ldr	r2, [r4, #8]
 8007fa6:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8007fa8:	89e3      	ldrh	r3, [r4, #14]
 8007faa:	3301      	adds	r3, #1
 8007fac:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8007fae:	b003      	add	sp, #12
 8007fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8007fb2:	2b68      	cmp	r3, #104	@ 0x68
 8007fb4:	d045      	beq.n	8008042 <MCP_ReceivedPacket+0x12a>
 8007fb6:	2b48      	cmp	r3, #72	@ 0x48
 8007fb8:	d1f2      	bne.n	8007fa0 <MCP_ReceivedPacket+0x88>
        MCI_Clear_Iqdref(pMCI);
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7f9 ff14 	bl	8001de8 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007fc0:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007fc2:	4628      	mov	r0, r5
        break;
 8007fc4:	e7ee      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
      userCommand = (command >> 3) & 0x1f;
 8007fc6:	f3c3 03c7 	ubfx	r3, r3, #3, #8
    pHandle->txLength = 0;
 8007fca:	2100      	movs	r1, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007fcc:	f013 0f1e 	tst.w	r3, #30
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007fd0:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007fd2:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0;
 8007fd4:	81e1      	strh	r1, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007fd6:	d03d      	beq.n	8008054 <MCP_ReceivedPacket+0x13c>
 8007fd8:	460b      	mov	r3, r1
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8007fda:	200d      	movs	r0, #13
 8007fdc:	e7e2      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
        if (IDLE == MCI_GetSTMState(pMCI))
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f7f9 fe1c 	bl	8001c1c <MCI_GetSTMState>
 8007fe4:	b128      	cbz	r0, 8007ff2 <MCP_ReceivedPacket+0xda>
          (void)MCI_StopMotor(pMCI);
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	f7f9 fe34 	bl	8001c54 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007fec:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007fee:	2000      	movs	r0, #0
 8007ff0:	e7d8      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f7f9 fe18 	bl	8001c28 <MCI_StartMotor>
 8007ff8:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007ffc:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8007ffe:	b2c0      	uxtb	r0, r0
 8008000:	e7d0      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8008002:	4620      	mov	r0, r4
 8008004:	f7fb f8ea 	bl	80031dc <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008008:	89e3      	ldrh	r3, [r4, #14]
        break;
 800800a:	e7cb      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 800800c:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 800800e:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8008010:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 8008012:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8008014:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008016:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008018:	2000      	movs	r0, #0
      break;
 800801a:	e7c3      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 800801c:	4620      	mov	r0, r4
 800801e:	f7fa fdad 	bl	8002b7c <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008022:	89e3      	ldrh	r3, [r4, #14]
        break;
 8008024:	e7be      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
        if (RUN == MCI_GetSTMState(pMCI))
 8008026:	4638      	mov	r0, r7
 8008028:	f7f9 fdf8 	bl	8001c1c <MCI_GetSTMState>
 800802c:	2806      	cmp	r0, #6
 800802e:	d01f      	beq.n	8008070 <MCP_ReceivedPacket+0x158>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008030:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008032:	2000      	movs	r0, #0
 8008034:	e7b6      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
        (void)MCI_FaultAcknowledged(pMCI);
 8008036:	4638      	mov	r0, r7
 8008038:	f7f9 fe28 	bl	8001c8c <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800803c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800803e:	2000      	movs	r0, #0
        break;
 8008040:	e7b0      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008042:	68a3      	ldr	r3, [r4, #8]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4631      	mov	r1, r6
 8008048:	f104 030e 	add.w	r3, r4, #14
 800804c:	f7f9 fd6a 	bl	8001b24 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008050:	89e3      	ldrh	r3, [r4, #14]
        break;
 8008052:	e7a7      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8008054:	490b      	ldr	r1, [pc, #44]	@ (8008084 <MCP_ReceivedPacket+0x16c>)
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800805e:	b15d      	cbz	r5, 8008078 <MCP_ReceivedPacket+0x160>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008060:	68a3      	ldr	r3, [r4, #8]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	4631      	mov	r1, r6
 8008066:	f104 030e 	add.w	r3, r4, #14
 800806a:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800806c:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 800806e:	e799      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
          MCI_StopRamp(pMCI);
 8008070:	4638      	mov	r0, r7
 8008072:	f7f9 fe51 	bl	8001d18 <MCI_StopRamp>
 8008076:	e7db      	b.n	8008030 <MCP_ReceivedPacket+0x118>
 8008078:	462b      	mov	r3, r5
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 800807a:	200d      	movs	r0, #13
 800807c:	e792      	b.n	8007fa4 <MCP_ReceivedPacket+0x8c>
 800807e:	bf00      	nop
 8008080:	200008e8 	.word	0x200008e8
 8008084:	2000094c 	.word	0x2000094c

08008088 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800808a:	7fc3      	ldrb	r3, [r0, #31]
 800808c:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8008090:	429a      	cmp	r2, r3
{
 8008092:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008094:	d002      	beq.n	800809c <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 8008096:	3301      	adds	r3, #1
 8008098:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 800809c:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 80080a2:	b1a5      	cbz	r5, 80080ce <MCPA_dataLog+0x46>
 80080a4:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80080a6:	8ba2      	ldrh	r2, [r4, #28]
 80080a8:	42aa      	cmp	r2, r5
 80080aa:	d24e      	bcs.n	800814a <MCPA_dataLog+0xc2>
 80080ac:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 80080b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80080b2:	d066      	beq.n	8008182 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 80080b4:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80080b8:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 80080ba:	8b22      	ldrh	r2, [r4, #24]
 80080bc:	6820      	ldr	r0, [r4, #0]
 80080be:	3202      	adds	r2, #2
 80080c0:	2309      	movs	r3, #9
 80080c2:	6845      	ldr	r5, [r0, #4]
 80080c4:	b292      	uxth	r2, r2
 80080c6:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	8323      	strh	r3, [r4, #24]
}
 80080cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 80080ce:	4601      	mov	r1, r0
 80080d0:	2209      	movs	r2, #9
 80080d2:	f851 0b14 	ldr.w	r0, [r1], #20
 80080d6:	6803      	ldr	r3, [r0, #0]
 80080d8:	4798      	blx	r3
 80080da:	b390      	cbz	r0, 8008142 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80080dc:	4b49      	ldr	r3, [pc, #292]	@ (8008204 <MCPA_dataLog+0x17c>)
 80080de:	6961      	ldr	r1, [r4, #20]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 80080e4:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 80080e8:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 80080ec:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 80080f0:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 80080f2:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 80080f4:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 80080f6:	d101      	bne.n	80080fc <MCPA_dataLog+0x74>
 80080f8:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80080fa:	e7d4      	b.n	80080a6 <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff = pHandle->MFNum;
 80080fc:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff = pHandle->HFNum;
 8008100:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff = pHandle->MFRate;
 8008104:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 8008108:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff = pHandle->HFNum;
 800810c:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff = pHandle->MFNum;
 8008110:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008114:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008116:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff = pHandle->Mark;
 8008118:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 800811c:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 800811e:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008122:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008124:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff = pHandle->HFRate;
 8008128:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 800812c:	f002 f8da 	bl	800a2e4 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8008130:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8008134:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8008138:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 800813c:	441a      	add	r2, r3
 800813e:	f002 f8d1 	bl	800a2e4 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008142:	8b25      	ldrh	r5, [r4, #24]
 8008144:	2d00      	cmp	r5, #0
 8008146:	d1ad      	bne.n	80080a4 <MCPA_dataLog+0x1c>
}
 8008148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800814a:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800814e:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008150:	b36e      	cbz	r6, 80081ae <MCPA_dataLog+0x126>
 8008152:	68a2      	ldr	r2, [r4, #8]
 8008154:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8008158:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800815a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800815e:	8800      	ldrh	r0, [r0, #0]
 8008160:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008164:	8b25      	ldrh	r5, [r4, #24]
 8008166:	3502      	adds	r5, #2
 8008168:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800816a:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800816c:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800816e:	d1f4      	bne.n	800815a <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8008170:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008174:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8008176:	2bfd      	cmp	r3, #253	@ 0xfd
 8008178:	4618      	mov	r0, r3
 800817a:	d91d      	bls.n	80081b8 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800817c:	4295      	cmp	r5, r2
 800817e:	d897      	bhi.n	80080b0 <MCPA_dataLog+0x28>
}
 8008180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008182:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8008186:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800818a:	4418      	add	r0, r3
 800818c:	4298      	cmp	r0, r3
 800818e:	dd91      	ble.n	80080b4 <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008190:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008192:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008194:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800819c:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800819e:	5cf3      	ldrb	r3, [r6, r3]
 80081a0:	442b      	add	r3, r5
 80081a2:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80081a4:	b2d3      	uxtb	r3, r2
 80081a6:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80081a8:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80081aa:	dbf3      	blt.n	8008194 <MCPA_dataLog+0x10c>
 80081ac:	e782      	b.n	80080b4 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 80081ae:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 80081b2:	28fd      	cmp	r0, #253	@ 0xfd
 80081b4:	f63f af71 	bhi.w	800809a <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 80081b8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80081bc:	4283      	cmp	r3, r0
 80081be:	d006      	beq.n	80081ce <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 80081c0:	3301      	adds	r3, #1
 80081c2:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80081c6:	4295      	cmp	r5, r2
 80081c8:	f63f af74 	bhi.w	80080b4 <MCPA_dataLog+0x2c>
}
 80081cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80081ce:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 80081d2:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80081d4:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80081d6:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 80081d8:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80081dc:	ddf3      	ble.n	80081c6 <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80081de:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081e2:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80081e6:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081ee:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80081f2:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081f4:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80081f6:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081f8:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80081fa:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081fc:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80081fe:	dbf2      	blt.n	80081e6 <MCPA_dataLog+0x15e>
 8008200:	e7e1      	b.n	80081c6 <MCPA_dataLog+0x13e>
 8008202:	bf00      	nop
 8008204:	20001b34 	.word	0x20001b34

08008208 <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8008208:	8b03      	ldrh	r3, [r0, #24]
 800820a:	b19b      	cbz	r3, 8008234 <MCPA_flushDataLog+0x2c>
{
 800820c:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 800820e:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008212:	6941      	ldr	r1, [r0, #20]
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8008214:	2afe      	cmp	r2, #254	@ 0xfe
 8008216:	4604      	mov	r4, r0
 8008218:	d00d      	beq.n	8008236 <MCPA_flushDataLog+0x2e>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 800821a:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800821e:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008220:	8b22      	ldrh	r2, [r4, #24]
 8008222:	6820      	ldr	r0, [r4, #0]
 8008224:	3202      	adds	r2, #2
 8008226:	2309      	movs	r3, #9
 8008228:	6845      	ldr	r5, [r0, #4]
 800822a:	b292      	uxth	r2, r2
 800822c:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	8323      	strh	r3, [r4, #24]
  }   
}
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008236:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800823a:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 800823e:	4494      	add	ip, r2
 8008240:	4562      	cmp	r2, ip
 8008242:	daea      	bge.n	800821a <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008244:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008246:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008248:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 800824c:	6800      	ldr	r0, [r0, #0]
 800824e:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008250:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008252:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008254:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008256:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008258:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800825a:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800825c:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800825e:	dbf3      	blt.n	8008248 <MCPA_flushDataLog+0x40>
 8008260:	e7db      	b.n	800821a <MCPA_flushDataLog+0x12>
 8008262:	bf00      	nop

08008264 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8008264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8008268:	880f      	ldrh	r7, [r1, #0]
{
 800826a:	4604      	mov	r4, r0

    if (buffSize == 0)
 800826c:	2f00      	cmp	r7, #0
 800826e:	d045      	beq.n	80082fc <MCPA_cfgLog+0x98>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008270:	6803      	ldr	r3, [r0, #0]
 8008272:	89db      	ldrh	r3, [r3, #14]
 8008274:	42bb      	cmp	r3, r7
 8008276:	d33e      	bcc.n	80082f6 <MCPA_cfgLog+0x92>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8008278:	788b      	ldrb	r3, [r1, #2]
 800827a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 800827e:	f891 8003 	ldrb.w	r8, [r1, #3]
 8008282:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8008286:	790b      	ldrb	r3, [r1, #4]
 8008288:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 800828c:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 800828e:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8008290:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8008294:	4443      	add	r3, r8
 8008296:	4293      	cmp	r3, r2
 8008298:	dc56      	bgt.n	8008348 <MCPA_cfgLog+0xe4>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 800829a:	1d8e      	adds	r6, r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800829c:	2b00      	cmp	r3, #0
 800829e:	d056      	beq.n	800834e <MCPA_cfgLog+0xea>
 80082a0:	2500      	movs	r5, #0
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 80082a2:	46a8      	mov	r8, r5
 80082a4:	e011      	b.n	80082ca <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 80082a6:	68e3      	ldr	r3, [r4, #12]
 80082a8:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 80082aa:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80082ac:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80082b0:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 80082b4:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80082b6:	f105 0c01 	add.w	ip, r5, #1
 80082ba:	fa5f f58c 	uxtb.w	r5, ip
 80082be:	440b      	add	r3, r1
         logSize = logSize+pHandle->dataSizeTable[i];
 80082c0:	4442      	add	r2, r8
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80082c2:	429d      	cmp	r5, r3
         logSize = logSize+pHandle->dataSizeTable[i];
 80082c4:	fa1f f882 	uxth.w	r8, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80082c8:	da11      	bge.n	80082ee <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 80082ca:	f836 9b02 	ldrh.w	r9, [r6], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 80082ce:	6861      	ldr	r1, [r4, #4]
 80082d0:	4648      	mov	r0, r9
 80082d2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80082d6:	f7fb fbf7 	bl	8003ac8 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 80082da:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80082de:	42ab      	cmp	r3, r5
 80082e0:	f04f 0002 	mov.w	r0, #2
 80082e4:	d8df      	bhi.n	80082a6 <MCPA_cfgLog+0x42>
 80082e6:	4648      	mov	r0, r9
 80082e8:	f7fb fbe2 	bl	8003ab0 <RI_GetIDSize>
 80082ec:	e7db      	b.n	80082a6 <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 80082ee:	f108 0206 	add.w	r2, r8, #6
 80082f2:	4297      	cmp	r7, r2
 80082f4:	d210      	bcs.n	8008318 <MCPA_cfgLog+0xb4>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80082f6:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 80082f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 80082fc:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 80082fe:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008302:	b9ab      	cbnz	r3, 8008330 <MCPA_cfgLog+0xcc>
  pHandle->bufferIndex = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff = 0;
 8008308:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex = 0;
 800830c:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 800830e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8008312:	2000      	movs	r0, #0
}
 8008314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8008318:	3f02      	subs	r7, #2
 800831a:	eba7 0708 	sub.w	r7, r7, r8
 800831e:	8367      	strh	r7, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 8008320:	7833      	ldrb	r3, [r6, #0]
 8008322:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
       if (0U == pHandle->Mark)
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1f3      	bne.n	8008312 <MCPA_cfgLog+0xae>
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 800832a:	8b23      	ldrh	r3, [r4, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0e9      	beq.n	8008304 <MCPA_cfgLog+0xa0>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008330:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008332:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8008336:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008338:	8b22      	ldrh	r2, [r4, #24]
 800833a:	6820      	ldr	r0, [r4, #0]
 800833c:	3202      	adds	r2, #2
 800833e:	6845      	ldr	r5, [r0, #4]
 8008340:	b292      	uxth	r2, r2
 8008342:	2309      	movs	r3, #9
 8008344:	47a8      	blx	r5
 8008346:	e7dd      	b.n	8008304 <MCPA_cfgLog+0xa0>
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8008348:	200a      	movs	r0, #10
}
 800834a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800834e:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8008350:	4698      	mov	r8, r3
 8008352:	e7ce      	b.n	80082f2 <MCPA_cfgLog+0x8e>

08008354 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008354:	8a03      	ldrh	r3, [r0, #16]
 8008356:	8b42      	ldrh	r2, [r0, #26]
 8008358:	429a      	cmp	r2, r3
 800835a:	d306      	bcc.n	800836a <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800835c:	8b82      	ldrh	r2, [r0, #28]
 800835e:	429a      	cmp	r2, r3
 8008360:	d901      	bls.n	8008366 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8008362:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8008364:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8008366:	8ac0      	ldrh	r0, [r0, #22]
 8008368:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 800836a:	2008      	movs	r0, #8
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop

08008370 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop

08008378 <NTC_Init>:
{
 8008378:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 800837a:	7803      	ldrb	r3, [r0, #0]
{
 800837c:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 800837e:	b123      	cbz	r3, 800838a <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008380:	8a43      	ldrh	r3, [r0, #18]
 8008382:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 8008384:	2200      	movs	r2, #0
 8008386:	82c2      	strh	r2, [r0, #22]
}
 8008388:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800838a:	3004      	adds	r0, #4
 800838c:	f7fb fc34 	bl	8003bf8 <RCM_RegisterRegConv>
 8008390:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
      NTC_Clear(pHandle);
 8008394:	4620      	mov	r0, r4
 8008396:	f7ff ffeb 	bl	8008370 <NTC_Clear>
}
 800839a:	bd10      	pop	{r4, pc}

0800839c <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 800839c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800839e:	7803      	ldrb	r3, [r0, #0]
{
 80083a0:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 80083a2:	b113      	cbz	r3, 80083aa <NTC_CalcAvTemp+0xe>
 80083a4:	2000      	movs	r0, #0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);

        pHandle->hAvTemp_d = (uint16_t)wtemp;
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80083a6:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80083a8:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80083aa:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80083ae:	f7fb fd1d 	bl	8003dec <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 80083b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083b6:	4298      	cmp	r0, r3
 80083b8:	d007      	beq.n	80083ca <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80083ba:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 80083bc:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80083be:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 80083c0:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 80083c4:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 80083c8:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80083ca:	4620      	mov	r0, r4
 80083cc:	f7ff ffc2 	bl	8008354 <NTC_SetFaultState>
 80083d0:	82e0      	strh	r0, [r4, #22]
}
 80083d2:	bd10      	pop	{r4, pc}

080083d4 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80083d4:	7803      	ldrb	r3, [r0, #0]
 80083d6:	b95b      	cbnz	r3, 80083f0 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80083d8:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 80083da:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 80083dc:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80083e0:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 80083e2:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80083e4:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80083e8:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80083ec:	b200      	sxth	r0, r0
 80083ee:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80083f0:	8a80      	ldrh	r0, [r0, #20]
}
 80083f2:	b200      	sxth	r0, r0
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop

080083f8 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80083f8:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80083fa:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80083fc:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80083fe:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8008400:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8008402:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8008404:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008406:	4770      	bx	lr

08008408 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8008408:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800840a:	4770      	bx	lr

0800840c <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 800840c:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800840e:	4770      	bx	lr

08008410 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8008410:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop

08008418 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8008418:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop

08008420 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8008420:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8008422:	4770      	bx	lr

08008424 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8008424:	8b80      	ldrh	r0, [r0, #28]
 8008426:	4770      	bx	lr

08008428 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8008428:	2301      	movs	r3, #1
 800842a:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 800842c:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800842e:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop

08008434 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8008434:	8b40      	ldrh	r0, [r0, #26]
 8008436:	4770      	bx	lr

08008438 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8008438:	8bc0      	ldrh	r0, [r0, #30]
 800843a:	4770      	bx	lr

0800843c <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 800843c:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800843e:	4770      	bx	lr

08008440 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8008440:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008442:	4770      	bx	lr

08008444 <PID_SetKIDivisorPOW2>:
{
 8008444:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8008446:	2301      	movs	r3, #1
{
 8008448:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800844a:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800844c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008450:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8008452:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8008454:	8343      	strh	r3, [r0, #26]
{
 8008456:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008458:	f7ff fff2 	bl	8008440 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800845c:	4902      	ldr	r1, [pc, #8]	@ (8008468 <PID_SetKIDivisorPOW2+0x24>)
 800845e:	4628      	mov	r0, r5
 8008460:	40a1      	lsls	r1, r4
 8008462:	f7ff ffeb 	bl	800843c <PID_SetLowerIntegralTermLimit>
}
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	ffff8001 	.word	0xffff8001

0800846c <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800846c:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800846e:	4770      	bx	lr

08008470 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8008470:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop

08008478 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8008478:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 800847a:	4770      	bx	lr

0800847c <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800847c:	2301      	movs	r3, #1
 800847e:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8008480:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008482:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop

08008488 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008488:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 800848c:	4603      	mov	r3, r0
 800848e:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8008490:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8008494:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8008498:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800849c:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 80084a0:	b17c      	cbz	r4, 80084c2 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80084a2:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80084a6:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 80084aa:	eb15 0e01 	adds.w	lr, r5, r1
 80084ae:	d41d      	bmi.n	80084ec <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 80084b0:	420d      	tst	r5, r1
 80084b2:	4914      	ldr	r1, [pc, #80]	@ (8008504 <PI_Controller+0x7c>)
 80084b4:	bf48      	it	mi
 80084b6:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80084b8:	45a6      	cmp	lr, r4
 80084ba:	dc02      	bgt.n	80084c2 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 80084bc:	691c      	ldr	r4, [r3, #16]
 80084be:	4574      	cmp	r4, lr
 80084c0:	dd1d      	ble.n	80084fe <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80084c2:	8b99      	ldrh	r1, [r3, #28]
 80084c4:	410a      	asrs	r2, r1
 80084c6:	8bd9      	ldrh	r1, [r3, #30]
 80084c8:	fa44 f101 	asr.w	r1, r4, r1
 80084cc:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80084ce:	4290      	cmp	r0, r2
 80084d0:	da03      	bge.n	80084da <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80084d2:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80084d4:	4414      	add	r4, r2
 80084d6:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80084d8:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80084da:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80084dc:	bfc5      	ittet	gt
 80084de:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80084e2:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80084e4:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80084e6:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80084e8:	609c      	str	r4, [r3, #8]
}
 80084ea:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80084ec:	2d00      	cmp	r5, #0
 80084ee:	dde3      	ble.n	80084b8 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80084f0:	2900      	cmp	r1, #0
 80084f2:	dde1      	ble.n	80084b8 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80084f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80084f8:	428c      	cmp	r4, r1
 80084fa:	d1e2      	bne.n	80084c2 <PI_Controller+0x3a>
 80084fc:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80084fe:	4674      	mov	r4, lr
 8008500:	e7df      	b.n	80084c2 <PI_Controller+0x3a>
 8008502:	bf00      	nop
 8008504:	80000001 	.word	0x80000001

08008508 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8008508:	6882      	ldr	r2, [r0, #8]
{
 800850a:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800850c:	89d1      	ldrh	r1, [r2, #14]
 800850e:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8008512:	8993      	ldrh	r3, [r2, #12]
 8008514:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8008518:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 800851c:	fb13 230c 	smlabb	r3, r3, ip, r2
 8008520:	2b00      	cmp	r3, #0

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8008522:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8008526:	bfbc      	itt	lt
 8008528:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 800852c:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 800852e:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 8008532:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8008536:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8008538:	f85d fb04 	ldr.w	pc, [sp], #4

0800853c <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop

08008544 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8008544:	b538      	push	{r3, r4, r5, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008546:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 800854a:	4604      	mov	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800854c:	68c0      	ldr	r0, [r0, #12]
 800854e:	f7ff fcaf 	bl	8007eb0 <VBS_GetAvBusVoltage_V>
 8008552:	fb05 f300 	mul.w	r3, r5, r0
 8008556:	ee00 3a10 	vmov	s0, r3
 800855a:	edd4 7a01 	vldr	s15, [r4, #4]
 800855e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8008562:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008566:	bd38      	pop	{r3, r4, r5, pc}

08008568 <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8008568:	b410      	push	{r4}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800856a:	4b19      	ldr	r3, [pc, #100]	@ (80085d0 <startTimers+0x68>)
 800856c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800856e:	07d2      	lsls	r2, r2, #31
 8008570:	b083      	sub	sp, #12
 8008572:	d416      	bmi.n	80085a2 <startTimers+0x3a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008574:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008576:	f042 0201 	orr.w	r2, r2, #1
 800857a:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800857c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800857e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008582:	f002 0201 	and.w	r2, r2, #1
 8008586:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8008588:	9a01      	ldr	r2, [sp, #4]
 800858a:	694a      	ldr	r2, [r1, #20]
 800858c:	f042 0201 	orr.w	r2, r2, #1
 8008590:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8008592:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008594:	f022 0201 	bic.w	r2, r2, #1
 8008598:	659a      	str	r2, [r3, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800859a:	b003      	add	sp, #12
 800859c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085a0:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 80085a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80085a6:	480b      	ldr	r0, [pc, #44]	@ (80085d4 <startTimers+0x6c>)
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	6859      	ldr	r1, [r3, #4]
 80085ac:	4c0a      	ldr	r4, [pc, #40]	@ (80085d8 <startTimers+0x70>)
 80085ae:	4001      	ands	r1, r0
 80085b0:	f041 0120 	orr.w	r1, r1, #32
 80085b4:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80085b6:	6959      	ldr	r1, [r3, #20]
 80085b8:	f041 0101 	orr.w	r1, r1, #1
 80085bc:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80085be:	6859      	ldr	r1, [r3, #4]
 80085c0:	4022      	ands	r2, r4
 80085c2:	4001      	ands	r1, r0
 80085c4:	430a      	orrs	r2, r1
 80085c6:	605a      	str	r2, [r3, #4]
}
 80085c8:	b003      	add	sp, #12
 80085ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	40021000 	.word	0x40021000
 80085d4:	fdffff8f 	.word	0xfdffff8f
 80085d8:	02000070 	.word	0x02000070

080085dc <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80085dc:	3201      	adds	r2, #1
{
 80085de:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80085e0:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80085e2:	f06f 0602 	mvn.w	r6, #2
 80085e6:	0155      	lsls	r5, r2, #5
 80085e8:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80085ea:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80085ec:	f893 c000 	ldrb.w	ip, [r3]
 80085f0:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80085f4:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 80085f8:	d80c      	bhi.n	8008614 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80085fa:	6904      	ldr	r4, [r0, #16]
 80085fc:	07a4      	lsls	r4, r4, #30
 80085fe:	d5f5      	bpl.n	80085ec <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8008600:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8008604:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008606:	6106      	str	r6, [r0, #16]
 8008608:	d8f0      	bhi.n	80085ec <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 800860a:	781c      	ldrb	r4, [r3, #0]
 800860c:	2c0f      	cmp	r4, #15
 800860e:	d8ed      	bhi.n	80085ec <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8008610:	2301      	movs	r3, #1
 8008612:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8008614:	bd70      	pop	{r4, r5, r6, pc}
 8008616:	bf00      	nop

08008618 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008618:	6883      	ldr	r3, [r0, #8]
 800861a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800861e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008622:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008624:	6883      	ldr	r3, [r0, #8]
 8008626:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8008628:	b082      	sub	sp, #8
 800862a:	d418      	bmi.n	800865e <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 800862c:	4b24      	ldr	r3, [pc, #144]	@ (80086c0 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 800862e:	6882      	ldr	r2, [r0, #8]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4924      	ldr	r1, [pc, #144]	@ (80086c4 <R3_2_ADCxInit+0xac>)
 8008634:	099b      	lsrs	r3, r3, #6
 8008636:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 800863a:	fba1 1303 	umull	r1, r3, r1, r3
 800863e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008642:	099b      	lsrs	r3, r3, #6
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800864a:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 800864c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	b12b      	cbz	r3, 800865e <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8008652:	9b01      	ldr	r3, [sp, #4]
 8008654:	3b01      	subs	r3, #1
 8008656:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008658:	9b01      	ldr	r3, [sp, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1f9      	bne.n	8008652 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800865e:	6883      	ldr	r3, [r0, #8]
 8008660:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008664:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008668:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800866c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800866e:	6883      	ldr	r3, [r0, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	dbfc      	blt.n	800866e <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008674:	6803      	ldr	r3, [r0, #0]
 8008676:	07da      	lsls	r2, r3, #31
 8008678:	d408      	bmi.n	800868c <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800867a:	4a13      	ldr	r2, [pc, #76]	@ (80086c8 <R3_2_ADCxInit+0xb0>)
 800867c:	6883      	ldr	r3, [r0, #8]
 800867e:	4013      	ands	r3, r2
 8008680:	f043 0301 	orr.w	r3, r3, #1
 8008684:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008686:	6803      	ldr	r3, [r0, #0]
 8008688:	07db      	lsls	r3, r3, #31
 800868a:	d5f7      	bpl.n	800867c <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 800868c:	6883      	ldr	r3, [r0, #8]
 800868e:	4a0e      	ldr	r2, [pc, #56]	@ (80086c8 <R3_2_ADCxInit+0xb0>)
 8008690:	4013      	ands	r3, r2
 8008692:	f043 0308 	orr.w	r3, r3, #8
 8008696:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8008698:	6883      	ldr	r3, [r0, #8]
 800869a:	4013      	ands	r3, r2
 800869c:	f043 0320 	orr.w	r3, r3, #32
 80086a0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80086a2:	68c3      	ldr	r3, [r0, #12]
 80086a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086b0:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 80086b2:	6883      	ldr	r3, [r0, #8]
 80086b4:	4013      	ands	r3, r2
 80086b6:	f043 0304 	orr.w	r3, r3, #4
 80086ba:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode(ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY);

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
}
 80086bc:	b002      	add	sp, #8
 80086be:	4770      	bx	lr
 80086c0:	20000554 	.word	0x20000554
 80086c4:	053e2d63 	.word	0x053e2d63
 80086c8:	7fffffc0 	.word	0x7fffffc0

080086cc <R3_2_GetPhaseCurrents>:
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_2_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 80086cc:	b1d9      	cbz	r1, 8008706 <R3_2_GetPhaseCurrents+0x3a>
  {
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80086ce:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 80086d2:	f890 206a 	ldrb.w	r2, [r0, #106]	@ 0x6a
{
 80086d6:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80086d8:	689c      	ldr	r4, [r3, #8]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 80086da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80086de:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 80086e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 80086e2:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 80086e6:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80086ea:	6863      	ldr	r3, [r4, #4]
 80086ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80086f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f4:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 80086f6:	2a05      	cmp	r2, #5
 80086f8:	f200 8098 	bhi.w	800882c <R3_2_GetPhaseCurrents+0x160>
 80086fc:	e8df f002 	tbb	[pc, r2]
 8008700:	041d1d10 	.word	0x041d1d10
 8008704:	1004      	.short	0x1004
 8008706:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008708:	6f03      	ldr	r3, [r0, #112]	@ 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800870a:	4a4c      	ldr	r2, [pc, #304]	@ (800883c <R3_2_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800870c:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 800870e:	4293      	cmp	r3, r2
 8008710:	db20      	blt.n	8008754 <R3_2_GetPhaseCurrents+0x88>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008716:	f2c0 8086 	blt.w	8008826 <R3_2_GetPhaseCurrents+0x15a>
 800871a:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 800871e:	e01a      	b.n	8008756 <R3_2_GetPhaseCurrents+0x8a>
      case SECTOR_6:
      case SECTOR_1:
      {
        /* Current on Phase A is not accessible     */
        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008720:	6f44      	ldr	r4, [r0, #116]	@ 0x74

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8008722:	4b46      	ldr	r3, [pc, #280]	@ (800883c <R3_2_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008724:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008726:	429c      	cmp	r4, r3
 8008728:	db2b      	blt.n	8008782 <R3_2_GetPhaseCurrents+0xb6>
        {
          Iab->b = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800872a:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800872e:	db77      	blt.n	8008820 <R3_2_GetPhaseCurrents+0x154>
 8008730:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008734:	4614      	mov	r4, r2
 8008736:	4615      	mov	r5, r2
 8008738:	e027      	b.n	800878a <R3_2_GetPhaseCurrents+0xbe>
      case SECTOR_2:
      case SECTOR_3:
      {
        /* Current on Phase B is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800873a:	6f04      	ldr	r4, [r0, #112]	@ 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800873c:	4b3f      	ldr	r3, [pc, #252]	@ (800883c <R3_2_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800873e:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008740:	429c      	cmp	r4, r3
 8008742:	db2e      	blt.n	80087a2 <R3_2_GetPhaseCurrents+0xd6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008744:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8008748:	db66      	blt.n	8008818 <R3_2_GetPhaseCurrents+0x14c>
 800874a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800874e:	461c      	mov	r4, r3
 8008750:	469c      	mov	ip, r3
 8008752:	e02a      	b.n	80087aa <R3_2_GetPhaseCurrents+0xde>
 8008754:	4694      	mov	ip, r2
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008756:	6f42      	ldr	r2, [r0, #116]	@ 0x74
        if (Aux < -INT16_MAX)
 8008758:	4d38      	ldr	r5, [pc, #224]	@ (800883c <R3_2_GetPhaseCurrents+0x170>)
          Iab->a = -INT16_MAX;
 800875a:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800875e:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8008760:	42aa      	cmp	r2, r5
 8008762:	da2f      	bge.n	80087c4 <R3_2_GetPhaseCurrents+0xf8>
          Iab->b = -INT16_MAX;
 8008764:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008766:	fa1f f38c 	uxth.w	r3, ip
 800876a:	f248 0201 	movw	r2, #32769	@ 0x8001
 800876e:	4413      	add	r3, r2
 8008770:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 8008772:	f8a0 5052 	strh.w	r5, [r0, #82]	@ 0x52
    pHandle->_Super.Ia = Iab->a;
 8008776:	f8a0 c050 	strh.w	ip, [r0, #80]	@ 0x50
  }
}
 800877a:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800877c:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
}
 8008780:	4770      	bx	lr
 8008782:	461c      	mov	r4, r3
 8008784:	f248 0201 	movw	r2, #32769	@ 0x8001
 8008788:	461d      	mov	r5, r3
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800878a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
          Iab->b = -INT16_MAX;
 800878c:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800878e:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8008790:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 8008792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008796:	db20      	blt.n	80087da <R3_2_GetPhaseCurrents+0x10e>
          Iab->a = INT16_MAX;
 8008798:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800879c:	800b      	strh	r3, [r1, #0]
 800879e:	469c      	mov	ip, r3
 80087a0:	e7e5      	b.n	800876e <R3_2_GetPhaseCurrents+0xa2>
 80087a2:	461c      	mov	r4, r3
 80087a4:	46a4      	mov	ip, r4
 80087a6:	f248 0301 	movw	r3, #32769	@ 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80087aa:	6f82      	ldr	r2, [r0, #120]	@ 0x78
          Iab->a = -INT16_MAX;
 80087ac:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80087b0:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 80087b2:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 80087b4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80087b8:	db17      	blt.n	80087ea <R3_2_GetPhaseCurrents+0x11e>
          Iab->b = INT16_MAX;
 80087ba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80087be:	804a      	strh	r2, [r1, #2]
 80087c0:	4615      	mov	r5, r2
 80087c2:	e7d4      	b.n	800876e <R3_2_GetPhaseCurrents+0xa2>
        else  if (Aux > INT16_MAX)
 80087c4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80087c8:	db20      	blt.n	800880c <R3_2_GetPhaseCurrents+0x140>
          Iab->b = INT16_MAX;
 80087ca:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80087ce:	461a      	mov	r2, r3
 80087d0:	804b      	strh	r3, [r1, #2]
 80087d2:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80087d4:	fa1f f38c 	uxth.w	r3, ip
 80087d8:	e7c9      	b.n	800876e <R3_2_GetPhaseCurrents+0xa2>
        else  if (Aux < -INT16_MAX)
 80087da:	4c18      	ldr	r4, [pc, #96]	@ (800883c <R3_2_GetPhaseCurrents+0x170>)
 80087dc:	42a3      	cmp	r3, r4
 80087de:	da0f      	bge.n	8008800 <R3_2_GetPhaseCurrents+0x134>
          Iab->a = -INT16_MAX;
 80087e0:	800c      	strh	r4, [r1, #0]
 80087e2:	f248 0301 	movw	r3, #32769	@ 0x8001
 80087e6:	46a4      	mov	ip, r4
 80087e8:	e7c1      	b.n	800876e <R3_2_GetPhaseCurrents+0xa2>
        else  if (Aux < -INT16_MAX)
 80087ea:	4d14      	ldr	r5, [pc, #80]	@ (800883c <R3_2_GetPhaseCurrents+0x170>)
 80087ec:	42aa      	cmp	r2, r5
 80087ee:	da03      	bge.n	80087f8 <R3_2_GetPhaseCurrents+0x12c>
          Iab->b = -INT16_MAX;
 80087f0:	804d      	strh	r5, [r1, #2]
 80087f2:	f248 0201 	movw	r2, #32769	@ 0x8001
 80087f6:	e7ba      	b.n	800876e <R3_2_GetPhaseCurrents+0xa2>
          Iab->b = (int16_t)Aux;
 80087f8:	b215      	sxth	r5, r2
 80087fa:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80087fc:	b292      	uxth	r2, r2
 80087fe:	e7b6      	b.n	800876e <R3_2_GetPhaseCurrents+0xa2>
          Iab->a = (int16_t)Aux;
 8008800:	fa0f fc83 	sxth.w	ip, r3
 8008804:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008808:	b29b      	uxth	r3, r3
 800880a:	e7b0      	b.n	800876e <R3_2_GetPhaseCurrents+0xa2>
          Iab->b = (int16_t)Aux;
 800880c:	b215      	sxth	r5, r2
 800880e:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008810:	fa1f f38c 	uxth.w	r3, ip
 8008814:	b292      	uxth	r2, r2
 8008816:	e7aa      	b.n	800876e <R3_2_GetPhaseCurrents+0xa2>
          Iab->a = (int16_t)Aux;
 8008818:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800881c:	b2a3      	uxth	r3, r4
 800881e:	e7c4      	b.n	80087aa <R3_2_GetPhaseCurrents+0xde>
          Iab->b = (int16_t)Aux;
 8008820:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008822:	b2a2      	uxth	r2, r4
 8008824:	e7b1      	b.n	800878a <R3_2_GetPhaseCurrents+0xbe>
          Iab->a = (int16_t)Aux;
 8008826:	fa0f fc83 	sxth.w	ip, r3
 800882a:	e794      	b.n	8008756 <R3_2_GetPhaseCurrents+0x8a>
    pHandle->_Super.Ia = Iab->a;
 800882c:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8008830:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008834:	880b      	ldrh	r3, [r1, #0]
 8008836:	884a      	ldrh	r2, [r1, #2]
 8008838:	e799      	b.n	800876e <R3_2_GetPhaseCurrents+0xa2>
 800883a:	bf00      	nop
 800883c:	ffff8001 	.word	0xffff8001

08008840 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8008840:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008842:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8008846:	f890 4081 	ldrb.w	r4, [r0, #129]	@ 0x81
 800884a:	f880 406a 	strb.w	r4, [r0, #106]	@ 0x6a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800884e:	f8b0 207c 	ldrh.w	r2, [r0, #124]	@ 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008852:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8008854:	8fc4      	ldrh	r4, [r0, #62]	@ 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008856:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008858:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800885a:	f8b0 4040 	ldrh.w	r4, [r0, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800885e:	f8b0 0042 	ldrh.w	r0, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008862:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008864:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008866:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008868:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800886a:	4904      	ldr	r1, [pc, #16]	@ (800887c <R3_2_SetADCSampPointPolarization+0x3c>)
 800886c:	685b      	ldr	r3, [r3, #4]
}
 800886e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008872:	420b      	tst	r3, r1
}
 8008874:	bf14      	ite	ne
 8008876:	2001      	movne	r0, #1
 8008878:	2000      	moveq	r0, #0
 800887a:	4770      	bx	lr
 800887c:	02000070 	.word	0x02000070

08008880 <R3_2_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8008880:	b339      	cbz	r1, 80088d2 <R3_2_HFCurrentsPolarizationAB+0x52>
{
 8008882:	b430      	push	{r4, r5}
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008884:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8008888:	f890 4081 	ldrb.w	r4, [r0, #129]	@ 0x81
 800888c:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800888e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008892:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8008896:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800889a:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800889e:	6853      	ldr	r3, [r2, #4]
 80088a0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80088a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088a8:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80088aa:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 80088ae:	2b0f      	cmp	r3, #15
 80088b0:	d80b      	bhi.n	80088ca <R3_2_HFCurrentsPolarizationAB+0x4a>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 80088b2:	6f03      	ldr	r3, [r0, #112]	@ 0x70
      pHandle-> PhaseBOffset += ADCDataReg2;
 80088b4:	6f42      	ldr	r2, [r0, #116]	@ 0x74
      pHandle-> PhaseAOffset += ADCDataReg1;
 80088b6:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 80088b8:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
      pHandle-> PhaseBOffset += ADCDataReg2;
 80088bc:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 80088be:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 80088c0:	e9c0 421c 	strd	r4, r2, [r0, #112]	@ 0x70
      pHandle->PolarizationCounter++;
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 80088ca:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 80088cc:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 80088ce:	600b      	str	r3, [r1, #0]
}
 80088d0:	4770      	bx	lr
 80088d2:	4770      	bx	lr

080088d4 <R3_2_HFCurrentsPolarizationC>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 80088d4:	b311      	cbz	r1, 800891c <R3_2_HFCurrentsPolarizationC+0x48>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80088d6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80088da:	f890 c081 	ldrb.w	ip, [r0, #129]	@ 0x81
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80088de:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80088e0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 80088e4:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80088e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088e8:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80088ec:	6853      	ldr	r3, [r2, #4]
 80088ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80088f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f6:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80088f8:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 80088fc:	2b0f      	cmp	r3, #15
 80088fe:	d808      	bhi.n	8008912 <R3_2_HFCurrentsPolarizationC+0x3e>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8008900:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008904:	6f82      	ldr	r2, [r0, #120]	@ 0x78
      pHandle->PolarizationCounter++;
 8008906:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008908:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800890a:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 800890c:	6782      	str	r2, [r0, #120]	@ 0x78
      pHandle->PolarizationCounter++;
 800890e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8008912:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8008914:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8008918:	600b      	str	r3, [r1, #0]
}
 800891a:	4770      	bx	lr
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop

08008920 <R3_2_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_2_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
 8008920:	b410      	push	{r4}
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008922:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 8008926:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008928:	68a2      	ldr	r2, [r4, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800892a:	f880 306b 	strb.w	r3, [r0, #107]	@ 0x6b
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800892e:	f06f 0301 	mvn.w	r3, #1
 8008932:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008934:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008936:	6391      	str	r1, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008938:	63d1      	str	r1, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800893a:	6913      	ldr	r3, [r2, #16]
 800893c:	07db      	lsls	r3, r3, #31
 800893e:	d5fc      	bpl.n	800893a <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008940:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8008942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008946:	6453      	str	r3, [r2, #68]	@ 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8008948:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 800894c:	2b02      	cmp	r3, #2
 800894e:	d10b      	bne.n	8008968 <R3_2_TurnOnLowSides+0x48>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008950:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008954:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	@ 0xac
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008958:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800895a:	6190      	str	r0, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800895c:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	@ 0xae
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008960:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	@ 0xb0
 8008964:	6188      	str	r0, [r1, #24]
 8008966:	619a      	str	r2, [r3, #24]
  else
  {
    /* Nothing to do */
  }
  return;
}
 8008968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop

08008970 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008970:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8008974:	f8b0 207c 	ldrh.w	r2, [r0, #124]	@ 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008978:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked = true;
 800897a:	f04f 0c01 	mov.w	ip, #1
{
 800897e:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->ADCRegularLocked = true;
 8008980:	f880 c08c 	strb.w	ip, [r0, #140]	@ 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008984:	f04f 0c00 	mov.w	ip, #0
 8008988:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800898c:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800898e:	6358      	str	r0, [r3, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8008990:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008992:	6398      	str	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008994:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008996:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800899a:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800899c:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800899e:	691a      	ldr	r2, [r3, #16]
 80089a0:	07d2      	lsls	r2, r2, #31
 80089a2:	d5fc      	bpl.n	800899e <R3_2_SwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089a4:	f06f 0201 	mvn.w	r2, #1
 80089a8:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80089aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80089b0:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80089b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089b8:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 80089ba:	f891 20c0 	ldrb.w	r2, [r1, #192]	@ 0xc0
 80089be:	2a02      	cmp	r2, #2
 80089c0:	d008      	beq.n	80089d4 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089c2:	f06f 0201 	mvn.w	r2, #1
 80089c6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 80089ce:	bcf0      	pop	{r4, r5, r6, r7}
 80089d0:	60da      	str	r2, [r3, #12]
 80089d2:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 80089d4:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80089d6:	6a0f      	ldr	r7, [r1, #32]
 80089d8:	f8b1 c0ac 	ldrh.w	ip, [r1, #172]	@ 0xac
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80089dc:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80089de:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	@ 0xae
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80089e2:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80089e4:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 80089e8:	f240 5255 	movw	r2, #1365	@ 0x555
 80089ec:	4210      	tst	r0, r2
 80089ee:	d004      	beq.n	80089fa <R3_2_SwitchOnPWM+0x8a>
 80089f0:	f8c7 c018 	str.w	ip, [r7, #24]
 80089f4:	61ae      	str	r6, [r5, #24]
 80089f6:	61a1      	str	r1, [r4, #24]
}
 80089f8:	e7e3      	b.n	80089c2 <R3_2_SwitchOnPWM+0x52>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80089fa:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 80089fe:	62ae      	str	r6, [r5, #40]	@ 0x28
 8008a00:	62a1      	str	r1, [r4, #40]	@ 0x28
}
 8008a02:	e7de      	b.n	80089c2 <R3_2_SwitchOnPWM+0x52>

08008a04 <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a04:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8008a08:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008a0a:	68d3      	ldr	r3, [r2, #12]
 8008a0c:	f023 0301 	bic.w	r3, r3, #1
 8008a10:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008a12:	6c53      	ldr	r3, [r2, #68]	@ 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE(TIMx);

  pHandle->_Super.TurnOnLowSidesAction = false;
 8008a14:	f04f 0c00 	mov.w	ip, #0
 8008a18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a1c:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 8008a20:	6453      	str	r3, [r2, #68]	@ 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->BrakeActionLock)
 8008a22:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008a26:	b91b      	cbnz	r3, 8008a30 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008a28:	f891 30c0 	ldrb.w	r3, [r1, #192]	@ 0xc0
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d00c      	beq.n	8008a4a <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a30:	f06f 0301 	mvn.w	r3, #1
 8008a34:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a36:	6913      	ldr	r3, [r2, #16]
 8008a38:	07db      	lsls	r3, r3, #31
 8008a3a:	d5fc      	bpl.n	8008a36 <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a3c:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 8008a40:	2300      	movs	r3, #0
 8008a42:	6111      	str	r1, [r2, #16]
 8008a44:	f880 308c 	strb.w	r3, [r0, #140]	@ 0x8c
 8008a48:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008a4a:	6a0b      	ldr	r3, [r1, #32]
{
 8008a4c:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008a4e:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	@ 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8008a52:	629c      	str	r4, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008a54:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8008a56:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	@ 0xae
 8008a5a:	629c      	str	r4, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008a5c:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008a5e:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
 8008a62:	6299      	str	r1, [r3, #40]	@ 0x28
 8008a64:	f06f 0301 	mvn.w	r3, #1
 8008a68:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a6a:	6913      	ldr	r3, [r2, #16]
 8008a6c:	07d9      	lsls	r1, r3, #31
 8008a6e:	d5fc      	bpl.n	8008a6a <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a70:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 8008a74:	2300      	movs	r3, #0
 8008a76:	6111      	str	r1, [r2, #16]
}
 8008a78:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked = false;
 8008a7c:	f880 308c 	strb.w	r3, [r0, #140]	@ 0x8c
}
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop

08008a84 <R3_2_RLGetPhaseCurrents>:
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{

  if (MC_NULL == pStator_Currents)
 8008a84:	b329      	cbz	r1, 8008ad2 <R3_2_RLGetPhaseCurrents+0x4e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a86:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
{
 8008a8a:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a8c:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008a8e:	6863      	ldr	r3, [r4, #4]
 8008a90:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a98:	6063      	str	r3, [r4, #4]
    int32_t wAux;

    /* disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008a9a:	f890 406a 	ldrb.w	r4, [r0, #106]	@ 0x6a
 8008a9e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 8008aa0:	480c      	ldr	r0, [pc, #48]	@ (8008ad4 <R3_2_RLGetPhaseCurrents+0x50>)
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008aa2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008aa6:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8008aa8:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 8008aac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008ab0:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	bfa8      	it	ge
 8008ab6:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 8008ab8:	4283      	cmp	r3, r0
 8008aba:	bfb8      	it	lt
 8008abc:	4603      	movlt	r3, r0
 8008abe:	b21b      	sxth	r3, r3
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f363 020f 	bfi	r2, r3, #0, #16
 8008ac6:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
  }
}
 8008aca:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8008ace:	600a      	str	r2, [r1, #0]
}
 8008ad0:	4770      	bx	lr
 8008ad2:	4770      	bx	lr
 8008ad4:	ffff8001 	.word	0xffff8001

08008ad8 <R3_2_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
static void R3_2_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008ad8:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88

  pHandle->ADCRegularLocked = true;
 8008adc:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008ade:	688a      	ldr	r2, [r1, #8]
{
 8008ae0:	b410      	push	{r4}
  pHandle->ADCRegularLocked = true;
 8008ae2:	f880 308c 	strb.w	r3, [r0, #140]	@ 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008ae6:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008ae8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008aec:	6354      	str	r4, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008aee:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008af0:	6913      	ldr	r3, [r2, #16]
 8008af2:	07db      	lsls	r3, r3, #31
 8008af4:	d5fc      	bpl.n	8008af0 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008af6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8008af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008afc:	6453      	str	r3, [r2, #68]	@ 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008afe:	f891 30c0 	ldrb.w	r3, [r1, #192]	@ 0xc0
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d10b      	bne.n	8008b1e <R3_2_RLTurnOnLowSides+0x46>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008b06:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008b0a:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	@ 0xac
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008b0e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008b10:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008b12:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	@ 0xae
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008b16:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	@ 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 8008b1a:	6284      	str	r4, [r0, #40]	@ 0x28
 8008b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  else
  {
    /* Nothing to do */
  }
  return;
}
 8008b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <R3_2_RLSwitchOnPWM>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t *pHdl)
{
  if (MC_NULL == pHdl)
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d054      	beq.n	8008bd2 <R3_2_RLSwitchOnPWM+0xae>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008b28:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;

    pHandle->ADCRegularLocked=true;
 8008b2c:	2201      	movs	r2, #1
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008b2e:	688b      	ldr	r3, [r1, #8]
{
 8008b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008b34:	e9d1 5400 	ldrd	r5, r4, [r1]
    pHandle->ADCRegularLocked=true;
 8008b38:	f880 208c 	strb.w	r2, [r0, #140]	@ 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b3c:	f06f 0201 	mvn.w	r2, #1
 8008b40:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	07d6      	lsls	r6, r2, #31
 8008b46:	d5fc      	bpl.n	8008b42 <R3_2_RLSwitchOnPWM+0x1e>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008b48:	f8b0 207c 	ldrh.w	r2, [r0, #124]	@ 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b4c:	f06f 0601 	mvn.w	r6, #1
 8008b50:	611e      	str	r6, [r3, #16]
 8008b52:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b54:	2601      	movs	r6, #1
 8008b56:	635e      	str	r6, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008b58:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008b5a:	691a      	ldr	r2, [r3, #16]
 8008b5c:	07d2      	lsls	r2, r2, #31
 8008b5e:	d5fc      	bpl.n	8008b5a <R3_2_RLSwitchOnPWM+0x36>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	60da      	str	r2, [r3, #12]

    /* enable TIMx update interrupt*/
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b76:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8008b78:	f891 20c0 	ldrb.w	r2, [r1, #192]	@ 0xc0
 8008b7c:	2a02      	cmp	r2, #2
 8008b7e:	d00f      	beq.n	8008ba0 <R3_2_RLSwitchOnPWM+0x7c>
      /* Nothing to do */
    }

    /* set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 8008b80:	2303      	movs	r3, #3
 8008b82:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a
  MODIFY_REG(ADCx->CR,
 8008b86:	68ab      	ldr	r3, [r5, #8]
 8008b88:	4a12      	ldr	r2, [pc, #72]	@ (8008bd4 <R3_2_RLSwitchOnPWM+0xb0>)
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	f043 0308 	orr.w	r3, r3, #8
 8008b90:	60ab      	str	r3, [r5, #8]
 8008b92:	68a3      	ldr	r3, [r4, #8]
 8008b94:	4013      	ands	r3, r2
 8008b96:	f043 0308 	orr.w	r3, r3, #8
 8008b9a:	60a3      	str	r3, [r4, #8]

    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
  }
  return;
}
 8008b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8008ba0:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008ba2:	f8d1 e020 	ldr.w	lr, [r1, #32]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008ba6:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008ba8:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008baa:	f8b1 80ac 	ldrh.w	r8, [r1, #172]	@ 0xac
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008bae:	f8b1 c0ae 	ldrh.w	ip, [r1, #174]	@ 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008bb2:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8008bb6:	f240 5355 	movw	r3, #1365	@ 0x555
 8008bba:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008bbc:	bf15      	itete	ne
 8008bbe:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008bc2:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008bc6:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008bca:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 8008bce:	62b1      	str	r1, [r6, #40]	@ 0x28
}
 8008bd0:	e7d6      	b.n	8008b80 <R3_2_RLSwitchOnPWM+0x5c>
 8008bd2:	4770      	bx	lr
 8008bd4:	7fffffc0 	.word	0x7fffffc0

08008bd8 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8008bd8:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 8008be2:	f101 0e08 	add.w	lr, r1, #8
 8008be6:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8008be8:	f85e 300c 	ldr.w	r3, [lr, ip]
 8008bec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 8008bfa:	684a      	ldr	r2, [r1, #4]
 8008bfc:	f000 0303 	and.w	r3, r0, #3
 8008c00:	4313      	orrs	r3, r2
 8008c02:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8008c04:	680a      	ldr	r2, [r1, #0]
 8008c06:	f000 0010 	and.w	r0, r0, #16
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008c0e:	ea33 0202 	bics.w	r2, r3, r2
 8008c12:	d014      	beq.n	8008c3e <R3_2_SetAOReferenceVoltage+0x66>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8008c14:	4a14      	ldr	r2, [pc, #80]	@ (8008c68 <R3_2_SetAOReferenceVoltage+0x90>)
 8008c16:	4815      	ldr	r0, [pc, #84]	@ (8008c6c <R3_2_SetAOReferenceVoltage+0x94>)
 8008c18:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 8008c1a:	680c      	ldr	r4, [r1, #0]
 8008c1c:	fba0 0202 	umull	r0, r2, r0, r2
 8008c20:	0cd2      	lsrs	r2, r2, #19
 8008c22:	4323      	orrs	r3, r4
 8008c24:	00d2      	lsls	r2, r2, #3
 8008c26:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8008c28:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 8008c2a:	9b00      	ldr	r3, [sp, #0]
 8008c2c:	b12b      	cbz	r3, 8008c3a <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8008c2e:	9b00      	ldr	r3, [sp, #0]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8008c34:	9b00      	ldr	r3, [sp, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1f9      	bne.n	8008c2e <R3_2_SetAOReferenceVoltage+0x56>
}
 8008c3a:	b002      	add	sp, #8
 8008c3c:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c68 <R3_2_SetAOReferenceVoltage+0x90>)
 8008c40:	4a0a      	ldr	r2, [pc, #40]	@ (8008c6c <R3_2_SetAOReferenceVoltage+0x94>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	fba2 2303 	umull	r2, r3, r2, r3
 8008c48:	0cdb      	lsrs	r3, r3, #19
 8008c4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008c4e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d0f1      	beq.n	8008c3a <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1f9      	bne.n	8008c56 <R3_2_SetAOReferenceVoltage+0x7e>
}
 8008c62:	b002      	add	sp, #8
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	bf00      	nop
 8008c68:	20000554 	.word	0x20000554
 8008c6c:	431bde83 	.word	0x431bde83

08008c70 <R3_2_Init>:
  if (MC_NULL == pHandle)
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f000 80f0 	beq.w	8008e56 <R3_2_Init+0x1e6>
{
 8008c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008c7a:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
 8008c7e:	6827      	ldr	r7, [r4, #0]
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008c80:	6866      	ldr	r6, [r4, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008c82:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008c84:	68a5      	ldr	r5, [r4, #8]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8008c86:	f8d4 b014 	ldr.w	fp, [r4, #20]
 8008c8a:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008c8c:	e9d4 c00b 	ldrd	ip, r0, [r4, #44]	@ 0x2c
{
 8008c90:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008c92:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008c96:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008c9a:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008c9c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008c9e:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8008ca0:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8008ca4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8008ca6:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8008ca8:	e9d4 a906 	ldrd	sl, r9, [r4, #24]
 8008cac:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008cae:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008cb2:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008cb4:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008cb6:	f022 0220 	bic.w	r2, r2, #32
 8008cba:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008cbc:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008cbe:	6872      	ldr	r2, [r6, #4]
 8008cc0:	f022 0204 	bic.w	r2, r2, #4
 8008cc4:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008cc6:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008cca:	6872      	ldr	r2, [r6, #4]
 8008ccc:	f022 0220 	bic.w	r2, r2, #32
 8008cd0:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008cd2:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 8008cd4:	4a86      	ldr	r2, [pc, #536]	@ (8008ef0 <R3_2_Init+0x280>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008cd6:	4887      	ldr	r0, [pc, #540]	@ (8008ef4 <R3_2_Init+0x284>)
 8008cd8:	4295      	cmp	r5, r2
 8008cda:	6902      	ldr	r2, [r0, #16]
 8008cdc:	bf0c      	ite	eq
 8008cde:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 8008ce2:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 8008ce6:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 8008ce8:	b181      	cbz	r1, 8008d0c <R3_2_Init+0x9c>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 8008cea:	e9d1 2003 	ldrd	r2, r0, [r1, #12]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8008cee:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 8008cf2:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8008cf4:	f04e 0e01 	orr.w	lr, lr, #1
 8008cf8:	f8c2 e000 	str.w	lr, [r2]
 8008cfc:	6802      	ldr	r2, [r0, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	6002      	str	r2, [r0, #0]
 8008d04:	680a      	ldr	r2, [r1, #0]
 8008d06:	f042 0201 	orr.w	r2, r2, #1
 8008d0a:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 8008d0c:	b1b3      	cbz	r3, 8008d3c <R3_2_Init+0xcc>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 8008d0e:	f894 20c3 	ldrb.w	r2, [r4, #195]	@ 0xc3
 8008d12:	2a01      	cmp	r2, #1
 8008d14:	d00a      	beq.n	8008d2c <R3_2_Init+0xbc>
 8008d16:	f1bc 0f00 	cmp.w	ip, #0
 8008d1a:	d007      	beq.n	8008d2c <R3_2_Init+0xbc>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8008d1c:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8008d20:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008d22:	9303      	str	r3, [sp, #12]
 8008d24:	4661      	mov	r1, ip
 8008d26:	f7ff ff57 	bl	8008bd8 <R3_2_SetAOReferenceVoltage>
 8008d2a:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	f042 0201 	orr.w	r2, r2, #1
 8008d32:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008d3a:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 8008d3c:	f1bb 0f00 	cmp.w	fp, #0
 8008d40:	d017      	beq.n	8008d72 <R3_2_Init+0x102>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 8008d42:	f894 30c4 	ldrb.w	r3, [r4, #196]	@ 0xc4
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d007      	beq.n	8008d5a <R3_2_Init+0xea>
 8008d4a:	9b00      	ldr	r3, [sp, #0]
 8008d4c:	b12b      	cbz	r3, 8008d5a <R3_2_Init+0xea>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 8008d4e:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8008d52:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8008d54:	4619      	mov	r1, r3
 8008d56:	f7ff ff3f 	bl	8008bd8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008d5a:	f8db 3000 	ldr.w	r3, [fp]
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008d66:	f8db 3000 	ldr.w	r3, [fp]
 8008d6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d6e:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 8008d72:	f1ba 0f00 	cmp.w	sl, #0
 8008d76:	d017      	beq.n	8008da8 <R3_2_Init+0x138>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 8008d78:	f894 30c5 	ldrb.w	r3, [r4, #197]	@ 0xc5
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d007      	beq.n	8008d90 <R3_2_Init+0x120>
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	b12b      	cbz	r3, 8008d90 <R3_2_Init+0x120>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8008d84:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8008d88:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	f7ff ff24 	bl	8008bd8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008d90:	f8da 3000 	ldr.w	r3, [sl]
 8008d94:	f043 0301 	orr.w	r3, r3, #1
 8008d98:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008d9c:	f8da 3000 	ldr.w	r3, [sl]
 8008da0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008da4:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 8008da8:	f1b9 0f00 	cmp.w	r9, #0
 8008dac:	d017      	beq.n	8008dde <R3_2_Init+0x16e>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 8008dae:	f894 30c6 	ldrb.w	r3, [r4, #198]	@ 0xc6
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d007      	beq.n	8008dc6 <R3_2_Init+0x156>
 8008db6:	9b02      	ldr	r3, [sp, #8]
 8008db8:	b12b      	cbz	r3, 8008dc6 <R3_2_Init+0x156>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 8008dba:	f8b4 20be 	ldrh.w	r2, [r4, #190]	@ 0xbe
 8008dbe:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f7ff ff09 	bl	8008bd8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008dc6:	f8d9 3000 	ldr.w	r3, [r9]
 8008dca:	f043 0301 	orr.w	r3, r3, #1
 8008dce:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008dd2:	f8d9 3000 	ldr.w	r3, [r9]
 8008dd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dda:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	07da      	lsls	r2, r3, #31
 8008de2:	d53d      	bpl.n	8008e60 <R3_2_Init+0x1f0>
 8008de4:	68b3      	ldr	r3, [r6, #8]
 8008de6:	07db      	lsls	r3, r3, #31
 8008de8:	d536      	bpl.n	8008e58 <R3_2_Init+0x1e8>
  volatile uint32_t Brk2Timeout = 1000;
 8008dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008dee:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008df8:	686b      	ldr	r3, [r5, #4]
 8008dfa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e02:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008e04:	69ab      	ldr	r3, [r5, #24]
 8008e06:	f043 0308 	orr.w	r3, r3, #8
 8008e0a:	61ab      	str	r3, [r5, #24]
 8008e0c:	69ab      	ldr	r3, [r5, #24]
 8008e0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008e12:	61ab      	str	r3, [r5, #24]
 8008e14:	69eb      	ldr	r3, [r5, #28]
 8008e16:	f043 0308 	orr.w	r3, r3, #8
 8008e1a:	61eb      	str	r3, [r5, #28]
 8008e1c:	69eb      	ldr	r3, [r5, #28]
 8008e1e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008e22:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008e24:	696b      	ldr	r3, [r5, #20]
 8008e26:	f043 0301 	orr.w	r3, r3, #1
 8008e2a:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8008e2c:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d022      	beq.n	8008e7a <R3_2_Init+0x20a>
    if (M1 == pHandle->_Super.Motor)
 8008e34:	f898 3068 	ldrb.w	r3, [r8, #104]	@ 0x68
 8008e38:	bb3b      	cbnz	r3, 8008e8a <R3_2_Init+0x21a>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 8008e3a:	f894 30c1 	ldrb.w	r3, [r4, #193]	@ 0xc1
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d01f      	beq.n	8008e82 <R3_2_Init+0x212>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d121      	bne.n	8008e8a <R3_2_Init+0x21a>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008e46:	2201      	movs	r2, #1
 8008e48:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008e4a:	696a      	ldr	r2, [r5, #20]
 8008e4c:	f042 0201 	orr.w	r2, r2, #1
 8008e50:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008e52:	632b      	str	r3, [r5, #48]	@ 0x30
}
 8008e54:	e019      	b.n	8008e8a <R3_2_Init+0x21a>
 8008e56:	4770      	bx	lr
        R3_2_ADCxInit(ADCx_2);
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f7ff fbdd 	bl	8008618 <R3_2_ADCxInit>
 8008e5e:	e7c4      	b.n	8008dea <R3_2_Init+0x17a>
        R3_2_ADCxInit(ADCx_1);
 8008e60:	4638      	mov	r0, r7
 8008e62:	f7ff fbd9 	bl	8008618 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008e66:	2340      	movs	r3, #64	@ 0x40
 8008e68:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e70:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e72:	68b3      	ldr	r3, [r6, #8]
 8008e74:	07db      	lsls	r3, r3, #31
 8008e76:	d4b8      	bmi.n	8008dea <R3_2_Init+0x17a>
 8008e78:	e7ee      	b.n	8008e58 <R3_2_Init+0x1e8>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8008e7a:	f894 30c8 	ldrb.w	r3, [r4, #200]	@ 0xc8
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d02a      	beq.n	8008ed8 <R3_2_Init+0x268>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8008e82:	f8b8 307c 	ldrh.w	r3, [r8, #124]	@ 0x7c
 8008e86:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008e88:	626b      	str	r3, [r5, #36]	@ 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008e8a:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8008e8e:	612b      	str	r3, [r5, #16]
  if ((pHandle->pParams_str->BKIN2Mode) != NONE)
 8008e90:	f894 30c2 	ldrb.w	r3, [r4, #194]	@ 0xc2
 8008e94:	b19b      	cbz	r3, 8008ebe <R3_2_Init+0x24e>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008e96:	692b      	ldr	r3, [r5, #16]
    while ((Brk2Timeout != 0u) && (1U == result))
 8008e98:	9a05      	ldr	r2, [sp, #20]
 8008e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e9e:	b172      	cbz	r2, 8008ebe <R3_2_Init+0x24e>
 8008ea0:	b16b      	cbz	r3, 8008ebe <R3_2_Init+0x24e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8008ea2:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 8008ea6:	e000      	b.n	8008eaa <R3_2_Init+0x23a>
 8008ea8:	b14b      	cbz	r3, 8008ebe <R3_2_Init+0x24e>
 8008eaa:	6129      	str	r1, [r5, #16]
      Brk2Timeout--;
 8008eac:	9b05      	ldr	r3, [sp, #20]
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008eb2:	692b      	ldr	r3, [r5, #16]
    while ((Brk2Timeout != 0u) && (1U == result))
 8008eb4:	9a05      	ldr	r2, [sp, #20]
 8008eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	d1f4      	bne.n	8008ea8 <R3_2_Init+0x238>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8008ebe:	68eb      	ldr	r3, [r5, #12]
 8008ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ec4:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 8008ec6:	6a2b      	ldr	r3, [r5, #32]
 8008ec8:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8008ecc:	f043 0305 	orr.w	r3, r3, #5
 8008ed0:	622b      	str	r3, [r5, #32]
}
 8008ed2:	b007      	add	sp, #28
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8008ed8:	f894 20c1 	ldrb.w	r2, [r4, #193]	@ 0xc1
 8008edc:	2a03      	cmp	r2, #3
 8008ede:	d1d0      	bne.n	8008e82 <R3_2_Init+0x212>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008ee0:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008ee2:	696b      	ldr	r3, [r5, #20]
 8008ee4:	f043 0301 	orr.w	r3, r3, #1
 8008ee8:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008eea:	632a      	str	r2, [r5, #48]	@ 0x30
}
 8008eec:	e7c9      	b.n	8008e82 <R3_2_Init+0x212>
 8008eee:	bf00      	nop
 8008ef0:	40012c00 	.word	0x40012c00
 8008ef4:	e0042000 	.word	0xe0042000

08008ef8 <R3_2_SetOffsetCalib>:
{
 8008ef8:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8008efa:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8008efe:	680b      	ldr	r3, [r1, #0]
 8008f00:	6703      	str	r3, [r0, #112]	@ 0x70
  pHdl->offsetCalibStatus = true;
 8008f02:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8008f04:	e9c0 421d 	strd	r4, r2, [r0, #116]	@ 0x74
  pHdl->offsetCalibStatus = true;
 8008f08:	f880 306e 	strb.w	r3, [r0, #110]	@ 0x6e
}
 8008f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop

08008f14 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8008f14:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	@ 0x74
 8008f18:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 8008f1a:	608b      	str	r3, [r1, #8]
 8008f1c:	e9c1 0200 	strd	r0, r2, [r1]
}
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop

08008f24 <R3_2_CurrentReadingPolarization>:
{
 8008f24:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f26:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008f2a:	e9d3 7600 	ldrd	r7, r6, [r3]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f2e:	689d      	ldr	r5, [r3, #8]
  if (true == pHandle->_Super.offsetCalibStatus)
 8008f30:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
{
 8008f34:	b083      	sub	sp, #12
 8008f36:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 8008f38:	b1ab      	cbz	r3, 8008f66 <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4a4e      	ldr	r2, [pc, #312]	@ (8009078 <R3_2_CurrentReadingPolarization+0x154>)
 8008f3e:	4013      	ands	r3, r2
 8008f40:	f043 0308 	orr.w	r3, r3, #8
 8008f44:	60bb      	str	r3, [r7, #8]
 8008f46:	68b3      	ldr	r3, [r6, #8]
 8008f48:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008f4a:	2180      	movs	r1, #128	@ 0x80
 8008f4c:	f043 0308 	orr.w	r3, r3, #8
 8008f50:	60b3      	str	r3, [r6, #8]
 8008f52:	f8a0 107e 	strh.w	r1, [r0, #126]	@ 0x7e
  pHandle->_Super.Sector = SECTOR_5;
 8008f56:	2204      	movs	r2, #4
  pHandle->BrakeActionLock = false;
 8008f58:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 8008f5a:	f884 206a 	strb.w	r2, [r4, #106]	@ 0x6a
  pHandle->BrakeActionLock = false;
 8008f5e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8008f62:	b003      	add	sp, #12
 8008f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8008f66:	6802      	ldr	r2, [r0, #0]
 8008f68:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 8008f6a:	e9c0 331c 	strd	r3, r3, [r0, #112]	@ 0x70
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8008f6e:	6942      	ldr	r2, [r0, #20]
 8008f70:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 8008f72:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    pHandle->PhaseCOffset = 0U;
 8008f76:	6783      	str	r3, [r0, #120]	@ 0x78
  CLEAR_BIT(TIMx->CCER, Channels);
 8008f78:	6a2b      	ldr	r3, [r5, #32]
 8008f7a:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8008f7e:	f023 0305 	bic.w	r3, r3, #5
 8008f82:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8008f84:	2304      	movs	r3, #4
 8008f86:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 8008f8a:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8008f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800907c <R3_2_CurrentReadingPolarization+0x158>)
 8008f90:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8008f92:	4b3b      	ldr	r3, [pc, #236]	@ (8009080 <R3_2_CurrentReadingPolarization+0x15c>)
 8008f94:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008f96:	2380      	movs	r3, #128	@ 0x80
 8008f98:	f8a0 307e 	strh.w	r3, [r0, #126]	@ 0x7e
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008f9c:	f7ff fce8 	bl	8008970 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8008fa0:	4a38      	ldr	r2, [pc, #224]	@ (8009084 <R3_2_CurrentReadingPolarization+0x160>)
 8008fa2:	686b      	ldr	r3, [r5, #4]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	2b70      	cmp	r3, #112	@ 0x70
 8008fa8:	d1fb      	bne.n	8008fa2 <R3_2_CurrentReadingPolarization+0x7e>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	4a32      	ldr	r2, [pc, #200]	@ (8009078 <R3_2_CurrentReadingPolarization+0x154>)
 8008fae:	4013      	ands	r3, r2
 8008fb0:	f043 0308 	orr.w	r3, r3, #8
 8008fb4:	60bb      	str	r3, [r7, #8]
 8008fb6:	68b3      	ldr	r3, [r6, #8]
 8008fb8:	4013      	ands	r3, r2
 8008fba:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 8008fbe:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8008fc2:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 8008fc4:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 8008fc8:	f104 0644 	add.w	r6, r4, #68	@ 0x44
 8008fcc:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f7ff fb01 	bl	80085dc <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f7ff fd12 	bl	8008a04 <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  pHandle->PolarizationSector=SECTOR_1;
 8008fe6:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 8008fea:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008fee:	4b26      	ldr	r3, [pc, #152]	@ (8009088 <R3_2_CurrentReadingPolarization+0x164>)
 8008ff0:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f7ff fcbc 	bl	8008970 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 8008ff8:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
    waitForPolarizationEnd(TIMx,
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 8009002:	4631      	mov	r1, r6
 8009004:	4628      	mov	r0, r5
 8009006:	f7ff fae9 	bl	80085dc <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800900a:	4620      	mov	r0, r4
 800900c:	f7ff fcfa 	bl	8008a04 <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009010:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	@ 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009014:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8009016:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009018:	0912      	lsrs	r2, r2, #4
 800901a:	e9c4 121c 	strd	r1, r2, [r4, #112]	@ 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800901e:	091b      	lsrs	r3, r3, #4
 8009020:	67a3      	str	r3, [r4, #120]	@ 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009022:	9900      	ldr	r1, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009024:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009026:	69ab      	ldr	r3, [r5, #24]
 8009028:	6162      	str	r2, [r4, #20]
 800902a:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.offsetCalibStatus = true;
 800902e:	2001      	movs	r0, #1
 8009030:	f884 006e 	strb.w	r0, [r4, #110]	@ 0x6e
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009034:	6021      	str	r1, [r4, #0]
 8009036:	61ab      	str	r3, [r5, #24]
 8009038:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800903a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	@ 0x7c
 800903e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009042:	61aa      	str	r2, [r5, #24]
 8009044:	69ea      	ldr	r2, [r5, #28]
 8009046:	f022 0208 	bic.w	r2, r2, #8
 800904a:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800904c:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800904e:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009050:	63eb      	str	r3, [r5, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009052:	69ab      	ldr	r3, [r5, #24]
 8009054:	f043 0308 	orr.w	r3, r3, #8
 8009058:	61ab      	str	r3, [r5, #24]
 800905a:	69ab      	ldr	r3, [r5, #24]
 800905c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009060:	61ab      	str	r3, [r5, #24]
 8009062:	69eb      	ldr	r3, [r5, #28]
 8009064:	f043 0308 	orr.w	r3, r3, #8
 8009068:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800906a:	6a2b      	ldr	r3, [r5, #32]
 800906c:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8009070:	f043 0305 	orr.w	r3, r3, #5
 8009074:	622b      	str	r3, [r5, #32]
}
 8009076:	e76e      	b.n	8008f56 <R3_2_CurrentReadingPolarization+0x32>
 8009078:	7fffffc0 	.word	0x7fffffc0
 800907c:	08008881 	.word	0x08008881
 8009080:	08008841 	.word	0x08008841
 8009084:	02000070 	.word	0x02000070
 8009088:	080088d5 	.word	0x080088d5

0800908c <R3_2_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 800908c:	2800      	cmp	r0, #0
 800908e:	d03a      	beq.n	8009106 <R3_2_SetADCSampPointSectX+0x7a>
{
 8009090:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 8009092:	f8b0 3046 	ldrh.w	r3, [r0, #70]	@ 0x46
 8009096:	f8b0 e07c 	ldrh.w	lr, [r0, #124]	@ 0x7c
 800909a:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800909e:	ebae 0203 	sub.w	r2, lr, r3
 80090a2:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	@ 0xb2
 80090a6:	b292      	uxth	r2, r2
 80090a8:	42a2      	cmp	r2, r4
 80090aa:	d916      	bls.n	80090da <R3_2_SetADCSampPointSectX+0x4e>
      pHandle->_Super.Sector = SECTOR_5;
 80090ac:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 80090ae:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 80090b2:	f880 206a 	strb.w	r2, [r0, #106]	@ 0x6a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 80090b6:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80090b8:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 80090ba:	8fc5      	ldrh	r5, [r0, #62]	@ 0x3e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 80090bc:	f8b0 4040 	ldrh.w	r4, [r0, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 80090c0:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80090c4:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80090c6:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80090c8:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80090ca:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80090cc:	6852      	ldr	r2, [r2, #4]
 80090ce:	4b11      	ldr	r3, [pc, #68]	@ (8009114 <R3_2_SetADCSampPointSectX+0x88>)
 80090d0:	421a      	tst	r2, r3
 80090d2:	bf14      	ite	ne
 80090d4:	2001      	movne	r0, #1
 80090d6:	2000      	moveq	r0, #0
}
 80090d8:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 80090da:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
 80090de:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 80090e2:	fa1f fc8c 	uxth.w	ip, ip
 80090e6:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 80090ea:	d80d      	bhi.n	8009108 <R3_2_SetADCSampPointSectX+0x7c>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 80090ec:	4423      	add	r3, r4
 80090ee:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 80090f0:	459e      	cmp	lr, r3
 80090f2:	d8e1      	bhi.n	80090b8 <R3_2_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80090f4:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 80090f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80090fa:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 80090fe:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009102:	b29b      	uxth	r3, r3
 8009104:	e7d8      	b.n	80090b8 <R3_2_SetADCSampPointSectX+0x2c>
}
 8009106:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8009108:	f8b1 20b6 	ldrh.w	r2, [r1, #182]	@ 0xb6
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	b29b      	uxth	r3, r3
 8009110:	e7d2      	b.n	80090b8 <R3_2_SetADCSampPointSectX+0x2c>
 8009112:	bf00      	nop
 8009114:	02000070 	.word	0x02000070

08009118 <R3_2_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 8009118:	4602      	mov	r2, r0
 800911a:	2800      	cmp	r0, #0
 800911c:	d03e      	beq.n	800919c <R3_2_TIMx_UP_IRQHandler+0x84>
{
 800911e:	b570      	push	{r4, r5, r6, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009120:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8009124:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8009128:	68c8      	ldr	r0, [r1, #12]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800912a:	688c      	ldr	r4, [r1, #8]
    if (OPAMPParams != NULL)
 800912c:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8009130:	ea4f 0e83 	mov.w	lr, r3, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009134:	f8dc 104c 	ldr.w	r1, [ip, #76]	@ 0x4c
    if (OPAMPParams != NULL)
 8009138:	b1b0      	cbz	r0, 8009168 <R3_2_TIMx_UP_IRQHandler+0x50>
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 800913a:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1fc      	bne.n	800913a <R3_2_TIMx_UP_IRQHandler+0x22>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8009140:	eb00 030e 	add.w	r3, r0, lr
 8009144:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
      if (OpampConfig != OPAMP_UNCHANGED)
 8009146:	1c6e      	adds	r6, r5, #1
 8009148:	d005      	beq.n	8009156 <R3_2_TIMx_UP_IRQHandler+0x3e>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800914a:	68de      	ldr	r6, [r3, #12]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800914c:	6830      	ldr	r0, [r6, #0]
 800914e:	f420 7086 	bic.w	r0, r0, #268	@ 0x10c
 8009152:	4328      	orrs	r0, r5
 8009154:	6030      	str	r0, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8009156:	6d58      	ldr	r0, [r3, #84]	@ 0x54
      if (OpampConfig != OPAMP_UNCHANGED)
 8009158:	1c45      	adds	r5, r0, #1
 800915a:	d005      	beq.n	8009168 <R3_2_TIMx_UP_IRQHandler+0x50>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800915c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800915e:	682b      	ldr	r3, [r5, #0]
 8009160:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 8009164:	4303      	orrs	r3, r0
 8009166:	602b      	str	r3, [r5, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009168:	f8b2 307e 	ldrh.w	r3, [r2, #126]	@ 0x7e
 800916c:	f8dc 007c 	ldr.w	r0, [ip, #124]	@ 0x7c
 8009170:	4318      	orrs	r0, r3
 8009172:	64c8      	str	r0, [r1, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009174:	f8dc 0094 	ldr.w	r0, [ip, #148]	@ 0x94
 8009178:	f8dc 1064 	ldr.w	r1, [ip, #100]	@ 0x64
 800917c:	4303      	orrs	r3, r0
 800917e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009180:	6863      	ldr	r3, [r4, #4]
 8009182:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800918a:	2180      	movs	r1, #128	@ 0x80
 800918c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8009190:	6063      	str	r3, [r4, #4]
    tempPointer = &(pHandle->_Super.Motor);
 8009192:	f102 0068 	add.w	r0, r2, #104	@ 0x68
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009196:	f8a2 107e 	strh.w	r1, [r2, #126]	@ 0x7e
}
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop

080091a0 <R3_2_BRK2_IRQHandler>:
  if (MC_NULL == pHandle)
 80091a0:	b168      	cbz	r0, 80091be <R3_2_BRK2_IRQHandler+0x1e>
    if (false == pHandle->BrakeActionLock)
 80091a2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80091a6:	b92b      	cbnz	r3, 80091b4 <R3_2_BRK2_IRQHandler+0x14>
      if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 80091a8:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80091ac:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 80091b0:	2a02      	cmp	r2, #2
 80091b2:	d005      	beq.n	80091c0 <R3_2_BRK2_IRQHandler+0x20>
    pHandle->OverCurrentFlag = true;
 80091b4:	2301      	movs	r3, #1
 80091b6:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
    tempPointer = &(pHandle->_Super.Motor);
 80091ba:	3068      	adds	r0, #104	@ 0x68
 80091bc:	4770      	bx	lr
}
 80091be:	4770      	bx	lr
{
 80091c0:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80091c2:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80091c6:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	@ 0xac
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80091ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 80091cc:	62a5      	str	r5, [r4, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80091ce:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	@ 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80091d2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80091d6:	628c      	str	r4, [r1, #40]	@ 0x28
 80091d8:	6293      	str	r3, [r2, #40]	@ 0x28
    pHandle->OverCurrentFlag = true;
 80091da:	2301      	movs	r3, #1
 80091dc:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
}
 80091e0:	bc30      	pop	{r4, r5}
    tempPointer = &(pHandle->_Super.Motor);
 80091e2:	3068      	adds	r0, #104	@ 0x68
}
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop

080091e8 <R3_2_BRK_IRQHandler>:
  if (MC_NULL == pHandle)
 80091e8:	4603      	mov	r3, r0
 80091ea:	b160      	cbz	r0, 8009206 <R3_2_BRK_IRQHandler+0x1e>
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80091ec:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80091f0:	6891      	ldr	r1, [r2, #8]
 80091f2:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
    pHandle->OverVoltageFlag = true;
 80091f4:	f240 1c01 	movw	ip, #257	@ 0x101
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80091f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091fc:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->_Super.Motor);
 80091fe:	3068      	adds	r0, #104	@ 0x68
    pHandle->OverVoltageFlag = true;
 8009200:	f8a3 c083 	strh.w	ip, [r3, #131]	@ 0x83
    tempPointer = &(pHandle->_Super.Motor);
 8009204:	4770      	bx	lr
}
 8009206:	4770      	bx	lr

08009208 <R3_2_IsOverCurrentOccurred>:
{
 8009208:	4603      	mov	r3, r0
  if (true == pHandle->OverVoltageFlag)
 800920a:	f890 0083 	ldrb.w	r0, [r0, #131]	@ 0x83
 800920e:	b160      	cbz	r0, 800922a <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 8009216:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8009218:	2002      	movs	r0, #2
  if (true == pHandle->OverCurrentFlag)
 800921a:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800921e:	b11a      	cbz	r2, 8009228 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    retVal |= MC_BREAK_IN;
 8009226:	4608      	mov	r0, r1
}
 8009228:	4770      	bx	lr
 800922a:	2140      	movs	r1, #64	@ 0x40
 800922c:	e7f5      	b.n	800921a <R3_2_IsOverCurrentOccurred+0x12>
 800922e:	bf00      	nop

08009230 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 8009230:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
{
 8009234:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 8009236:	2900      	cmp	r1, #0
 8009238:	d13d      	bne.n	80092b6 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800923a:	f8d0 5088 	ldr.w	r5, [r0, #136]	@ 0x88
 800923e:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009240:	699a      	ldr	r2, [r3, #24]
 8009242:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009246:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800924a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800924e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009250:	6a1a      	ldr	r2, [r3, #32]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009258:	6a1a      	ldr	r2, [r3, #32]
 800925a:	f022 0204 	bic.w	r2, r2, #4
 800925e:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009260:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009262:	f895 20c0 	ldrb.w	r2, [r5, #192]	@ 0xc0
 8009266:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009268:	f103 0418 	add.w	r4, r3, #24
 800926c:	d030      	beq.n	80092d0 <R3_2_RLDetectionModeEnable+0xa0>
    else if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 800926e:	2a02      	cmp	r2, #2
 8009270:	d10f      	bne.n	8009292 <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009272:	699a      	ldr	r2, [r3, #24]
 8009274:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8009278:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800927c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009280:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009282:	6a1a      	ldr	r2, [r3, #32]
 8009284:	f042 0210 	orr.w	r2, r2, #16
 8009288:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009290:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009292:	6862      	ldr	r2, [r4, #4]
 8009294:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009298:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800929c:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 80092a0:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80092a2:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 80092a4:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 80092a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80092aa:	621a      	str	r2, [r3, #32]
 80092ac:	6a1a      	ldr	r2, [r3, #32]
 80092ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092b2:	621a      	str	r2, [r3, #32]
 80092b4:	6701      	str	r1, [r0, #112]	@ 0x70
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80092b6:	4b0f      	ldr	r3, [pc, #60]	@ (80092f4 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 80092b8:	490f      	ldr	r1, [pc, #60]	@ (80092f8 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80092ba:	4a10      	ldr	r2, [pc, #64]	@ (80092fc <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80092bc:	4c10      	ldr	r4, [pc, #64]	@ (8009300 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80092be:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 80092c0:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80092c2:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80092c4:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 80092c8:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 80092ca:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
}
 80092ce:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80092d6:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 80092da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092de:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80092e0:	6a1a      	ldr	r2, [r3, #32]
 80092e2:	f022 0210 	bic.w	r2, r2, #16
 80092e6:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80092e8:	6a1a      	ldr	r2, [r3, #32]
 80092ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092ee:	621a      	str	r2, [r3, #32]
}
 80092f0:	e7cf      	b.n	8009292 <R3_2_RLDetectionModeEnable+0x62>
 80092f2:	bf00      	nop
 80092f4:	08008ad9 	.word	0x08008ad9
 80092f8:	08008b25 	.word	0x08008b25
 80092fc:	08008a05 	.word	0x08008a05
 8009300:	08008a85 	.word	0x08008a85

08009304 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 8009304:	f890 306d 	ldrb.w	r3, [r0, #109]	@ 0x6d
 8009308:	2b00      	cmp	r3, #0
 800930a:	d03d      	beq.n	8009388 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800930c:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8009310:	688b      	ldr	r3, [r1, #8]
{
 8009312:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009314:	699a      	ldr	r2, [r3, #24]
 8009316:	4c41      	ldr	r4, [pc, #260]	@ (800941c <R3_2_RLDetectionModeDisable+0x118>)
 8009318:	4022      	ands	r2, r4
 800931a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800931e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009320:	6a1a      	ldr	r2, [r3, #32]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009328:	f891 10c0 	ldrb.w	r1, [r1, #192]	@ 0xc0
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800932c:	f8b0 207c 	ldrh.w	r2, [r0, #124]	@ 0x7c
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009330:	2901      	cmp	r1, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009332:	ea4f 0252 	mov.w	r2, r2, lsr #1
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009336:	d028      	beq.n	800938a <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8009338:	2902      	cmp	r1, #2
 800933a:	d04a      	beq.n	80093d2 <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800933c:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800933e:	6999      	ldr	r1, [r3, #24]
 8009340:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8009344:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 8009348:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 800934c:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800934e:	6a19      	ldr	r1, [r3, #32]
 8009350:	f041 0110 	orr.w	r1, r1, #16
 8009354:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009356:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009358:	69d9      	ldr	r1, [r3, #28]
 800935a:	4021      	ands	r1, r4
 800935c:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 8009360:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009362:	6a19      	ldr	r1, [r3, #32]
 8009364:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8009368:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800936a:	492d      	ldr	r1, [pc, #180]	@ (8009420 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800936c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800936e:	4a2d      	ldr	r2, [pc, #180]	@ (8009424 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009370:	6001      	str	r1, [r0, #0]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8009372:	492d      	ldr	r1, [pc, #180]	@ (8009428 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8009374:	4c2d      	ldr	r4, [pc, #180]	@ (800942c <R3_2_RLDetectionModeDisable+0x128>)
 8009376:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8009378:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800937a:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800937e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8009382:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
}
 8009386:	4770      	bx	lr
 8009388:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800938a:	6a19      	ldr	r1, [r3, #32]
 800938c:	f041 0104 	orr.w	r1, r1, #4
 8009390:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009392:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009394:	6999      	ldr	r1, [r3, #24]
 8009396:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800939a:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 800939e:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 80093a2:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80093a4:	6a19      	ldr	r1, [r3, #32]
 80093a6:	f041 0110 	orr.w	r1, r1, #16
 80093aa:	6219      	str	r1, [r3, #32]
 80093ac:	6a19      	ldr	r1, [r3, #32]
 80093ae:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80093b2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80093b4:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80093b6:	69d9      	ldr	r1, [r3, #28]
 80093b8:	4021      	ands	r1, r4
 80093ba:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 80093be:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80093c0:	6a19      	ldr	r1, [r3, #32]
 80093c2:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80093c6:	6219      	str	r1, [r3, #32]
 80093c8:	6a19      	ldr	r1, [r3, #32]
 80093ca:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80093ce:	6219      	str	r1, [r3, #32]
}
 80093d0:	e7cb      	b.n	800936a <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 80093d2:	6a19      	ldr	r1, [r3, #32]
 80093d4:	f021 0104 	bic.w	r1, r1, #4
 80093d8:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80093da:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80093dc:	6999      	ldr	r1, [r3, #24]
 80093de:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80093e2:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 80093e6:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 80093ea:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80093ec:	6a19      	ldr	r1, [r3, #32]
 80093ee:	f041 0110 	orr.w	r1, r1, #16
 80093f2:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80093f4:	6a19      	ldr	r1, [r3, #32]
 80093f6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80093fa:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80093fc:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80093fe:	69d9      	ldr	r1, [r3, #28]
 8009400:	4021      	ands	r1, r4
 8009402:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 8009406:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009408:	6a19      	ldr	r1, [r3, #32]
 800940a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800940e:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009410:	6a19      	ldr	r1, [r3, #32]
 8009412:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8009416:	6219      	str	r1, [r3, #32]
}
 8009418:	e7a7      	b.n	800936a <R3_2_RLDetectionModeDisable+0x66>
 800941a:	bf00      	nop
 800941c:	fffeff8c 	.word	0xfffeff8c
 8009420:	080086cd 	.word	0x080086cd
 8009424:	08008a05 	.word	0x08008a05
 8009428:	08008971 	.word	0x08008971
 800942c:	08008921 	.word	0x08008921

08009430 <R3_2_RLDetectionModeSetDuty>:
  if (MC_NULL == pHdl)
 8009430:	4603      	mov	r3, r0
 8009432:	2800      	cmp	r0, #0
 8009434:	d03b      	beq.n	80094ae <R3_2_RLDetectionModeSetDuty+0x7e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009436:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800943a:	f8b0 007c 	ldrh.w	r0, [r0, #124]	@ 0x7c
{
 800943e:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009440:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009442:	69e2      	ldr	r2, [r4, #28]
 8009444:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8009448:	fb00 f101 	mul.w	r1, r0, r1
 800944c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8009450:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 8009452:	f04f 0c01 	mov.w	ip, #1
 8009456:	f442 42e0 	orr.w	r2, r2, #28672	@ 0x7000
    pHandle->_Super.CntPhA = (uint16_t)val;
 800945a:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    pHandle->ADCRegularLocked = true;
 800945c:	f883 c08c 	strb.w	ip, [r3, #140]	@ 0x8c
 8009460:	61e2      	str	r2, [r4, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8009462:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009466:	1a80      	subs	r0, r0, r2
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8009468:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
  WRITE_REG(TIMx->CCR4, CompareValue);
 800946c:	6420      	str	r0, [r4, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800946e:	63e2      	str	r2, [r4, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009470:	6361      	str	r1, [r4, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009472:	6862      	ldr	r2, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009474:	f8b3 0044 	ldrh.w	r0, [r3, #68]	@ 0x44
 8009478:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800947c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009480:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 8009484:	2103      	movs	r1, #3
 8009486:	6062      	str	r2, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009488:	4560      	cmp	r0, ip
    pHdl->Sector = SECTOR_4;
 800948a:	f883 106a 	strb.w	r1, [r3, #106]	@ 0x6a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800948e:	6862      	ldr	r2, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009490:	d007      	beq.n	80094a2 <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009492:	4b07      	ldr	r3, [pc, #28]	@ (80094b0 <R3_2_RLDetectionModeSetDuty+0x80>)
}
 8009494:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009498:	421a      	tst	r2, r3
 800949a:	bf14      	ite	ne
 800949c:	4660      	movne	r0, ip
 800949e:	2000      	moveq	r0, #0
}
 80094a0:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 80094a2:	2200      	movs	r2, #0
}
 80094a4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 80094a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
}
 80094ac:	4770      	bx	lr
 80094ae:	4770      	bx	lr
 80094b0:	02000070 	.word	0x02000070

080094b4 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80094b4:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 80094b8:	8c02      	ldrh	r2, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80094ba:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80094bc:	4494      	add	ip, r2
 80094be:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 80094c2:	b430      	push	{r4, r5}
 80094c4:	2500      	movs	r5, #0
 80094c6:	f36c 050f 	bfi	r5, ip, #0, #16
 80094ca:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80094ce:	b14b      	cbz	r3, 80094e4 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 80094d0:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 80094d2:	2300      	movs	r3, #0
 80094d4:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80094d6:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 80094d8:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80094dc:	8b01      	ldrh	r1, [r0, #24]
 80094de:	b29a      	uxth	r2, r3
 80094e0:	4291      	cmp	r1, r2
 80094e2:	d8f7      	bhi.n	80094d4 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 80094e4:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 80094e6:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 80094e8:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 80094ec:	bc30      	pop	{r4, r5}
 80094ee:	4770      	bx	lr

080094f0 <RVBS_Init>:
{
 80094f0:	b510      	push	{r4, lr}
 80094f2:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80094f4:	300c      	adds	r0, #12
 80094f6:	f7fa fb7f 	bl	8003bf8 <RCM_RegisterRegConv>
 80094fa:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
    RVBS_Clear(pHandle);
 80094fe:	4620      	mov	r0, r4
 8009500:	f7ff ffd8 	bl	80094b4 <RVBS_Clear>
}
 8009504:	bd10      	pop	{r4, pc}
 8009506:	bf00      	nop

08009508 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8009508:	8b42      	ldrh	r2, [r0, #26]
 800950a:	8b81      	ldrh	r1, [r0, #28]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800950c:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800950e:	428a      	cmp	r2, r1
 8009510:	d010      	beq.n	8009534 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009512:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 8009516:	459c      	cmp	ip, r3
 8009518:	d80a      	bhi.n	8009530 <RVBS_CheckFaultState+0x28>
{
 800951a:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800951c:	7f84      	ldrb	r4, [r0, #30]
 800951e:	b994      	cbnz	r4, 8009546 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8009520:	4299      	cmp	r1, r3
 8009522:	d914      	bls.n	800954e <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8009524:	2301      	movs	r3, #1
 8009526:	7783      	strb	r3, [r0, #30]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8009528:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800952a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800952e:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8009530:	2004      	movs	r0, #4
 8009532:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009534:	429a      	cmp	r2, r3
 8009536:	d30c      	bcc.n	8009552 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009538:	8c00      	ldrh	r0, [r0, #32]
 800953a:	4298      	cmp	r0, r3
 800953c:	bf94      	ite	ls
 800953e:	2000      	movls	r0, #0
 8009540:	2001      	movhi	r0, #1
 8009542:	0080      	lsls	r0, r0, #2
 8009544:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009546:	429a      	cmp	r2, r3
 8009548:	d2ee      	bcs.n	8009528 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 800954a:	2300      	movs	r3, #0
 800954c:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 800954e:	2002      	movs	r0, #2
 8009550:	e7eb      	b.n	800952a <RVBS_CheckFaultState+0x22>
 8009552:	2002      	movs	r0, #2
}
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop

08009558 <RVBS_CalcAvVbus>:
{
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800955c:	f890 002a 	ldrb.w	r0, [r0, #42]	@ 0x2a
 8009560:	f7fa fc44 	bl	8003dec <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8009564:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009568:	4298      	cmp	r0, r3
 800956a:	d024      	beq.n	80095b6 <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 800956c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800956e:	f894 5029 	ldrb.w	r5, [r4, #41]	@ 0x29
 8009572:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009576:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 800957a:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800957e:	d00d      	beq.n	800959c <RVBS_CalcAvVbus+0x44>
 8009580:	3a01      	subs	r2, #1
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8009588:	3b02      	subs	r3, #2
      wtemp = 0u;
 800958a:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800958c:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009590:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 8009592:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009594:	d1fa      	bne.n	800958c <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 8009596:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800959a:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800959c:	f10e 3eff 	add.w	lr, lr, #4294967295
 80095a0:	4575      	cmp	r5, lr
        pHandle->index++;
 80095a2:	bf34      	ite	cc
 80095a4:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 80095a6:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80095a8:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80095aa:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 80095ac:	bf34      	ite	cc
 80095ae:	f884 5029 	strbcc.w	r5, [r4, #41]	@ 0x29
        pHandle->index = 0U;
 80095b2:	f884 3029 	strbcs.w	r3, [r4, #41]	@ 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80095b6:	4620      	mov	r0, r4
 80095b8:	f7ff ffa6 	bl	8009508 <RVBS_CheckFaultState>
 80095bc:	8120      	strh	r0, [r4, #8]
}
 80095be:	bd38      	pop	{r3, r4, r5, pc}

080095c0 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 80095c0:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 80095c2:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 80095c4:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 80095c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 80095cc:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 80095ce:	4770      	bx	lr

080095d0 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 80095d0:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 80095d4:	2901      	cmp	r1, #1
{
 80095d6:	b410      	push	{r4}
 80095d8:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal. */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80095da:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 80095dc:	d909      	bls.n	80095f2 <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 80095de:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 80095e0:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 80095e2:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 80095e4:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80095e6:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 80095ea:	609a      	str	r2, [r3, #8]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 80095ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f0:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 80095f2:	d005      	beq.n	8009600 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80095f4:	fb92 f0f4 	sdiv	r0, r2, r4
}
 80095f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 80095fc:	609a      	str	r2, [r3, #8]
}
 80095fe:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009600:	6840      	ldr	r0, [r0, #4]
 8009602:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 8009606:	2100      	movs	r1, #0
}
 8009608:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 800960c:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 800960e:	609a      	str	r2, [r3, #8]
}
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop

08009614 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8009614:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 8009616:	fab0 f080 	clz	r0, r0
 800961a:	0940      	lsrs	r0, r0, #5
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop

08009620 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8009620:	2800      	cmp	r0, #0
 8009622:	bfb8      	it	lt
 8009624:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 8009626:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800962a:	d213      	bcs.n	8009654 <getScalingFactor+0x34>
 800962c:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800962e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009632:	e001      	b.n	8009638 <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 8009634:	2b20      	cmp	r3, #32
 8009636:	d00a      	beq.n	800964e <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8009638:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 800963c:	4290      	cmp	r0, r2
 800963e:	4619      	mov	r1, r3
 8009640:	f103 0301 	add.w	r3, r3, #1
 8009644:	d3f6      	bcc.n	8009634 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8009646:	3901      	subs	r1, #1
 8009648:	2001      	movs	r0, #1
 800964a:	4088      	lsls	r0, r1
 800964c:	4770      	bx	lr
 800964e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009652:	4770      	bx	lr
    if (TargetAbs >= limit)
 8009654:	2001      	movs	r0, #1
}
 8009656:	4770      	bx	lr

08009658 <REMNG_ExecRamp>:
{
 8009658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800965c:	4604      	mov	r4, r0
 800965e:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8009660:	6880      	ldr	r0, [r0, #8]
 8009662:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 8009664:	4615      	mov	r5, r2
 8009666:	b962      	cbnz	r2, 8009682 <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8009668:	4608      	mov	r0, r1
 800966a:	f7ff ffd9 	bl	8009620 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800966e:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8009672:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009674:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 8009676:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800967a:	60a6      	str	r6, [r4, #8]
}
 800967c:	2001      	movs	r0, #1
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8009682:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8009686:	eba1 0708 	sub.w	r7, r1, r8
 800968a:	4638      	mov	r0, r7
 800968c:	f7ff ffc8 	bl	8009620 <getScalingFactor>
 8009690:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8009692:	4640      	mov	r0, r8
 8009694:	f7ff ffc4 	bl	8009620 <getScalingFactor>
 8009698:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800969a:	4630      	mov	r0, r6
 800969c:	f7ff ffc0 	bl	8009620 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 80096a0:	45ca      	cmp	sl, r9
 80096a2:	d318      	bcc.n	80096d6 <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 80096a4:	4548      	cmp	r0, r9
 80096a6:	bf28      	it	cs
 80096a8:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 80096aa:	fb08 f300 	mul.w	r3, r8, r0
 80096ae:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80096b0:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 80096b2:	4a0b      	ldr	r2, [pc, #44]	@ (80096e0 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 80096b4:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80096b6:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 80096ba:	fba2 2303 	umull	r2, r3, r2, r3
 80096be:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80096c0:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 80096c2:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 80096c6:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 80096c8:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 80096cc:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 80096d0:	2001      	movs	r0, #1
 80096d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 80096d6:	4550      	cmp	r0, sl
 80096d8:	bf28      	it	cs
 80096da:	4650      	movcs	r0, sl
 80096dc:	e7e5      	b.n	80096aa <REMNG_ExecRamp+0x52>
 80096de:	bf00      	nop
 80096e0:	10624dd3 	.word	0x10624dd3

080096e4 <RUC_Init>:
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS,
						STO_Handle_t *pSNSL,
						PWMC_Handle_t *pPWM)
{
 80096e4:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 80096e6:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80096e8:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 80096ea:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 80096ee:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 80096f2:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 80096f4:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 80096f8:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80096fa:	b309      	cbz	r1, 8009740 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80096fc:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80096fe:	b323      	cbz	r3, 800974a <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009700:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009702:	b32b      	cbz	r3, 8009750 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009704:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009706:	b333      	cbz	r3, 8009756 <RUC_Init+0x72>
 8009708:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 800970a:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800970e:	b1cb      	cbz	r3, 8009744 <RUC_Init+0x60>
 8009710:	2204      	movs	r2, #4
 8009712:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009716:	8803      	ldrh	r3, [r0, #0]
 8009718:	4910      	ldr	r1, [pc, #64]	@ (800975c <RUC_Init+0x78>)
 800971a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800971e:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009722:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009726:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800972a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800972e:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009730:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009732:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 8009734:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009738:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 800973c:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 8009740:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009744:	f10c 32ff 	add.w	r2, ip, #4294967295
 8009748:	e7e5      	b.n	8009716 <RUC_Init+0x32>
      bPhase++;
 800974a:	f04f 0c02 	mov.w	ip, #2
 800974e:	e7f9      	b.n	8009744 <RUC_Init+0x60>
 8009750:	f04f 0c03 	mov.w	ip, #3
 8009754:	e7f6      	b.n	8009744 <RUC_Init+0x60>
 8009756:	f04f 0c04 	mov.w	ip, #4
 800975a:	e7f3      	b.n	8009744 <RUC_Init+0x60>
 800975c:	10624dd3 	.word	0x10624dd3

08009760 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8009760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8009764:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8009766:	f8d0 8068 	ldr.w	r8, [r0, #104]	@ 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 800976a:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 800976c:	2600      	movs	r6, #0
{
 800976e:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 8009770:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 8009774:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    pHandle->OTFSCLowside = false;
 8009778:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 800977c:	4638      	mov	r0, r7

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800977e:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 8009780:	f000 fc78 	bl	800a074 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8009784:	2104      	movs	r1, #4
 8009786:	4640      	mov	r0, r8
 8009788:	f000 f906 	bl	8009998 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800978c:	8861      	ldrh	r1, [r4, #2]
 800978e:	fb11 f105 	smulbb	r1, r1, r5
 8009792:	b209      	sxth	r1, r1
 8009794:	4638      	mov	r0, r7
 8009796:	f000 fd23 	bl	800a1e0 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800979a:	4632      	mov	r2, r6
 800979c:	4631      	mov	r1, r6
 800979e:	4640      	mov	r0, r8
 80097a0:	f000 f8fe 	bl	80099a0 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 80097a4:	8a21      	ldrh	r1, [r4, #16]
 80097a6:	89a2      	ldrh	r2, [r4, #12]
 80097a8:	fb11 f105 	smulbb	r1, r1, r5
 80097ac:	b209      	sxth	r1, r1
 80097ae:	4640      	mov	r0, r8
 80097b0:	f000 f8f6 	bl	80099a0 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 80097b4:	89e1      	ldrh	r1, [r4, #14]
 80097b6:	89a2      	ldrh	r2, [r4, #12]
 80097b8:	fb11 f105 	smulbb	r1, r1, r5
 80097bc:	b209      	sxth	r1, r1
 80097be:	4638      	mov	r0, r7
 80097c0:	f000 fd16 	bl	800a1f0 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 80097c4:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80097c6:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 80097c8:	4a06      	ldr	r2, [pc, #24]	@ (80097e4 <RUC_Clear+0x84>)

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 80097ca:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80097ce:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 80097d2:	fba2 2303 	umull	r2, r3, r2, r3
 80097d6:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80097d8:	6962      	ldr	r2, [r4, #20]
 80097da:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 80097dc:	3301      	adds	r3, #1
 80097de:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 80097e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e4:	10624dd3 	.word	0x10624dd3

080097e8 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 80097e8:	8883      	ldrh	r3, [r0, #4]
{
 80097ea:	b510      	push	{r4, lr}
 80097ec:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 80097ee:	bb43      	cbnz	r3, 8009842 <RUC_Exec+0x5a>

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 80097f0:	68a0      	ldr	r0, [r4, #8]
 80097f2:	b328      	cbz	r0, 8009840 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed.*/
        /* Gives the next command to STC and VSS.*/
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 80097f4:	8881      	ldrh	r1, [r0, #4]
 80097f6:	88e3      	ldrh	r3, [r4, #6]
 80097f8:	8802      	ldrh	r2, [r0, #0]
 80097fa:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80097fc:	fb11 f103 	smulbb	r1, r1, r3
 8009800:	b209      	sxth	r1, r1
 8009802:	f000 f8cd 	bl	80099a0 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	88e0      	ldrh	r0, [r4, #6]
 800980a:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 800980c:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800980e:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8009812:	b209      	sxth	r1, r1
 8009814:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8009816:	f000 fceb 	bl	800a1f0 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks.*/
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800981a:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800981c:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800981e:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009820:	4a0b      	ldr	r2, [pc, #44]	@ (8009850 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /*Set the next phases parameter pointer.*/
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8009822:	6889      	ldr	r1, [r1, #8]
 8009824:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009826:	fb00 f303 	mul.w	r3, r0, r3
 800982a:	fba2 2303 	umull	r2, r3, r2, r3

        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
 800982e:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009832:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8009834:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8009836:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8009838:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800983a:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 800983e:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8009840:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 8009842:	3b01      	subs	r3, #1
 8009844:	b29b      	uxth	r3, r3
 8009846:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0d1      	beq.n	80097f0 <RUC_Exec+0x8>
  bool retVal = true;
 800984c:	2001      	movs	r0, #1
}
 800984e:	bd10      	pop	{r4, pc}
 8009850:	10624dd3 	.word	0x10624dd3

08009854 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8009854:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8009858:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800985c:	4282      	cmp	r2, r0
 800985e:	bf34      	ite	cc
 8009860:	2000      	movcc	r0, #0
 8009862:	2001      	movcs	r0, #1
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop

08009868 <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8009868:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800986c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8009870:	f8d2 c002 	ldr.w	ip, [r2, #2]
 8009874:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8009878:	4618      	mov	r0, r3
 800987a:	8813      	ldrh	r3, [r2, #0]
 800987c:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 800987e:	2001      	movs	r0, #1
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop

08009884 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 8009884:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop

0800988c <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800988c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009890:	0089      	lsls	r1, r1, #2
 8009892:	f101 0308 	add.w	r3, r1, #8
 8009896:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8009898:	4408      	add	r0, r1
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800989a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800989e:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80098a2:	8983      	ldrh	r3, [r0, #12]
 80098a4:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 80098a6:	2001      	movs	r0, #1
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop

080098ac <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 80098ac:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop

080098b4 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 80098b4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop

080098bc <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 80098bc:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop

080098c4 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 80098c4:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 80098c8:	4603      	mov	r3, r0
 80098ca:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 80098cc:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 80098d0:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 80098d4:	bfb8      	it	lt
 80098d6:	4249      	neglt	r1, r1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80098d8:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80098dc:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80098de:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 80098e0:	8a9c      	ldrh	r4, [r3, #20]
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 80098e2:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 80098e6:	bfb8      	it	lt
 80098e8:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80098ea:	458e      	cmp	lr, r1
 80098ec:	d816      	bhi.n	800991c <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 80098ee:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 80098f2:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 80098f6:	bfb8      	it	lt
 80098f8:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80098fc:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 8009900:	bfb8      	it	lt
 8009902:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8009906:	45f4      	cmp	ip, lr
 8009908:	d308      	bcc.n	800991c <SPD_IsMecSpeedReliable+0x58>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 800990a:	428c      	cmp	r4, r1
 800990c:	d306      	bcc.n	800991c <SPD_IsMecSpeedReliable+0x58>
        bSpeedErrorNumber++;
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800990e:	4290      	cmp	r0, r2
 8009910:	d809      	bhi.n	8009926 <SPD_IsMecSpeedReliable+0x62>
      {
        bSpeedErrorNumber = 0u;
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8009912:	1a10      	subs	r0, r2, r0
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009914:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8009916:	bf18      	it	ne
 8009918:	2001      	movne	r0, #1
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800991a:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800991c:	4290      	cmp	r0, r2
 800991e:	d9f8      	bls.n	8009912 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 8009920:	3201      	adds	r2, #1
 8009922:	b2d2      	uxtb	r2, r2
 8009924:	e7f5      	b.n	8009912 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 8009926:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009928:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800992a:	2001      	movs	r0, #1
}
 800992c:	bd10      	pop	{r4, pc}
 800992e:	bf00      	nop

08009930 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8009930:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8009934:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 8009938:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800993c:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8009940:	b200      	sxth	r0, r0
 8009942:	4770      	bx	lr

08009944 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009944:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 8009948:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800994a:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 800994e:	6142      	str	r2, [r0, #20]
{
 8009950:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8009952:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8009956:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8009958:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800995a:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800995e:	0409      	lsls	r1, r1, #16
 8009960:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8009964:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009966:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 800996a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800996c:	6183      	str	r3, [r0, #24]
}
 800996e:	4770      	bx	lr

08009970 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8009970:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009972:	4770      	bx	lr

08009974 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8009974:	6940      	ldr	r0, [r0, #20]
 8009976:	4770      	bx	lr

08009978 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009978:	7803      	ldrb	r3, [r0, #0]
 800997a:	2b03      	cmp	r3, #3
 800997c:	d000      	beq.n	8009980 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800997e:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8009980:	6900      	ldr	r0, [r0, #16]
 8009982:	2100      	movs	r1, #0
 8009984:	f7fe bd4c 	b.w	8008420 <PID_SetIntegralTerm>

08009988 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8009988:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop

08009990 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8009990:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop

08009998 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009998:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800999a:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800999c:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800999e:	4770      	bx	lr

080099a0 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 80099a0:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80099a2:	7803      	ldrb	r3, [r0, #0]
 80099a4:	2b04      	cmp	r3, #4
{
 80099a6:	4604      	mov	r4, r0
 80099a8:	460d      	mov	r5, r1
 80099aa:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80099ac:	d01d      	beq.n	80099ea <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80099ae:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80099b0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80099b4:	4299      	cmp	r1, r3
 80099b6:	dd01      	ble.n	80099bc <STC_ExecRamp+0x1c>
 80099b8:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80099bc:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 80099c0:	428b      	cmp	r3, r1
 80099c2:	dcf9      	bgt.n	80099b8 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80099c4:	8c23      	ldrh	r3, [r4, #32]
 80099c6:	4299      	cmp	r1, r3
 80099c8:	da03      	bge.n	80099d2 <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 80099ca:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 80099ce:	428b      	cmp	r3, r1
 80099d0:	dbf2      	blt.n	80099b8 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 80099d2:	b9a6      	cbnz	r6, 80099fe <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 80099d4:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 80099d6:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 80099d8:	2b03      	cmp	r3, #3
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 80099da:	bf0c      	ite	eq
 80099dc:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 80099de:	60a5      	strne	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 80099e0:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 80099e2:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 80099e4:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 80099e6:	2001      	movs	r0, #1
}
 80099e8:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 80099ea:	f7ff ffd1 	bl	8009990 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 80099ee:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80099f0:	42ab      	cmp	r3, r5
 80099f2:	dbe1      	blt.n	80099b8 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 80099f4:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 80099f8:	42ab      	cmp	r3, r5
 80099fa:	dcdd      	bgt.n	80099b8 <STC_ExecRamp+0x18>
 80099fc:	e7e9      	b.n	80099d2 <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80099fe:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8009a00:	4a06      	ldr	r2, [pc, #24]	@ (8009a1c <STC_ExecRamp+0x7c>)
        pHandle->TargetFinal = hTargetFinal;
 8009a02:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8009a04:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8009a08:	fba2 2303 	umull	r2, r3, r2, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8009a0c:	1a28      	subs	r0, r5, r0
        wAux /= 1000U;
 8009a0e:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8009a10:	1c5e      	adds	r6, r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8009a12:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8009a14:	fb90 f0f6 	sdiv	r0, r0, r6
        pHandle->IncDecAmount = wAux1;
 8009a18:	e7e3      	b.n	80099e2 <STC_ExecRamp+0x42>
 8009a1a:	bf00      	nop
 8009a1c:	10624dd3 	.word	0x10624dd3

08009a20 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8009a20:	2300      	movs	r3, #0
 8009a22:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009a24:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009a26:	4770      	bx	lr

08009a28 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8009a28:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009a2a:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8009a2c:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009a2e:	2a04      	cmp	r2, #4
{
 8009a30:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009a32:	d012      	beq.n	8009a5a <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 8009a34:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8009a36:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8009a38:	d908      	bls.n	8009a4c <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8009a3a:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8009a3c:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8009a3e:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8009a40:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8009a42:	2a03      	cmp	r2, #3
 8009a44:	d011      	beq.n	8009a6a <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8009a46:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8009a48:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8009a4c:	d1f9      	bne.n	8009a42 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009a4e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8009a52:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009a54:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8009a56:	60c3      	str	r3, [r0, #12]
 8009a58:	e7f3      	b.n	8009a42 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 8009a5a:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8009a5c:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8009a5e:	d911      	bls.n	8009a84 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8009a60:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8009a62:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8009a64:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 8009a66:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009a68:	e7ed      	b.n	8009a46 <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8009a6a:	6960      	ldr	r0, [r4, #20]
 8009a6c:	f7ff ff22 	bl	80098b4 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8009a70:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8009a74:	b209      	sxth	r1, r1
 8009a76:	6920      	ldr	r0, [r4, #16]
 8009a78:	f7fe fd06 	bl	8008488 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8009a7c:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8009a7e:	0405      	lsls	r5, r0, #16
 8009a80:	60a5      	str	r5, [r4, #8]
}
 8009a82:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8009a84:	d1df      	bne.n	8009a46 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009a86:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8009a8a:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009a8c:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8009a8e:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009a90:	e7d9      	b.n	8009a46 <STC_CalcTorqueReference+0x1e>
 8009a92:	bf00      	nop

08009a94 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8009a94:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop

08009a9c <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009a9c:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	b299      	uxth	r1, r3
 8009aa4:	f361 020f 	bfi	r2, r1, #0, #16
 8009aa8:	0c1b      	lsrs	r3, r3, #16
 8009aaa:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009aae:	b082      	sub	sp, #8
}
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	b002      	add	sp, #8
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop

08009ab8 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8009ab8:	b510      	push	{r4, lr}
 8009aba:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8009abc:	6940      	ldr	r0, [r0, #20]
 8009abe:	f7ff fef9 	bl	80098b4 <SPD_GetAvrgMecSpeedUnit>
 8009ac2:	0400      	lsls	r0, r0, #16
 8009ac4:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009ac6:	bd10      	pop	{r4, pc}

08009ac8 <STO_PLL_CalcElAngle>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8009acc:	4604      	mov	r4, r0
{
 8009ace:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	f000 80cf 	beq.w	8009c74 <STO_PLL_CalcElAngle+0x1ac>
 8009ad6:	2900      	cmp	r1, #0
 8009ad8:	f000 80cf 	beq.w	8009c7a <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8009adc:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8009ae0:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 8009ae2:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8009ae6:	429f      	cmp	r7, r3
 8009ae8:	f340 80d1 	ble.w	8009c8e <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8009aec:	6683      	str	r3, [r0, #104]	@ 0x68
 8009aee:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009af0:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009af4:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009af6:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009afa:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009afc:	9201      	str	r2, [sp, #4]
 8009afe:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009b02:	f2c0 80c1 	blt.w	8009c88 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8009b06:	425b      	negs	r3, r3
 8009b08:	429e      	cmp	r6, r3
 8009b0a:	f340 80bd 	ble.w	8009c88 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009b0e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8009b12:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 8009b16:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8009b1a:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009b1e:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8009b20:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009b24:	f340 80b9 	ble.w	8009c9a <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8009b28:	6623      	str	r3, [r4, #96]	@ 0x60
 8009b2a:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009b2c:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 8009b30:	4543      	cmp	r3, r8
 8009b32:	f2c0 80a6 	blt.w	8009c82 <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8009b36:	425b      	negs	r3, r3
 8009b38:	4598      	cmp	r8, r3
 8009b3a:	f340 80a2 	ble.w	8009c82 <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009b3e:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8009b40:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009b44:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009b46:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8009b4a:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009b4e:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8009b52:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009b56:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009b5a:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009b5e:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8009b60:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8009b64:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8009b68:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b6c:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b6e:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b70:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009b72:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b74:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009b76:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8009b7a:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009b7e:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009b82:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8009b86:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009b8a:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8009b8c:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 8009b90:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 8009b92:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009b96:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8009b9a:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009b9e:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8009ba0:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 8009ba4:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 8009ba8:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009bac:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 8009bb0:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 8009bb2:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 8009bb6:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8009bba:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009bbe:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 8009bc0:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8009bc4:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8009bc8:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8009bcc:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 8009bd0:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 8009bd4:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009bd8:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009bdc:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8009be0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 8009be4:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 8009be8:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 8009bec:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 8009bf0:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 8009bf4:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d154      	bne.n	8009ca6 <STO_PLL_CalcElAngle+0x1de>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8009c02:	bfa8      	it	ge
 8009c04:	f04f 0a01 	movge.w	sl, #1
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8009c08:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8009c0c:	f7f8 f920 	bl	8001e50 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009c10:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8009c12:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009c16:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8009c1a:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8009c1c:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8009c20:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8009c24:	f340 31cf 	sbfx	r1, r0, #15, #16
 8009c28:	f345 35cf 	sbfx	r5, r5, #15, #16
 8009c2c:	1a69      	subs	r1, r5, r1
 8009c2e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8009c32:	f7fe fc29 	bl	8008488 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8009c36:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8009c3a:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8009c3e:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8009c40:	3301      	adds	r3, #1
 8009c42:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8009c44:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8009c46:	bf12      	itee	ne
 8009c48:	461a      	movne	r2, r3
 8009c4a:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 8009c4c:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8009c4e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8009c52:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 8009c56:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8009c5a:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8009c5e:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009c62:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 8009c64:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009c66:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 8009c68:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009c6c:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8009c6e:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009c72:	80a0      	strh	r0, [r4, #4]
}
 8009c74:	b009      	add	sp, #36	@ 0x24
 8009c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 8009c7a:	4608      	mov	r0, r1
}
 8009c7c:	b009      	add	sp, #36	@ 0x24
 8009c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8009c82:	6663      	str	r3, [r4, #100]	@ 0x64
 8009c84:	4698      	mov	r8, r3
 8009c86:	e75a      	b.n	8009b3e <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8009c88:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8009c8a:	461e      	mov	r6, r3
 8009c8c:	e73f      	b.n	8009b0e <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8009c8e:	425a      	negs	r2, r3
 8009c90:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8009c92:	bfdc      	itt	le
 8009c94:	6682      	strle	r2, [r0, #104]	@ 0x68
 8009c96:	4617      	movle	r7, r2
 8009c98:	e72a      	b.n	8009af0 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8009c9a:	425a      	negs	r2, r3
 8009c9c:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8009c9e:	bfdc      	itt	le
 8009ca0:	6622      	strle	r2, [r4, #96]	@ 0x60
 8009ca2:	4691      	movle	r9, r2
 8009ca4:	e742      	b.n	8009b2c <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009ca6:	fa1f fa83 	uxth.w	sl, r3
 8009caa:	e7ad      	b.n	8009c08 <STO_PLL_CalcElAngle+0x140>

08009cac <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8009cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8009cae:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009cb2:	2d00      	cmp	r5, #0
 8009cb4:	f000 8096 	beq.w	8009de4 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8009cb8:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 8009cbc:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 8009cc0:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8009cc2:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8009cc6:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009cca:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8009ccc:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009cce:	d1fa      	bne.n	8009cc6 <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8009cd0:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 8009cd4:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8009cd8:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8009cdc:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009ce0:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 8009ce2:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009ce6:	d1f7      	bne.n	8009cd8 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8009ce8:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8009cec:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8009cf0:	17de      	asrs	r6, r3, #31
 8009cf2:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009cf6:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8009cf8:	f890 7104 	ldrb.w	r7, [r0, #260]	@ 0x104
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8009cfc:	fbac 2303 	umull	r2, r3, ip, r3
 8009d00:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 8009d04:	09d2      	lsrs	r2, r2, #7
 8009d06:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8009d0a:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009d0c:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009d10:	42a2      	cmp	r2, r4
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8009d12:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009d16:	bfd8      	it	le
 8009d18:	2600      	movle	r6, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8009d1a:	69c5      	ldr	r5, [r0, #28]
 8009d1c:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009d20:	bfc8      	it	gt
 8009d22:	2601      	movgt	r6, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009d24:	7845      	ldrb	r5, [r0, #1]
 8009d26:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 8009d2a:	b21d      	sxth	r5, r3
 8009d2c:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009d2e:	f880 60f5 	strb.w	r6, [r0, #245]	@ 0xf5
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8009d32:	8185      	strh	r5, [r0, #12]
    if (false == pHandle->IsAlgorithmConverged)
 8009d34:	f890 60f8 	ldrb.w	r6, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8009d38:	b99f      	cbnz	r7, 8009d62 <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
    if (false == pHandle->IsAlgorithmConverged)
 8009d3a:	b346      	cbz	r6, 8009d8e <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8009d3c:	42a2      	cmp	r2, r4
 8009d3e:	dc23      	bgt.n	8009d88 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
        pHandle->ReliabilityCounter++;
 8009d40:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8009d44:	f890 2117 	ldrb.w	r2, [r0, #279]	@ 0x117
        pHandle->ReliabilityCounter++;
 8009d48:	3301      	adds	r3, #1
 8009d4a:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8009d4c:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 8009d4e:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8009d52:	d81c      	bhi.n	8009d8e <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009d54:	78c2      	ldrb	r2, [r0, #3]
 8009d56:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8009d62:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8009d64:	f8b0 511a 	ldrh.w	r5, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8009d68:	bfb8      	it	lt
 8009d6a:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8009d6c:	429d      	cmp	r5, r3
 8009d6e:	dc12      	bgt.n	8009d96 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    bool bIs_Bemf_Consistent = false;
 8009d70:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8009d72:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8009d74:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8009d76:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8009d7a:	f880 50f9 	strb.w	r5, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8009d7e:	b136      	cbz	r6, 8009d8e <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8009d80:	42a2      	cmp	r2, r4
 8009d82:	dddd      	ble.n	8009d40 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 8009d84:	2d00      	cmp	r5, #0
 8009d86:	d0db      	beq.n	8009d40 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8009d8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8009d92:	f7ff bd97 	b.w	80098c4 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8009d96:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8009d9a:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 8009d9e:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8009da2:	f890 5119 	ldrb.w	r5, [r0, #281]	@ 0x119
        wObsBemfSq += wObsBemf * wObsBemf;
 8009da6:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8009daa:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8009dae:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8009db2:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8009db6:	fb03 f505 	mul.w	r5, r3, r5
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	bfb8      	it	lt
 8009dbe:	353f      	addlt	r5, #63	@ 0x3f
 8009dc0:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8009dc2:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	461d      	mov	r5, r3
 8009dca:	f890 c118 	ldrb.w	ip, [r0, #280]	@ 0x118
 8009dce:	bfb8      	it	lt
 8009dd0:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 8009dd4:	11ad      	asrs	r5, r5, #6
 8009dd6:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8009dda:	42af      	cmp	r7, r5
 8009ddc:	bfd4      	ite	le
 8009dde:	2500      	movle	r5, #0
 8009de0:	2501      	movgt	r5, #1
 8009de2:	e7c8      	b.n	8009d76 <STO_PLL_CalcAvrgMecSpeedUnit+0xca>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009de4:	462c      	mov	r4, r5
 8009de6:	462b      	mov	r3, r5
 8009de8:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8009dea:	46ae      	mov	lr, r5
 8009dec:	e781      	b.n	8009cf2 <STO_PLL_CalcAvrgMecSpeedUnit+0x46>
 8009dee:	bf00      	nop

08009df0 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8009df0:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8009df4:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8009df8:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009dfc:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 8009e00:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009e02:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8009e06:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8009e0a:	ebac 0101 	sub.w	r1, ip, r1
 8009e0e:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009e10:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 8009e12:	b959      	cbnz	r1, 8009e2c <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009e14:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 8009e18:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8009e1a:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 8009e1e:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8009e22:	4113      	asrs	r3, r2
}
 8009e24:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8009e28:	81c3      	strh	r3, [r0, #14]
}
 8009e2a:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8009e2c:	440a      	add	r2, r1
 8009e2e:	b291      	uxth	r1, r2
 8009e30:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8009e32:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8009e34:	bfdc      	itt	le
 8009e36:	eba1 010c 	suble.w	r1, r1, ip
 8009e3a:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8009e3c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009e40:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 8009e44:	1a9b      	subs	r3, r3, r2
 8009e46:	e7e8      	b.n	8009e1a <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

08009e48 <STO_PLL_Clear>:
{
 8009e48:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8009e4a:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 8009e4e:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 8009e50:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 8009e54:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 8009e58:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 8009e5c:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 8009e5e:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 8009e60:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 8009e62:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 8009e66:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 8009e6a:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 8009e6e:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 8009e72:	b11a      	cbz	r2, 8009e7c <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8009e74:	0052      	lsls	r2, r2, #1
 8009e76:	3074      	adds	r0, #116	@ 0x74
 8009e78:	f000 fa08 	bl	800a28c <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8009e82:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8009e86:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 8009e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8009e8e:	f7fe bac7 	b.w	8008420 <PID_SetIntegralTerm>
 8009e92:	bf00      	nop

08009e94 <STO_PLL_Init>:
{
 8009e94:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8009e96:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009e9a:	4b19      	ldr	r3, [pc, #100]	@ (8009f00 <STO_PLL_Init+0x6c>)
 8009e9c:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8009ea0:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 8009ea4:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 8009ea6:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009ea8:	fb93 f3fe 	sdiv	r3, r3, lr
 8009eac:	b21b      	sxth	r3, r3
{
 8009eae:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8009eb0:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 8009eb4:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 8009eb6:	b30b      	cbz	r3, 8009efc <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8009eb8:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 8009eba:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 8009ebe:	f102 0c01 	add.w	ip, r2, #1
 8009ec2:	105b      	asrs	r3, r3, #1
 8009ec4:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8009ec6:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 8009eca:	fa1f f28c 	uxth.w	r2, ip
 8009ece:	d1f4      	bne.n	8009eba <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8009ed0:	b20a      	sxth	r2, r1
 8009ed2:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8009ed4:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8009ed8:	480a      	ldr	r0, [pc, #40]	@ (8009f04 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 8009eda:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8009edc:	17cb      	asrs	r3, r1, #31
 8009ede:	fb80 0101 	smull	r0, r1, r0, r1
 8009ee2:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8009ee6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f7ff ffad 	bl	8009e48 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 8009eee:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8009ef2:	f7fe fa81 	bl	80083f8 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	8263      	strh	r3, [r4, #18]
}
 8009efa:	bd10      	pop	{r4, pc}
 8009efc:	4671      	mov	r1, lr
 8009efe:	e7eb      	b.n	8009ed8 <STO_PLL_Init+0x44>
 8009f00:	000fea5e 	.word	0x000fea5e
 8009f04:	06488dc5 	.word	0x06488dc5

08009f08 <STO_PLL_IsObserverConverged>:
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 8009f08:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 8009f0c:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 8009f0e:	b112      	cbz	r2, 8009f16 <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009f10:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8009f14:	800a      	strh	r2, [r1, #0]
    }

    if (true == pHandle->ForceConvergency)
 8009f16:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 8009f1a:	b128      	cbz	r0, 8009f28 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8009f1c:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009f1e:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8009f20:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009f24:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8009f26:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009f28:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009f2c:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 8009f30:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009f32:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 8009f36:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009f3a:	4614      	mov	r4, r2
      if (wtemp > 0)
 8009f3c:	dd38      	ble.n	8009fb0 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 8009f3e:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8009f42:	bfbc      	itt	lt
 8009f44:	f1cc 0c00 	rsblt	ip, ip, #0
 8009f48:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 8009f4c:	2a00      	cmp	r2, #0
 8009f4e:	db34      	blt.n	8009fba <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 8009f50:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009f54:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009f58:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8009f5c:	b349      	cbz	r1, 8009fb2 <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 8009f5e:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 8009f62:	fa1f f18c 	uxth.w	r1, ip
 8009f66:	428d      	cmp	r5, r1
 8009f68:	d223      	bcs.n	8009fb2 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009f6a:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 8009f6e:	2a00      	cmp	r2, #0
 8009f70:	bfb8      	it	lt
 8009f72:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8009f74:	f342 120f 	sbfx	r2, r2, #4, #16
 8009f78:	4594      	cmp	ip, r2
 8009f7a:	db1a      	blt.n	8009fb2 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009f7c:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8009f80:	f1be 0f00 	cmp.w	lr, #0
 8009f84:	bfb8      	it	lt
 8009f86:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8009f8a:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 8009f8e:	45f4      	cmp	ip, lr
 8009f90:	dc0f      	bgt.n	8009fb2 <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 8009f92:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009f96:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 8009f9a:	3201      	adds	r2, #1
 8009f9c:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009f9e:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 8009fa0:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009fa4:	d804      	bhi.n	8009fb0 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 8009fa6:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009fa8:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8009faa:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009fae:	701a      	strb	r2, [r3, #0]
}
 8009fb0:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 8009fb8:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8009fba:	4252      	negs	r2, r2
 8009fbc:	b212      	sxth	r2, r2
 8009fbe:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 8009fc0:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009fc4:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 8009fc8:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009fca:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	d0ef      	beq.n	8009fb2 <STO_PLL_IsObserverConverged+0xaa>
 8009fd2:	e7c4      	b.n	8009f5e <STO_PLL_IsObserverConverged+0x56>

08009fd4 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 8009fd4:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	b299      	uxth	r1, r3
 8009fda:	f361 020f 	bfi	r2, r1, #0, #16
 8009fde:	0c1b      	lsrs	r3, r3, #16
 8009fe0:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009fe4:	b082      	sub	sp, #8
}
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	b002      	add	sp, #8
 8009fea:	4770      	bx	lr

08009fec <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 8009fec:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8009fee:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009ff0:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8009ff4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009ff8:	410a      	asrs	r2, r1
  return (iaux);
 8009ffa:	410b      	asrs	r3, r1
 8009ffc:	b292      	uxth	r2, r2
 8009ffe:	f362 000f 	bfi	r0, r2, #0, #16
 800a002:	b29b      	uxth	r3, r3
{
 800a004:	b082      	sub	sp, #8
  return (iaux);
 800a006:	f363 401f 	bfi	r0, r3, #16, #16
}
 800a00a:	b002      	add	sp, #8
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop

0800a010 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800a010:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800a014:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800a016:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800a01a:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop

0800a020 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800a020:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 800a022:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop

0800a028 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800a028:	6800      	ldr	r0, [r0, #0]
 800a02a:	2100      	movs	r1, #0
 800a02c:	3034      	adds	r0, #52	@ 0x34
 800a02e:	f7fe b9f7 	b.w	8008420 <PID_SetIntegralTerm>
 800a032:	bf00      	nop

0800a034 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 800a034:	2100      	movs	r1, #0
 800a036:	3034      	adds	r0, #52	@ 0x34
 800a038:	f7fe b9f2 	b.w	8008420 <PID_SetIntegralTerm>

0800a03c <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 800a03c:	f8d0 0100 	ldr.w	r0, [r0, #256]	@ 0x100
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop

0800a044 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 800a044:	f8d0 00fc 	ldr.w	r0, [r0, #252]	@ 0xfc
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop

0800a04c <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 800a04c:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800a04e:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 800a052:	4770      	bx	lr

0800a054 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 800a054:	6803      	ldr	r3, [r0, #0]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop

0800a060 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800a060:	6803      	ldr	r3, [r0, #0]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop

0800a06c <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800a06c:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop

0800a074 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800a074:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800a076:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800a078:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800a07a:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800a07e:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800a080:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800a082:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800a084:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800a086:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800a088:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800a08a:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop

0800a090 <VSS_Init>:
{
 800a090:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800a092:	f7ff ffef 	bl	800a074 <VSS_Clear>
}
 800a096:	bd08      	pop	{r3, pc}

0800a098 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800a098:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 800a09c:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800a09e:	b11a      	cbz	r2, 800a0a8 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800a0a0:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800a0a4:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800a0a6:	4770      	bx	lr
{
 800a0a8:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a0aa:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800a0ae:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a0b0:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800a0b2:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a0b6:	785a      	ldrb	r2, [r3, #1]
 800a0b8:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a0bc:	4460      	add	r0, ip
 800a0be:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a0c2:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a0c4:	b200      	sxth	r0, r0
 800a0c6:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a0c8:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800a0ca:	b1fc      	cbz	r4, 800a10c <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800a0cc:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 800a0d0:	b1f2      	cbz	r2, 800a110 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800a0d2:	3a01      	subs	r2, #1
 800a0d4:	b212      	sxth	r2, r2
 800a0d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800a0d8:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800a0dc:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800a0de:	db26      	blt.n	800a12e <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800a0e0:	eba1 0e0e 	sub.w	lr, r1, lr
 800a0e4:	fa0f fe8e 	sxth.w	lr, lr
 800a0e8:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800a0ea:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800a0ee:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800a0f2:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800a0f6:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800a0fa:	fb12 f205 	smulbb	r2, r2, r5
 800a0fe:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800a100:	db0e      	blt.n	800a120 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800a102:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800a104:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800a106:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800a10a:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800a10c:	8098      	strh	r0, [r3, #4]
}
 800a10e:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800a110:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800a114:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800a116:	2401      	movs	r4, #1
 800a118:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800a11c:	8098      	strh	r0, [r3, #4]
}
 800a11e:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800a120:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 800a124:	2c00      	cmp	r4, #0
 800a126:	d0f1      	beq.n	800a10c <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800a128:	440a      	add	r2, r1
 800a12a:	b210      	sxth	r0, r2
 800a12c:	e7ee      	b.n	800a10c <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800a12e:	ebae 0e01 	sub.w	lr, lr, r1
 800a132:	fa0f fe8e 	sxth.w	lr, lr
 800a136:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800a13a:	e7d6      	b.n	800a0ea <VSS_CalcElAngle+0x52>

0800a13c <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800a13c:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 800a13e:	2a01      	cmp	r2, #1
{
 800a140:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 800a142:	d922      	bls.n	800a18a <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800a144:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a146:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800a148:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a14a:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a14c:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800a14e:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a152:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a154:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a156:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a15a:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800a15c:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a160:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a164:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a168:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a16a:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800a16e:	b212      	sxth	r2, r2
 800a170:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800a172:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800a174:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800a176:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800a178:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 800a17c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800a17e:	b970      	cbnz	r0, 800a19e <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800a180:	78da      	ldrb	r2, [r3, #3]
 800a182:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800a184:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a188:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800a18a:	d00d      	beq.n	800a1a8 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800a18c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 800a190:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800a194:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800a196:	bb00      	cbnz	r0, 800a1da <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800a198:	78da      	ldrb	r2, [r3, #3]
 800a19a:	701a      	strb	r2, [r3, #0]
}
 800a19c:	4770      	bx	lr
 800a19e:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff bb8e 	b.w	80098c4 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800a1a8:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 800a1ac:	f8a1 c000 	strh.w	ip, [r1]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a1b0:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a1b2:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800a1b4:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a1b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a1bc:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a1be:	fb00 f00c 	mul.w	r0, r0, ip
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a1c2:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1c6:	785a      	ldrb	r2, [r3, #1]
 800a1c8:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800a1d0:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1d4:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d0de      	beq.n	800a198 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff bb72 	b.w	80098c4 <SPD_IsMecSpeedReliable>

0800a1e0 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1e0:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800a1e2:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1e4:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 800a1e8:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1ea:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop

0800a1f0 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800a1f0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a1f4:	b9a3      	cbnz	r3, 800a220 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a1f6:	8b43      	ldrh	r3, [r0, #26]
{
 800a1f8:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a1fa:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1fc:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a200:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a204:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a208:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800a20a:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800a20e:	b942      	cbnz	r2, 800a222 <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a210:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800a214:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a216:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800a21a:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a21c:	8541      	strh	r1, [r0, #42]	@ 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a21e:	bd10      	pop	{r4, pc}
 800a220:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800a222:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800a224:	fb02 f303 	mul.w	r3, r2, r3
 800a228:	4a0e      	ldr	r2, [pc, #56]	@ (800a264 <VSS_SetMecAcceleration+0x74>)
 800a22a:	fba2 2303 	umull	r2, r3, r2, r3
 800a22e:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800a232:	3301      	adds	r3, #1
 800a234:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a236:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800a23a:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800a23c:	b91b      	cbnz	r3, 800a246 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a23e:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a240:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a242:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800a244:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a246:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a24a:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800a24e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a252:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a254:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800a258:	fb0e f303 	mul.w	r3, lr, r3
 800a25c:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a25e:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a260:	6242      	str	r2, [r0, #36]	@ 0x24
 800a262:	e7ef      	b.n	800a244 <VSS_SetMecAcceleration+0x54>
 800a264:	10624dd3 	.word	0x10624dd3

0800a268 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800a268:	b151      	cbz	r1, 800a280 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800a26a:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 800a26e:	2201      	movs	r2, #1
 800a270:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 800a274:	b923      	cbnz	r3, 800a280 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800a276:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800a27a:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800a27c:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800a27e:	4770      	bx	lr
  bool bAux = true;
 800a280:	2001      	movs	r0, #1
 800a282:	4770      	bx	lr

0800a284 <VSS_TransitionEnded>:
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800a284:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop

0800a28c <memset>:
 800a28c:	4402      	add	r2, r0
 800a28e:	4603      	mov	r3, r0
 800a290:	4293      	cmp	r3, r2
 800a292:	d100      	bne.n	800a296 <memset+0xa>
 800a294:	4770      	bx	lr
 800a296:	f803 1b01 	strb.w	r1, [r3], #1
 800a29a:	e7f9      	b.n	800a290 <memset+0x4>

0800a29c <__libc_init_array>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	4d0d      	ldr	r5, [pc, #52]	@ (800a2d4 <__libc_init_array+0x38>)
 800a2a0:	4c0d      	ldr	r4, [pc, #52]	@ (800a2d8 <__libc_init_array+0x3c>)
 800a2a2:	1b64      	subs	r4, r4, r5
 800a2a4:	10a4      	asrs	r4, r4, #2
 800a2a6:	2600      	movs	r6, #0
 800a2a8:	42a6      	cmp	r6, r4
 800a2aa:	d109      	bne.n	800a2c0 <__libc_init_array+0x24>
 800a2ac:	4d0b      	ldr	r5, [pc, #44]	@ (800a2dc <__libc_init_array+0x40>)
 800a2ae:	4c0c      	ldr	r4, [pc, #48]	@ (800a2e0 <__libc_init_array+0x44>)
 800a2b0:	f000 f826 	bl	800a300 <_init>
 800a2b4:	1b64      	subs	r4, r4, r5
 800a2b6:	10a4      	asrs	r4, r4, #2
 800a2b8:	2600      	movs	r6, #0
 800a2ba:	42a6      	cmp	r6, r4
 800a2bc:	d105      	bne.n	800a2ca <__libc_init_array+0x2e>
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2c4:	4798      	blx	r3
 800a2c6:	3601      	adds	r6, #1
 800a2c8:	e7ee      	b.n	800a2a8 <__libc_init_array+0xc>
 800a2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ce:	4798      	blx	r3
 800a2d0:	3601      	adds	r6, #1
 800a2d2:	e7f2      	b.n	800a2ba <__libc_init_array+0x1e>
 800a2d4:	0800a6f8 	.word	0x0800a6f8
 800a2d8:	0800a6f8 	.word	0x0800a6f8
 800a2dc:	0800a6f8 	.word	0x0800a6f8
 800a2e0:	0800a6fc 	.word	0x0800a6fc

0800a2e4 <memcpy>:
 800a2e4:	440a      	add	r2, r1
 800a2e6:	4291      	cmp	r1, r2
 800a2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2ec:	d100      	bne.n	800a2f0 <memcpy+0xc>
 800a2ee:	4770      	bx	lr
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2fa:	4291      	cmp	r1, r2
 800a2fc:	d1f9      	bne.n	800a2f2 <memcpy+0xe>
 800a2fe:	bd10      	pop	{r4, pc}

0800a300 <_init>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	bf00      	nop
 800a304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a306:	bc08      	pop	{r3}
 800a308:	469e      	mov	lr, r3
 800a30a:	4770      	bx	lr

0800a30c <_fini>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr
