
NUCLEO-IHM03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a774  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800a94c  0800a94c  0000b94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad2c  0800ad2c  0000c5b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad2c  0800ad2c  0000bd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad34  0800ad34  0000c5b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad34  0800ad34  0000bd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad38  0800ad38  0000bd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b0  20000000  0800ad3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018c8  200005b0  0800b2ec  0000c5b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e78  0800b2ec  0000ce78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c5b0  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004a1ec  00000000  00000000  0000c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000007e  00000000  00000000  000567cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004b0ac  00000000  00000000  0005684a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008c3f  00000000  00000000  000a18f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021d8  00000000  00000000  000aa538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00104495  00000000  00000000  000ac710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003bf4  00000000  00000000  001b0ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000204ec  00000000  00000000  001b4799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c6d0  00000000  00000000  001d4c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00201355  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005e70  00000000  00000000  00201398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200005b0 	.word	0x200005b0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a934 	.word	0x0800a934

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200005b4 	.word	0x200005b4
 8000214:	0800a934 	.word	0x0800a934

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_d2f>:
 8000834:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000838:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800083c:	bf24      	itt	cs
 800083e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000842:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000846:	d90d      	bls.n	8000864 <__aeabi_d2f+0x30>
 8000848:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800084c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000850:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000854:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000858:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000868:	d121      	bne.n	80008ae <__aeabi_d2f+0x7a>
 800086a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800086e:	bfbc      	itt	lt
 8000870:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000874:	4770      	bxlt	lr
 8000876:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800087e:	f1c2 0218 	rsb	r2, r2, #24
 8000882:	f1c2 0c20 	rsb	ip, r2, #32
 8000886:	fa10 f30c 	lsls.w	r3, r0, ip
 800088a:	fa20 f002 	lsr.w	r0, r0, r2
 800088e:	bf18      	it	ne
 8000890:	f040 0001 	orrne.w	r0, r0, #1
 8000894:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000898:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800089c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a0:	ea40 000c 	orr.w	r0, r0, ip
 80008a4:	fa23 f302 	lsr.w	r3, r3, r2
 80008a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008ac:	e7cc      	b.n	8000848 <__aeabi_d2f+0x14>
 80008ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008b2:	d107      	bne.n	80008c4 <__aeabi_d2f+0x90>
 80008b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008b8:	bf1e      	ittt	ne
 80008ba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008be:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008c2:	4770      	bxne	lr
 80008c4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008c8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <__aeabi_uldivmod>:
 80008d4:	b953      	cbnz	r3, 80008ec <__aeabi_uldivmod+0x18>
 80008d6:	b94a      	cbnz	r2, 80008ec <__aeabi_uldivmod+0x18>
 80008d8:	2900      	cmp	r1, #0
 80008da:	bf08      	it	eq
 80008dc:	2800      	cmpeq	r0, #0
 80008de:	bf1c      	itt	ne
 80008e0:	f04f 31ff 	movne.w	r1, #4294967295
 80008e4:	f04f 30ff 	movne.w	r0, #4294967295
 80008e8:	f000 b96a 	b.w	8000bc0 <__aeabi_idiv0>
 80008ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008f4:	f000 f806 	bl	8000904 <__udivmoddi4>
 80008f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000900:	b004      	add	sp, #16
 8000902:	4770      	bx	lr

08000904 <__udivmoddi4>:
 8000904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000908:	9d08      	ldr	r5, [sp, #32]
 800090a:	460c      	mov	r4, r1
 800090c:	2b00      	cmp	r3, #0
 800090e:	d14e      	bne.n	80009ae <__udivmoddi4+0xaa>
 8000910:	4694      	mov	ip, r2
 8000912:	458c      	cmp	ip, r1
 8000914:	4686      	mov	lr, r0
 8000916:	fab2 f282 	clz	r2, r2
 800091a:	d962      	bls.n	80009e2 <__udivmoddi4+0xde>
 800091c:	b14a      	cbz	r2, 8000932 <__udivmoddi4+0x2e>
 800091e:	f1c2 0320 	rsb	r3, r2, #32
 8000922:	4091      	lsls	r1, r2
 8000924:	fa20 f303 	lsr.w	r3, r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	4319      	orrs	r1, r3
 800092e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000932:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000936:	fa1f f68c 	uxth.w	r6, ip
 800093a:	fbb1 f4f7 	udiv	r4, r1, r7
 800093e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000942:	fb07 1114 	mls	r1, r7, r4, r1
 8000946:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800094a:	fb04 f106 	mul.w	r1, r4, r6
 800094e:	4299      	cmp	r1, r3
 8000950:	d90a      	bls.n	8000968 <__udivmoddi4+0x64>
 8000952:	eb1c 0303 	adds.w	r3, ip, r3
 8000956:	f104 30ff 	add.w	r0, r4, #4294967295
 800095a:	f080 8112 	bcs.w	8000b82 <__udivmoddi4+0x27e>
 800095e:	4299      	cmp	r1, r3
 8000960:	f240 810f 	bls.w	8000b82 <__udivmoddi4+0x27e>
 8000964:	3c02      	subs	r4, #2
 8000966:	4463      	add	r3, ip
 8000968:	1a59      	subs	r1, r3, r1
 800096a:	fa1f f38e 	uxth.w	r3, lr
 800096e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000972:	fb07 1110 	mls	r1, r7, r0, r1
 8000976:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800097a:	fb00 f606 	mul.w	r6, r0, r6
 800097e:	429e      	cmp	r6, r3
 8000980:	d90a      	bls.n	8000998 <__udivmoddi4+0x94>
 8000982:	eb1c 0303 	adds.w	r3, ip, r3
 8000986:	f100 31ff 	add.w	r1, r0, #4294967295
 800098a:	f080 80fc 	bcs.w	8000b86 <__udivmoddi4+0x282>
 800098e:	429e      	cmp	r6, r3
 8000990:	f240 80f9 	bls.w	8000b86 <__udivmoddi4+0x282>
 8000994:	4463      	add	r3, ip
 8000996:	3802      	subs	r0, #2
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800099e:	2100      	movs	r1, #0
 80009a0:	b11d      	cbz	r5, 80009aa <__udivmoddi4+0xa6>
 80009a2:	40d3      	lsrs	r3, r2
 80009a4:	2200      	movs	r2, #0
 80009a6:	e9c5 3200 	strd	r3, r2, [r5]
 80009aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d905      	bls.n	80009be <__udivmoddi4+0xba>
 80009b2:	b10d      	cbz	r5, 80009b8 <__udivmoddi4+0xb4>
 80009b4:	e9c5 0100 	strd	r0, r1, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	4608      	mov	r0, r1
 80009bc:	e7f5      	b.n	80009aa <__udivmoddi4+0xa6>
 80009be:	fab3 f183 	clz	r1, r3
 80009c2:	2900      	cmp	r1, #0
 80009c4:	d146      	bne.n	8000a54 <__udivmoddi4+0x150>
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	d302      	bcc.n	80009d0 <__udivmoddi4+0xcc>
 80009ca:	4290      	cmp	r0, r2
 80009cc:	f0c0 80f0 	bcc.w	8000bb0 <__udivmoddi4+0x2ac>
 80009d0:	1a86      	subs	r6, r0, r2
 80009d2:	eb64 0303 	sbc.w	r3, r4, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d0e6      	beq.n	80009aa <__udivmoddi4+0xa6>
 80009dc:	e9c5 6300 	strd	r6, r3, [r5]
 80009e0:	e7e3      	b.n	80009aa <__udivmoddi4+0xa6>
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	f040 8090 	bne.w	8000b08 <__udivmoddi4+0x204>
 80009e8:	eba1 040c 	sub.w	r4, r1, ip
 80009ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f0:	fa1f f78c 	uxth.w	r7, ip
 80009f4:	2101      	movs	r1, #1
 80009f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80009fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000a02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a06:	fb07 f006 	mul.w	r0, r7, r6
 8000a0a:	4298      	cmp	r0, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x11c>
 8000a0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0x11a>
 8000a18:	4298      	cmp	r0, r3
 8000a1a:	f200 80cd 	bhi.w	8000bb8 <__udivmoddi4+0x2b4>
 8000a1e:	4626      	mov	r6, r4
 8000a20:	1a1c      	subs	r4, r3, r0
 8000a22:	fa1f f38e 	uxth.w	r3, lr
 8000a26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a32:	fb00 f707 	mul.w	r7, r0, r7
 8000a36:	429f      	cmp	r7, r3
 8000a38:	d908      	bls.n	8000a4c <__udivmoddi4+0x148>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a42:	d202      	bcs.n	8000a4a <__udivmoddi4+0x146>
 8000a44:	429f      	cmp	r7, r3
 8000a46:	f200 80b0 	bhi.w	8000baa <__udivmoddi4+0x2a6>
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	1bdb      	subs	r3, r3, r7
 8000a4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a52:	e7a5      	b.n	80009a0 <__udivmoddi4+0x9c>
 8000a54:	f1c1 0620 	rsb	r6, r1, #32
 8000a58:	408b      	lsls	r3, r1
 8000a5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a5e:	431f      	orrs	r7, r3
 8000a60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a64:	fa04 f301 	lsl.w	r3, r4, r1
 8000a68:	ea43 030c 	orr.w	r3, r3, ip
 8000a6c:	40f4      	lsrs	r4, r6
 8000a6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a72:	0c38      	lsrs	r0, r7, #16
 8000a74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a78:	fbb4 fef0 	udiv	lr, r4, r0
 8000a7c:	fa1f fc87 	uxth.w	ip, r7
 8000a80:	fb00 441e 	mls	r4, r0, lr, r4
 8000a84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a88:	fb0e f90c 	mul.w	r9, lr, ip
 8000a8c:	45a1      	cmp	r9, r4
 8000a8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a92:	d90a      	bls.n	8000aaa <__udivmoddi4+0x1a6>
 8000a94:	193c      	adds	r4, r7, r4
 8000a96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a9a:	f080 8084 	bcs.w	8000ba6 <__udivmoddi4+0x2a2>
 8000a9e:	45a1      	cmp	r9, r4
 8000aa0:	f240 8081 	bls.w	8000ba6 <__udivmoddi4+0x2a2>
 8000aa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa8:	443c      	add	r4, r7
 8000aaa:	eba4 0409 	sub.w	r4, r4, r9
 8000aae:	fa1f f983 	uxth.w	r9, r3
 8000ab2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ab6:	fb00 4413 	mls	r4, r0, r3, r4
 8000aba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000abe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ac2:	45a4      	cmp	ip, r4
 8000ac4:	d907      	bls.n	8000ad6 <__udivmoddi4+0x1d2>
 8000ac6:	193c      	adds	r4, r7, r4
 8000ac8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000acc:	d267      	bcs.n	8000b9e <__udivmoddi4+0x29a>
 8000ace:	45a4      	cmp	ip, r4
 8000ad0:	d965      	bls.n	8000b9e <__udivmoddi4+0x29a>
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	443c      	add	r4, r7
 8000ad6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ada:	fba0 9302 	umull	r9, r3, r0, r2
 8000ade:	eba4 040c 	sub.w	r4, r4, ip
 8000ae2:	429c      	cmp	r4, r3
 8000ae4:	46ce      	mov	lr, r9
 8000ae6:	469c      	mov	ip, r3
 8000ae8:	d351      	bcc.n	8000b8e <__udivmoddi4+0x28a>
 8000aea:	d04e      	beq.n	8000b8a <__udivmoddi4+0x286>
 8000aec:	b155      	cbz	r5, 8000b04 <__udivmoddi4+0x200>
 8000aee:	ebb8 030e 	subs.w	r3, r8, lr
 8000af2:	eb64 040c 	sbc.w	r4, r4, ip
 8000af6:	fa04 f606 	lsl.w	r6, r4, r6
 8000afa:	40cb      	lsrs	r3, r1
 8000afc:	431e      	orrs	r6, r3
 8000afe:	40cc      	lsrs	r4, r1
 8000b00:	e9c5 6400 	strd	r6, r4, [r5]
 8000b04:	2100      	movs	r1, #0
 8000b06:	e750      	b.n	80009aa <__udivmoddi4+0xa6>
 8000b08:	f1c2 0320 	rsb	r3, r2, #32
 8000b0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	fa24 f303 	lsr.w	r3, r4, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	430c      	orrs	r4, r1
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b24:	fa1f f78c 	uxth.w	r7, ip
 8000b28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000b30:	0c23      	lsrs	r3, r4, #16
 8000b32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b36:	fb00 f107 	mul.w	r1, r0, r7
 8000b3a:	4299      	cmp	r1, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x24c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b46:	d22c      	bcs.n	8000ba2 <__udivmoddi4+0x29e>
 8000b48:	4299      	cmp	r1, r3
 8000b4a:	d92a      	bls.n	8000ba2 <__udivmoddi4+0x29e>
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b58:	fb08 3311 	mls	r3, r8, r1, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb01 f307 	mul.w	r3, r1, r7
 8000b64:	42a3      	cmp	r3, r4
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0x276>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b70:	d213      	bcs.n	8000b9a <__udivmoddi4+0x296>
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	d911      	bls.n	8000b9a <__udivmoddi4+0x296>
 8000b76:	3902      	subs	r1, #2
 8000b78:	4464      	add	r4, ip
 8000b7a:	1ae4      	subs	r4, r4, r3
 8000b7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b80:	e739      	b.n	80009f6 <__udivmoddi4+0xf2>
 8000b82:	4604      	mov	r4, r0
 8000b84:	e6f0      	b.n	8000968 <__udivmoddi4+0x64>
 8000b86:	4608      	mov	r0, r1
 8000b88:	e706      	b.n	8000998 <__udivmoddi4+0x94>
 8000b8a:	45c8      	cmp	r8, r9
 8000b8c:	d2ae      	bcs.n	8000aec <__udivmoddi4+0x1e8>
 8000b8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b96:	3801      	subs	r0, #1
 8000b98:	e7a8      	b.n	8000aec <__udivmoddi4+0x1e8>
 8000b9a:	4631      	mov	r1, r6
 8000b9c:	e7ed      	b.n	8000b7a <__udivmoddi4+0x276>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	e799      	b.n	8000ad6 <__udivmoddi4+0x1d2>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e7d4      	b.n	8000b50 <__udivmoddi4+0x24c>
 8000ba6:	46d6      	mov	lr, sl
 8000ba8:	e77f      	b.n	8000aaa <__udivmoddi4+0x1a6>
 8000baa:	4463      	add	r3, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	e74d      	b.n	8000a4c <__udivmoddi4+0x148>
 8000bb0:	4606      	mov	r6, r0
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	4608      	mov	r0, r1
 8000bb6:	e70f      	b.n	80009d8 <__udivmoddi4+0xd4>
 8000bb8:	3e02      	subs	r6, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	e730      	b.n	8000a20 <__udivmoddi4+0x11c>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_idiv0>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc4:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490e      	ldr	r1, [pc, #56]	@ (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0b      	ldr	r4, [pc, #44]	@ (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bee:	f004 f881 	bl	8004cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f009 fdcb 	bl	800a78c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f000 fba9 	bl	800134c <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   r0, =_estack
 8000bfc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	200005b0 	.word	0x200005b0
  ldr r2, =_sidata
 8000c08:	0800ad3c 	.word	0x0800ad3c
  ldr r2, =_sbss
 8000c0c:	200005b0 	.word	0x200005b0
  ldr r4, =_ebss
 8000c10:	20001e78 	.word	0x20001e78

08000c14 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <BusFault_Handler>
	...

08000c18 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000c1c:	6940      	ldr	r0, [r0, #20]
 8000c1e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000c20:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000c22:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c24:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000c26:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000c2a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c2e:	6960      	ldr	r0, [r4, #20]
 8000c30:	f104 011c 	add.w	r1, r4, #28
 8000c34:	462b      	mov	r3, r5
 8000c36:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c3c:	4718      	bx	r3
 8000c3e:	bf00      	nop

08000c40 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000c40:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000c42:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 8000c44:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000c46:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000c4a:	4c1e      	ldr	r4, [pc, #120]	@ (8000cc4 <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000c4c:	01db      	lsls	r3, r3, #7
 8000c4e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000c52:	784a      	ldrb	r2, [r1, #1]
 8000c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000c58:	78ca      	ldrb	r2, [r1, #3]
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000c5a:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000c5e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000c68:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000c6c:	5ca2      	ldrb	r2, [r4, r2]
 8000c6e:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000c72:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000c74:	5ca2      	ldrb	r2, [r4, r2]
 8000c76:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000c7a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c7c:	5ca2      	ldrb	r2, [r4, r2]
 8000c7e:	4c12      	ldr	r4, [pc, #72]	@ (8000cc8 <ASPEP_sendBeacon+0x88>)
 8000c80:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000c84:	5ca2      	ldrb	r2, [r4, r2]
 8000c86:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000c8a:	f043 0305 	orr.w	r3, r3, #5
 8000c8e:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000c92:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000c94:	b14b      	cbz	r3, 8000caa <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c96:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000c98:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000c9c:	b913      	cbnz	r3, 8000ca4 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ca8:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000caa:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000cb4:	6481      	str	r1, [r0, #72]	@ 0x48
 8000cb6:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000cb8:	2204      	movs	r2, #4
 8000cba:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000cc0:	6940      	ldr	r0, [r0, #20]
 8000cc2:	4718      	bx	r3
 8000cc4:	0800a95c 	.word	0x0800a95c
 8000cc8:	0800a94c 	.word	0x0800a94c

08000ccc <ASPEP_sendPing>:
{
 8000ccc:	b430      	push	{r4, r5}
              | (uint32_t)((uint32_t)cBit << 5U)
 8000cce:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000cd0:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000cd4:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000cd8:	4d1d      	ldr	r5, [pc, #116]	@ (8000d50 <ASPEP_sendPing+0x84>)
              | (uint32_t)((uint32_t)cBit << 5U)
 8000cda:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000cde:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000ce2:	f00c 0101 	and.w	r1, ip, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000ce6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000cea:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 8000cee:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000cf2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4c16      	ldr	r4, [pc, #88]	@ (8000d54 <ASPEP_sendPing+0x88>)
 8000cfa:	f042 0206 	orr.w	r2, r2, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000cfe:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000d02:	5ca2      	ldrb	r2, [r4, r2]
 8000d04:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000d08:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000d0a:	5ca2      	ldrb	r2, [r4, r2]
 8000d0c:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000d10:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000d12:	5ca2      	ldrb	r2, [r4, r2]
 8000d14:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000d18:	5ceb      	ldrb	r3, [r5, r3]
 8000d1a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000d1e:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000d22:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000d24:	b143      	cbz	r3, 8000d38 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d26:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000d28:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000d2c:	b913      	cbnz	r3, 8000d34 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000d34:	bc30      	pop	{r4, r5}
 8000d36:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000d38:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000d42:	6481      	str	r1, [r0, #72]	@ 0x48
 8000d44:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000d46:	2204      	movs	r2, #4
 8000d48:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000d4a:	6940      	ldr	r0, [r0, #20]
}
 8000d4c:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000d4e:	4718      	bx	r3
 8000d50:	0800a94c 	.word	0x0800a94c
 8000d54:	0800a95c 	.word	0x0800a95c

08000d58 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000d58:	2a0a      	cmp	r2, #10
 8000d5a:	d009      	beq.n	8000d70 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000d5c:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d91d      	bls.n	8000da0 <ASPEP_getBuffer+0x48>
 8000d64:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d90d      	bls.n	8000d88 <ASPEP_getBuffer+0x30>
        result = false;
 8000d6c:	2000      	movs	r0, #0
}
 8000d6e:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000d70:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d8f9      	bhi.n	8000d6c <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000d78:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8000d7a:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000d80:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8000d84:	2001      	movs	r0, #1
 8000d86:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d88:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000d8a:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000d8e:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d92:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8000d94:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000d98:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d9a:	600b      	str	r3, [r1, #0]
  bool result = true;
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000da0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000da2:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000da6:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000daa:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8000dac:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000db0:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	e7f2      	b.n	8000d9c <ASPEP_getBuffer+0x44>
 8000db6:	bf00      	nop

08000db8 <ASPEP_sendPacket>:
{
 8000db8:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000dba:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d001      	beq.n	8000dc6 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000dc6:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000dca:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000dce:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000dd2:	2801      	cmp	r0, #1
 8000dd4:	d104      	bne.n	8000de0 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000dd6:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8000dda:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000ddc:	3202      	adds	r2, #2
 8000dde:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000de0:	2b0a      	cmp	r3, #10
 8000de2:	d105      	bne.n	8000df0 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000de4:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000de8:	b348      	cbz	r0, 8000e3e <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000dea:	2000      	movs	r0, #0
 8000dec:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000df0:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000df4:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000df6:	4d34      	ldr	r5, [pc, #208]	@ (8000ec8 <ASPEP_sendPacket+0x110>)
 8000df8:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000dfa:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000dfc:	5d2e      	ldrb	r6, [r5, r4]
 8000dfe:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000e02:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000e04:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000e08:	5d2e      	ldrb	r6, [r5, r4]
 8000e0a:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000e0e:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000e10:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000e12:	5d2c      	ldrb	r4, [r5, r4]
 8000e14:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000e18:	406c      	eors	r4, r5
 8000e1a:	4d2c      	ldr	r5, [pc, #176]	@ (8000ecc <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000e1c:	5d2c      	ldrb	r4, [r5, r4]
 8000e1e:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000e22:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e26:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000e28:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000e2c:	b1b9      	cbz	r1, 8000e5e <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e2e:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000e30:	2b09      	cmp	r3, #9
 8000e32:	d006      	beq.n	8000e42 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000e34:	2b0a      	cmp	r3, #10
 8000e36:	d02a      	beq.n	8000e8e <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8000e38:	b37b      	cbz	r3, 8000e9a <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8000e3a:	2000      	movs	r0, #0
}
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000e3e:	2001      	movs	r0, #1
}
 8000e40:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000e42:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000e46:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8000e48:	458e      	cmp	lr, r1
 8000e4a:	bf14      	ite	ne
 8000e4c:	2003      	movne	r0, #3
 8000e4e:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000e50:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000e54:	b3a1      	cbz	r1, 8000ec0 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000e56:	2102      	movs	r1, #2
 8000e58:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000e5a:	809a      	strh	r2, [r3, #4]
}
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8000e5e:	2b09      	cmp	r3, #9
 8000e60:	d029      	beq.n	8000eb6 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 8000e62:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000e64:	f04f 0303 	mov.w	r3, #3
 8000e68:	bf0b      	itete	eq
 8000e6a:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8000e6e:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000e72:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e76:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000e7a:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8000e7e:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000e80:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8000e84:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000e88:	4671      	mov	r1, lr
 8000e8a:	4798      	blx	r3
 8000e8c:	e7d5      	b.n	8000e3a <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8000e8e:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d009      	beq.n	8000eaa <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8000e96:	2003      	movs	r0, #3
}
 8000e98:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8000e9a:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f9      	bne.n	8000e96 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8000ea8:	e7c7      	b.n	8000e3a <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000eb0:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8000eb4:	e7c1      	b.n	8000e3a <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000eb6:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000eba:	2103      	movs	r1, #3
 8000ebc:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000ebe:	e7dc      	b.n	8000e7a <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000ec0:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000ec4:	e7c7      	b.n	8000e56 <ASPEP_sendPacket+0x9e>
 8000ec6:	bf00      	nop
 8000ec8:	0800a95c 	.word	0x0800a95c
 8000ecc:	0800a94c 	.word	0x0800a94c

08000ed0 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000ed0:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000ed2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000ed6:	2b03      	cmp	r3, #3
{
 8000ed8:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000eda:	d013      	beq.n	8000f04 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000edc:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000ede:	2100      	movs	r1, #0
 8000ee0:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000ee2:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000ee6:	2a02      	cmp	r2, #2
 8000ee8:	d013      	beq.n	8000f12 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d11d      	bne.n	8000f2a <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000eee:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000ef2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000ef4:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	6940      	ldr	r0, [r0, #20]
 8000efa:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000efc:	2303      	movs	r3, #3
 8000efe:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000f02:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000f04:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8000f08:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000f0a:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000f0c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000f10:	d10b      	bne.n	8000f2a <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000f12:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000f16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000f18:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000f1a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000f1c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f1e:	6960      	ldr	r0, [r4, #20]
 8000f20:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8000f28:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2a:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000f2c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000f2e:	b1cb      	cbz	r3, 8000f64 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000f30:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000f32:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000f34:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	889a      	ldrh	r2, [r3, #4]
 8000f3a:	6960      	ldr	r0, [r4, #20]
 8000f3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000f3e:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000f40:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d007      	beq.n	8000f58 <ASPEP_HWDataTransmittedIT+0x88>
 8000f48:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d003      	beq.n	8000f58 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000f54:	b662      	cpsie	i
}
 8000f56:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000f58:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000f5a:	0063      	lsls	r3, r4, #1
 8000f5c:	3368      	adds	r3, #104	@ 0x68
 8000f5e:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000f60:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8000f62:	e7f7      	b.n	8000f54 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000f64:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000f66:	e7f5      	b.n	8000f54 <ASPEP_HWDataTransmittedIT+0x84>

08000f68 <ASPEP_RXframeProcess>:
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000f68:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000f6c:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000f6e:	f04f 0c00 	mov.w	ip, #0
{
 8000f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f76:	4604      	mov	r4, r0
    *packetLength = 0;
 8000f78:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 8000f7c:	b1cb      	cbz	r3, 8000fb2 <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000f7e:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000f82:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d055      	beq.n	8001036 <ASPEP_RXframeProcess+0xce>
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d018      	beq.n	8000fc0 <ASPEP_RXframeProcess+0x58>
 8000f8e:	b933      	cbnz	r3, 8000f9e <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000f90:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000f92:	2905      	cmp	r1, #5
 8000f94:	f000 80e3 	beq.w	800115e <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, master has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8000f98:	2906      	cmp	r1, #6
 8000f9a:	f000 8129 	beq.w	80011f0 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL;
 8000f9e:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000fa0:	6960      	ldr	r0, [r4, #20]
 8000fa2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	f104 011c 	add.w	r1, r4, #28
 8000faa:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 8000fac:	4628      	mov	r0, r5
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000fb2:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8000fb6:	b9bb      	cbnz	r3, 8000fe8 <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL;
 8000fb8:	2500      	movs	r5, #0
}
 8000fba:	4628      	mov	r0, r5
 8000fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000fc0:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d045      	beq.n	8001052 <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	f000 8118 	beq.w	80011fc <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	d1e6      	bne.n	8000f9e <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000fd0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLength;
 8000fd4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 8000fd8:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000fda:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000fdc:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000fde:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000fe2:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000fe4:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000fe6:	e7db      	b.n	8000fa0 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000fe8:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000fec:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000fee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000ff2:	488b      	ldr	r0, [pc, #556]	@ (8001220 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000ff4:	4d8b      	ldr	r5, [pc, #556]	@ (8001224 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ff6:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000ffa:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000ffe:	5c82      	ldrb	r2, [r0, r2]
 8001000:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8001004:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001006:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8001008:	5ceb      	ldrb	r3, [r5, r3]
 800100a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 800100e:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001012:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80f6 	beq.w	8001206 <ASPEP_RXframeProcess+0x29e>
  __ASM volatile ("cpsie i" : : : "memory");
 800101a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800101c:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001020:	b913      	cbnz	r3, 8001028 <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8001022:	2302      	movs	r3, #2
 8001024:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8001028:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800102a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800102c:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 800102e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8001032:	4798      	blx	r3
 8001034:	e7c0      	b.n	8000fb8 <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 8001036:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8001038:	2905      	cmp	r1, #5
 800103a:	d04f      	beq.n	80010dc <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 800103c:	2906      	cmp	r1, #6
 800103e:	d1ae      	bne.n	8000f9e <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001040:	4619      	mov	r1, r3
 8001042:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001046:	f7ff fe41 	bl	8000ccc <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800104a:	2302      	movs	r3, #2
 800104c:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8001050:	e7a5      	b.n	8000f9e <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001052:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001056:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 800105a:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800105c:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001060:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001064:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001068:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 800106c:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800106e:	4575      	cmp	r5, lr
 8001070:	bf28      	it	cs
 8001072:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001074:	42b0      	cmp	r0, r6
 8001076:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001078:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800107c:	bf28      	it	cs
 800107e:	4631      	movcs	r1, r6
 8001080:	4663      	mov	r3, ip
 8001082:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8001086:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800108a:	45b8      	cmp	r8, r7
 800108c:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800108e:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001092:	bf28      	it	cs
 8001094:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001096:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001098:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800109c:	4651      	mov	r1, sl
 800109e:	bf28      	it	cs
 80010a0:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010a2:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010a6:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010a8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010aa:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80010ae:	d80f      	bhi.n	80010d0 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80010b0:	45ae      	cmp	lr, r5
 80010b2:	d80d      	bhi.n	80010d0 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80010b4:	45b8      	cmp	r8, r7
 80010b6:	d80b      	bhi.n	80010d0 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80010b8:	45ca      	cmp	sl, r9
 80010ba:	d809      	bhi.n	80010d0 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80010bc:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 80010c0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80010c4:	ebac 0c02 	sub.w	ip, ip, r2
 80010c8:	fabc fc8c 	clz	ip, ip
 80010cc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80010d0:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff fdb3 	bl	8000c40 <ASPEP_sendBeacon>
 80010da:	e760      	b.n	8000f9e <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80010dc:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010de:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80010e2:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010e4:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010e8:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010ec:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80010f0:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80010f4:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010f6:	42a8      	cmp	r0, r5
 80010f8:	bf28      	it	cs
 80010fa:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010fc:	42b1      	cmp	r1, r6
 80010fe:	4663      	mov	r3, ip
 8001100:	468c      	mov	ip, r1
 8001102:	bf28      	it	cs
 8001104:	46b4      	movcs	ip, r6
 8001106:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800110a:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 800110e:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001112:	45bc      	cmp	ip, r7
 8001114:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001116:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800111a:	bf28      	it	cs
 800111c:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800111e:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001120:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001124:	46c1      	mov	r9, r8
 8001126:	bf28      	it	cs
 8001128:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800112a:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800112e:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001130:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001132:	d80b      	bhi.n	800114c <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001134:	4285      	cmp	r5, r0
 8001136:	d809      	bhi.n	800114c <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001138:	45bc      	cmp	ip, r7
 800113a:	d807      	bhi.n	800114c <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800113c:	45f0      	cmp	r8, lr
 800113e:	d805      	bhi.n	800114c <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001140:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001144:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001148:	4293      	cmp	r3, r2
 800114a:	d002      	beq.n	8001152 <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 800114c:	2300      	movs	r3, #0
 800114e:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001152:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff fd72 	bl	8000c40 <ASPEP_sendBeacon>
 800115c:	e71f      	b.n	8000f9e <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 800115e:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001162:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001166:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001168:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800116c:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001170:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001174:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001178:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800117a:	4561      	cmp	r1, ip
 800117c:	bf28      	it	cs
 800117e:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001180:	42b5      	cmp	r5, r6
 8001182:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001184:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001188:	bf28      	it	cs
 800118a:	4630      	movcs	r0, r6
 800118c:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8001190:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001194:	45b8      	cmp	r8, r7
 8001196:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001198:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800119c:	bf28      	it	cs
 800119e:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80011a0:	45ca      	cmp	sl, r9
 80011a2:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011a4:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80011a8:	bf28      	it	cs
 80011aa:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011ac:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80011b0:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011b2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80011b4:	d8cd      	bhi.n	8001152 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80011b6:	458c      	cmp	ip, r1
 80011b8:	d8cb      	bhi.n	8001152 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80011ba:	45b8      	cmp	r8, r7
 80011bc:	d8c9      	bhi.n	8001152 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80011be:	45ca      	cmp	sl, r9
 80011c0:	d8c7      	bhi.n	8001152 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80011c2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80011c6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d1c1      	bne.n	8001152 <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011ce:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011d0:	1c42      	adds	r2, r0, #1
 80011d2:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011d4:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011d6:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80011d8:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011dc:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80011de:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011e0:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80011e2:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011e6:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80011ea:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 80011ee:	e7b0      	b.n	8001152 <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 80011f0:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fd69 	bl	8000ccc <ASPEP_sendPing>
 80011fa:	e6d0      	b.n	8000f9e <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80011fc:	7f42      	ldrb	r2, [r0, #29]
 80011fe:	2101      	movs	r1, #1
 8001200:	f7ff fd64 	bl	8000ccc <ASPEP_sendPing>
 8001204:	e6cb      	b.n	8000f9e <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001206:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 800120a:	2303      	movs	r3, #3
 800120c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001210:	64a1      	str	r1, [r4, #72]	@ 0x48
 8001212:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8001214:	2204      	movs	r2, #4
 8001216:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001218:	6960      	ldr	r0, [r4, #20]
 800121a:	4798      	blx	r3
 800121c:	e704      	b.n	8001028 <ASPEP_RXframeProcess+0xc0>
 800121e:	bf00      	nop
 8001220:	0800a95c 	.word	0x0800a95c
 8001224:	0800a94c 	.word	0x0800a94c

08001228 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8001228:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 800122a:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 800122e:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8001230:	b13b      	cbz	r3, 8001242 <ASPEP_HWDataReceivedIT+0x1a>
 8001232:	2b01      	cmp	r3, #1
 8001234:	d104      	bne.n	8001240 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001236:	2200      	movs	r2, #0
 8001238:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 800123c:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8001240:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001242:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001244:	4a1e      	ldr	r2, [pc, #120]	@ (80012c0 <ASPEP_HWDataReceivedIT+0x98>)
 8001246:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800124e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8001256:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	b95b      	cbnz	r3, 800127a <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8001262:	7f03      	ldrb	r3, [r0, #28]
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	2b06      	cmp	r3, #6
 800126a:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 800126c:	d809      	bhi.n	8001282 <ASPEP_HWDataReceivedIT+0x5a>
 800126e:	2b04      	cmp	r3, #4
 8001270:	d81e      	bhi.n	80012b0 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001272:	2301      	movs	r3, #1
 8001274:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8001278:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 800127a:	2304      	movs	r3, #4
 800127c:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001280:	bd10      	pop	{r4, pc}
 8001282:	2b09      	cmp	r3, #9
 8001284:	d1f5      	bne.n	8001272 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8001286:	8b83      	ldrh	r3, [r0, #28]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 800128e:	b17b      	cbz	r3, 80012b0 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8001290:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8001294:	429a      	cmp	r2, r3
 8001296:	d30f      	bcc.n	80012b8 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8001298:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 800129c:	6981      	ldr	r1, [r0, #24]
 800129e:	6940      	ldr	r0, [r0, #20]
 80012a0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80012a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012a6:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 80012ae:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 80012b6:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 80012b8:	2302      	movs	r3, #2
 80012ba:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 80012be:	bd10      	pop	{r4, pc}
 80012c0:	0800a95c 	.word	0x0800a95c

080012c4 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 80012c4:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 80012c6:	2200      	movs	r2, #0
 80012c8:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80012cc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80012ce:	6940      	ldr	r0, [r0, #20]
 80012d0:	2204      	movs	r2, #4
 80012d2:	311c      	adds	r1, #28
 80012d4:	4718      	bx	r3
 80012d6:	bf00      	nop

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b510      	push	{r4, lr}
 80012da:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012dc:	2238      	movs	r2, #56	@ 0x38
 80012de:	2100      	movs	r1, #0
 80012e0:	a806      	add	r0, sp, #24
 80012e2:	f009 fa45 	bl	800a770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e6:	2000      	movs	r0, #0
 80012e8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80012ec:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80012f0:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012f2:	f004 fe17 	bl	8005f24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f6:	2001      	movs	r0, #1
 80012f8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80012fc:	2206      	movs	r2, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001302:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001304:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001306:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001308:	2155      	movs	r1, #85	@ 0x55
 800130a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001312:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001316:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f004 fe7d 	bl	8006018 <HAL_RCC_OscConfig>
 800131e:	b108      	cbz	r0, 8001324 <SystemClock_Config+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001322:	e7fe      	b.n	8001322 <SystemClock_Config+0x4a>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001324:	2104      	movs	r1, #4
 8001326:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800132a:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001332:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001338:	f005 f8e8 	bl	800650c <HAL_RCC_ClockConfig>
 800133c:	b108      	cbz	r0, 8001342 <SystemClock_Config+0x6a>
 800133e:	b672      	cpsid	i
  while (1)
 8001340:	e7fe      	b.n	8001340 <SystemClock_Config+0x68>
  HAL_RCC_EnableCSS();
 8001342:	f005 fa11 	bl	8006768 <HAL_RCC_EnableCSS>
}
 8001346:	b014      	add	sp, #80	@ 0x50
 8001348:	bd10      	pop	{r4, pc}
 800134a:	bf00      	nop

0800134c <main>:
{
 800134c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	2600      	movs	r6, #0
{
 8001352:	b0ab      	sub	sp, #172	@ 0xac
  HAL_Init();
 8001354:	f003 fcfe 	bl	8004d54 <HAL_Init>
  SystemClock_Config();
 8001358:	f7ff ffbe 	bl	80012d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
 8001360:	e9cd 661d 	strd	r6, r6, [sp, #116]	@ 0x74
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001364:	4c9a      	ldr	r4, [pc, #616]	@ (80015d0 <main+0x284>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	961f      	str	r6, [sp, #124]	@ 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001368:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001370:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	9304      	str	r3, [sp, #16]
 8001378:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800137a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001382:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	9305      	str	r3, [sp, #20]
 800138a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001394:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	9306      	str	r3, [sp, #24]
 800139c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80013a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80013a8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|TEST_Pin, GPIO_PIN_SET);
 80013ac:	2150      	movs	r1, #80	@ 0x50
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|TEST_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|TEST_Pin, GPIO_PIN_SET);
 80013b8:	f004 fdae 	bl	8005f18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80013bc:	4632      	mov	r2, r6
 80013be:	4885      	ldr	r0, [pc, #532]	@ (80015d4 <main+0x288>)
 80013c0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80013c4:	f004 fda8 	bl	8005f18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80013c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80013cc:	4882      	ldr	r0, [pc, #520]	@ (80015d8 <main+0x28c>)
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80013ce:	931b      	str	r3, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80013d0:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	961d      	str	r6, [sp, #116]	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013da:	931c      	str	r3, [sp, #112]	@ 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f004 fc94 	bl	8005d08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NSS_Pin|TEST_Pin;
 80013e0:	2350      	movs	r3, #80	@ 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	a91b      	add	r1, sp, #108	@ 0x6c
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	e9cd 661d 	strd	r6, r6, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013f0:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f004 fc88 	bl	8005d08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80013f8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	4875      	ldr	r0, [pc, #468]	@ (80015d4 <main+0x288>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80013fe:	931b      	str	r3, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001402:	e9cd 5a1c 	strd	r5, sl, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001406:	f8cd a078 	str.w	sl, [sp, #120]	@ 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f004 fc7d 	bl	8005d08 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800140e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001410:	f042 0204 	orr.w	r2, r2, #4
 8001414:	64a2      	str	r2, [r4, #72]	@ 0x48
 8001416:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001418:	f002 0204 	and.w	r2, r2, #4
 800141c:	9202      	str	r2, [sp, #8]
 800141e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001420:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001422:	432a      	orrs	r2, r5
 8001424:	64a2      	str	r2, [r4, #72]	@ 0x48
 8001426:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
  hadc1.Instance = ADC1;
 8001428:	4c6c      	ldr	r4, [pc, #432]	@ (80015dc <main+0x290>)
  ADC_MultiModeTypeDef multimode = {0};
 800142a:	960e      	str	r6, [sp, #56]	@ 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 800142c:	402a      	ands	r2, r5
 800142e:	9203      	str	r2, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001430:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001432:	9a03      	ldr	r2, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001434:	a81b      	add	r0, sp, #108	@ 0x6c
 8001436:	223c      	movs	r2, #60	@ 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 8001438:	e9cd 660f 	strd	r6, r6, [sp, #60]	@ 0x3c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800143c:	f009 f998 	bl	800a770 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001440:	2220      	movs	r2, #32
 8001442:	4631      	mov	r1, r6
 8001444:	a813      	add	r0, sp, #76	@ 0x4c
 8001446:	f009 f993 	bl	800a770 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800144a:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800144e:	e9c4 6601 	strd	r6, r6, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001452:	e9c4 6504 	strd	r6, r5, [r4, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001456:	e9c4 660b 	strd	r6, r6, [r4, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800145a:	83a6      	strh	r6, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145c:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001460:	f884 6038 	strb.w	r6, [r4, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001464:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001466:	f884 6040 	strb.w	r6, [r4, #64]	@ 0x40
  hadc1.Instance = ADC1;
 800146a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800146e:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001470:	4620      	mov	r0, r4
  hadc1.Init.NbrOfConversion = 1;
 8001472:	6225      	str	r5, [r4, #32]
  hadc1.Instance = ADC1;
 8001474:	6022      	str	r2, [r4, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001476:	60e7      	str	r7, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001478:	61a6      	str	r6, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800147a:	f003 fc8d 	bl	8004d98 <HAL_ADC_Init>
 800147e:	b108      	cbz	r0, 8001484 <main+0x138>
 8001480:	b672      	cpsid	i
  while (1)
 8001482:	e7fe      	b.n	8001482 <main+0x136>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001484:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001486:	a90e      	add	r1, sp, #56	@ 0x38
 8001488:	4620      	mov	r0, r4
 800148a:	f004 faaf 	bl	80059ec <HAL_ADCEx_MultiModeConfigChannel>
 800148e:	b108      	cbz	r0, 8001494 <main+0x148>
 8001490:	b672      	cpsid	i
  while (1)
 8001492:	e7fe      	b.n	8001492 <main+0x146>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001494:	4a52      	ldr	r2, [pc, #328]	@ (80015e0 <main+0x294>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001496:	f8ad 0090 	strh.w	r0, [sp, #144]	@ 0x90
  sConfigInjected.InjectedOffset = 0;
 800149a:	e9cd 601f 	strd	r6, r0, [sp, #124]	@ 0x7c
  sConfigInjected.QueueInjectedContext = DISABLE;
 800149e:	f88d 0092 	strb.w	r0, [sp, #146]	@ 0x92
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80014a2:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80014a6:	f04f 0980 	mov.w	r9, #128	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80014aa:	2309      	movs	r3, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80014ac:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80014b2:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80014b4:	e9cd 9925 	strd	r9, r9, [sp, #148]	@ 0x94
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80014b8:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80014bc:	951d      	str	r5, [sp, #116]	@ 0x74
  sConfigInjected.InjectedNbrOfConversion = 2;
 80014be:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80014c2:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014c6:	f003 ffb7 	bl	8005438 <HAL_ADCEx_InjectedConfigChannel>
 80014ca:	b108      	cbz	r0, 80014d0 <main+0x184>
 80014cc:	b672      	cpsid	i
  while (1)
 80014ce:	e7fe      	b.n	80014ce <main+0x182>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80014d0:	4844      	ldr	r0, [pc, #272]	@ (80015e4 <main+0x298>)
 80014d2:	f240 130f 	movw	r3, #271	@ 0x10f
 80014d6:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014da:	a91b      	add	r1, sp, #108	@ 0x6c
 80014dc:	4620      	mov	r0, r4
 80014de:	f003 ffab 	bl	8005438 <HAL_ADCEx_InjectedConfigChannel>
 80014e2:	b108      	cbz	r0, 80014e8 <main+0x19c>
 80014e4:	b672      	cpsid	i
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <main+0x19a>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014e8:	4a3f      	ldr	r2, [pc, #252]	@ (80015e8 <main+0x29c>)
  sConfig.Offset = 0;
 80014ea:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ec:	a913      	add	r1, sp, #76	@ 0x4c
 80014ee:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f0:	f04f 0b06 	mov.w	fp, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014f4:	e9cd 6815 	strd	r6, r8, [sp, #84]	@ 0x54
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f8:	e9cd 2b13 	strd	r2, fp, [sp, #76]	@ 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014fc:	9617      	str	r6, [sp, #92]	@ 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fe:	f003 fd4b 	bl	8004f98 <HAL_ADC_ConfigChannel>
 8001502:	4601      	mov	r1, r0
 8001504:	b108      	cbz	r0, 800150a <main+0x1be>
 8001506:	b672      	cpsid	i
  while (1)
 8001508:	e7fe      	b.n	8001508 <main+0x1bc>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800150a:	223c      	movs	r2, #60	@ 0x3c
 800150c:	9001      	str	r0, [sp, #4]
 800150e:	a81b      	add	r0, sp, #108	@ 0x6c
  hadc2.Instance = ADC2;
 8001510:	4c36      	ldr	r4, [pc, #216]	@ (80015ec <main+0x2a0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001512:	f009 f92d 	bl	800a770 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	9901      	ldr	r1, [sp, #4]
 8001518:	2220      	movs	r2, #32
 800151a:	a813      	add	r0, sp, #76	@ 0x4c
 800151c:	f009 f928 	bl	800a770 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001520:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8001522:	4a33      	ldr	r2, [pc, #204]	@ (80015f0 <main+0x2a4>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001524:	60e7      	str	r7, [r4, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001526:	4620      	mov	r0, r4
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001528:	e9c4 1101 	strd	r1, r1, [r4, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800152c:	e9c4 1504 	strd	r1, r5, [r4, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001530:	e9c4 110b 	strd	r1, r1, [r4, #44]	@ 0x2c
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001534:	61a6      	str	r6, [r4, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001536:	83a1      	strh	r1, [r4, #28]
  hadc2.Init.NbrOfConversion = 1;
 8001538:	6225      	str	r5, [r4, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800153a:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800153e:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001542:	63e1      	str	r1, [r4, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001544:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8001548:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800154a:	f003 fc25 	bl	8004d98 <HAL_ADC_Init>
 800154e:	b108      	cbz	r0, 8001554 <main+0x208>
 8001550:	b672      	cpsid	i
  while (1)
 8001552:	e7fe      	b.n	8001552 <main+0x206>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001554:	4923      	ldr	r1, [pc, #140]	@ (80015e4 <main+0x298>)
  sConfigInjected.InjectedOffset = 0;
 8001556:	9020      	str	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001558:	2309      	movs	r3, #9
 800155a:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800155e:	f8ad 0090 	strh.w	r0, [sp, #144]	@ 0x90
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001562:	f88d 0092 	strb.w	r0, [sp, #146]	@ 0x92
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001566:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800156a:	a91b      	add	r1, sp, #108	@ 0x6c
 800156c:	4620      	mov	r0, r4
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800156e:	e9cd 861e 	strd	r8, r6, [sp, #120]	@ 0x78
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001572:	e9cd 9925 	strd	r9, r9, [sp, #148]	@ 0x94
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001576:	951d      	str	r5, [sp, #116]	@ 0x74
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001578:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800157c:	f003 ff5c 	bl	8005438 <HAL_ADCEx_InjectedConfigChannel>
 8001580:	b108      	cbz	r0, 8001586 <main+0x23a>
 8001582:	b672      	cpsid	i
  while (1)
 8001584:	e7fe      	b.n	8001584 <main+0x238>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <main+0x2a8>)
 8001588:	f240 120f 	movw	r2, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800158c:	a91b      	add	r1, sp, #108	@ 0x6c
 800158e:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001590:	e9cd 321b 	strd	r3, r2, [sp, #108]	@ 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001594:	f003 ff50 	bl	8005438 <HAL_ADCEx_InjectedConfigChannel>
 8001598:	b108      	cbz	r0, 800159e <main+0x252>
 800159a:	b672      	cpsid	i
  while (1)
 800159c:	e7fe      	b.n	800159c <main+0x250>
  sConfig.Channel = ADC_CHANNEL_5;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <main+0x2ac>)
  sConfig.Offset = 0;
 80015a0:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015a2:	a913      	add	r1, sp, #76	@ 0x4c
 80015a4:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a6:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015aa:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80015ae:	9615      	str	r6, [sp, #84]	@ 0x54
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b0:	9617      	str	r6, [sp, #92]	@ 0x5c
  sConfig.Channel = ADC_CHANNEL_5;
 80015b2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015b4:	f003 fcf0 	bl	8004f98 <HAL_ADC_ConfigChannel>
 80015b8:	b108      	cbz	r0, 80015be <main+0x272>
 80015ba:	b672      	cpsid	i
  while (1)
 80015bc:	e7fe      	b.n	80015bc <main+0x270>
  hcordic.Instance = CORDIC;
 80015be:	480f      	ldr	r0, [pc, #60]	@ (80015fc <main+0x2b0>)
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <main+0x2b4>)
 80015c2:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80015c4:	f004 fa78 	bl	8005ab8 <HAL_CORDIC_Init>
 80015c8:	b1e0      	cbz	r0, 8001604 <main+0x2b8>
 80015ca:	b672      	cpsid	i
  while (1)
 80015cc:	e7fe      	b.n	80015cc <main+0x280>
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000400 	.word	0x48000400
 80015d8:	48000800 	.word	0x48000800
 80015dc:	200008fc 	.word	0x200008fc
 80015e0:	08600004 	.word	0x08600004
 80015e4:	3ac04000 	.word	0x3ac04000
 80015e8:	04300002 	.word	0x04300002
 80015ec:	20000890 	.word	0x20000890
 80015f0:	50000100 	.word	0x50000100
 80015f4:	10c00010 	.word	0x10c00010
 80015f8:	14f00020 	.word	0x14f00020
 80015fc:	20000868 	.word	0x20000868
 8001600:	40020c00 	.word	0x40020c00
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001604:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 8001606:	4da6      	ldr	r5, [pc, #664]	@ (80018a0 <main+0x554>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001608:	9412      	str	r4, [sp, #72]	@ 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160a:	4621      	mov	r1, r4
 800160c:	2234      	movs	r2, #52	@ 0x34
 800160e:	a81b      	add	r0, sp, #108	@ 0x6c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001610:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 8001614:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
 800161c:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
 8001620:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001628:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	9408      	str	r4, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800162e:	940b      	str	r4, [sp, #44]	@ 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001630:	9419      	str	r4, [sp, #100]	@ 0x64
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001632:	f009 f89d 	bl	800a770 <memset>
  htim1.Instance = TIM1;
 8001636:	4b9b      	ldr	r3, [pc, #620]	@ (80018a4 <main+0x558>)
 8001638:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800163a:	f04f 0a20 	mov.w	sl, #32
 800163e:	f640 3311 	movw	r3, #2833	@ 0xb11
 8001642:	e9c5 a302 	strd	sl, r3, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001646:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800164a:	2305      	movs	r3, #5
 800164c:	f44f 7480 	mov.w	r4, #256	@ 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001650:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001652:	e9c5 4304 	strd	r4, r3, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001656:	f005 fdb5 	bl	80071c4 <HAL_TIM_Base_Init>
 800165a:	b108      	cbz	r0, 8001660 <main+0x314>
 800165c:	b672      	cpsid	i
  while (1)
 800165e:	e7fe      	b.n	800165e <main+0x312>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001660:	4628      	mov	r0, r5
 8001662:	f005 fe5f 	bl	8007324 <HAL_TIM_PWM_Init>
 8001666:	b108      	cbz	r0, 800166c <main+0x320>
 8001668:	b672      	cpsid	i
  while (1)
 800166a:	e7fe      	b.n	800166a <main+0x31e>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800166c:	f04f 0806 	mov.w	r8, #6
 8001670:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001672:	a90e      	add	r1, sp, #56	@ 0x38
 8001674:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001676:	e9cd 830e 	strd	r8, r3, [sp, #56]	@ 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800167a:	f005 ff97 	bl	80075ac <HAL_TIM_SlaveConfigSynchro>
 800167e:	b108      	cbz	r0, 8001684 <main+0x338>
 8001680:	b672      	cpsid	i
  while (1)
 8001682:	e7fe      	b.n	8001682 <main+0x336>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001684:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001688:	2670      	movs	r6, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168a:	a908      	add	r1, sp, #32
 800168c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800168e:	9608      	str	r6, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001690:	f006 fa52 	bl	8007b38 <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	b108      	cbz	r0, 800169a <main+0x34e>
 8001696:	b672      	cpsid	i
  while (1)
 8001698:	e7fe      	b.n	8001698 <main+0x34c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800169a:	2301      	movs	r3, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800169c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800169e:	2102      	movs	r1, #2
 80016a0:	4628      	mov	r0, r5
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80016a2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80016a6:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80016a8:	f006 fae6 	bl	8007c78 <HAL_TIMEx_ConfigBreakInput>
 80016ac:	4602      	mov	r2, r0
 80016ae:	b108      	cbz	r0, 80016b4 <main+0x368>
 80016b0:	b672      	cpsid	i
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <main+0x366>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b4:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016b8:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016bc:	9019      	str	r0, [sp, #100]	@ 0x64
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80016be:	f04f 0e60 	mov.w	lr, #96	@ 0x60
 80016c2:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c6:	a913      	add	r1, sp, #76	@ 0x4c
 80016c8:	4628      	mov	r0, r5
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80016ca:	e9cd e313 	strd	lr, r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ce:	f006 f94d 	bl	800796c <HAL_TIM_PWM_ConfigChannel>
 80016d2:	b108      	cbz	r0, 80016d8 <main+0x38c>
 80016d4:	b672      	cpsid	i
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <main+0x38a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d8:	2204      	movs	r2, #4
 80016da:	a913      	add	r1, sp, #76	@ 0x4c
 80016dc:	4628      	mov	r0, r5
 80016de:	f006 f945 	bl	800796c <HAL_TIM_PWM_ConfigChannel>
 80016e2:	b108      	cbz	r0, 80016e8 <main+0x39c>
 80016e4:	b672      	cpsid	i
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <main+0x39a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e8:	2208      	movs	r2, #8
 80016ea:	a913      	add	r1, sp, #76	@ 0x4c
 80016ec:	4628      	mov	r0, r5
 80016ee:	f006 f93d 	bl	800796c <HAL_TIM_PWM_ConfigChannel>
 80016f2:	b108      	cbz	r0, 80016f8 <main+0x3ac>
 80016f4:	b672      	cpsid	i
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <main+0x3aa>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80016f8:	f44f 6331 	mov.w	r3, #2832	@ 0xb10
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016fc:	220c      	movs	r2, #12
 80016fe:	a913      	add	r1, sp, #76	@ 0x4c
 8001700:	4628      	mov	r0, r5
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001702:	9314      	str	r3, [sp, #80]	@ 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001704:	9613      	str	r6, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001706:	f006 f931 	bl	800796c <HAL_TIM_PWM_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	b108      	cbz	r0, 8001712 <main+0x3c6>
 800170e:	b672      	cpsid	i
  while (1)
 8001710:	e7fe      	b.n	8001710 <main+0x3c4>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001712:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001716:	9220      	str	r2, [sp, #128]	@ 0x80
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001718:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800171c:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001720:	e9cd 3321 	strd	r3, r3, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001724:	e9cd 3326 	strd	r3, r3, [sp, #152]	@ 0x98
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001728:	9223      	str	r2, [sp, #140]	@ 0x8c
  sBreakDeadTimeConfig.Break2Filter = 3;
 800172a:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 800172e:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001730:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
 8001734:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001738:	4628      	mov	r0, r5
 800173a:	a91b      	add	r1, sp, #108	@ 0x6c
  sBreakDeadTimeConfig.Break2Filter = 3;
 800173c:	e9cd 7224 	strd	r7, r2, [sp, #144]	@ 0x90
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001740:	e9cd c31b 	strd	ip, r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8001744:	941d      	str	r4, [sp, #116]	@ 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001746:	f006 fa49 	bl	8007bdc <HAL_TIMEx_ConfigBreakDeadTime>
 800174a:	b108      	cbz	r0, 8001750 <main+0x404>
 800174c:	b672      	cpsid	i
  while (1)
 800174e:	e7fe      	b.n	800174e <main+0x402>
  huart2.Instance = USART2;
 8001750:	4c55      	ldr	r4, [pc, #340]	@ (80018a8 <main+0x55c>)
  HAL_TIM_MspPostInit(&htim1);
 8001752:	4853      	ldr	r0, [pc, #332]	@ (80018a0 <main+0x554>)
  huart2.Init.BaudRate = 1843200;
 8001754:	4e55      	ldr	r6, [pc, #340]	@ (80018ac <main+0x560>)
  HAL_TIM_MspPostInit(&htim1);
 8001756:	f003 f88f 	bl	8004878 <HAL_TIM_MspPostInit>
  huart2.Init.BaudRate = 1843200;
 800175a:	f44f 12e1 	mov.w	r2, #1843200	@ 0x1c2000
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 1843200;
 8001760:	e9c4 6200 	strd	r6, r2, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001764:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001766:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001768:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800176c:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001774:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001778:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177a:	f006 fcfb 	bl	8008174 <HAL_UART_Init>
 800177e:	4601      	mov	r1, r0
 8001780:	b108      	cbz	r0, 8001786 <main+0x43a>
 8001782:	b672      	cpsid	i
  while (1)
 8001784:	e7fe      	b.n	8001784 <main+0x438>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001786:	4620      	mov	r0, r4
 8001788:	f006 fd7e 	bl	8008288 <HAL_UARTEx_SetTxFifoThreshold>
 800178c:	4601      	mov	r1, r0
 800178e:	b108      	cbz	r0, 8001794 <main+0x448>
 8001790:	b672      	cpsid	i
  while (1)
 8001792:	e7fe      	b.n	8001792 <main+0x446>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001794:	4620      	mov	r0, r4
 8001796:	f006 fdb9 	bl	800830c <HAL_UARTEx_SetRxFifoThreshold>
 800179a:	b108      	cbz	r0, 80017a0 <main+0x454>
 800179c:	b672      	cpsid	i
  while (1)
 800179e:	e7fe      	b.n	800179e <main+0x452>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017a0:	4620      	mov	r0, r4
 80017a2:	f006 fd53 	bl	800824c <HAL_UARTEx_DisableFifoMode>
 80017a6:	4604      	mov	r4, r0
 80017a8:	b108      	cbz	r0, 80017ae <main+0x462>
 80017aa:	b672      	cpsid	i
  while (1)
 80017ac:	e7fe      	b.n	80017ac <main+0x460>
  MX_MotorControl_Init();
 80017ae:	f001 fadb 	bl	8002d68 <MX_MotorControl_Init>
  hspi3.Instance = SPI3;
 80017b2:	483f      	ldr	r0, [pc, #252]	@ (80018b0 <main+0x564>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017b4:	493f      	ldr	r1, [pc, #252]	@ (80018b4 <main+0x568>)
 80017b6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80017ba:	e9c0 1300 	strd	r1, r3, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80017be:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80017c2:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e9c0 4304 	strd	r4, r3, [r0, #16]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017cc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80017d0:	2320      	movs	r3, #32
 80017d2:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 80017d6:	2307      	movs	r3, #7
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d8:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi3.Init.CRCPolynomial = 7;
 80017dc:	e9c0 430a 	strd	r4, r3, [r0, #40]	@ 0x28
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017e0:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017e4:	f005 fa30 	bl	8006c48 <HAL_SPI_Init>
 80017e8:	b108      	cbz	r0, 80017ee <main+0x4a2>
 80017ea:	b672      	cpsid	i
  while (1)
 80017ec:	e7fe      	b.n	80017ec <main+0x4a0>
  htim2.Instance = TIM2;
 80017ee:	4c32      	ldr	r4, [pc, #200]	@ (80018b8 <main+0x56c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	9015      	str	r0, [sp, #84]	@ 0x54
  htim2.Init.Prescaler = 17-1;
 80017f2:	2610      	movs	r6, #16
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f4:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
 80017f8:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	e9c4 6001 	strd	r6, r0, [r4, #4]
  htim2.Instance = TIM2;
 8001804:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001808:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800180a:	2780      	movs	r7, #128	@ 0x80
  htim2.Init.Period = 9999;
 800180c:	f242 730f 	movw	r3, #9999	@ 0x270f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001810:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8001812:	6022      	str	r2, [r4, #0]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001814:	61a7      	str	r7, [r4, #24]
  htim2.Init.Period = 9999;
 8001816:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001818:	f005 fcd4 	bl	80071c4 <HAL_TIM_Base_Init>
 800181c:	b108      	cbz	r0, 8001822 <main+0x4d6>
 800181e:	b672      	cpsid	i
  while (1)
 8001820:	e7fe      	b.n	8001820 <main+0x4d4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001822:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001826:	a91b      	add	r1, sp, #108	@ 0x6c
 8001828:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182a:	951b      	str	r5, [sp, #108]	@ 0x6c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800182c:	f005 fdf0 	bl	8007410 <HAL_TIM_ConfigClockSource>
 8001830:	4603      	mov	r3, r0
 8001832:	b108      	cbz	r0, 8001838 <main+0x4ec>
 8001834:	b672      	cpsid	i
  while (1)
 8001836:	e7fe      	b.n	8001836 <main+0x4ea>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001838:	4620      	mov	r0, r4
 800183a:	a913      	add	r1, sp, #76	@ 0x4c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	9313      	str	r3, [sp, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001840:	f006 f97a 	bl	8007b38 <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	b108      	cbz	r0, 800184a <main+0x4fe>
 8001846:	b672      	cpsid	i
  while (1)
 8001848:	e7fe      	b.n	8001848 <main+0x4fc>
  htim3.Instance = TIM3;
 800184a:	4c1c      	ldr	r4, [pc, #112]	@ (80018bc <main+0x570>)
 800184c:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <main+0x574>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184e:	9015      	str	r0, [sp, #84]	@ 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001850:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
 8001854:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	6120      	str	r0, [r4, #16]
  htim3.Instance = TIM3;
 8001860:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001862:	4620      	mov	r0, r4
  htim3.Init.Period = 999;
 8001864:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim3.Init.Prescaler = 17-1;
 8001868:	6066      	str	r6, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800186a:	61a7      	str	r7, [r4, #24]
  htim3.Init.Period = 999;
 800186c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800186e:	f005 fca9 	bl	80071c4 <HAL_TIM_Base_Init>
 8001872:	b108      	cbz	r0, 8001878 <main+0x52c>
 8001874:	b672      	cpsid	i
  while (1)
 8001876:	e7fe      	b.n	8001876 <main+0x52a>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001878:	a91b      	add	r1, sp, #108	@ 0x6c
 800187a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187c:	951b      	str	r5, [sp, #108]	@ 0x6c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800187e:	f005 fdc7 	bl	8007410 <HAL_TIM_ConfigClockSource>
 8001882:	b108      	cbz	r0, 8001888 <main+0x53c>
 8001884:	b672      	cpsid	i
  while (1)
 8001886:	e7fe      	b.n	8001886 <main+0x53a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800188a:	480c      	ldr	r0, [pc, #48]	@ (80018bc <main+0x570>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800188e:	a913      	add	r1, sp, #76	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001892:	f006 f951 	bl	8007b38 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4604      	mov	r4, r0
 8001898:	b1a0      	cbz	r0, 80018c4 <main+0x578>
 800189a:	b672      	cpsid	i
  while (1)
 800189c:	e7fe      	b.n	800189c <main+0x550>
 800189e:	bf00      	nop
 80018a0:	200007b8 	.word	0x200007b8
 80018a4:	40012c00 	.word	0x40012c00
 80018a8:	20000690 	.word	0x20000690
 80018ac:	40004400 	.word	0x40004400
 80018b0:	20000804 	.word	0x20000804
 80018b4:	40003c00 	.word	0x40003c00
 80018b8:	2000076c 	.word	0x2000076c
 80018bc:	20000720 	.word	0x20000720
 80018c0:	40000400 	.word	0x40000400
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80018c4:	2103      	movs	r1, #3
 80018c6:	2201      	movs	r2, #1
 80018c8:	2026      	movs	r0, #38	@ 0x26
 80018ca:	f004 f921 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018ce:	2026      	movs	r0, #38	@ 0x26
 80018d0:	f004 f95a 	bl	8005b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80018d4:	4622      	mov	r2, r4
 80018d6:	2103      	movs	r1, #3
 80018d8:	200b      	movs	r0, #11
 80018da:	f004 f919 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018de:	200b      	movs	r0, #11
 80018e0:	f004 f952 	bl	8005b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2104      	movs	r1, #4
 80018e8:	2018      	movs	r0, #24
 80018ea:	f004 f911 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80018ee:	2018      	movs	r0, #24
 80018f0:	f004 f94a 	bl	8005b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80018f4:	4622      	mov	r2, r4
 80018f6:	4621      	mov	r1, r4
 80018f8:	2019      	movs	r0, #25
 80018fa:	f004 f909 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018fe:	2019      	movs	r0, #25
 8001900:	f004 f942 	bl	8005b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001904:	4622      	mov	r2, r4
 8001906:	2102      	movs	r1, #2
 8001908:	2012      	movs	r0, #18
 800190a:	f004 f901 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800190e:	2012      	movs	r0, #18
 8001910:	f004 f93a 	bl	8005b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001914:	4622      	mov	r2, r4
 8001916:	2103      	movs	r1, #3
 8001918:	2028      	movs	r0, #40	@ 0x28
 800191a:	f004 f8f9 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800191e:	2028      	movs	r0, #40	@ 0x28
 8001920:	f004 f932 	bl	8005b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8001924:	4621      	mov	r1, r4
 8001926:	2201      	movs	r2, #1
 8001928:	201d      	movs	r0, #29
 800192a:	f004 f8f1 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800192e:	201d      	movs	r0, #29
 8001930:	f004 f92a 	bl	8005b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001934:	4622      	mov	r2, r4
 8001936:	2101      	movs	r1, #1
 8001938:	201c      	movs	r0, #28
 800193a:	f004 f8e9 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193e:	201c      	movs	r0, #28
 8001940:	f004 f922 	bl	8005b88 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Init(&htim2);
 8001944:	4807      	ldr	r0, [pc, #28]	@ (8001964 <main+0x618>)
 8001946:	f005 fc3d 	bl	80071c4 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800194a:	4806      	ldr	r0, [pc, #24]	@ (8001964 <main+0x618>)
 800194c:	f005 fcb0 	bl	80072b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Init(&htim3);
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <main+0x61c>)
 8001952:	f005 fc37 	bl	80071c4 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001956:	4804      	ldr	r0, [pc, #16]	@ (8001968 <main+0x61c>)
 8001958:	f005 fcaa 	bl	80072b0 <HAL_TIM_Base_Start_IT>
  HAL_SPI_Init(&hspi3);
 800195c:	4803      	ldr	r0, [pc, #12]	@ (800196c <main+0x620>)
 800195e:	f005 f973 	bl	8006c48 <HAL_SPI_Init>
  while (1)
 8001962:	e7fe      	b.n	8001962 <main+0x616>
 8001964:	2000076c 	.word	0x2000076c
 8001968:	20000720 	.word	0x20000720
 800196c:	20000804 	.word	0x20000804

08001970 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM3)
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001972:	6802      	ldr	r2, [r0, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d000      	beq.n	800197a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001978:	4770      	bx	lr
		CounterSPI ++;
 800197a:	4a03      	ldr	r2, [pc, #12]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	6013      	str	r3, [r2, #0]
}
 8001982:	4770      	bx	lr
 8001984:	40000400 	.word	0x40000400
 8001988:	200005cc 	.word	0x200005cc

0800198c <Error_Handler>:
 800198c:	b672      	cpsid	i
  while (1)
 800198e:	e7fe      	b.n	800198e <Error_Handler+0x2>

08001990 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001990:	4b01      	ldr	r3, [pc, #4]	@ (8001998 <MC_StartMotor1+0x8>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	f000 b890 	b.w	8001ab8 <MCI_StartMotor>
 8001998:	20001ce0 	.word	0x20001ce0

0800199c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 800199c:	4b01      	ldr	r3, [pc, #4]	@ (80019a4 <MC_StopMotor1+0x8>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	f000 b8a0 	b.w	8001ae4 <MCI_StopMotor>
 80019a4:	20001ce0 	.word	0x20001ce0

080019a8 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 80019a8:	4b01      	ldr	r3, [pc, #4]	@ (80019b0 <MC_GetSTMStateMotor1+0x8>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	f000 b87e 	b.w	8001aac <MCI_GetSTMState>
 80019b0:	20001ce0 	.word	0x20001ce0

080019b4 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 80019b4:	2002      	movs	r0, #2
 80019b6:	4770      	bx	lr

080019b8 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80019c0:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 80019c4:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 80019c8:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80019ca:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80019ce:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 80019d2:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80019d6:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 80019da:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 80019de:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80019e2:	4770      	bx	lr

080019e4 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80019e4:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80019e8:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80019ec:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80019f0:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80019f2:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80019f4:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80019f6:	4770      	bx	lr

080019f8 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80019f8:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80019fc:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001a00:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8001a04:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8001a06:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001a08:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001a0a:	4770      	bx	lr

08001a0c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001a0c:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001a0e:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001a10:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001a14:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8001a16:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001a1a:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001a1c:	b002      	add	sp, #8
 8001a1e:	4770      	bx	lr

08001a20 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001a20:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001a22:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001a26:	430b      	orrs	r3, r1
 8001a28:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 8001a2c:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001a30:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001a32:	8381      	strh	r1, [r0, #28]

  return;
}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001a38:	7f83      	ldrb	r3, [r0, #30]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d000      	beq.n	8001a40 <MCI_ExecBufferedCommands+0x8>
 8001a3e:	4770      	bx	lr
{
 8001a40:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001a42:	7b02      	ldrb	r2, [r0, #12]
 8001a44:	2a02      	cmp	r2, #2
 8001a46:	4604      	mov	r4, r0
 8001a48:	d006      	beq.n	8001a58 <MCI_ExecBufferedCommands+0x20>
 8001a4a:	2a03      	cmp	r2, #3
 8001a4c:	d026      	beq.n	8001a9c <MCI_ExecBufferedCommands+0x64>
 8001a4e:	2a01      	cmp	r2, #1
 8001a50:	d015      	beq.n	8001a7e <MCI_ExecBufferedCommands+0x46>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001a52:	2303      	movs	r3, #3
 8001a54:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001a56:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001a58:	6843      	ldr	r3, [r0, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001a60:	6800      	ldr	r0, [r0, #0]
 8001a62:	2104      	movs	r1, #4
 8001a64:	f008 fa0a 	bl	8009e7c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001a68:	8ae2      	ldrh	r2, [r4, #22]
 8001a6a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001a6e:	6820      	ldr	r0, [r4, #0]
 8001a70:	f008 fa08 	bl	8009e84 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d0ec      	beq.n	8001a52 <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	77a3      	strb	r3, [r4, #30]
}
 8001a7c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001a7e:	6843      	ldr	r3, [r0, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001a86:	6800      	ldr	r0, [r0, #0]
 8001a88:	2103      	movs	r1, #3
 8001a8a:	f008 f9f7 	bl	8009e7c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001a8e:	8ae2      	ldrh	r2, [r4, #22]
 8001a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a94:	6820      	ldr	r0, [r4, #0]
 8001a96:	f008 f9f5 	bl	8009e84 <STC_ExecRamp>
          break;
 8001a9a:	e7eb      	b.n	8001a74 <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001a9c:	6842      	ldr	r2, [r0, #4]
 8001a9e:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001aa2:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001aa6:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001aa8:	e7e6      	b.n	8001a78 <MCI_ExecBufferedCommands+0x40>
 8001aaa:	bf00      	nop

08001aac <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 8001aac:	7e40      	ldrb	r0, [r0, #25]
 8001aae:	4770      	bx	lr

08001ab0 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 8001ab0:	8b80      	ldrh	r0, [r0, #28]
 8001ab2:	4770      	bx	lr

08001ab4 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 8001ab4:	8b40      	ldrh	r0, [r0, #26]
 8001ab6:	4770      	bx	lr

08001ab8 <MCI_StartMotor>:
{
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001abc:	f7ff fff6 	bl	8001aac <MCI_GetSTMState>
 8001ac0:	b108      	cbz	r0, 8001ac6 <MCI_StartMotor+0xe>
    RetVal = false;
 8001ac2:	2000      	movs	r0, #0
}
 8001ac4:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff fff2 	bl	8001ab0 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d1f8      	bne.n	8001ac2 <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff ffef 	bl	8001ab4 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d1f3      	bne.n	8001ac2 <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 8001ada:	2001      	movs	r0, #1
 8001adc:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ade:	77a0      	strb	r0, [r4, #30]
}
 8001ae0:	bd10      	pop	{r4, pc}
 8001ae2:	bf00      	nop

08001ae4 <MCI_StopMotor>:
{
 8001ae4:	b538      	push	{r3, r4, r5, lr}
 8001ae6:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 8001ae8:	f7ff ffe0 	bl	8001aac <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 8001aec:	4604      	mov	r4, r0
 8001aee:	b118      	cbz	r0, 8001af8 <MCI_StopMotor+0x14>
 8001af0:	f1b0 040c 	subs.w	r4, r0, #12
 8001af4:	bf18      	it	ne
 8001af6:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001af8:	4628      	mov	r0, r5
 8001afa:	f7ff ffd9 	bl	8001ab0 <MCI_GetOccurredFaults>
 8001afe:	b110      	cbz	r0, 8001b06 <MCI_StopMotor+0x22>
    RetVal = false;
 8001b00:	2400      	movs	r4, #0
}
 8001b02:	4620      	mov	r0, r4
 8001b04:	bd38      	pop	{r3, r4, r5, pc}
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001b06:	4628      	mov	r0, r5
 8001b08:	f7ff ffd4 	bl	8001ab4 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	d1f7      	bne.n	8001b00 <MCI_StopMotor+0x1c>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001b10:	2c00      	cmp	r4, #0
 8001b12:	d0f5      	beq.n	8001b00 <MCI_StopMotor+0x1c>
    pHandle->DirectCommand = MCI_STOP;
 8001b14:	2305      	movs	r3, #5
 8001b16:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 8001b18:	e7f3      	b.n	8001b02 <MCI_StopMotor+0x1e>
 8001b1a:	bf00      	nop

08001b1c <MCI_FaultAcknowledged>:
{
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001b20:	f7ff ffc4 	bl	8001aac <MCI_GetSTMState>
 8001b24:	280b      	cmp	r0, #11
 8001b26:	d001      	beq.n	8001b2c <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 8001b28:	2000      	movs	r0, #0
}
 8001b2a:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff ffc1 	bl	8001ab4 <MCI_GetCurrentFaults>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d1f8      	bne.n	8001b28 <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001b36:	2302      	movs	r3, #2
 8001b38:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 8001b3a:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 8001b3c:	2001      	movs	r0, #1
}
 8001b3e:	bd10      	pop	{r4, pc}

08001b40 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001b40:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001b42:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 8001b44:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001b4c:	7fc0      	ldrb	r0, [r0, #31]
 8001b4e:	4770      	bx	lr

08001b50 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001b50:	7b03      	ldrb	r3, [r0, #12]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d005      	beq.n	8001b62 <MCI_GetImposedMotorDirection+0x12>
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d013      	beq.n	8001b82 <MCI_GetImposedMotorDirection+0x32>
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d009      	beq.n	8001b72 <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 8001b5e:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
}
 8001b60:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8001b62:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bfac      	ite	ge
 8001b6a:	2001      	movge	r0, #1
 8001b6c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001b70:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8001b72:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bfac      	ite	ge
 8001b7a:	2001      	movge	r0, #1
 8001b7c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001b80:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8001b82:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bfac      	ite	ge
 8001b8a:	2001      	movge	r0, #1
 8001b8c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop

08001b94 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001b94:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop

08001b9c <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8001b9c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001ba4:	8ac0      	ldrh	r0, [r0, #22]
 8001ba6:	4770      	bx	lr

08001ba8 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001ba8:	6800      	ldr	r0, [r0, #0]
 8001baa:	f008 b9ab 	b.w	8009f04 <STC_StopRamp>
 8001bae:	bf00      	nop

08001bb0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001bb0:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001bb2:	6800      	ldr	r0, [r0, #0]
 8001bb4:	f008 f950 	bl	8009e58 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 8001bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001bbc:	f008 b8ec 	b.w	8009d98 <SPD_GetAvrgMecSpeedUnit>

08001bc0 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001bc0:	6800      	ldr	r0, [r0, #0]
 8001bc2:	f008 b953 	b.w	8009e6c <STC_GetMecSpeedRefUnit>
 8001bc6:	bf00      	nop

08001bc8 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001bc8:	6842      	ldr	r2, [r0, #4]
 8001bca:	6810      	ldr	r0, [r2, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	b282      	uxth	r2, r0
 8001bd0:	f362 030f 	bfi	r3, r2, #0, #16
 8001bd4:	0c00      	lsrs	r0, r0, #16
 8001bd6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001bda:	b082      	sub	sp, #8
#endif
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	b002      	add	sp, #8
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop

08001be4 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001be4:	6842      	ldr	r2, [r0, #4]
 8001be6:	6850      	ldr	r0, [r2, #4]
 8001be8:	2300      	movs	r3, #0
 8001bea:	b282      	uxth	r2, r0
 8001bec:	f362 030f 	bfi	r3, r2, #0, #16
 8001bf0:	0c00      	lsrs	r0, r0, #16
 8001bf2:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001bf6:	b082      	sub	sp, #8
#endif
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	b002      	add	sp, #8
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop

08001c00 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001c00:	6842      	ldr	r2, [r0, #4]
 8001c02:	68d0      	ldr	r0, [r2, #12]
 8001c04:	2300      	movs	r3, #0
 8001c06:	b282      	uxth	r2, r0
 8001c08:	f362 030f 	bfi	r3, r2, #0, #16
 8001c0c:	0c00      	lsrs	r0, r0, #16
 8001c0e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001c12:	b082      	sub	sp, #8
#endif
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	b002      	add	sp, #8
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001c1c:	6842      	ldr	r2, [r0, #4]
 8001c1e:	6910      	ldr	r0, [r2, #16]
 8001c20:	2300      	movs	r3, #0
 8001c22:	b282      	uxth	r2, r0
 8001c24:	f362 030f 	bfi	r3, r2, #0, #16
 8001c28:	0c00      	lsrs	r0, r0, #16
 8001c2a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001c2e:	b082      	sub	sp, #8
#endif
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	b002      	add	sp, #8
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop

08001c38 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001c38:	6842      	ldr	r2, [r0, #4]
 8001c3a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	b282      	uxth	r2, r0
 8001c42:	f362 030f 	bfi	r3, r2, #0, #16
 8001c46:	0c00      	lsrs	r0, r0, #16
 8001c48:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001c4c:	b082      	sub	sp, #8
#endif
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	b002      	add	sp, #8
 8001c52:	4770      	bx	lr

08001c54 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001c54:	6842      	ldr	r2, [r0, #4]
 8001c56:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	b282      	uxth	r2, r0
 8001c5e:	f362 030f 	bfi	r3, r2, #0, #16
 8001c62:	0c00      	lsrs	r0, r0, #16
 8001c64:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001c68:	b082      	sub	sp, #8
#endif
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	b002      	add	sp, #8
 8001c6e:	4770      	bx	lr

08001c70 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001c70:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001c72:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001c76:	4770      	bx	lr

08001c78 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001c78:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8001c7a:	e9d0 0400 	ldrd	r0, r4, [r0]
 8001c7e:	f008 f97f 	bl	8009f80 <STC_GetDefaultIqdref>
 8001c82:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001c86:	8220      	strh	r0, [r4, #16]
 8001c88:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001c8a:	bd10      	pop	{r4, pc}

08001c8c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8001c8c:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001c90:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001c94:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001c98:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001c9c:	fb10 f202 	smulbb	r2, r0, r2
 8001ca0:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001ca4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8001ca8:	b084      	sub	sp, #16
 8001caa:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8001cac:	da05      	bge.n	8001cba <MCM_Clarke+0x2e>
 8001cae:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001cb0:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8001cb4:	da0c      	bge.n	8001cd0 <MCM_Clarke+0x44>
 8001cb6:	4a09      	ldr	r2, [pc, #36]	@ (8001cdc <MCM_Clarke+0x50>)
 8001cb8:	e001      	b.n	8001cbe <MCM_Clarke+0x32>
 8001cba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f363 000f 	bfi	r0, r3, #0, #16
 8001cc6:	b293      	uxth	r3, r2
 8001cc8:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001ccc:	b004      	add	sp, #16
 8001cce:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <MCM_Clarke+0x50>)
 8001cd2:	b20a      	sxth	r2, r1
 8001cd4:	4282      	cmp	r2, r0
 8001cd6:	bfb8      	it	lt
 8001cd8:	4602      	movlt	r2, r0
 8001cda:	e7f0      	b.n	8001cbe <MCM_Clarke+0x32>
 8001cdc:	ffff8001 	.word	0xffff8001

08001ce0 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001ce2:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001ce6:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001cea:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001cee:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001cf0:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001cf2:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f362 000f 	bfi	r0, r2, #0, #16
 8001cfc:	0c1b      	lsrs	r3, r3, #16
{
 8001cfe:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8001d00:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001d04:	b002      	add	sp, #8
 8001d06:	4770      	bx	lr
 8001d08:	40020c00 	.word	0x40020c00

08001d0c <MCM_Park>:
{
 8001d0c:	b530      	push	{r4, r5, lr}
 8001d0e:	4605      	mov	r5, r0
 8001d10:	4604      	mov	r4, r0
 8001d12:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001d14:	4608      	mov	r0, r1
 8001d16:	f7ff ffe3 	bl	8001ce0 <MCM_Trig_Functions>
 8001d1a:	b22d      	sxth	r5, r5
 8001d1c:	b201      	sxth	r1, r0
 8001d1e:	1424      	asrs	r4, r4, #16
 8001d20:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001d22:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001d26:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8001d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d2e:	da05      	bge.n	8001d3c <MCM_Park+0x30>
 8001d30:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8001d32:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8001d36:	da22      	bge.n	8001d7e <MCM_Park+0x72>
 8001d38:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <MCM_Park+0x80>)
 8001d3a:	e001      	b.n	8001d40 <MCM_Park+0x34>
 8001d3c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001d40:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001d44:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8001d48:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001d4c:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001d50:	da04      	bge.n	8001d5c <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8001d52:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001d56:	da0c      	bge.n	8001d72 <MCM_Park+0x66>
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MCM_Park+0x80>)
 8001d5a:	e001      	b.n	8001d60 <MCM_Park+0x54>
 8001d5c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 8001d60:	b292      	uxth	r2, r2
 8001d62:	2000      	movs	r0, #0
 8001d64:	f362 000f 	bfi	r0, r2, #0, #16
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001d6e:	b005      	add	sp, #20
 8001d70:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001d72:	4906      	ldr	r1, [pc, #24]	@ (8001d8c <MCM_Park+0x80>)
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	428b      	cmp	r3, r1
 8001d78:	bfb8      	it	lt
 8001d7a:	460b      	movlt	r3, r1
 8001d7c:	e7f0      	b.n	8001d60 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001d7e:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <MCM_Park+0x80>)
 8001d80:	b212      	sxth	r2, r2
 8001d82:	429a      	cmp	r2, r3
 8001d84:	bfb8      	it	lt
 8001d86:	461a      	movlt	r2, r3
 8001d88:	e7da      	b.n	8001d40 <MCM_Park+0x34>
 8001d8a:	bf00      	nop
 8001d8c:	ffff8001 	.word	0xffff8001

08001d90 <MCM_Rev_Park>:
{
 8001d90:	b530      	push	{r4, r5, lr}
 8001d92:	4605      	mov	r5, r0
 8001d94:	b085      	sub	sp, #20
 8001d96:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001d98:	4608      	mov	r0, r1
 8001d9a:	f7ff ffa1 	bl	8001ce0 <MCM_Trig_Functions>
 8001d9e:	1424      	asrs	r4, r4, #16
 8001da0:	1402      	asrs	r2, r0, #16
 8001da2:	b22d      	sxth	r5, r5
 8001da4:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001da6:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001daa:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001dae:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001db2:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001db6:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f363 000f 	bfi	r0, r3, #0, #16
 8001dc0:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001dc4:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001dc8:	b005      	add	sp, #20
 8001dca:	bd30      	pop	{r4, r5, pc}

08001dcc <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	dd09      	ble.n	8001de4 <MCM_Sqrt+0x18>
 8001dd0:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8001dd2:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <MCM_Sqrt+0x1c>)
 8001dd4:	f240 1269 	movw	r2, #361	@ 0x169
 8001dd8:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001dda:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001ddc:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001dde:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8001de0:	b662      	cpsie	i
}
 8001de2:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001de4:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001de6:	4770      	bx	lr
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	00000000 	.word	0x00000000

08001df0 <readAs5048a>:
	return x & 0x1;
}

void readAs5048a(SPI_HandleTypeDef *hspi)
{
	command1 = (RW << 14) | (adress & 0x3FFF) ;
 8001df0:	4a73      	ldr	r2, [pc, #460]	@ (8001fc0 <readAs5048a+0x1d0>)
 8001df2:	4b74      	ldr	r3, [pc, #464]	@ (8001fc4 <readAs5048a+0x1d4>)
 8001df4:	8811      	ldrh	r1, [r2, #0]
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8001dfc:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
 8001e00:	f001 0301 	and.w	r3, r1, #1
{
 8001e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	command1 = (RW << 14) | (adress & 0x3FFF) ;
 8001e08:	b28a      	uxth	r2, r1
		if (command & 0x1)
 8001e0a:	078e      	lsls	r6, r1, #30
			x++;
 8001e0c:	bf48      	it	mi
 8001e0e:	3301      	addmi	r3, #1
		if (command & 0x1)
 8001e10:	0755      	lsls	r5, r2, #29
			x++;
 8001e12:	bf44      	itt	mi
 8001e14:	3301      	addmi	r3, #1
 8001e16:	b2db      	uxtbmi	r3, r3
{
 8001e18:	4604      	mov	r4, r0
		if (command & 0x1)
 8001e1a:	0710      	lsls	r0, r2, #28
			x++;
 8001e1c:	bf44      	itt	mi
 8001e1e:	3301      	addmi	r3, #1
 8001e20:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e22:	06d1      	lsls	r1, r2, #27
			x++;
 8001e24:	bf44      	itt	mi
 8001e26:	3301      	addmi	r3, #1
 8001e28:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e2a:	0697      	lsls	r7, r2, #26
			x++;
 8001e2c:	bf44      	itt	mi
 8001e2e:	3301      	addmi	r3, #1
 8001e30:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e32:	0656      	lsls	r6, r2, #25
			x++;
 8001e34:	bf44      	itt	mi
 8001e36:	3301      	addmi	r3, #1
 8001e38:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e3a:	0615      	lsls	r5, r2, #24
			x++;
 8001e3c:	bf44      	itt	mi
 8001e3e:	3301      	addmi	r3, #1
 8001e40:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e42:	05d0      	lsls	r0, r2, #23
			x++;
 8001e44:	bf44      	itt	mi
 8001e46:	3301      	addmi	r3, #1
 8001e48:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e4a:	0591      	lsls	r1, r2, #22
			x++;
 8001e4c:	bf44      	itt	mi
 8001e4e:	3301      	addmi	r3, #1
 8001e50:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e52:	0557      	lsls	r7, r2, #21
			x++;
 8001e54:	bf44      	itt	mi
 8001e56:	3301      	addmi	r3, #1
 8001e58:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e5a:	0516      	lsls	r6, r2, #20
			x++;
 8001e5c:	bf44      	itt	mi
 8001e5e:	3301      	addmi	r3, #1
 8001e60:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e62:	04d5      	lsls	r5, r2, #19
			x++;
 8001e64:	bf44      	itt	mi
 8001e66:	3301      	addmi	r3, #1
 8001e68:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e6a:	0490      	lsls	r0, r2, #18
			x++;
 8001e6c:	bf44      	itt	mi
 8001e6e:	3301      	addmi	r3, #1
 8001e70:	b2db      	uxtbmi	r3, r3
		if (command & 0x1)
 8001e72:	0451      	lsls	r1, r2, #17
			x++;
 8001e74:	bf44      	itt	mi
 8001e76:	3301      	addmi	r3, #1
 8001e78:	b2db      	uxtbmi	r3, r3
{
 8001e7a:	ed2d 8b02 	vpush	{d8}
		if (command & 0x1)
 8001e7e:	0bd1      	lsrs	r1, r2, #15
			x++;
 8001e80:	bf1c      	itt	ne
 8001e82:	3301      	addne	r3, #1
 8001e84:	b2db      	uxtbne	r3, r3
{
 8001e86:	b083      	sub	sp, #12
	command1 = ((uint16_t)CalcParityBit(command1)<<15)|command1; //0b1111 1111 1111 1111
 8001e88:	4e4f      	ldr	r6, [pc, #316]	@ (8001fc8 <readAs5048a+0x1d8>)
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	ea42 33c3 	orr.w	r3, r2, r3, lsl #15

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&command1, (uint8_t*)&response1,sizeof(uint8_t), 1);
 8001e92:	2501      	movs	r5, #1
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2110      	movs	r1, #16
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	command1 = ((uint16_t)CalcParityBit(command1)<<15)|command1; //0b1111 1111 1111 1111
 8001e9c:	8033      	strh	r3, [r6, #0]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001e9e:	f004 f83b 	bl	8005f18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&command1, (uint8_t*)&response1,sizeof(uint8_t), 1);
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	4a49      	ldr	r2, [pc, #292]	@ (8001fcc <readAs5048a+0x1dc>)
 8001ea6:	9500      	str	r5, [sp, #0]
 8001ea8:	4631      	mov	r1, r6
 8001eaa:	4849      	ldr	r0, [pc, #292]	@ (8001fd0 <readAs5048a+0x1e0>)
 8001eac:	f004 ff4a 	bl	8006d44 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001eb0:	462a      	mov	r2, r5
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb8:	f004 f82e 	bl	8005f18 <HAL_GPIO_WritePin>
 8001ebc:	2505      	movs	r5, #5

	for (int i = 0; i<5; i++)
	  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec6:	f004 f827 	bl	8005f18 <HAL_GPIO_WritePin>
	for (int i = 0; i<5; i++)
 8001eca:	3d01      	subs	r5, #1
 8001ecc:	d1f7      	bne.n	8001ebe <readAs5048a+0xce>

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&NOP, (uint8_t*)&response1,sizeof(uint8_t), 1);
 8001ece:	4f3f      	ldr	r7, [pc, #252]	@ (8001fcc <readAs5048a+0x1dc>)
 8001ed0:	2601      	movs	r6, #1
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001ed2:	462a      	mov	r2, r5
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eda:	f004 f81d 	bl	8005f18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&NOP, (uint8_t*)&response1,sizeof(uint8_t), 1);
 8001ede:	4633      	mov	r3, r6
 8001ee0:	493c      	ldr	r1, [pc, #240]	@ (8001fd4 <readAs5048a+0x1e4>)
 8001ee2:	483b      	ldr	r0, [pc, #236]	@ (8001fd0 <readAs5048a+0x1e0>)
 8001ee4:	9600      	str	r6, [sp, #0]
 8001ee6:	463a      	mov	r2, r7
 8001ee8:	f004 ff2c 	bl	8006d44 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001eec:	4632      	mov	r2, r6
 8001eee:	2110      	movs	r1, #16
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f004 f810 	bl	8005f18 <HAL_GPIO_WritePin>

    if (response1 & 0x4000)
 8001ef8:	883b      	ldrh	r3, [r7, #0]
 8001efa:	045a      	lsls	r2, r3, #17
 8001efc:	d420      	bmi.n	8001f40 <readAs5048a+0x150>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
        HAL_SPI_TransmitReceive(hspi, (uint8_t*)&NOP, (uint8_t*)&error_response, sizeof(uint8_t), 1);
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);

    }
    data = response1 & 0x3FFF;
 8001efe:	f3c3 030d 	ubfx	r3, r3, #0, #14
    angleRad = ((float)data) / 16384.0*2.0*M_PI;
 8001f02:	ee07 3a90 	vmov	s15, r3
    data = response1 & 0x3FFF;
 8001f06:	4a34      	ldr	r2, [pc, #208]	@ (8001fd8 <readAs5048a+0x1e8>)
    angleRad = ((float)data) / 16384.0*2.0*M_PI;
 8001f08:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    data = response1 & 0x3FFF;
 8001f0c:	8013      	strh	r3, [r2, #0]
    angleRad = ((float)data) / 16384.0*2.0*M_PI;
 8001f0e:	ee18 0a10 	vmov	r0, s16
 8001f12:	f7fe fc0f 	bl	8000734 <__aeabi_f2d>
 8001f16:	a328      	add	r3, pc, #160	@ (adr r3, 8001fb8 <readAs5048a+0x1c8>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe f97c 	bl	8000218 <__aeabi_dmul>
 8001f20:	f7fe fc88 	bl	8000834 <__aeabi_d2f>
    angleDeg = ((float)data) / 16384.0 *360.0;
 8001f24:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8001fdc <readAs5048a+0x1ec>
    angleRad = ((float)data) / 16384.0*2.0*M_PI;
 8001f28:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <readAs5048a+0x1f0>)
    angleDeg = ((float)data) / 16384.0 *360.0;
 8001f2a:	ee28 8a27 	vmul.f32	s16, s16, s15
    angleRad = ((float)data) / 16384.0*2.0*M_PI;
 8001f2e:	6018      	str	r0, [r3, #0]
    angleDeg = ((float)data) / 16384.0 *360.0;
 8001f30:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe4 <readAs5048a+0x1f4>)
 8001f32:	ed83 8a00 	vstr	s16, [r3]
}
 8001f36:	b003      	add	sp, #12
 8001f38:	ecbd 8b02 	vpop	{d8}
 8001f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        error_command1 = 0x4001;
 8001f40:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8001fec <readAs5048a+0x1fc>
        error_response = 0;
 8001f44:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8001fe8 <readAs5048a+0x1f8>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001f48:	462a      	mov	r2, r5
        error_command1 = 0x4001;
 8001f4a:	f244 0301 	movw	r3, #16385	@ 0x4001
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001f4e:	2110      	movs	r1, #16
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
        error_response = 0;
 8001f54:	f8a8 5000 	strh.w	r5, [r8]
        error_command1 = 0x4001;
 8001f58:	f8a9 3000 	strh.w	r3, [r9]
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001f5c:	f003 ffdc 	bl	8005f18 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(hspi, (uint8_t*)&error_command1, (uint8_t*)&error_response, sizeof(uint8_t), 1);
 8001f60:	4649      	mov	r1, r9
 8001f62:	4642      	mov	r2, r8
 8001f64:	4633      	mov	r3, r6
 8001f66:	9600      	str	r6, [sp, #0]
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f004 feeb 	bl	8006d44 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001f6e:	4632      	mov	r2, r6
 8001f70:	2110      	movs	r1, #16
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f76:	f003 ffcf 	bl	8005f18 <HAL_GPIO_WritePin>
 8001f7a:	2505      	movs	r5, #5
    	  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2110      	movs	r1, #16
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f84:	f003 ffc8 	bl	8005f18 <HAL_GPIO_WritePin>
    	for (int i = 0; i<5; i++)
 8001f88:	3d01      	subs	r5, #1
 8001f8a:	d1f7      	bne.n	8001f7c <readAs5048a+0x18c>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001f8c:	462a      	mov	r2, r5
 8001f8e:	2110      	movs	r1, #16
        HAL_SPI_TransmitReceive(hspi, (uint8_t*)&NOP, (uint8_t*)&error_response, sizeof(uint8_t), 1);
 8001f90:	2501      	movs	r5, #1
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f96:	f003 ffbf 	bl	8005f18 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(hspi, (uint8_t*)&NOP, (uint8_t*)&error_response, sizeof(uint8_t), 1);
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <readAs5048a+0x1f8>)
 8001f9e:	490d      	ldr	r1, [pc, #52]	@ (8001fd4 <readAs5048a+0x1e4>)
 8001fa0:	9500      	str	r5, [sp, #0]
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f004 fece 	bl	8006d44 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001fa8:	462a      	mov	r2, r5
 8001faa:	2110      	movs	r1, #16
 8001fac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb0:	f003 ffb2 	bl	8005f18 <HAL_GPIO_WritePin>
    data = response1 & 0x3FFF;
 8001fb4:	883b      	ldrh	r3, [r7, #0]
 8001fb6:	e7a2      	b.n	8001efe <readAs5048a+0x10e>
 8001fb8:	54442d18 	.word	0x54442d18
 8001fbc:	3f3921fb 	.word	0x3f3921fb
 8001fc0:	20000488 	.word	0x20000488
 8001fc4:	2000048a 	.word	0x2000048a
 8001fc8:	20000b18 	.word	0x20000b18
 8001fcc:	20000b14 	.word	0x20000b14
 8001fd0:	20000804 	.word	0x20000804
 8001fd4:	20000b16 	.word	0x20000b16
 8001fd8:	20000b08 	.word	0x20000b08
 8001fdc:	3cb40000 	.word	0x3cb40000
 8001fe0:	20000b10 	.word	0x20000b10
 8001fe4:	20000b0c 	.word	0x20000b0c
 8001fe8:	20000b04 	.word	0x20000b04
 8001fec:	20000b06 	.word	0x20000b06

08001ff0 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	2326      	movs	r3, #38	@ 0x26
 8001ff4:	4916      	ldr	r1, [pc, #88]	@ (8002050 <FOC_Clear+0x60>)
 8001ff6:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	50cc      	str	r4, [r1, r3]
{
 8001ffe:	4605      	mov	r5, r0
 8002000:	f103 0208 	add.w	r2, r3, #8
 8002004:	1858      	adds	r0, r3, r1
 8002006:	3310      	adds	r3, #16
 8002008:	440a      	add	r2, r1
 800200a:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800200c:	4911      	ldr	r1, [pc, #68]	@ (8002054 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 800200e:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002010:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002014:	6054      	str	r4, [r2, #4]
 8002016:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002018:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 800201a:	f8c3 4006 	str.w	r4, [r3, #6]
 800201e:	f8c3 400a 	str.w	r4, [r3, #10]
 8002022:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002026:	f006 fc6d 	bl	8008904 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <FOC_Clear+0x68>)
 800202c:	4621      	mov	r1, r4
 800202e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002032:	f006 fc67 	bl	8008904 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <FOC_Clear+0x6c>)
 8002038:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800203c:	f007 ff0e 	bl	8009e5c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002040:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <FOC_Clear+0x70>)
 8002042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800204a:	f000 bfcf 	b.w	8002fec <PWMC_SwitchOffPWM>
 800204e:	bf00      	nop
 8002050:	20000b2c 	.word	0x20000b2c
 8002054:	20000008 	.word	0x20000008
 8002058:	20000004 	.word	0x20000004
 800205c:	20000010 	.word	0x20000010
 8002060:	20000b28 	.word	0x20000b28

08002064 <MCboot>:
  if (MC_NULL == pMCIList)
 8002064:	2800      	cmp	r0, #0
 8002066:	d06d      	beq.n	8002144 <MCboot+0xe0>
{
 8002068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800206c:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 800218c <MCboot+0x128>
    bMCBootCompleted = (uint8_t )0;
 8002070:	f8df 911c 	ldr.w	r9, [pc, #284]	@ 8002190 <MCboot+0x12c>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8002074:	4d34      	ldr	r5, [pc, #208]	@ (8002148 <MCboot+0xe4>)
    RVBS_Init(&BusVoltageSensor_M1);
 8002076:	4e35      	ldr	r6, [pc, #212]	@ (800214c <MCboot+0xe8>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002078:	4f35      	ldr	r7, [pc, #212]	@ (8002150 <MCboot+0xec>)
{
 800207a:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 800207c:	f04f 0800 	mov.w	r8, #0
 8002080:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002082:	4834      	ldr	r0, [pc, #208]	@ (8002154 <MCboot+0xf0>)
 8002084:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8002088:	f889 8000 	strb.w	r8, [r9]
    R3_2_Init(&PWM_Handle_M1);
 800208c:	f007 f862 	bl	8009154 <R3_2_Init>
    ASPEP_start(&aspepOverUartA);
 8002090:	4831      	ldr	r0, [pc, #196]	@ (8002158 <MCboot+0xf4>)
 8002092:	f7fe fdc1 	bl	8000c18 <ASPEP_start>
    startTimers();
 8002096:	f006 fcd9 	bl	8008a4c <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 800209a:	4830      	ldr	r0, [pc, #192]	@ (800215c <MCboot+0xf8>)
 800209c:	f006 fc1e 	bl	80088dc <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 80020a0:	482f      	ldr	r0, [pc, #188]	@ (8002160 <MCboot+0xfc>)
 80020a2:	f008 f969 	bl	800a378 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80020a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002160 <MCboot+0xfc>)
 80020a8:	492c      	ldr	r1, [pc, #176]	@ (800215c <MCboot+0xf8>)
 80020aa:	6828      	ldr	r0, [r5, #0]
 80020ac:	f007 febc 	bl	8009e28 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80020b0:	482c      	ldr	r0, [pc, #176]	@ (8002164 <MCboot+0x100>)
 80020b2:	f008 fa5f 	bl	800a574 <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80020b6:	f8db 3000 	ldr.w	r3, [fp]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	6829      	ldr	r1, [r5, #0]
 80020be:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <MCboot+0x100>)
 80020c0:	4b29      	ldr	r3, [pc, #164]	@ (8002168 <MCboot+0x104>)
 80020c2:	482a      	ldr	r0, [pc, #168]	@ (800216c <MCboot+0x108>)
 80020c4:	f007 fd80 	bl	8009bc8 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80020c8:	4829      	ldr	r0, [pc, #164]	@ (8002170 <MCboot+0x10c>)
 80020ca:	f006 fc07 	bl	80088dc <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80020ce:	4829      	ldr	r0, [pc, #164]	@ (8002174 <MCboot+0x110>)
 80020d0:	f006 fc04 	bl	80088dc <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 80020d4:	4630      	mov	r0, r6
 80020d6:	f007 fc7d 	bl	80099d4 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80020da:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <MCboot+0x114>)
    NTC_Init(&TempSensor_M1);
 80020dc:	4827      	ldr	r0, [pc, #156]	@ (800217c <MCboot+0x118>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80020e2:	4e27      	ldr	r6, [pc, #156]	@ (8002180 <MCboot+0x11c>)
 80020e4:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 80020e6:	f006 fbb9 	bl	800885c <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80020ea:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <MCboot+0x120>)
 80020ec:	4826      	ldr	r0, [pc, #152]	@ (8002188 <MCboot+0x124>)
 80020ee:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 80020f0:	f007 fcd8 	bl	8009aa4 <REMNG_Init>
    FOC_Clear(M1);
 80020f4:	4640      	mov	r0, r8
 80020f6:	f7ff ff7b 	bl	8001ff0 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 80020fa:	f04f 0a01 	mov.w	sl, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80020fe:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002100:	f886 a024 	strb.w	sl, [r6, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002104:	f007 ff3c 	bl	8009f80 <STC_GetDefaultIqdref>
 8002108:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800210a:	6828      	ldr	r0, [r5, #0]
 800210c:	f007 ff38 	bl	8009f80 <STC_GetDefaultIqdref>
 8002110:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002114:	f8db 3000 	ldr.w	r3, [fp]
 8002118:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800211a:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800211c:	4632      	mov	r2, r6
 800211e:	4638      	mov	r0, r7
 8002120:	f7ff fc4e 	bl	80019c0 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8002124:	6828      	ldr	r0, [r5, #0]
 8002126:	f007 ff27 	bl	8009f78 <STC_GetMecSpeedRefUnitDefault>
 800212a:	4642      	mov	r2, r8
 800212c:	4601      	mov	r1, r0
 800212e:	4638      	mov	r0, r7
 8002130:	f7ff fc58 	bl	80019e4 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8002134:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 8002136:	f7ff fc3f 	bl	80019b8 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 800213a:	f889 a000 	strb.w	sl, [r9]
}
 800213e:	b005      	add	sp, #20
 8002140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000010 	.word	0x20000010
 800214c:	200000e0 	.word	0x200000e0
 8002150:	20000968 	.word	0x20000968
 8002154:	200002a8 	.word	0x200002a8
 8002158:	200004c8 	.word	0x200004c8
 800215c:	2000043c 	.word	0x2000043c
 8002160:	20000148 	.word	0x20000148
 8002164:	20000270 	.word	0x20000270
 8002168:	20000134 	.word	0x20000134
 800216c:	20000338 	.word	0x20000338
 8002170:	20000410 	.word	0x20000410
 8002174:	200003e4 	.word	0x200003e4
 8002178:	20000000 	.word	0x20000000
 800217c:	2000010c 	.word	0x2000010c
 8002180:	20000b2c 	.word	0x20000b2c
 8002184:	20000b24 	.word	0x20000b24
 8002188:	200000c8 	.word	0x200000c8
 800218c:	20000b28 	.word	0x20000b28
 8002190:	20000b1a 	.word	0x20000b1a

08002194 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop

08002198 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002198:	b538      	push	{r3, r4, r5, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */
	if (Mci[M1].State == RUN)
 800219a:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <FOC_CalcCurrRef+0x90>)
 800219c:	7e5b      	ldrb	r3, [r3, #25]
 800219e:	2b06      	cmp	r3, #6
{
 80021a0:	4605      	mov	r5, r0
	if (Mci[M1].State == RUN)
 80021a2:	d127      	bne.n	80021f4 <FOC_CalcCurrRef+0x5c>
	{
		currentVelocityRPM = -currentVelocity * 60.0/360.0; // velocity in RPM
 80021a4:	4b21      	ldr	r3, [pc, #132]	@ (800222c <FOC_CalcCurrRef+0x94>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80021ac:	f7fe fac2 	bl	8000734 <__aeabi_f2d>
 80021b0:	a319      	add	r3, pc, #100	@ (adr r3, 8002218 <FOC_CalcCurrRef+0x80>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe f82f 	bl	8000218 <__aeabi_dmul>
 80021ba:	f7fe fb3b 	bl	8000834 <__aeabi_d2f>
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <FOC_CalcCurrRef+0x98>)
 80021c0:	6018      	str	r0, [r3, #0]
		currentVelocitydHz = currentVelocityRPM/60.0*10.0;
 80021c2:	f7fe fab7 	bl	8000734 <__aeabi_f2d>
 80021c6:	a316      	add	r3, pc, #88	@ (adr r3, 8002220 <FOC_CalcCurrRef+0x88>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	f7fe f824 	bl	8000218 <__aeabi_dmul>
 80021d0:	f7fe fb30 	bl	8000834 <__aeabi_d2f>
		estimatedVelocitydHz = pSTC[M1]->SPD->hAvrMecSpeedUnit;
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <FOC_CalcCurrRef+0x9c>)
 80021d6:	4a18      	ldr	r2, [pc, #96]	@ (8002238 <FOC_CalcCurrRef+0xa0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
		currentVelocitydHz = currentVelocityRPM/60.0*10.0;
 80021da:	ee07 0a90 	vmov	s15, r0
 80021de:	4817      	ldr	r0, [pc, #92]	@ (800223c <FOC_CalcCurrRef+0xa4>)
		estimatedVelocitydHz = pSTC[M1]->SPD->hAvrMecSpeedUnit;
 80021e0:	695b      	ldr	r3, [r3, #20]
		currentVelocitydHz = currentVelocityRPM/60.0*10.0;
 80021e2:	edc0 7a00 	vstr	s15, [r0]
		pSTC[M1]->SPD->hAvrMecSpeedUnit = (int16_t)currentVelocitydHz;
 80021e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		estimatedVelocitydHz = pSTC[M1]->SPD->hAvrMecSpeedUnit;
 80021ea:	8999      	ldrh	r1, [r3, #12]
 80021ec:	8011      	strh	r1, [r2, #0]
		pSTC[M1]->SPD->hAvrMecSpeedUnit = (int16_t)currentVelocitydHz;
 80021ee:	ee17 2a90 	vmov	r2, s15
 80021f2:	819a      	strh	r2, [r3, #12]

	}

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80021f4:	4c12      	ldr	r4, [pc, #72]	@ (8002240 <FOC_CalcCurrRef+0xa8>)
 80021f6:	2326      	movs	r3, #38	@ 0x26
 80021f8:	fb03 4405 	mla	r4, r3, r5, r4
 80021fc:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002200:	b103      	cbz	r3, 8002204 <FOC_CalcCurrRef+0x6c>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002202:	bd38      	pop	{r3, r4, r5, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <FOC_CalcCurrRef+0x9c>)
 8002206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800220a:	f007 fe7f 	bl	8009f0c <STC_CalcTorqueReference>
 800220e:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002210:	8220      	strh	r0, [r4, #16]
}
 8002212:	bd38      	pop	{r3, r4, r5, pc}
 8002214:	f3af 8000 	nop.w
 8002218:	55555556 	.word	0x55555556
 800221c:	3fc55555 	.word	0x3fc55555
 8002220:	55555555 	.word	0x55555555
 8002224:	3fc55555 	.word	0x3fc55555
 8002228:	20000968 	.word	0x20000968
 800222c:	20000afc 	.word	0x20000afc
 8002230:	20000ae4 	.word	0x20000ae4
 8002234:	20000010 	.word	0x20000010
 8002238:	200009a0 	.word	0x200009a0
 800223c:	20000adc 	.word	0x20000adc
 8002240:	20000b2c 	.word	0x20000b2c

08002244 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002244:	4b01      	ldr	r3, [pc, #4]	@ (800224c <TSK_SetChargeBootCapDelayM1+0x8>)
 8002246:	8018      	strh	r0, [r3, #0]
}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000b1e 	.word	0x20000b1e

08002250 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002252:	8818      	ldrh	r0, [r3, #0]
 8002254:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002256:	fab0 f080 	clz	r0, r0
 800225a:	0940      	lsrs	r0, r0, #5
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000b1e 	.word	0x20000b1e

08002264 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002264:	4b01      	ldr	r3, [pc, #4]	@ (800226c <TSK_SetStopPermanencyTimeM1+0x8>)
 8002266:	8018      	strh	r0, [r3, #0]
}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000b1c 	.word	0x20000b1c

08002270 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002272:	8818      	ldrh	r0, [r3, #0]
 8002274:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002276:	fab0 f080 	clz	r0, r0
 800227a:	0940      	lsrs	r0, r0, #5
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000b1c 	.word	0x20000b1c

08002284 <TSK_MediumFrequencyTaskM1>:
{
 8002284:	b570      	push	{r4, r5, r6, lr}
	sharedCounter ++;
 8002286:	4c97      	ldr	r4, [pc, #604]	@ (80024e4 <TSK_MediumFrequencyTaskM1+0x260>)
    if (Mci[M1].State == START)
 8002288:	4d97      	ldr	r5, [pc, #604]	@ (80024e8 <TSK_MediumFrequencyTaskM1+0x264>)
	sharedCounter ++;
 800228a:	6822      	ldr	r2, [r4, #0]
    if (Mci[M1].State == START)
 800228c:	7e6b      	ldrb	r3, [r5, #25]
	StateMotor = Mci[M1].State;
 800228e:	4997      	ldr	r1, [pc, #604]	@ (80024ec <TSK_MediumFrequencyTaskM1+0x268>)
    if (Mci[M1].State == START)
 8002290:	2b04      	cmp	r3, #4
	sharedCounter ++;
 8002292:	f102 0201 	add.w	r2, r2, #1
        Mci[M1].State = RUN;
 8002296:	bf08      	it	eq
 8002298:	2306      	moveq	r3, #6
	sharedCounter ++;
 800229a:	6022      	str	r2, [r4, #0]
        Mci[M1].State = RUN;
 800229c:	bf08      	it	eq
 800229e:	766b      	strbeq	r3, [r5, #25]
	StateMotor = Mci[M1].State;
 80022a0:	700b      	strb	r3, [r1, #0]
	if (sharedCounter < 1000)
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
{
 80022a8:	b082      	sub	sp, #8
	if (sharedCounter < 1000)
 80022aa:	d363      	bcc.n	8002374 <TSK_MediumFrequencyTaskM1+0xf0>
	if (sharedCounter < 15000)
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	f643 2397 	movw	r3, #14999	@ 0x3a97
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d81b      	bhi.n	80022ee <TSK_MediumFrequencyTaskM1+0x6a>
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80022b6:	4b8e      	ldr	r3, [pc, #568]	@ (80024f0 <TSK_MediumFrequencyTaskM1+0x26c>)
		DesiredSpeed = ((300 *10)/60)*65536;
 80022b8:	498e      	ldr	r1, [pc, #568]	@ (80024f4 <TSK_MediumFrequencyTaskM1+0x270>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80022ba:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = ((300 *10)/60)*65536;
 80022bc:	488e      	ldr	r0, [pc, #568]	@ (80024f8 <TSK_MediumFrequencyTaskM1+0x274>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80022be:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = ((300 *10)/60)*65536;
 80022c0:	6008      	str	r0, [r1, #0]
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80022c2:	f44f 1248 	mov.w	r2, #3276800	@ 0x320000
 80022c6:	605a      	str	r2, [r3, #4]
  PQD_CalcElMotorPower(pMPM[M1]);
 80022c8:	4c8c      	ldr	r4, [pc, #560]	@ (80024fc <TSK_MediumFrequencyTaskM1+0x278>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80022ca:	488d      	ldr	r0, [pc, #564]	@ (8002500 <TSK_MediumFrequencyTaskM1+0x27c>)
  int16_t wAux = 0;
 80022cc:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80022ce:	4669      	mov	r1, sp
  int16_t wAux = 0;
 80022d0:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80022d4:	f007 ff5c 	bl	800a190 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80022d8:	6820      	ldr	r0, [r4, #0]
 80022da:	f006 fb87 	bl	80089ec <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80022de:	4882      	ldr	r0, [pc, #520]	@ (80024e8 <TSK_MediumFrequencyTaskM1+0x264>)
 80022e0:	f7ff fbe8 	bl	8001ab4 <MCI_GetCurrentFaults>
 80022e4:	b190      	cbz	r0, 800230c <TSK_MediumFrequencyTaskM1+0x88>
    Mci[M1].State = FAULT_NOW;
 80022e6:	230a      	movs	r3, #10
 80022e8:	766b      	strb	r3, [r5, #25]
}
 80022ea:	b002      	add	sp, #8
 80022ec:	bd70      	pop	{r4, r5, r6, pc}
	else if (sharedCounter < 20000)
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d848      	bhi.n	800238a <TSK_MediumFrequencyTaskM1+0x106>
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80022f8:	4b7d      	ldr	r3, [pc, #500]	@ (80024f0 <TSK_MediumFrequencyTaskM1+0x26c>)
		DesiredSpeed = ((400 *10)/60)*65536;
 80022fa:	497e      	ldr	r1, [pc, #504]	@ (80024f4 <TSK_MediumFrequencyTaskM1+0x270>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80022fc:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = ((400 *10)/60)*65536;
 80022fe:	4881      	ldr	r0, [pc, #516]	@ (8002504 <TSK_MediumFrequencyTaskM1+0x280>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 8002300:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = ((400 *10)/60)*65536;
 8002302:	6008      	str	r0, [r1, #0]
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 8002304:	f44f 0284 	mov.w	r2, #4325376	@ 0x420000
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	e7dd      	b.n	80022c8 <TSK_MediumFrequencyTaskM1+0x44>
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800230c:	4876      	ldr	r0, [pc, #472]	@ (80024e8 <TSK_MediumFrequencyTaskM1+0x264>)
 800230e:	f7ff fbcf 	bl	8001ab0 <MCI_GetOccurredFaults>
 8002312:	2800      	cmp	r0, #0
 8002314:	d157      	bne.n	80023c6 <TSK_MediumFrequencyTaskM1+0x142>
      switch (Mci[M1].State)
 8002316:	7e6b      	ldrb	r3, [r5, #25]
 8002318:	2b13      	cmp	r3, #19
 800231a:	d8e6      	bhi.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
 800231c:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <TSK_MediumFrequencyTaskM1+0xa0>)
 800231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002322:	bf00      	nop
 8002324:	080025bd 	.word	0x080025bd
 8002328:	080022eb 	.word	0x080022eb
 800232c:	080022eb 	.word	0x080022eb
 8002330:	080022eb 	.word	0x080022eb
 8002334:	08002529 	.word	0x08002529
 8002338:	080022eb 	.word	0x080022eb
 800233c:	0800247d 	.word	0x0800247d
 8002340:	080022eb 	.word	0x080022eb
 8002344:	0800245d 	.word	0x0800245d
 8002348:	080022eb 	.word	0x080022eb
 800234c:	080023c7 	.word	0x080023c7
 8002350:	080024d7 	.word	0x080024d7
 8002354:	080022eb 	.word	0x080022eb
 8002358:	080022eb 	.word	0x080022eb
 800235c:	080022eb 	.word	0x080022eb
 8002360:	080022eb 	.word	0x080022eb
 8002364:	08002493 	.word	0x08002493
 8002368:	08002429 	.word	0x08002429
 800236c:	080022eb 	.word	0x080022eb
 8002370:	08002409 	.word	0x08002409
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 8002374:	4b5e      	ldr	r3, [pc, #376]	@ (80024f0 <TSK_MediumFrequencyTaskM1+0x26c>)
		DesiredSpeed = 0;
 8002376:	4a5f      	ldr	r2, [pc, #380]	@ (80024f4 <TSK_MediumFrequencyTaskM1+0x270>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 8002378:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = 0;
 800237a:	2100      	movs	r1, #0
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 800237c:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = 0;
 800237e:	6011      	str	r1, [r2, #0]
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
		(void)MC_StartMotor1();
 8002384:	f7ff fb04 	bl	8001990 <MC_StartMotor1>
 8002388:	e790      	b.n	80022ac <TSK_MediumFrequencyTaskM1+0x28>
	else if (sharedCounter < 25000)
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 8002390:	429a      	cmp	r2, r3
 8002392:	d91c      	bls.n	80023ce <TSK_MediumFrequencyTaskM1+0x14a>
	else if (sharedCounter < 26000)
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	f246 538f 	movw	r3, #25999	@ 0x658f
 800239a:	429a      	cmp	r2, r3
 800239c:	d922      	bls.n	80023e4 <TSK_MediumFrequencyTaskM1+0x160>
	else if (sharedCounter < 35000)
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	f648 03b7 	movw	r3, #34999	@ 0x88b7
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d926      	bls.n	80023f6 <TSK_MediumFrequencyTaskM1+0x172>
	else if (sharedCounter < 40000)
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	f649 433f 	movw	r3, #39999	@ 0x9c3f
 80023ae:	429a      	cmp	r2, r3
 80023b0:	f200 812d 	bhi.w	800260e <TSK_MediumFrequencyTaskM1+0x38a>
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 80023b4:	4b4e      	ldr	r3, [pc, #312]	@ (80024f0 <TSK_MediumFrequencyTaskM1+0x26c>)
		DesiredSpeed = ((300 *10)/60)*65536;
 80023b6:	494f      	ldr	r1, [pc, #316]	@ (80024f4 <TSK_MediumFrequencyTaskM1+0x270>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 80023b8:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = ((300 *10)/60)*65536;
 80023ba:	484f      	ldr	r0, [pc, #316]	@ (80024f8 <TSK_MediumFrequencyTaskM1+0x274>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <TSK_MediumFrequencyTaskM1+0x284>)
		DesiredSpeed = ((300 *10)/60)*65536;
 80023c0:	6008      	str	r0, [r1, #0]
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	e780      	b.n	80022c8 <TSK_MediumFrequencyTaskM1+0x44>
      Mci[M1].State = FAULT_OVER;
 80023c6:	230b      	movs	r3, #11
 80023c8:	766b      	strb	r3, [r5, #25]
}
 80023ca:	b002      	add	sp, #8
 80023cc:	bd70      	pop	{r4, r5, r6, pc}
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80023ce:	4b48      	ldr	r3, [pc, #288]	@ (80024f0 <TSK_MediumFrequencyTaskM1+0x26c>)
		DesiredSpeed = ((50 *10)/60)*65536;
 80023d0:	4948      	ldr	r1, [pc, #288]	@ (80024f4 <TSK_MediumFrequencyTaskM1+0x270>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = ((50 *10)/60)*65536;
 80023d6:	f04f 4092 	mov.w	r0, #1224736768	@ 0x49000000
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80023da:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
		DesiredSpeed = ((50 *10)/60)*65536;
 80023de:	6008      	str	r0, [r1, #0]
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	e771      	b.n	80022c8 <TSK_MediumFrequencyTaskM1+0x44>
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80023e4:	4b42      	ldr	r3, [pc, #264]	@ (80024f0 <TSK_MediumFrequencyTaskM1+0x26c>)
		DesiredSpeed = 0;
 80023e6:	4943      	ldr	r1, [pc, #268]	@ (80024f4 <TSK_MediumFrequencyTaskM1+0x270>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = 0;
 80023ec:	2000      	movs	r0, #0
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80023ee:	2200      	movs	r2, #0
		DesiredSpeed = 0;
 80023f0:	6008      	str	r0, [r1, #0]
		pMCI[M1]->pSTC->SpeedRefUnitExt = DesiredSpeed ;
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	e768      	b.n	80022c8 <TSK_MediumFrequencyTaskM1+0x44>
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 80023f6:	4b3e      	ldr	r3, [pc, #248]	@ (80024f0 <TSK_MediumFrequencyTaskM1+0x26c>)
		DesiredSpeed = ((75 *10)/60)*65536;
 80023f8:	493e      	ldr	r1, [pc, #248]	@ (80024f4 <TSK_MediumFrequencyTaskM1+0x270>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 80023fa:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = ((75 *10)/60)*65536;
 80023fc:	4843      	ldr	r0, [pc, #268]	@ (800250c <TSK_MediumFrequencyTaskM1+0x288>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a43      	ldr	r2, [pc, #268]	@ (8002510 <TSK_MediumFrequencyTaskM1+0x28c>)
		DesiredSpeed = ((75 *10)/60)*65536;
 8002402:	6008      	str	r0, [r1, #0]
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	e75f      	b.n	80022c8 <TSK_MediumFrequencyTaskM1+0x44>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002408:	7e2b      	ldrb	r3, [r5, #24]
 800240a:	2b05      	cmp	r3, #5
 800240c:	f000 80ee 	beq.w	80025ec <TSK_MediumFrequencyTaskM1+0x368>
            if(! RUC_Exec(&RevUpControlM1))
 8002410:	4840      	ldr	r0, [pc, #256]	@ (8002514 <TSK_MediumFrequencyTaskM1+0x290>)
 8002412:	f007 fc5b 	bl	8009ccc <RUC_Exec>
 8002416:	4602      	mov	r2, r0
 8002418:	2800      	cmp	r0, #0
 800241a:	f040 8114 	bne.w	8002646 <TSK_MediumFrequencyTaskM1+0x3c2>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 800241e:	4832      	ldr	r0, [pc, #200]	@ (80024e8 <TSK_MediumFrequencyTaskM1+0x264>)
 8002420:	2110      	movs	r1, #16
 8002422:	f7ff fafd 	bl	8001a20 <MCI_FaultProcessing>
 8002426:	e760      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8002428:	7e2b      	ldrb	r3, [r5, #24]
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 800242a:	4e3b      	ldr	r6, [pc, #236]	@ (8002518 <TSK_MediumFrequencyTaskM1+0x294>)
            if (MCI_STOP == Mci[M1].DirectCommand)
 800242c:	2b05      	cmp	r3, #5
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 800242e:	6830      	ldr	r0, [r6, #0]
            if (MCI_STOP == Mci[M1].DirectCommand)
 8002430:	f000 80de 	beq.w	80025f0 <TSK_MediumFrequencyTaskM1+0x36c>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8002434:	2101      	movs	r1, #1
 8002436:	f000 fddd 	bl	8002ff4 <PWMC_CurrentReadingCalibr>
 800243a:	2800      	cmp	r0, #0
 800243c:	f43f af55 	beq.w	80022ea <TSK_MediumFrequencyTaskM1+0x66>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8002440:	7e2b      	ldrb	r3, [r5, #24]
 8002442:	2b03      	cmp	r3, #3
 8002444:	f000 814a 	beq.w	80026dc <TSK_MediumFrequencyTaskM1+0x458>
                  R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002448:	6830      	ldr	r0, [r6, #0]
 800244a:	2100      	movs	r1, #0
 800244c:	f006 fcda 	bl	8008e04 <R3_2_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8002450:	2014      	movs	r0, #20
 8002452:	f7ff fef7 	bl	8002244 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8002456:	2310      	movs	r3, #16
 8002458:	766b      	strb	r3, [r5, #25]
 800245a:	e746      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800245c:	f7ff ff08 	bl	8002270 <TSK_StopPermanencyTimeHasElapsedM1>
 8002460:	2800      	cmp	r0, #0
 8002462:	f43f af42 	beq.w	80022ea <TSK_MediumFrequencyTaskM1+0x66>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 8002466:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <TSK_MediumFrequencyTaskM1+0x298>)
 8002468:	492d      	ldr	r1, [pc, #180]	@ (8002520 <TSK_MediumFrequencyTaskM1+0x29c>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	f007 fcf2 	bl	8009e54 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8002470:	482b      	ldr	r0, [pc, #172]	@ (8002520 <TSK_MediumFrequencyTaskM1+0x29c>)
 8002472:	f008 f871 	bl	800a558 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002476:	2300      	movs	r3, #0
 8002478:	832b      	strh	r3, [r5, #24]
 800247a:	e736      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800247c:	7e2b      	ldrb	r3, [r5, #24]
 800247e:	2b05      	cmp	r3, #5
 8002480:	f000 80b4 	beq.w	80025ec <TSK_MediumFrequencyTaskM1+0x368>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8002484:	4818      	ldr	r0, [pc, #96]	@ (80024e8 <TSK_MediumFrequencyTaskM1+0x264>)
 8002486:	f7ff fad7 	bl	8001a38 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff fe84 	bl	8002198 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8002490:	e72b      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002492:	7e2b      	ldrb	r3, [r5, #24]
 8002494:	2b05      	cmp	r3, #5
 8002496:	f000 80a9 	beq.w	80025ec <TSK_MediumFrequencyTaskM1+0x368>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 800249a:	f7ff fed9 	bl	8002250 <TSK_ChargeBootCapDelayHasElapsedM1>
 800249e:	2800      	cmp	r0, #0
 80024a0:	f43f af23 	beq.w	80022ea <TSK_MediumFrequencyTaskM1+0x66>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80024a4:	4c1c      	ldr	r4, [pc, #112]	@ (8002518 <TSK_MediumFrequencyTaskM1+0x294>)
 80024a6:	6820      	ldr	r0, [r4, #0]
 80024a8:	f006 fd1e 	bl	8008ee8 <R3_2_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80024ac:	4a1b      	ldr	r2, [pc, #108]	@ (800251c <TSK_MediumFrequencyTaskM1+0x298>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 80024ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <TSK_MediumFrequencyTaskM1+0x2a0>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80024b0:	491b      	ldr	r1, [pc, #108]	@ (8002520 <TSK_MediumFrequencyTaskM1+0x29c>)
 80024b2:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80024ba:	f007 fccb 	bl	8009e54 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 80024be:	4810      	ldr	r0, [pc, #64]	@ (8002500 <TSK_MediumFrequencyTaskM1+0x27c>)
 80024c0:	f007 ff34 	bl	800a32c <STO_PLL_Clear>
              FOC_Clear( M1 );
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff fd93 	bl	8001ff0 <FOC_Clear>
              Mci[M1].State = START;
 80024ca:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80024cc:	6820      	ldr	r0, [r4, #0]
              Mci[M1].State = START;
 80024ce:	766b      	strb	r3, [r5, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80024d0:	f000 fd8e 	bl	8002ff0 <PWMC_SwitchOnPWM>
 80024d4:	e709      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80024d6:	7e2b      	ldrb	r3, [r5, #24]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	f47f af06 	bne.w	80022ea <TSK_MediumFrequencyTaskM1+0x66>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80024de:	2300      	movs	r3, #0
 80024e0:	832b      	strh	r3, [r5, #24]
 80024e2:	e702      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
 80024e4:	2000099c 	.word	0x2000099c
 80024e8:	20000968 	.word	0x20000968
 80024ec:	20000994 	.word	0x20000994
 80024f0:	20001ce0 	.word	0x20001ce0
 80024f4:	20000998 	.word	0x20000998
 80024f8:	4a480000 	.word	0x4a480000
 80024fc:	20000000 	.word	0x20000000
 8002500:	20000148 	.word	0x20000148
 8002504:	4a840000 	.word	0x4a840000
 8002508:	ffce0000 	.word	0xffce0000
 800250c:	49400000 	.word	0x49400000
 8002510:	fff40000 	.word	0xfff40000
 8002514:	20000338 	.word	0x20000338
 8002518:	20000b28 	.word	0x20000b28
 800251c:	20000010 	.word	0x20000010
 8002520:	20000270 	.word	0x20000270
 8002524:	20000b2c 	.word	0x20000b2c
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002528:	7e2b      	ldrb	r3, [r5, #24]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d05e      	beq.n	80025ec <TSK_MediumFrequencyTaskM1+0x368>
            if(! RUC_Exec(&RevUpControlM1))
 800252e:	4870      	ldr	r0, [pc, #448]	@ (80026f0 <TSK_MediumFrequencyTaskM1+0x46c>)
 8002530:	f007 fbcc 	bl	8009ccc <RUC_Exec>
 8002534:	4602      	mov	r2, r0
 8002536:	2800      	cmp	r0, #0
 8002538:	f040 80b1 	bne.w	800269e <TSK_MediumFrequencyTaskM1+0x41a>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 800253c:	486d      	ldr	r0, [pc, #436]	@ (80026f4 <TSK_MediumFrequencyTaskM1+0x470>)
 800253e:	2110      	movs	r1, #16
 8002540:	f7ff fa6e 	bl	8001a20 <MCI_FaultProcessing>
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8002544:	486c      	ldr	r0, [pc, #432]	@ (80026f8 <TSK_MediumFrequencyTaskM1+0x474>)
 8002546:	f10d 0102 	add.w	r1, sp, #2
 800254a:	f008 f869 	bl	800a620 <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 800254e:	4868      	ldr	r0, [pc, #416]	@ (80026f0 <TSK_MediumFrequencyTaskM1+0x46c>)
 8002550:	f007 fbf2 	bl	8009d38 <RUC_FirstAccelerationStageReached>
 8002554:	2800      	cmp	r0, #0
 8002556:	f43f aec8 	beq.w	80022ea <TSK_MediumFrequencyTaskM1+0x66>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 800255a:	f10d 0102 	add.w	r1, sp, #2
 800255e:	4867      	ldr	r0, [pc, #412]	@ (80026fc <TSK_MediumFrequencyTaskM1+0x478>)
 8002560:	f007 ff44 	bl	800a3ec <STO_PLL_IsObserverConverged>
 8002564:	4604      	mov	r4, r0
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8002566:	4863      	ldr	r0, [pc, #396]	@ (80026f4 <TSK_MediumFrequencyTaskM1+0x470>)
 8002568:	f7ff faf2 	bl	8001b50 <MCI_GetImposedMotorDirection>
 800256c:	b241      	sxtb	r1, r0
 800256e:	4863      	ldr	r0, [pc, #396]	@ (80026fc <TSK_MediumFrequencyTaskM1+0x478>)
 8002570:	f007 ffee 	bl	800a550 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8002574:	4860      	ldr	r0, [pc, #384]	@ (80026f8 <TSK_MediumFrequencyTaskM1+0x474>)
 8002576:	4621      	mov	r1, r4
 8002578:	f008 f8e8 	bl	800a74c <VSS_SetStartTransition>
            if (ObserverConverged)
 800257c:	2c00      	cmp	r4, #0
 800257e:	f43f aeb4 	beq.w	80022ea <TSK_MediumFrequencyTaskM1+0x66>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8002582:	485e      	ldr	r0, [pc, #376]	@ (80026fc <TSK_MediumFrequencyTaskM1+0x478>)
 8002584:	4e5e      	ldr	r6, [pc, #376]	@ (8002700 <TSK_MediumFrequencyTaskM1+0x47c>)
              REMNG_Init(pREMNG[M1]);
 8002586:	4c5f      	ldr	r4, [pc, #380]	@ (8002704 <TSK_MediumFrequencyTaskM1+0x480>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8002588:	f007 fc02 	bl	8009d90 <SPD_GetElAngle>
 800258c:	4601      	mov	r1, r0
 800258e:	6870      	ldr	r0, [r6, #4]
 8002590:	f7ff fbbc 	bl	8001d0c <MCM_Park>
 8002594:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8002596:	6820      	ldr	r0, [r4, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8002598:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 800259a:	f007 fa83 	bl	8009aa4 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 800259e:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 80025a2:	6820      	ldr	r0, [r4, #0]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f007 fac9 	bl	8009b3c <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 80025aa:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80025ae:	6820      	ldr	r0, [r4, #0]
 80025b0:	2219      	movs	r2, #25
 80025b2:	f007 fac3 	bl	8009b3c <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 80025b6:	2313      	movs	r3, #19
 80025b8:	766b      	strb	r3, [r5, #25]
 80025ba:	e696      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80025bc:	7e2c      	ldrb	r4, [r5, #24]
 80025be:	f004 04fd 	and.w	r4, r4, #253	@ 0xfd
 80025c2:	2c01      	cmp	r4, #1
 80025c4:	f47f ae91 	bne.w	80022ea <TSK_MediumFrequencyTaskM1+0x66>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 80025c8:	484a      	ldr	r0, [pc, #296]	@ (80026f4 <TSK_MediumFrequencyTaskM1+0x470>)
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 80025ca:	4e4f      	ldr	r6, [pc, #316]	@ (8002708 <TSK_MediumFrequencyTaskM1+0x484>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 80025cc:	f7ff fac0 	bl	8001b50 <MCI_GetImposedMotorDirection>
 80025d0:	4601      	mov	r1, r0
 80025d2:	4847      	ldr	r0, [pc, #284]	@ (80026f0 <TSK_MediumFrequencyTaskM1+0x46c>)
 80025d4:	f007 fb36 	bl	8009c44 <RUC_Clear>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 80025d8:	6830      	ldr	r0, [r6, #0]
 80025da:	f890 106e 	ldrb.w	r1, [r0, #110]	@ 0x6e
 80025de:	2900      	cmp	r1, #0
 80025e0:	d176      	bne.n	80026d0 <TSK_MediumFrequencyTaskM1+0x44c>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80025e2:	f000 fd07 	bl	8002ff4 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 80025e6:	2311      	movs	r3, #17
 80025e8:	766b      	strb	r3, [r5, #25]
 80025ea:	e67e      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 80025ec:	4b46      	ldr	r3, [pc, #280]	@ (8002708 <TSK_MediumFrequencyTaskM1+0x484>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	f006 fc7a 	bl	8008ee8 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7ff fcfb 	bl	8001ff0 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 80025fa:	6820      	ldr	r0, [r4, #0]
 80025fc:	f006 fa10 	bl	8008a20 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002600:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002604:	f7ff fe2e 	bl	8002264 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002608:	2308      	movs	r3, #8
 800260a:	766b      	strb	r3, [r5, #25]
  return;
 800260c:	e66d      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
	else if (sharedCounter < 45000)
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	f64a 73c7 	movw	r3, #44999	@ 0xafc7
 8002614:	429a      	cmp	r2, r3
 8002616:	d808      	bhi.n	800262a <TSK_MediumFrequencyTaskM1+0x3a6>
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 8002618:	4b3c      	ldr	r3, [pc, #240]	@ (800270c <TSK_MediumFrequencyTaskM1+0x488>)
		DesiredSpeed = ((400 *10)/60)*65536;
 800261a:	493d      	ldr	r1, [pc, #244]	@ (8002710 <TSK_MediumFrequencyTaskM1+0x48c>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 800261c:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = ((400 *10)/60)*65536;
 800261e:	483d      	ldr	r0, [pc, #244]	@ (8002714 <TSK_MediumFrequencyTaskM1+0x490>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a3d      	ldr	r2, [pc, #244]	@ (8002718 <TSK_MediumFrequencyTaskM1+0x494>)
		DesiredSpeed = ((400 *10)/60)*65536;
 8002624:	6008      	str	r0, [r1, #0]
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	e64e      	b.n	80022c8 <TSK_MediumFrequencyTaskM1+0x44>
	else if (sharedCounter < 50000)
 800262a:	6822      	ldr	r2, [r4, #0]
 800262c:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8002630:	429a      	cmp	r2, r3
 8002632:	d83e      	bhi.n	80026b2 <TSK_MediumFrequencyTaskM1+0x42e>
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 8002634:	4b35      	ldr	r3, [pc, #212]	@ (800270c <TSK_MediumFrequencyTaskM1+0x488>)
		DesiredSpeed = ((500 *10)/60)*65536;
 8002636:	4936      	ldr	r1, [pc, #216]	@ (8002710 <TSK_MediumFrequencyTaskM1+0x48c>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 8002638:	681b      	ldr	r3, [r3, #0]
		DesiredSpeed = ((500 *10)/60)*65536;
 800263a:	4838      	ldr	r0, [pc, #224]	@ (800271c <TSK_MediumFrequencyTaskM1+0x498>)
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a38      	ldr	r2, [pc, #224]	@ (8002720 <TSK_MediumFrequencyTaskM1+0x49c>)
		DesiredSpeed = ((500 *10)/60)*65536;
 8002640:	6008      	str	r0, [r1, #0]
		pMCI[M1]->pSTC->SpeedRefUnitExt = -DesiredSpeed ;
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	e640      	b.n	80022c8 <TSK_MediumFrequencyTaskM1+0x44>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8002646:	482c      	ldr	r0, [pc, #176]	@ (80026f8 <TSK_MediumFrequencyTaskM1+0x474>)
 8002648:	a901      	add	r1, sp, #4
 800264a:	f007 ffe9 	bl	800a620 <VSS_CalcAvrgMecSpeedUnit>
 800264e:	4604      	mov	r4, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8002650:	4829      	ldr	r0, [pc, #164]	@ (80026f8 <TSK_MediumFrequencyTaskM1+0x474>)
 8002652:	f008 f889 	bl	800a768 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8002656:	b914      	cbnz	r4, 800265e <TSK_MediumFrequencyTaskM1+0x3da>
 8002658:	2800      	cmp	r0, #0
 800265a:	f43f ae46 	beq.w	80022ea <TSK_MediumFrequencyTaskM1+0x66>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 800265e:	4b28      	ldr	r3, [pc, #160]	@ (8002700 <TSK_MediumFrequencyTaskM1+0x47c>)
 8002660:	4830      	ldr	r0, [pc, #192]	@ (8002724 <TSK_MediumFrequencyTaskM1+0x4a0>)
 8002662:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8002666:	4c30      	ldr	r4, [pc, #192]	@ (8002728 <TSK_MediumFrequencyTaskM1+0x4a4>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8002668:	f006 f956 	bl	8008918 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 800266c:	b201      	sxth	r1, r0
 800266e:	fb06 f101 	mul.w	r1, r6, r1
 8002672:	482c      	ldr	r0, [pc, #176]	@ (8002724 <TSK_MediumFrequencyTaskM1+0x4a0>)
 8002674:	f006 f946 	bl	8008904 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8002678:	4920      	ldr	r1, [pc, #128]	@ (80026fc <TSK_MediumFrequencyTaskM1+0x478>)
 800267a:	6820      	ldr	r0, [r4, #0]
 800267c:	f007 fbea 	bl	8009e54 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8002680:	2000      	movs	r0, #0
 8002682:	f7ff fd87 	bl	8002194 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8002686:	2000      	movs	r0, #0
 8002688:	f7ff fd86 	bl	8002198 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800268c:	6820      	ldr	r0, [r4, #0]
 800268e:	f007 fc85 	bl	8009f9c <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002692:	4818      	ldr	r0, [pc, #96]	@ (80026f4 <TSK_MediumFrequencyTaskM1+0x470>)
 8002694:	f7ff f9d0 	bl	8001a38 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8002698:	2306      	movs	r3, #6
 800269a:	766b      	strb	r3, [r5, #25]
 800269c:	e625      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <TSK_MediumFrequencyTaskM1+0x4a4>)
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f007 fc33 	bl	8009f0c <STC_CalcTorqueReference>
             IqdRef.d = FOCVars[M1].UserIdref;
 80026a6:	4b16      	ldr	r3, [pc, #88]	@ (8002700 <TSK_MediumFrequencyTaskM1+0x47c>)
 80026a8:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
             FOCVars[M1].Iqdref = IqdRef;
 80026ac:	8218      	strh	r0, [r3, #16]
 80026ae:	825a      	strh	r2, [r3, #18]
 80026b0:	e748      	b.n	8002544 <TSK_MediumFrequencyTaskM1+0x2c0>
	else if (sharedCounter < 53000)
 80026b2:	6822      	ldr	r2, [r4, #0]
 80026b4:	f64c 7307 	movw	r3, #52999	@ 0xcf07
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f67f ae93 	bls.w	80023e4 <TSK_MediumFrequencyTaskM1+0x160>
	else if (sharedCounter < 55000)
 80026be:	6822      	ldr	r2, [r4, #0]
 80026c0:	f24d 63d7 	movw	r3, #54999	@ 0xd6d7
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f63f adff 	bhi.w	80022c8 <TSK_MediumFrequencyTaskM1+0x44>
		(void)MC_StopMotor1();
 80026ca:	f7ff f967 	bl	800199c <MC_StopMotor1>
 80026ce:	e5fb      	b.n	80022c8 <TSK_MediumFrequencyTaskM1+0x44>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80026d0:	4621      	mov	r1, r4
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 80026d2:	f8a0 404e 	strh.w	r4, [r0, #78]	@ 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80026d6:	f000 fc8d 	bl	8002ff4 <PWMC_CurrentReadingCalibr>
             R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80026da:	e6b5      	b.n	8002448 <TSK_MediumFrequencyTaskM1+0x1c4>
                  FOC_Clear(M1);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff fc87 	bl	8001ff0 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 80026e2:	6820      	ldr	r0, [r4, #0]
 80026e4:	f006 f99c 	bl	8008a20 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80026e8:	2300      	movs	r3, #0
 80026ea:	832b      	strh	r3, [r5, #24]
 80026ec:	e5fd      	b.n	80022ea <TSK_MediumFrequencyTaskM1+0x66>
 80026ee:	bf00      	nop
 80026f0:	20000338 	.word	0x20000338
 80026f4:	20000968 	.word	0x20000968
 80026f8:	20000270 	.word	0x20000270
 80026fc:	20000148 	.word	0x20000148
 8002700:	20000b2c 	.word	0x20000b2c
 8002704:	20000b24 	.word	0x20000b24
 8002708:	20000b28 	.word	0x20000b28
 800270c:	20001ce0 	.word	0x20001ce0
 8002710:	20000998 	.word	0x20000998
 8002714:	4a840000 	.word	0x4a840000
 8002718:	ffbe0000 	.word	0xffbe0000
 800271c:	4aa60000 	.word	0x4aa60000
 8002720:	ffad0000 	.word	0xffad0000
 8002724:	2000043c 	.word	0x2000043c
 8002728:	20000010 	.word	0x20000010

0800272c <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <MC_Scheduler+0x78>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d000      	beq.n	8002736 <MC_Scheduler+0xa>
 8002734:	4770      	bx	lr
{
 8002736:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002738:	4c1b      	ldr	r4, [pc, #108]	@ (80027a8 <MC_Scheduler+0x7c>)
 800273a:	8823      	ldrh	r3, [r4, #0]
 800273c:	b19b      	cbz	r3, 8002766 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 800273e:	3b01      	subs	r3, #1
 8002740:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8002742:	4a1a      	ldr	r2, [pc, #104]	@ (80027ac <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8002744:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8002746:	8813      	ldrh	r3, [r2, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	b11b      	cbz	r3, 8002754 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 800274c:	8813      	ldrh	r3, [r2, #0]
 800274e:	3b01      	subs	r3, #1
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8002754:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <MC_Scheduler+0x84>)
 8002756:	8813      	ldrh	r3, [r2, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	b11b      	cbz	r3, 8002764 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 800275c:	8813      	ldrh	r3, [r2, #0]
 800275e:	3b01      	subs	r3, #1
 8002760:	b29b      	uxth	r3, r3
 8002762:	8013      	strh	r3, [r2, #0]
}
 8002764:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002766:	4d13      	ldr	r5, [pc, #76]	@ (80027b4 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8002768:	f7ff fd8c 	bl	8002284 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 800276c:	f7ff f926 	bl	80019bc <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002770:	4629      	mov	r1, r5
 8002772:	f851 0b0c 	ldr.w	r0, [r1], #12
 8002776:	6883      	ldr	r3, [r0, #8]
 8002778:	4798      	blx	r3
 800277a:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 800277c:	b130      	cbz	r0, 800278c <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 800277e:	4629      	mov	r1, r5
 8002780:	220a      	movs	r2, #10
 8002782:	f851 0b08 	ldr.w	r0, [r1], #8
 8002786:	6803      	ldr	r3, [r0, #0]
 8002788:	4798      	blx	r3
 800278a:	b908      	cbnz	r0, 8002790 <MC_Scheduler+0x64>
{
 800278c:	2301      	movs	r3, #1
 800278e:	e7d8      	b.n	8002742 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002790:	4628      	mov	r0, r5
 8002792:	f005 fe33 	bl	80083fc <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002796:	6828      	ldr	r0, [r5, #0]
 8002798:	89ea      	ldrh	r2, [r5, #14]
 800279a:	6846      	ldr	r6, [r0, #4]
 800279c:	68a9      	ldr	r1, [r5, #8]
 800279e:	230a      	movs	r3, #10
 80027a0:	47b0      	blx	r6
 80027a2:	e7f3      	b.n	800278c <MC_Scheduler+0x60>
 80027a4:	20000b1a 	.word	0x20000b1a
 80027a8:	20000b20 	.word	0x20000b20
 80027ac:	20000b1e 	.word	0x20000b1e
 80027b0:	20000b1c 	.word	0x20000b1c
 80027b4:	200004b8 	.word	0x200004b8

080027b8 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80027b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027bc:	ed2d 8b02 	vpush	{d8}
  uint8_t bMotorNbr = 0;

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if (SWITCH_OVER == Mci[M1].State)
 80027c0:	f8df 8394 	ldr.w	r8, [pc, #916]	@ 8002b58 <TSK_HighFrequencyTask+0x3a0>
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80027c4:	4cbe      	ldr	r4, [pc, #760]	@ (8002ac0 <TSK_HighFrequencyTask+0x308>)
  if (SWITCH_OVER == Mci[M1].State)
 80027c6:	f898 3019 	ldrb.w	r3, [r8, #25]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80027ca:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 80027ce:	b089      	sub	sp, #36	@ 0x24
  if (SWITCH_OVER == Mci[M1].State)
 80027d0:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80027d2:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 80027d4:	f000 8163 	beq.w	8002a9e <TSK_HighFrequencyTask+0x2e6>
    {
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
    }
  }
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */
  readAs5048a(&hspi3); // read the angle
 80027d8:	48ba      	ldr	r0, [pc, #744]	@ (8002ac4 <TSK_HighFrequencyTask+0x30c>)
 80027da:	f7ff fb09 	bl	8001df0 <readAs5048a>
 (void)updateValueVelocity(mechanicalAngle, 0.0001); // calculate the velocity
 80027de:	4bba      	ldr	r3, [pc, #744]	@ (8002ac8 <TSK_HighFrequencyTask+0x310>)
	float error = currentAngle - previousAngle;
 80027e0:	49ba      	ldr	r1, [pc, #744]	@ (8002acc <TSK_HighFrequencyTask+0x314>)
 (void)updateValueVelocity(mechanicalAngle, 0.0001); // calculate the velocity
 80027e2:	ed93 7a00 	vldr	s14, [r3]
	float error = currentAngle - previousAngle;
 80027e6:	edd1 7a00 	vldr	s15, [r1]
	if (fabs(error) >= 180)
 80027ea:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8002ad0 <TSK_HighFrequencyTask+0x318>
	float error = currentAngle - previousAngle;
 80027ee:	ee77 7a67 	vsub.f32	s15, s14, s15
	if (fabs(error) >= 180)
 80027f2:	eeb0 6ae7 	vabs.f32	s12, s15
 80027f6:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	db0a      	blt.n	8002816 <TSK_HighFrequencyTask+0x5e>
		if ((error) > 0)
 8002800:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			error = error - 360;
 8002804:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8002ad4 <TSK_HighFrequencyTask+0x31c>
		if ((error) > 0)
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			error = error - 360;
 800280c:	bfcc      	ite	gt
 800280e:	ee77 7ae6 	vsubgt.f32	s15, s15, s13
			error = error + 360;
 8002812:	ee77 7aa6 	vaddle.f32	s15, s15, s13
	currentVelocity = alphaW * previousVelocity + alphaT * (error);
 8002816:	4ab0      	ldr	r2, [pc, #704]	@ (8002ad8 <TSK_HighFrequencyTask+0x320>)
 8002818:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 8002adc <TSK_HighFrequencyTask+0x324>
 800281c:	edd2 6a00 	vldr	s13, [r2]
	previousAngle = currentAngle;
 8002820:	ed81 7a00 	vstr	s14, [r1]
	currentVelocity = alphaW * previousVelocity + alphaT * (error);
 8002824:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002828:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8002ae0 <TSK_HighFrequencyTask+0x328>
 800282c:	49ad      	ldr	r1, [pc, #692]	@ (8002ae4 <TSK_HighFrequencyTask+0x32c>)
 800282e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002832:	edc1 7a00 	vstr	s15, [r1]
  mechanicalAngle = angleDeg;
 8002836:	49ac      	ldr	r1, [pc, #688]	@ (8002ae8 <TSK_HighFrequencyTask+0x330>)
	previousVelocity = currentVelocity;
 8002838:	edc2 7a00 	vstr	s15, [r2]

  if (Mci[M1].State == RUN)
 800283c:	f898 2019 	ldrb.w	r2, [r8, #25]
  mechanicalAngle = angleDeg;
 8002840:	edd1 7a00 	vldr	s15, [r1]
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002844:	49a9      	ldr	r1, [pc, #676]	@ (8002aec <TSK_HighFrequencyTask+0x334>)
  mechanicalAngle = angleDeg;
 8002846:	edc3 7a00 	vstr	s15, [r3]
  if (Mci[M1].State == RUN)
 800284a:	2a06      	cmp	r2, #6
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800284c:	680d      	ldr	r5, [r1, #0]
  if (Mci[M1].State == RUN)
 800284e:	f040 8089 	bne.w	8002964 <TSK_HighFrequencyTask+0x1ac>
   electricalAngleEstimatedCorrected = fmodf(360-fmodf(polePairs*mechanicalAngle,360.0)-360.0/65536, 360);
 8002852:	eddf 8aa0 	vldr	s17, [pc, #640]	@ 8002ad4 <TSK_HighFrequencyTask+0x31c>
	int16ElAngle = (int16_t)((electricalAngleEstimatedCorrected/180.0)*32767.0);
 8002856:	f8df 9308 	ldr.w	r9, [pc, #776]	@ 8002b60 <TSK_HighFrequencyTask+0x3a8>
	ElAnglePLL = STO_PLL_M1._Super.hElAngle;
 800285a:	4fa5      	ldr	r7, [pc, #660]	@ (8002af0 <TSK_HighFrequencyTask+0x338>)
   electricalAngleEstimatedCorrected = fmodf(360-fmodf(polePairs*mechanicalAngle,360.0)-360.0/65536, 360);
 800285c:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 8002860:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002864:	eef0 0a68 	vmov.f32	s1, s17
 8002868:	f007 ffc2 	bl	800a7f0 <fmodf>
 800286c:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 8002af4 <TSK_HighFrequencyTask+0x33c>
 8002870:	eef0 0a68 	vmov.f32	s1, s17
 8002874:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002878:	f007 ffba 	bl	800a7f0 <fmodf>
	if (electricalAngleEstimatedCorrected > 180)
 800287c:	eddf 7a94 	vldr	s15, [pc, #592]	@ 8002ad0 <TSK_HighFrequencyTask+0x318>
	if (Eltemp < -180)
 8002880:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8002af8 <TSK_HighFrequencyTask+0x340>
   electricalAngleEstimatedCorrected = fmodf(360-fmodf(polePairs*mechanicalAngle,360.0)-360.0/65536, 360);
 8002884:	4b9d      	ldr	r3, [pc, #628]	@ (8002afc <TSK_HighFrequencyTask+0x344>)
	if (electricalAngleEstimatedCorrected > 180)
 8002886:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   electricalAngleEstimatedCorrected = fmodf(360-fmodf(polePairs*mechanicalAngle,360.0)-360.0/65536, 360);
 800288e:	eeb0 8a40 	vmov.f32	s16, s0
	if (Eltemp > 180)
 8002892:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8002b00 <TSK_HighFrequencyTask+0x348>
	  electricalAngleEstimatedCorrected = electricalAngleEstimatedCorrected - 360.0;
 8002896:	bfc8      	it	gt
 8002898:	ee30 8a68 	vsubgt.f32	s16, s0, s17
	if (Eltemp > 180)
 800289c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Eltemp = electricalAngleEstimatedCorrected + offsetMean ;
 80028a4:	bfd4      	ite	le
 80028a6:	eddf 7a97 	vldrle	s15, [pc, #604]	@ 8002b04 <TSK_HighFrequencyTask+0x34c>
		Eltemp = Eltemp - 360;
 80028aa:	eddf 7a97 	vldrgt	s15, [pc, #604]	@ 8002b08 <TSK_HighFrequencyTask+0x350>
   electricalAngleEstimatedCorrected = fmodf(360-fmodf(polePairs*mechanicalAngle,360.0)-360.0/65536, 360);
 80028ae:	ed83 8a00 	vstr	s16, [r3]
		Eltemp = Eltemp - 360;
 80028b2:	ee78 7a67 	vsub.f32	s15, s16, s15
	if (Eltemp < -180)
 80028b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	    Eltemp = Eltemp + 360;
 80028be:	bf49      	itett	mi
 80028c0:	ed9f 7a84 	vldrmi	s14, [pc, #528]	@ 8002ad4 <TSK_HighFrequencyTask+0x31c>
	Eltemp = electricalAngleEstimatedCorrected + offsetMean ;
 80028c4:	4b91      	ldrpl	r3, [pc, #580]	@ (8002b0c <TSK_HighFrequencyTask+0x354>)
	    Eltemp = Eltemp + 360;
 80028c6:	4b91      	ldrmi	r3, [pc, #580]	@ (8002b0c <TSK_HighFrequencyTask+0x354>)
 80028c8:	ee77 7a87 	vaddmi.f32	s15, s15, s14
 80028cc:	edc3 7a00 	vstr	s15, [r3]
	int16ElAngle2 = (int16_t)((Eltemp/180.0)*32767.0);
 80028d0:	ee17 0a90 	vmov	r0, s15
 80028d4:	f7fd ff2e 	bl	8000734 <__aeabi_f2d>
 80028d8:	a377      	add	r3, pc, #476	@ (adr r3, 8002ab8 <TSK_HighFrequencyTask+0x300>)
 80028da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028de:	f7fd fc9b 	bl	8000218 <__aeabi_dmul>
 80028e2:	f7fd ff7f 	bl	80007e4 <__aeabi_d2iz>
 80028e6:	4b8a      	ldr	r3, [pc, #552]	@ (8002b10 <TSK_HighFrequencyTask+0x358>)
 80028e8:	b206      	sxth	r6, r0
 80028ea:	801e      	strh	r6, [r3, #0]
	int16ElAngle = (int16_t)((electricalAngleEstimatedCorrected/180.0)*32767.0);
 80028ec:	ee18 0a10 	vmov	r0, s16
 80028f0:	f7fd ff20 	bl	8000734 <__aeabi_f2d>
 80028f4:	a370      	add	r3, pc, #448	@ (adr r3, 8002ab8 <TSK_HighFrequencyTask+0x300>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f7fd fc8d 	bl	8000218 <__aeabi_dmul>
 80028fe:	f7fd ff71 	bl	80007e4 <__aeabi_d2iz>
	ElAnglePLL = STO_PLL_M1._Super.hElAngle;
 8002902:	4984      	ldr	r1, [pc, #528]	@ (8002b14 <TSK_HighFrequencyTask+0x35c>)
	int16ElAngle = (int16_t)((electricalAngleEstimatedCorrected/180.0)*32767.0);
 8002904:	f8a9 0000 	strh.w	r0, [r9]
	ElAngleSTC = pSTC[M1]->SPD->hElAngle;
 8002908:	f8d5 9014 	ldr.w	r9, [r5, #20]
	ElAnglePLL = STO_PLL_M1._Super.hElAngle;
 800290c:	88b8      	ldrh	r0, [r7, #4]
	ElAngleSTC = pSTC[M1]->SPD->hElAngle;
 800290e:	4a82      	ldr	r2, [pc, #520]	@ (8002b18 <TSK_HighFrequencyTask+0x360>)
	ElAngleRef = FOCVars[M1].hElAngle;
 8002910:	4b82      	ldr	r3, [pc, #520]	@ (8002b1c <TSK_HighFrequencyTask+0x364>)
	ElAnglePLL = STO_PLL_M1._Super.hElAngle;
 8002912:	8008      	strh	r0, [r1, #0]
	ElAngleSTC = pSTC[M1]->SPD->hElAngle;
 8002914:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8002918:	8011      	strh	r1, [r2, #0]
	ElAngleRef = FOCVars[M1].hElAngle;
 800291a:	8c22      	ldrh	r2, [r4, #32]
 800291c:	801a      	strh	r2, [r3, #0]
	STOPLL = STO_PLL_M1;
 800291e:	4639      	mov	r1, r7
 8002920:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8002924:	487e      	ldr	r0, [pc, #504]	@ (8002b20 <TSK_HighFrequencyTask+0x368>)
	pSTC[M1]->SPD->hElAngle = int16ElAngle2; //(int16_t)fmodf((float)(ElAnglePLL + 1000), 32768.0);
 8002926:	f8a9 6004 	strh.w	r6, [r9, #4]
	STOPLL = STO_PLL_M1;
 800292a:	f007 ff53 	bl	800a7d4 <memcpy>
	velocityIDE = pSTC[M1]->SPD->hAvrMecSpeedUnit;
 800292e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8002932:	497c      	ldr	r1, [pc, #496]	@ (8002b24 <TSK_HighFrequencyTask+0x36c>)
	ReliabilitySpeed = STO_PLL_M1.IsSpeedReliable;
 8002934:	f897 20f5 	ldrb.w	r2, [r7, #245]	@ 0xf5
	velocityIDE = pSTC[M1]->SPD->hAvrMecSpeedUnit;
 8002938:	ee07 3a90 	vmov	s15, r3
	velocityRef = pMCI[M1]->pSTC->SpeedRefUnitExt>>16;
 800293c:	4b7a      	ldr	r3, [pc, #488]	@ (8002b28 <TSK_HighFrequencyTask+0x370>)
	velocityIDE = pSTC[M1]->SPD->hAvrMecSpeedUnit;
 800293e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	velocityRef = pMCI[M1]->pSTC->SpeedRefUnitExt>>16;
 8002942:	681b      	ldr	r3, [r3, #0]
	velocityIDE = pSTC[M1]->SPD->hAvrMecSpeedUnit;
 8002944:	edc1 7a00 	vstr	s15, [r1]
	velocityRef = pMCI[M1]->pSTC->SpeedRefUnitExt>>16;
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800294e:	ee07 1a90 	vmov	s15, r1
 8002952:	4976      	ldr	r1, [pc, #472]	@ (8002b2c <TSK_HighFrequencyTask+0x374>)
 8002954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002958:	edc1 7a00 	vstr	s15, [r1]
	Motor1 = pMCI[M1];
 800295c:	4974      	ldr	r1, [pc, #464]	@ (8002b30 <TSK_HighFrequencyTask+0x378>)
 800295e:	600b      	str	r3, [r1, #0]
	ReliabilitySpeed = STO_PLL_M1.IsSpeedReliable;
 8002960:	4b74      	ldr	r3, [pc, #464]	@ (8002b34 <TSK_HighFrequencyTask+0x37c>)
 8002962:	701a      	strb	r2, [r3, #0]
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002964:	4628      	mov	r0, r5
 8002966:	f007 fa77 	bl	8009e58 <STC_GetSpeedSensor>
 800296a:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800296c:	f007 fa10 	bl	8009d90 <SPD_GetElAngle>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002970:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8002b64 <TSK_HighFrequencyTask+0x3ac>
  hElAngle = SPD_GetElAngle(speedHandle);
 8002974:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8002976:	4638      	mov	r0, r7
 8002978:	f007 fa12 	bl	8009da0 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800297c:	a902      	add	r1, sp, #8
 800297e:	f8d9 0000 	ldr.w	r0, [r9]
 8002982:	f000 fa0f 	bl	8002da4 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8002986:	f001 fdc1 	bl	800450c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 800298a:	f001 fd7b 	bl	8004484 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 800298e:	9802      	ldr	r0, [sp, #8]
 8002990:	f7ff f97c 	bl	8001c8c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002994:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8002996:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002998:	f7ff f9b8 	bl	8001d0c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800299c:	4b66      	ldr	r3, [pc, #408]	@ (8002b38 <TSK_HighFrequencyTask+0x380>)
 800299e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80029a2:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80029a4:	b200      	sxth	r0, r0
 80029a6:	1a09      	subs	r1, r1, r0
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	f005 ffdf 	bl	800896c <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80029ae:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80029b2:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80029b6:	1ac9      	subs	r1, r1, r3
 80029b8:	4b60      	ldr	r3, [pc, #384]	@ (8002b3c <TSK_HighFrequencyTask+0x384>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80029ba:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	f005 ffd5 	bl	800896c <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80029c2:	f8ad 6004 	strh.w	r6, [sp, #4]
 80029c6:	f8ad 0006 	strh.w	r0, [sp, #6]
 80029ca:	9901      	ldr	r1, [sp, #4]
 80029cc:	485c      	ldr	r0, [pc, #368]	@ (8002b40 <TSK_HighFrequencyTask+0x388>)
 80029ce:	f005 fce7 	bl	80083a0 <Circle_Limitation>
 80029d2:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80029d4:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80029d6:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80029d8:	f007 f9e2 	bl	8009da0 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80029dc:	4629      	mov	r1, r5
 80029de:	9801      	ldr	r0, [sp, #4]
 80029e0:	f7ff f9d6 	bl	8001d90 <MCM_Rev_Park>
 80029e4:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80029e6:	f8d9 0000 	ldr.w	r0, [r9]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80029ea:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80029ec:	f000 f9dc 	bl	8002da8 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80029f0:	9b02      	ldr	r3, [sp, #8]
 80029f2:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80029f4:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80029f6:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 80029f8:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80029fa:	6063      	str	r3, [r4, #4]
  if(hFOCreturn == MC_DURATION)
 80029fc:	2901      	cmp	r1, #1
  FOCVars[M1].Iqd = Iqd;
 80029fe:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 8002a00:	f8c4 6016 	str.w	r6, [r4, #22]
  FOCVars[M1].Iqd = Iqd;
 8002a04:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002a06:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8002a0a:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8002a0c:	d03a      	beq.n	8002a84 <TSK_HighFrequencyTask+0x2cc>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002a0e:	484d      	ldr	r0, [pc, #308]	@ (8002b44 <TSK_HighFrequencyTask+0x38c>)
 8002a10:	f007 f992 	bl	8009d38 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002a14:	6862      	ldr	r2, [r4, #4]
 8002a16:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002a18:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002a1a:	484b      	ldr	r0, [pc, #300]	@ (8002b48 <TSK_HighFrequencyTask+0x390>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002a1c:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002a1e:	f005 fcb7 	bl	8008390 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002a22:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002a24:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002a26:	4832      	ldr	r0, [pc, #200]	@ (8002af0 <TSK_HighFrequencyTask+0x338>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002a28:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002a2c:	f007 fabe 	bl	8009fac <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 8002a30:	482f      	ldr	r0, [pc, #188]	@ (8002af0 <TSK_HighFrequencyTask+0x338>)
 8002a32:	f007 fc4f 	bl	800a2d4 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 8002a36:	b19c      	cbz	r4, 8002a60 <TSK_HighFrequencyTask+0x2a8>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8002a38:	f898 3019 	ldrb.w	r3, [r8, #25]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d016      	beq.n	8002a6e <TSK_HighFrequencyTask+0x2b6>
 8002a40:	2b13      	cmp	r3, #19
 8002a42:	d014      	beq.n	8002a6e <TSK_HighFrequencyTask+0x2b6>
  GLOBAL_TIMESTAMP++;
 8002a44:	4a41      	ldr	r2, [pc, #260]	@ (8002b4c <TSK_HighFrequencyTask+0x394>)
  if (0U == MCPA_UART_A.Mark)
 8002a46:	4842      	ldr	r0, [pc, #264]	@ (8002b50 <TSK_HighFrequencyTask+0x398>)
  GLOBAL_TIMESTAMP++;
 8002a48:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002a4a:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8002a4e:	3301      	adds	r3, #1
 8002a50:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002a52:	b9e1      	cbnz	r1, 8002a8e <TSK_HighFrequencyTask+0x2d6>
}
 8002a54:	2000      	movs	r0, #0
 8002a56:	b009      	add	sp, #36	@ 0x24
 8002a58:	ecbd 8b02 	vpop	{d8}
 8002a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8002a60:	4823      	ldr	r0, [pc, #140]	@ (8002af0 <TSK_HighFrequencyTask+0x338>)
 8002a62:	f007 fd59 	bl	800a518 <STO_ResetPLL>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8002a66:	f898 3019 	ldrb.w	r3, [r8, #25]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d1e8      	bne.n	8002a40 <TSK_HighFrequencyTask+0x288>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002a6e:	4820      	ldr	r0, [pc, #128]	@ (8002af0 <TSK_HighFrequencyTask+0x338>)
 8002a70:	f007 f98e 	bl	8009d90 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002a74:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002a76:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002a78:	4836      	ldr	r0, [pc, #216]	@ (8002b54 <TSK_HighFrequencyTask+0x39c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002a7a:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002a7e:	f007 fd7d 	bl	800a57c <VSS_CalcElAngle>
 8002a82:	e7df      	b.n	8002a44 <TSK_HighFrequencyTask+0x28c>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8002a84:	4834      	ldr	r0, [pc, #208]	@ (8002b58 <TSK_HighFrequencyTask+0x3a0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	f7fe ffca 	bl	8001a20 <MCI_FaultProcessing>
 8002a8c:	e7da      	b.n	8002a44 <TSK_HighFrequencyTask+0x28c>
    MCPA_dataLog (&MCPA_UART_A);
 8002a8e:	f005 fd6d 	bl	800856c <MCPA_dataLog>
}
 8002a92:	2000      	movs	r0, #0
 8002a94:	b009      	add	sp, #36	@ 0x24
 8002a96:	ecbd 8b02 	vpop	{d8}
 8002a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8002a9e:	4d2f      	ldr	r5, [pc, #188]	@ (8002b5c <TSK_HighFrequencyTask+0x3a4>)
 8002aa0:	6828      	ldr	r0, [r5, #0]
 8002aa2:	f007 f829 	bl	8009af8 <REMNG_RampCompleted>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	f47f ae96 	bne.w	80027d8 <TSK_HighFrequencyTask+0x20>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8002aac:	6828      	ldr	r0, [r5, #0]
 8002aae:	f007 f801 	bl	8009ab4 <REMNG_Calc>
 8002ab2:	8220      	strh	r0, [r4, #16]
 8002ab4:	e690      	b.n	80027d8 <TSK_HighFrequencyTask+0x20>
 8002ab6:	bf00      	nop
 8002ab8:	93e93e94 	.word	0x93e93e94
 8002abc:	4066c13e 	.word	0x4066c13e
 8002ac0:	20000b2c 	.word	0x20000b2c
 8002ac4:	20000804 	.word	0x20000804
 8002ac8:	20000af4 	.word	0x20000af4
 8002acc:	20000b00 	.word	0x20000b00
 8002ad0:	43340000 	.word	0x43340000
 8002ad4:	43b40000 	.word	0x43b40000
 8002ad8:	20000af8 	.word	0x20000af8
 8002adc:	426f483b 	.word	0x426f483b
 8002ae0:	3f7e77f5 	.word	0x3f7e77f5
 8002ae4:	20000afc 	.word	0x20000afc
 8002ae8:	20000b0c 	.word	0x20000b0c
 8002aec:	20000010 	.word	0x20000010
 8002af0:	20000148 	.word	0x20000148
 8002af4:	43b3ff4c 	.word	0x43b3ff4c
 8002af8:	c3340000 	.word	0xc3340000
 8002afc:	20000af0 	.word	0x20000af0
 8002b00:	43a3d3ac 	.word	0x43a3d3ac
 8002b04:	4313a759 	.word	0x4313a759
 8002b08:	43fdd3ac 	.word	0x43fdd3ac
 8002b0c:	200009a4 	.word	0x200009a4
 8002b10:	200009a2 	.word	0x200009a2
 8002b14:	20000aec 	.word	0x20000aec
 8002b18:	20000aea 	.word	0x20000aea
 8002b1c:	20000ae8 	.word	0x20000ae8
 8002b20:	200009b0 	.word	0x200009b0
 8002b24:	20000ae0 	.word	0x20000ae0
 8002b28:	20001ce0 	.word	0x20001ce0
 8002b2c:	20000ad8 	.word	0x20000ad8
 8002b30:	200009ac 	.word	0x200009ac
 8002b34:	200009a8 	.word	0x200009a8
 8002b38:	20000008 	.word	0x20000008
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	20000014 	.word	0x20000014
 8002b44:	20000338 	.word	0x20000338
 8002b48:	200000e0 	.word	0x200000e0
 8002b4c:	20001d3c 	.word	0x20001d3c
 8002b50:	2000048c 	.word	0x2000048c
 8002b54:	20000270 	.word	0x20000270
 8002b58:	20000968 	.word	0x20000968
 8002b5c:	20000b24 	.word	0x20000b24
 8002b60:	20000aee 	.word	0x20000aee
 8002b64:	20000b28 	.word	0x20000b28

08002b68 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <TSK_SafetyTask_PWMOFF+0x78>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002b6c:	4e1d      	ldr	r6, [pc, #116]	@ (8002be4 <TSK_SafetyTask_PWMOFF+0x7c>)
{
 8002b6e:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002b70:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002b74:	f005 fe84 	bl	8008880 <NTC_CalcAvTemp>
 8002b78:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002b7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002b7e:	f000 fa53 	bl	8003028 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002b82:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002b86:	4305      	orrs	r5, r0
 8002b88:	b2ad      	uxth	r5, r5
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 8002b8a:	b16c      	cbz	r4, 8002ba8 <TSK_SafetyTask_PWMOFF+0x40>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8002b8c:	4f16      	ldr	r7, [pc, #88]	@ (8002be8 <TSK_SafetyTask_PWMOFF+0x80>)
 8002b8e:	43ea      	mvns	r2, r5
 8002b90:	eb07 1744 	add.w	r7, r7, r4, lsl #5
 8002b94:	4638      	mov	r0, r7
 8002b96:	b292      	uxth	r2, r2
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fe ff41 	bl	8001a20 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002b9e:	4638      	mov	r0, r7
 8002ba0:	f7fe ffce 	bl	8001b40 <MCI_GetFaultState>
 8002ba4:	b938      	cbnz	r0, 8002bb6 <TSK_SafetyTask_PWMOFF+0x4e>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002ba8:	4810      	ldr	r0, [pc, #64]	@ (8002bec <TSK_SafetyTask_PWMOFF+0x84>)
 8002baa:	f006 ff47 	bl	8009a3c <RVBS_CalcAvVbus>
 8002bae:	f000 000e 	and.w	r0, r0, #14
 8002bb2:	4305      	orrs	r5, r0
 8002bb4:	e7ea      	b.n	8002b8c <TSK_SafetyTask_PWMOFF+0x24>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002bb6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002bba:	f000 fa17 	bl	8002fec <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002bbe:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <TSK_SafetyTask_PWMOFF+0x88>)
 8002bc0:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002bc4:	b94b      	cbnz	r3, 8002bda <TSK_SafetyTask_PWMOFF+0x72>
    FOC_Clear(bMotor);
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f7ff fa12 	bl	8001ff0 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <TSK_SafetyTask_PWMOFF+0x8c>)
 8002bce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8002bd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002bd6:	f005 bf23 	b.w	8008a20 <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002bda:	f005 fd87 	bl	80086ec <MCPA_flushDataLog>
 8002bde:	e7f2      	b.n	8002bc6 <TSK_SafetyTask_PWMOFF+0x5e>
 8002be0:	2000000c 	.word	0x2000000c
 8002be4:	20000b28 	.word	0x20000b28
 8002be8:	20000968 	.word	0x20000968
 8002bec:	200000e0 	.word	0x200000e0
 8002bf0:	2000048c 	.word	0x2000048c
 8002bf4:	20000000 	.word	0x20000000

08002bf8 <TSK_SafetyTask>:
{
 8002bf8:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <TSK_SafetyTask+0x1c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d000      	beq.n	8002c04 <TSK_SafetyTask+0xc>
}
 8002c02:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7ff ffaf 	bl	8002b68 <TSK_SafetyTask_PWMOFF>
}
 8002c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8002c0e:	f001 bc09 	b.w	8004424 <RCM_ExecUserConv>
 8002c12:	bf00      	nop
 8002c14:	20000b1a 	.word	0x20000b1a

08002c18 <MC_RunMotorControlTasks>:
{
 8002c18:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8002c1a:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <MC_RunMotorControlTasks+0x14>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b903      	cbnz	r3, 8002c22 <MC_RunMotorControlTasks+0xa>
}
 8002c20:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002c22:	f7ff fd83 	bl	800272c <MC_Scheduler>
    TSK_SafetyTask();
 8002c26:	f7ff ffe7 	bl	8002bf8 <TSK_SafetyTask>
}
 8002c2a:	bd08      	pop	{r3, pc}
 8002c2c:	20000b1a 	.word	0x20000b1a

08002c30 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002c30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002c32:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <TSK_HardwareFaultTask+0x18>)
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	f006 f957 	bl	8008ee8 <R3_2_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002c3e:	4803      	ldr	r0, [pc, #12]	@ (8002c4c <TSK_HardwareFaultTask+0x1c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	2180      	movs	r1, #128	@ 0x80
 8002c44:	f7fe beec 	b.w	8001a20 <MCI_FaultProcessing>
 8002c48:	20000b28 	.word	0x20000b28
 8002c4c:	20000968 	.word	0x20000968

08002c50 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002c50:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002c52:	f7fe fea9 	bl	80019a8 <MC_GetSTMStateMotor1>
 8002c56:	b918      	cbnz	r0, 8002c60 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002c5c:	f7fe be98 	b.w	8001990 <MC_StartMotor1>
}
 8002c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002c64:	f7fe be9a 	b.w	800199c <MC_StopMotor1>

08002c68 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002c68:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d54 <mc_lock_pins+0xec>)
 8002c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d58 <mc_lock_pins+0xf0>)
 8002c6e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002c70:	2110      	movs	r1, #16
 8002c72:	61d9      	str	r1, [r3, #28]
 8002c74:	b08c      	sub	sp, #48	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c76:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	920b      	str	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002c80:	4a36      	ldr	r2, [pc, #216]	@ (8002d5c <mc_lock_pins+0xf4>)
  (void) temp;
 8002c82:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c84:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002c86:	2180      	movs	r1, #128	@ 0x80
 8002c88:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c8a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	920a      	str	r2, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002c90:	f44f 7180 	mov.w	r1, #256	@ 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c94:	4a32      	ldr	r2, [pc, #200]	@ (8002d60 <mc_lock_pins+0xf8>)
  (void) temp;
 8002c96:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c98:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002c9a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c9c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	9209      	str	r2, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ca2:	f44f 7100 	mov.w	r1, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ca6:	f44f 3281 	mov.w	r2, #66048	@ 0x10200
  (void) temp;
 8002caa:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cac:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cae:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cb0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	9208      	str	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cb6:	f44f 3184 	mov.w	r1, #67584	@ 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  (void) temp;
 8002cbe:	9a08      	ldr	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cc0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cc2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cc4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	9207      	str	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cca:	f44f 3482 	mov.w	r4, #66560	@ 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  (void) temp;
 8002cd2:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cd4:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cd6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cd8:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cda:	69dc      	ldr	r4, [r3, #28]
 8002cdc:	9406      	str	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cde:	441a      	add	r2, r3
  (void) temp;
 8002ce0:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ce2:	f44f 34a0 	mov.w	r4, #81920	@ 0x14000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ce6:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cea:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cec:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cee:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cf0:	69d4      	ldr	r4, [r2, #28]
 8002cf2:	9405      	str	r4, [sp, #20]
  (void) temp;
 8002cf4:	9d05      	ldr	r5, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cf6:	f44f 3490 	mov.w	r4, #73728	@ 0x12000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cfa:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cfe:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d00:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d02:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d04:	69d4      	ldr	r4, [r2, #28]
 8002d06:	9404      	str	r4, [sp, #16]
  (void) temp;
 8002d08:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d0a:	f44f 34c0 	mov.w	r4, #98304	@ 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d0e:	f44f 4500 	mov.w	r5, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d12:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d14:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d16:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d18:	69d4      	ldr	r4, [r2, #28]
 8002d1a:	9403      	str	r4, [sp, #12]
  (void) temp;
 8002d1c:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d1e:	4c11      	ldr	r4, [pc, #68]	@ (8002d64 <mc_lock_pins+0xfc>)
 8002d20:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d22:	2502      	movs	r5, #2
 8002d24:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d26:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d28:	69dc      	ldr	r4, [r3, #28]
 8002d2a:	9402      	str	r4, [sp, #8]
  (void) temp;
 8002d2c:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d2e:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d32:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d34:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d36:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d38:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002d3e:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d40:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d42:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d44:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d46:	69d3      	ldr	r3, [r2, #28]
 8002d48:	9300      	str	r3, [sp, #0]
  (void) temp;
 8002d4a:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
LL_GPIO_LockPin(M1_PWM_EN_W_GPIO_Port, M1_PWM_EN_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 8002d4c:	b00c      	add	sp, #48	@ 0x30
 8002d4e:	bc30      	pop	{r4, r5}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	48000800 	.word	0x48000800
 8002d58:	00010010 	.word	0x00010010
 8002d5c:	00010080 	.word	0x00010080
 8002d60:	00010100 	.word	0x00010100
 8002d64:	00010002 	.word	0x00010002

08002d68 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002d68:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002d6a:	f003 fcd3 	bl	8006714 <HAL_RCC_GetHCLKFreq>
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d98 <MX_MotorControl_Init+0x30>)
 8002d70:	fba3 3000 	umull	r3, r0, r3, r0
 8002d74:	09c0      	lsrs	r0, r0, #7
 8002d76:	f002 ff15 	bl	8005ba4 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002d7a:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <MX_MotorControl_Init+0x34>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f002 fec4 	bl	8005b10 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002d88:	4805      	ldr	r0, [pc, #20]	@ (8002da0 <MX_MotorControl_Init+0x38>)
 8002d8a:	f7ff f96b 	bl	8002064 <MCboot>
  mc_lock_pins();
}
 8002d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002d92:	f7ff bf69 	b.w	8002c68 <mc_lock_pins>
 8002d96:	bf00      	nop
 8002d98:	10624dd3 	.word	0x10624dd3
 8002d9c:	2000055c 	.word	0x2000055c
 8002da0:	20001ce0 	.word	0x20001ce0

08002da4 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002da4:	6803      	ldr	r3, [r0, #0]
 8002da6:	4718      	bx	r3

08002da8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002da8:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002daa:	f8b0 4060 	ldrh.w	r4, [r0, #96]	@ 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002dae:	8f82      	ldrh	r2, [r0, #60]	@ 0x3c
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002db0:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002db4:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002db6:	fb04 fc0c 	mul.w	ip, r4, ip
 8002dba:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002dc2:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002dc6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002dca:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8002dce:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002dd2:	1c55      	adds	r5, r2, #1
{
 8002dd4:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002dd6:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002dda:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002dde:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002de2:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    if (wY < 0)
 8002de6:	db7f      	blt.n	8002ee8 <PWMC_SetPhaseVoltage+0x140>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002de8:	1c5d      	adds	r5, r3, #1
 8002dea:	db5c      	blt.n	8002ea6 <PWMC_SetPhaseVoltage+0xfe>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002dec:	ebb1 010e 	subs.w	r1, r1, lr
 8002df0:	bf44      	itt	mi
 8002df2:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002df6:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bfbc      	itt	lt
 8002dfe:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002e02:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8002e06:	2a00      	cmp	r2, #0
 8002e08:	bfb8      	it	lt
 8002e0a:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002e0e:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002e12:	bfb8      	it	lt
 8002e14:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002e18:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002e1c:	eba1 42a2 	sub.w	r2, r1, r2, asr #18

        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002e20:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002e24:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002e28:	b294      	uxth	r4, r2
 8002e2a:	2501      	movs	r5, #1
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002e2c:	f8a0 404a 	strh.w	r4, [r0, #74]	@ 0x4a

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8002e30:	f8b0 405e 	ldrh.w	r4, [r0, #94]	@ 0x5e
          pHandle->Sector = SECTOR_4;
 8002e34:	f880 506a 	strb.w	r5, [r0, #106]	@ 0x6a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002e38:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002e3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002e40:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002e44:	b289      	uxth	r1, r1
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 8002e4a:	2c01      	cmp	r4, #1
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002e4c:	f8a0 e046 	strh.w	lr, [r0, #70]	@ 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002e50:	f8a0 c048 	strh.w	ip, [r0, #72]	@ 0x48
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002e54:	87c1      	strh	r1, [r0, #62]	@ 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002e56:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002e5a:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
    if (1U == pHandle->DTTest)
 8002e5e:	d11d      	bne.n	8002e9c <PWMC_SetPhaseVoltage+0xf4>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8002e60:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	@ 0x50
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002e64:	f8b0 4062 	ldrh.w	r4, [r0, #98]	@ 0x62
      if (pHandle->Ia > 0)
 8002e68:	2d00      	cmp	r5, #0
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002e6a:	bfcc      	ite	gt
 8002e6c:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002e6e:	1b09      	suble	r1, r1, r4
 8002e70:	b289      	uxth	r1, r1
 8002e72:	87c1      	strh	r1, [r0, #62]	@ 0x3e
      }

      if (pHandle->Ib > 0)
 8002e74:	f9b0 1052 	ldrsh.w	r1, [r0, #82]	@ 0x52
 8002e78:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8002e7a:	f9b0 1054 	ldrsh.w	r1, [r0, #84]	@ 0x54
        pHandle->CntPhB += pHandle->DTCompCnt;
 8002e7e:	bfcc      	ite	gt
 8002e80:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002e82:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 8002e84:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002e86:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002e88:	bfcc      	ite	gt
 8002e8a:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002e8c:	1b12      	suble	r2, r2, r4
 8002e8e:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002e92:	bfcc      	ite	gt
 8002e94:	f8a0 4042 	strhgt.w	r4, [r0, #66]	@ 0x42
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002e98:	f8a0 2042 	strhle.w	r2, [r0, #66]	@ 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002e9c:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002e9e:	b003      	add	sp, #12
 8002ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002ea4:	4718      	bx	r3
        if ( wX <= 0 )
 8002ea6:	f1bc 0f00 	cmp.w	ip, #0
 8002eaa:	dd3d      	ble.n	8002f28 <PWMC_SetPhaseVoltage+0x180>
          wTimePhB = wTimePhA + (wZ / 131072);
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bfb8      	it	lt
 8002eb0:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002eb4:	ebac 0e0e 	sub.w	lr, ip, lr
          wTimePhB = wTimePhA + (wZ / 131072);
 8002eb8:	bfb8      	it	lt
 8002eba:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002ebe:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002ec2:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002ec6:	bfb8      	it	lt
 8002ec8:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002ecc:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002ed0:	bfb8      	it	lt
 8002ed2:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8002ed6:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002eda:	fa1f fe81 	uxth.w	lr, r1
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002ede:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhC;
 8002ee2:	b294      	uxth	r4, r2
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	e7a1      	b.n	8002e2c <PWMC_SetPhaseVoltage+0x84>
      if (wZ < 0)
 8002ee8:	1c5d      	adds	r5, r3, #1
 8002eea:	db5d      	blt.n	8002fa8 <PWMC_SetPhaseVoltage+0x200>
        if (wX <= 0)
 8002eec:	f1bc 0f00 	cmp.w	ip, #0
 8002ef0:	dd38      	ble.n	8002f64 <PWMC_SetPhaseVoltage+0x1bc>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002ef2:	ebb1 010c 	subs.w	r1, r1, ip
 8002ef6:	bf44      	itt	mi
 8002ef8:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002efc:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002f00:	2a00      	cmp	r2, #0
 8002f02:	bfb8      	it	lt
 8002f04:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002f08:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002f0c:	bfb8      	it	lt
 8002f0e:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
 8002f12:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002f16:	eb02 436c 	add.w	r3, r2, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002f1a:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002f1e:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002f22:	b28c      	uxth	r4, r1
 8002f24:	2502      	movs	r5, #2
 8002f26:	e781      	b.n	8002e2c <PWMC_SetPhaseVoltage+0x84>
          wTimePhC = wTimePhA - (wY / 131072);
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	bfb8      	it	lt
 8002f2c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002f30:	eba1 010c 	sub.w	r1, r1, ip
          wTimePhC = wTimePhA - (wY / 131072);
 8002f34:	bfb8      	it	lt
 8002f36:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhB = wTimePhC + (wX / 131072);
 8002f3a:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002f3e:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002f42:	bfb8      	it	lt
 8002f44:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8002f48:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002f4c:	bfb8      	it	lt
 8002f4e:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8002f52:	eb02 4363 	add.w	r3, r2, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002f56:	fa1f fe81 	uxth.w	lr, r1
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002f5a:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002f5e:	b29c      	uxth	r4, r3
 8002f60:	2505      	movs	r5, #5
 8002f62:	e763      	b.n	8002e2c <PWMC_SetPhaseVoltage+0x84>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002f64:	ebbc 0e0e 	subs.w	lr, ip, lr
 8002f68:	bf44      	itt	mi
 8002f6a:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002f6e:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bfbc      	itt	lt
 8002f76:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002f7a:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002f7e:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002f82:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002f86:	bfb8      	it	lt
 8002f88:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002f8c:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002f90:	bfb8      	it	lt
 8002f92:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8002f96:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002f9a:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002f9e:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002fa2:	b28c      	uxth	r4, r1
 8002fa4:	2503      	movs	r5, #3
 8002fa6:	e741      	b.n	8002e2c <PWMC_SetPhaseVoltage+0x84>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002fa8:	ebb1 010e 	subs.w	r1, r1, lr
 8002fac:	bf44      	itt	mi
 8002fae:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002fb2:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bfbc      	itt	lt
 8002fba:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002fbe:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002fc2:	2a00      	cmp	r2, #0
 8002fc4:	bfb8      	it	lt
 8002fc6:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002fca:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002fce:	bfb8      	it	lt
 8002fd0:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002fd4:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002fd8:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        pHandle->lowDuty = (uint16_t)wTimePhC;
 8002fdc:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002fe0:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002fe4:	b29c      	uxth	r4, r3
 8002fe6:	2504      	movs	r5, #4
 8002fe8:	e720      	b.n	8002e2c <PWMC_SetPhaseVoltage+0x84>
 8002fea:	bf00      	nop

08002fec <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002fec:	6843      	ldr	r3, [r0, #4]
 8002fee:	4718      	bx	r3

08002ff0 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002ff0:	6883      	ldr	r3, [r0, #8]
 8002ff2:	4718      	bx	r3

08002ff4 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002ff8:	b179      	cbz	r1, 800301a <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002ffa:	2901      	cmp	r1, #1
 8002ffc:	d001      	beq.n	8003002 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8002ffe:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8003000:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8003002:	f8b0 304e 	ldrh.w	r3, [r0, #78]	@ 0x4e
 8003006:	b16b      	cbz	r3, 8003024 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8003008:	3b01      	subs	r3, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	f8a0 304e 	strh.w	r3, [r0, #78]	@ 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f4      	bne.n	8002ffe <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8003014:	68c3      	ldr	r3, [r0, #12]
 8003016:	4798      	blx	r3
          retVal = true;
 8003018:	e004      	b.n	8003024 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 800301a:	f7ff ffe7 	bl	8002fec <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800301e:	68e3      	ldr	r3, [r4, #12]
 8003020:	4620      	mov	r0, r4
 8003022:	4798      	blx	r3
      retVal = true;
 8003024:	2001      	movs	r0, #1
}
 8003026:	bd10      	pop	{r4, pc}

08003028 <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 8003028:	6983      	ldr	r3, [r0, #24]
 800302a:	4718      	bx	r3

0800302c <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 800302c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8003030:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8003034:	2300      	movs	r3, #0
    uint8_t accessResult;
    while (rxLength > 0)
 8003036:	429c      	cmp	r4, r3
    uint8_t * txData = pHandle->txBuffer;
 8003038:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
{
 800303c:	b087      	sub	sp, #28
 800303e:	4680      	mov	r8, r0
    pHandle->txLength = 0;
 8003040:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0)
 8003042:	dd74      	ble.n	800312e <RI_SetRegCommandParser+0x102>
 8003044:	eb06 0b01 	add.w	fp, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f1c6 0a01 	rsb	sl, r6, #1
    {
       number_of_item++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 800304e:	882a      	ldrh	r2, [r5, #0]
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003050:	fa1f fe84 	uxth.w	lr, r4

    typeID = (uint8_t)dataID & TYPE_MASK;
    motorID = 0U;
    MCI_Handle_t *pMCIN = &Mci[motorID];

    switch (typeID)
 8003054:	f002 0138 	and.w	r1, r2, #56	@ 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003058:	f1ae 0402 	sub.w	r4, lr, #2
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800305c:	1ca8      	adds	r0, r5, #2
    uint16_t regID = dataID & REG_MASK;
 800305e:	f022 0307 	bic.w	r3, r2, #7
    switch (typeID)
 8003062:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003064:	fa1f fc84 	uxth.w	ip, r4
    uint16_t regID = dataID & REG_MASK;
 8003068:	b29b      	uxth	r3, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800306a:	b224      	sxth	r4, r4
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800306c:	4607      	mov	r7, r0
    switch (typeID)
 800306e:	2920      	cmp	r1, #32
 8003070:	d812      	bhi.n	8003098 <RI_SetRegCommandParser+0x6c>
 8003072:	e8df f001 	tbb	[pc, r1]
 8003076:	11bf      	.short	0x11bf
 8003078:	11111111 	.word	0x11111111
 800307c:	11941111 	.word	0x11941111
 8003080:	11111111 	.word	0x11111111
 8003084:	11831111 	.word	0x11831111
 8003088:	11111111 	.word	0x11111111
 800308c:	11621111 	.word	0x11621111
 8003090:	11111111 	.word	0x11111111
 8003094:	1111      	.short	0x1111
 8003096:	2d          	.byte	0x2d
 8003097:	00          	.byte	0x00
 8003098:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 800309a:	eb06 030a 	add.w	r3, r6, sl
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d040      	beq.n	8003126 <RI_SetRegCommandParser+0xfa>
        if (txSyncFreeSpace !=0 )
 80030a4:	45b3      	cmp	fp, r6
 80030a6:	f000 80b5 	beq.w	8003214 <RI_SetRegCommandParser+0x1e8>
          *txData = accessResult;
 80030aa:	f806 0b01 	strb.w	r0, [r6], #1
          pHandle->txLength++;
 80030ae:	f8b8 300e 	ldrh.w	r3, [r8, #14]
 80030b2:	3301      	adds	r3, #1
 80030b4:	f8a8 300e 	strh.w	r3, [r8, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80030b8:	2800      	cmp	r0, #0
 80030ba:	f000 80b3 	beq.w	8003224 <RI_SetRegCommandParser+0x1f8>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80030be:	2807      	cmp	r0, #7
 80030c0:	d002      	beq.n	80030c8 <RI_SetRegCommandParser+0x9c>
 80030c2:	280a      	cmp	r0, #10
 80030c4:	f040 80ac 	bne.w	8003220 <RI_SetRegCommandParser+0x1f4>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80030c8:	2001      	movs	r0, #1
}
 80030ca:	b007      	add	sp, #28
 80030cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        break;
      }

      case TYPE_DATA_RAW:
      {
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 80030d0:	f8b5 e002 	ldrh.w	lr, [r5, #2]
        /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
        *size = rawSize + 2U;
 80030d4:	f10e 0102 	add.w	r1, lr, #2
 80030d8:	b289      	uxth	r1, r1
        uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
        rawData++;
        rawData++;

        if (*size > dataAvailable )
 80030da:	42a1      	cmp	r1, r4
 80030dc:	f300 81fa 	bgt.w	80034d4 <RI_SetRegCommandParser+0x4a8>
      rxLength = (int16_t) (rxLength - size);
 80030e0:	ebac 0c01 	sub.w	ip, ip, r1
 80030e4:	f5b3 7f0a 	cmp.w	r3, #552	@ 0x228
      rxData = rxData+size;
 80030e8:	eb00 0701 	add.w	r7, r0, r1
      rxLength = (int16_t) (rxLength - size);
 80030ec:	fa0f f48c 	sxth.w	r4, ip
 80030f0:	f000 81e8 	beq.w	80034c4 <RI_SetRegCommandParser+0x498>
 80030f4:	f200 81d3 	bhi.w	800349e <RI_SetRegCommandParser+0x472>
 80030f8:	f5b3 7fd4 	cmp.w	r3, #424	@ 0x1a8
 80030fc:	f000 8210 	beq.w	8003520 <RI_SetRegCommandParser+0x4f4>
 8003100:	f240 81c4 	bls.w	800348c <RI_SetRegCommandParser+0x460>
 8003104:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 8003108:	f040 8095 	bne.w	8003236 <RI_SetRegCommandParser+0x20a>
              uint32_t torque;
              uint16_t duration;

              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 800310c:	892a      	ldrh	r2, [r5, #8]
 800310e:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8003112:	48af      	ldr	r0, [pc, #700]	@ (80033d0 <RI_SetRegCommandParser+0x3a4>)
 8003114:	f7fe fc70 	bl	80019f8 <MCI_ExecTorqueRamp>
        if ((1U == number_of_item) && (0 == rxLength))
 8003118:	eb06 030a 	add.w	r3, r6, sl
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
  uint8_t retVal = MCP_CMD_OK;
 8003120:	f04f 0000 	mov.w	r0, #0
        if ((1U == number_of_item) && (0 == rxLength))
 8003124:	d1be      	bne.n	80030a4 <RI_SetRegCommandParser+0x78>
 8003126:	2c00      	cmp	r4, #0
 8003128:	d1bc      	bne.n	80030a4 <RI_SetRegCommandParser+0x78>
      if (MCP_CMD_OK == retVal)
 800312a:	2800      	cmp	r0, #0
 800312c:	d1cd      	bne.n	80030ca <RI_SetRegCommandParser+0x9e>
      pHandle->txLength = 0;
 800312e:	2000      	movs	r0, #0
 8003130:	f8a8 000e 	strh.w	r0, [r8, #14]
}
 8003134:	b007      	add	sp, #28
 8003136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800313a:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8209 	beq.w	8003556 <RI_SetRegCommandParser+0x52a>
 8003144:	2c01      	cmp	r4, #1
 8003146:	f340 820a 	ble.w	800355e <RI_SetRegCommandParser+0x532>
 800314a:	1ceb      	adds	r3, r5, #3
 800314c:	eb00 070c 	add.w	r7, r0, ip
 8003150:	43ed      	mvns	r5, r5
 8003152:	e002      	b.n	800315a <RI_SetRegCommandParser+0x12e>
 8003154:	429f      	cmp	r7, r3
 8003156:	f000 81dc 	beq.w	8003512 <RI_SetRegCommandParser+0x4e6>
 800315a:	f993 1000 	ldrsb.w	r1, [r3]
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 800315e:	18ec      	adds	r4, r5, r3
    tempdestString++;
 8003160:	461a      	mov	r2, r3
    *size = *size + 1U;
 8003162:	b2a4      	uxth	r4, r4
 8003164:	3301      	adds	r3, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003166:	2900      	cmp	r1, #0
 8003168:	d1f4      	bne.n	8003154 <RI_SetRegCommandParser+0x128>
      rxData = rxData+size;
 800316a:	4627      	mov	r7, r4
      rxLength = (int16_t) (rxLength - size);
 800316c:	ebac 0404 	sub.w	r4, ip, r4
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8003170:	2300      	movs	r3, #0
      rxData = rxData+size;
 8003172:	4407      	add	r7, r0
      rxLength = (int16_t) (rxLength - size);
 8003174:	b224      	sxth	r4, r4
    *tempdestString = (int8_t)0;
 8003176:	7013      	strb	r3, [r2, #0]
        retVal = MCP_ERROR_RO_REG;
 8003178:	2004      	movs	r0, #4
 800317a:	e78e      	b.n	800309a <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 800317c:	f1ae 0e06 	sub.w	lr, lr, #6
 8003180:	2b98      	cmp	r3, #152	@ 0x98
 8003182:	fa0f f48e 	sxth.w	r4, lr
      rxData = rxData+size;
 8003186:	f105 0706 	add.w	r7, r5, #6
 800318a:	f000 81b5 	beq.w	80034f8 <RI_SetRegCommandParser+0x4cc>
 800318e:	d86e      	bhi.n	800326e <RI_SetRegCommandParser+0x242>
 8003190:	f022 0247 	bic.w	r2, r2, #71	@ 0x47
 8003194:	2a18      	cmp	r2, #24
 8003196:	bf0c      	ite	eq
 8003198:	2004      	moveq	r0, #4
 800319a:	2005      	movne	r0, #5
 800319c:	e77d      	b.n	800309a <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 800319e:	f1ae 0e04 	sub.w	lr, lr, #4
 80031a2:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80031a6:	f8b5 9002 	ldrh.w	r9, [r5, #2]
      rxLength = (int16_t) (rxLength - size);
 80031aa:	fa0f f48e 	sxth.w	r4, lr
      rxData = rxData+size;
 80031ae:	f105 0704 	add.w	r7, r5, #4
 80031b2:	f000 820d 	beq.w	80035d0 <RI_SetRegCommandParser+0x5a4>
 80031b6:	f200 80a7 	bhi.w	8003308 <RI_SetRegCommandParser+0x2dc>
 80031ba:	f5b3 7f24 	cmp.w	r3, #656	@ 0x290
 80031be:	f000 8200 	beq.w	80035c2 <RI_SetRegCommandParser+0x596>
 80031c2:	f240 808e 	bls.w	80032e2 <RI_SetRegCommandParser+0x2b6>
 80031c6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80031ca:	f000 81f4 	beq.w	80035b6 <RI_SetRegCommandParser+0x58a>
 80031ce:	d934      	bls.n	800323a <RI_SetRegCommandParser+0x20e>
 80031d0:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80031d4:	d022      	beq.n	800321c <RI_SetRegCommandParser+0x1f0>
 80031d6:	d967      	bls.n	80032a8 <RI_SetRegCommandParser+0x27c>
 80031d8:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 80031dc:	d159      	bne.n	8003292 <RI_SetRegCommandParser+0x266>
            currComp = MCI_GetIqdref(pMCIN);
 80031de:	487c      	ldr	r0, [pc, #496]	@ (80033d0 <RI_SetRegCommandParser+0x3a4>)
 80031e0:	f7fe fd1c 	bl	8001c1c <MCI_GetIqdref>
 80031e4:	9003      	str	r0, [sp, #12]
            currComp.q = (int16_t)regdata16;
 80031e6:	f8ad 900c 	strh.w	r9, [sp, #12]
            MCI_SetCurrentReferences(pMCIN,currComp);
 80031ea:	9903      	ldr	r1, [sp, #12]
 80031ec:	4878      	ldr	r0, [pc, #480]	@ (80033d0 <RI_SetRegCommandParser+0x3a4>)
 80031ee:	f7fe fc0d 	bl	8001a0c <MCI_SetCurrentReferences>
            break;
 80031f2:	e791      	b.n	8003118 <RI_SetRegCommandParser+0xec>
      rxLength = (int16_t) (rxLength - size);
 80031f4:	f1ae 0e03 	sub.w	lr, lr, #3
 80031f8:	2b88      	cmp	r3, #136	@ 0x88
 80031fa:	fa0f f48e 	sxth.w	r4, lr
      rxData = rxData+size;
 80031fe:	f105 0703 	add.w	r7, r5, #3
 8003202:	f000 8169 	beq.w	80034d8 <RI_SetRegCommandParser+0x4ac>
 8003206:	f022 0287 	bic.w	r2, r2, #135	@ 0x87
 800320a:	2a48      	cmp	r2, #72	@ 0x48
 800320c:	bf0c      	ite	eq
 800320e:	2004      	moveq	r0, #4
 8003210:	2005      	movne	r0, #5
 8003212:	e742      	b.n	800309a <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003214:	2008      	movs	r0, #8
}
 8003216:	b007      	add	sp, #28
 8003218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321c:	2004      	movs	r0, #4
 800321e:	e73c      	b.n	800309a <RI_SetRegCommandParser+0x6e>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003220:	2301      	movs	r3, #1
 8003222:	9300      	str	r3, [sp, #0]
    while (rxLength > 0)
 8003224:	2c00      	cmp	r4, #0
 8003226:	f340 821a 	ble.w	800365e <RI_SetRegCommandParser+0x632>
 800322a:	463d      	mov	r5, r7
 800322c:	e70f      	b.n	800304e <RI_SetRegCommandParser+0x22>
 800322e:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 8003232:	f000 811d 	beq.w	8003470 <RI_SetRegCommandParser+0x444>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003236:	2005      	movs	r0, #5
 8003238:	e72f      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 800323a:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800323e:	f000 81f5 	beq.w	800362c <RI_SetRegCommandParser+0x600>
 8003242:	d91c      	bls.n	800327e <RI_SetRegCommandParser+0x252>
 8003244:	f5b3 7f54 	cmp.w	r3, #848	@ 0x350
 8003248:	f000 8112 	beq.w	8003470 <RI_SetRegCommandParser+0x444>
 800324c:	f5b3 7f64 	cmp.w	r3, #912	@ 0x390
 8003250:	d1f1      	bne.n	8003236 <RI_SetRegCommandParser+0x20a>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8003252:	aa03      	add	r2, sp, #12
 8003254:	f10d 010a 	add.w	r1, sp, #10
 8003258:	485e      	ldr	r0, [pc, #376]	@ (80033d4 <RI_SetRegCommandParser+0x3a8>)
 800325a:	f007 f94b 	bl	800a4f4 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 800325e:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8003262:	485c      	ldr	r0, [pc, #368]	@ (80033d4 <RI_SetRegCommandParser+0x3a8>)
 8003264:	fa0f f289 	sxth.w	r2, r9
 8003268:	f007 f94c 	bl	800a504 <STO_PLL_SetObserverGains>
            break;
 800326c:	e754      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 800326e:	2bd8      	cmp	r3, #216	@ 0xd8
 8003270:	d0d4      	beq.n	800321c <RI_SetRegCommandParser+0x1f0>
 8003272:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003276:	bf0c      	ite	eq
 8003278:	2004      	moveq	r0, #4
 800327a:	2005      	movne	r0, #5
 800327c:	e70d      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 800327e:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
 8003282:	d1d8      	bne.n	8003236 <RI_SetRegCommandParser+0x20a>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8003284:	4b54      	ldr	r3, [pc, #336]	@ (80033d8 <RI_SetRegCommandParser+0x3ac>)
 8003286:	fa0f f189 	sxth.w	r1, r9
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	f005 fb30 	bl	80088f0 <PID_SetKI>
            break;
 8003290:	e742      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 8003292:	d8d0      	bhi.n	8003236 <RI_SetRegCommandParser+0x20a>
 8003294:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 8003298:	d0c0      	beq.n	800321c <RI_SetRegCommandParser+0x1f0>
 800329a:	d90e      	bls.n	80032ba <RI_SetRegCommandParser+0x28e>
            retVal = MCP_ERROR_UNKNOWN_REG;
 800329c:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 80032a0:	bf0c      	ite	eq
 80032a2:	2004      	moveq	r0, #4
 80032a4:	2005      	movne	r0, #5
 80032a6:	e6f8      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 80032a8:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 80032ac:	d10e      	bne.n	80032cc <RI_SetRegCommandParser+0x2a0>
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 80032ae:	484b      	ldr	r0, [pc, #300]	@ (80033dc <RI_SetRegCommandParser+0x3b0>)
 80032b0:	fa0f f189 	sxth.w	r1, r9
 80032b4:	f005 fb1a 	bl	80088ec <PID_SetKP>
            break;
 80032b8:	e72e      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 80032ba:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 80032be:	d0ad      	beq.n	800321c <RI_SetRegCommandParser+0x1f0>
            retVal = MCP_ERROR_UNKNOWN_REG;
 80032c0:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 80032c4:	bf0c      	ite	eq
 80032c6:	2004      	moveq	r0, #4
 80032c8:	2005      	movne	r0, #5
 80032ca:	e6e6      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 80032cc:	d3b3      	bcc.n	8003236 <RI_SetRegCommandParser+0x20a>
 80032ce:	f5b3 6ff2 	cmp.w	r3, #1936	@ 0x790
 80032d2:	d0a3      	beq.n	800321c <RI_SetRegCommandParser+0x1f0>
 80032d4:	d938      	bls.n	8003348 <RI_SetRegCommandParser+0x31c>
 80032d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80032da:	bf0c      	ite	eq
 80032dc:	2004      	moveq	r0, #4
 80032de:	2005      	movne	r0, #5
 80032e0:	e6db      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 80032e2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80032e6:	f000 81b3 	beq.w	8003650 <RI_SetRegCommandParser+0x624>
 80032ea:	d959      	bls.n	80033a0 <RI_SetRegCommandParser+0x374>
 80032ec:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 80032f0:	f000 817f 	beq.w	80035f2 <RI_SetRegCommandParser+0x5c6>
 80032f4:	f5b3 7f04 	cmp.w	r3, #528	@ 0x210
 80032f8:	d19d      	bne.n	8003236 <RI_SetRegCommandParser+0x20a>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 80032fa:	4b39      	ldr	r3, [pc, #228]	@ (80033e0 <RI_SetRegCommandParser+0x3b4>)
 80032fc:	fa0f f189 	sxth.w	r1, r9
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	f005 fb25 	bl	8008950 <PID_SetKD>
            break;
 8003306:	e707      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 8003308:	f241 5150 	movw	r1, #5456	@ 0x1550
 800330c:	428b      	cmp	r3, r1
 800330e:	f000 8199 	beq.w	8003644 <RI_SetRegCommandParser+0x618>
 8003312:	d930      	bls.n	8003376 <RI_SetRegCommandParser+0x34a>
 8003314:	f241 6250 	movw	r2, #5712	@ 0x1650
 8003318:	4293      	cmp	r3, r2
 800331a:	f000 817c 	beq.w	8003616 <RI_SetRegCommandParser+0x5ea>
 800331e:	d91b      	bls.n	8003358 <RI_SetRegCommandParser+0x32c>
 8003320:	f641 1210 	movw	r2, #6416	@ 0x1910
 8003324:	4293      	cmp	r3, r2
 8003326:	f000 816b 	beq.w	8003600 <RI_SetRegCommandParser+0x5d4>
 800332a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800332e:	4293      	cmp	r3, r2
 8003330:	f43f af74 	beq.w	800321c <RI_SetRegCommandParser+0x1f0>
 8003334:	f641 02d0 	movw	r2, #6352	@ 0x18d0
 8003338:	4293      	cmp	r3, r2
 800333a:	f47f af7c 	bne.w	8003236 <RI_SetRegCommandParser+0x20a>
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 800333e:	4827      	ldr	r0, [pc, #156]	@ (80033dc <RI_SetRegCommandParser+0x3b0>)
 8003340:	4649      	mov	r1, r9
 8003342:	f005 faf1 	bl	8008928 <PID_SetKIDivisorPOW2>
            break;
 8003346:	e6e7      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 8003348:	f022 0247 	bic.w	r2, r2, #71	@ 0x47
            retVal = MCP_ERROR_UNKNOWN_REG;
 800334c:	f5b2 6fb2 	cmp.w	r2, #1424	@ 0x590
 8003350:	bf0c      	ite	eq
 8003352:	2004      	moveq	r0, #4
 8003354:	2005      	movne	r0, #5
 8003356:	e6a0      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 8003358:	f241 52d0 	movw	r2, #5584	@ 0x15d0
 800335c:	4293      	cmp	r3, r2
 800335e:	f000 8154 	beq.w	800360a <RI_SetRegCommandParser+0x5de>
 8003362:	f241 6210 	movw	r2, #5648	@ 0x1610
 8003366:	4293      	cmp	r3, r2
 8003368:	d126      	bne.n	80033b8 <RI_SetRegCommandParser+0x38c>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 800336a:	4b1d      	ldr	r3, [pc, #116]	@ (80033e0 <RI_SetRegCommandParser+0x3b4>)
 800336c:	4649      	mov	r1, r9
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	f005 fada 	bl	8008928 <PID_SetKIDivisorPOW2>
            break;
 8003374:	e6d0      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 8003376:	f241 4150 	movw	r1, #5200	@ 0x1450
 800337a:	428b      	cmp	r3, r1
 800337c:	f000 8151 	beq.w	8003622 <RI_SetRegCommandParser+0x5f6>
 8003380:	d93c      	bls.n	80033fc <RI_SetRegCommandParser+0x3d0>
 8003382:	f241 42d0 	movw	r2, #5328	@ 0x14d0
 8003386:	4293      	cmp	r3, r2
 8003388:	f000 8157 	beq.w	800363a <RI_SetRegCommandParser+0x60e>
 800338c:	f241 5210 	movw	r2, #5392	@ 0x1510
 8003390:	4293      	cmp	r3, r2
 8003392:	d129      	bne.n	80033e8 <RI_SetRegCommandParser+0x3bc>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8003394:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <RI_SetRegCommandParser+0x3ac>)
 8003396:	4649      	mov	r1, r9
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	f005 fab7 	bl	800890c <PID_SetKPDivisorPOW2>
            break;
 800339e:	e6bb      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 80033a0:	2bd0      	cmp	r3, #208	@ 0xd0
 80033a2:	f000 8120 	beq.w	80035e6 <RI_SetRegCommandParser+0x5ba>
 80033a6:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80033aa:	d13a      	bne.n	8003422 <RI_SetRegCommandParser+0x3f6>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 80033ac:	480d      	ldr	r0, [pc, #52]	@ (80033e4 <RI_SetRegCommandParser+0x3b8>)
 80033ae:	fa0f f189 	sxth.w	r1, r9
 80033b2:	f005 facd 	bl	8008950 <PID_SetKD>
            break;
 80033b6:	e6af      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 80033b8:	f241 5290 	movw	r2, #5520	@ 0x1590
 80033bc:	4293      	cmp	r3, r2
 80033be:	f47f af3a 	bne.w	8003236 <RI_SetRegCommandParser+0x20a>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 80033c2:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <RI_SetRegCommandParser+0x3ac>)
 80033c4:	4649      	mov	r1, r9
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	f005 faca 	bl	8008960 <PID_SetKDDivisorPOW2>
            break;
 80033cc:	e6a4      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 80033ce:	bf00      	nop
 80033d0:	20000968 	.word	0x20000968
 80033d4:	20000148 	.word	0x20000148
 80033d8:	20000004 	.word	0x20000004
 80033dc:	2000017c 	.word	0x2000017c
 80033e0:	20000008 	.word	0x20000008
 80033e4:	2000043c 	.word	0x2000043c
 80033e8:	f241 4290 	movw	r2, #5264	@ 0x1490
 80033ec:	4293      	cmp	r3, r2
 80033ee:	f47f af22 	bne.w	8003236 <RI_SetRegCommandParser+0x20a>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80033f2:	489d      	ldr	r0, [pc, #628]	@ (8003668 <RI_SetRegCommandParser+0x63c>)
 80033f4:	4649      	mov	r1, r9
 80033f6:	f005 fa97 	bl	8008928 <PID_SetKIDivisorPOW2>
            break;
 80033fa:	e68d      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 80033fc:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 8003400:	f43f af0c 	beq.w	800321c <RI_SetRegCommandParser+0x1f0>
 8003404:	d917      	bls.n	8003436 <RI_SetRegCommandParser+0x40a>
 8003406:	f5b3 6f65 	cmp.w	r3, #3664	@ 0xe50
 800340a:	f43f ae85 	beq.w	8003118 <RI_SetRegCommandParser+0xec>
 800340e:	f5b3 6f69 	cmp.w	r3, #3728	@ 0xe90
 8003412:	f43f ae81 	beq.w	8003118 <RI_SetRegCommandParser+0xec>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003416:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 800341a:	bf0c      	ite	eq
 800341c:	2004      	moveq	r0, #4
 800341e:	2005      	movne	r0, #5
 8003420:	e63b      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 8003422:	2b90      	cmp	r3, #144	@ 0x90
 8003424:	f47f af07 	bne.w	8003236 <RI_SetRegCommandParser+0x20a>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8003428:	488f      	ldr	r0, [pc, #572]	@ (8003668 <RI_SetRegCommandParser+0x63c>)
 800342a:	fa0f f189 	sxth.w	r1, r9
 800342e:	f005 fa5d 	bl	80088ec <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8003432:	2000      	movs	r0, #0
            break;
 8003434:	e631      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 8003436:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 800343a:	d019      	beq.n	8003470 <RI_SetRegCommandParser+0x444>
 800343c:	d911      	bls.n	8003462 <RI_SetRegCommandParser+0x436>
 800343e:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 8003442:	f43f aeeb 	beq.w	800321c <RI_SetRegCommandParser+0x1f0>
 8003446:	f67f aef2 	bls.w	800322e <RI_SetRegCommandParser+0x202>
 800344a:	f022 0247 	bic.w	r2, r2, #71	@ 0x47
 800344e:	f5b2 6f39 	cmp.w	r2, #2960	@ 0xb90
 8003452:	f43f aee3 	beq.w	800321c <RI_SetRegCommandParser+0x1f0>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003456:	f5b3 6f41 	cmp.w	r3, #3088	@ 0xc10
 800345a:	bf0c      	ite	eq
 800345c:	2004      	moveq	r0, #4
 800345e:	2005      	movne	r0, #5
 8003460:	e61b      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 8003462:	f5b3 6f1d 	cmp.w	r3, #2512	@ 0x9d0
 8003466:	d003      	beq.n	8003470 <RI_SetRegCommandParser+0x444>
 8003468:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 800346c:	f47f aee3 	bne.w	8003236 <RI_SetRegCommandParser+0x20a>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8003470:	aa03      	add	r2, sp, #12
 8003472:	f10d 010a 	add.w	r1, sp, #10
 8003476:	487d      	ldr	r0, [pc, #500]	@ (800366c <RI_SetRegCommandParser+0x640>)
 8003478:	f007 f83c 	bl	800a4f4 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 800347c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003480:	487a      	ldr	r0, [pc, #488]	@ (800366c <RI_SetRegCommandParser+0x640>)
 8003482:	fa0f f189 	sxth.w	r1, r9
 8003486:	f007 f83d 	bl	800a504 <STO_PLL_SetObserverGains>
            break;
 800348a:	e645      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 800348c:	2ba8      	cmp	r3, #168	@ 0xa8
 800348e:	f43f aec5 	beq.w	800321c <RI_SetRegCommandParser+0x1f0>
 8003492:	d910      	bls.n	80034b6 <RI_SetRegCommandParser+0x48a>
              retVal = MCP_ERROR_UNKNOWN_REG;
 8003494:	2be8      	cmp	r3, #232	@ 0xe8
 8003496:	bf0c      	ite	eq
 8003498:	2004      	moveq	r0, #4
 800349a:	2005      	movne	r0, #5
 800349c:	e5fd      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 800349e:	f5b3 7f5a 	cmp.w	r3, #872	@ 0x368
 80034a2:	d049      	beq.n	8003538 <RI_SetRegCommandParser+0x50c>
 80034a4:	f5b3 6fa5 	cmp.w	r3, #1320	@ 0x528
 80034a8:	f47f aec5 	bne.w	8003236 <RI_SetRegCommandParser+0x20a>
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80034ac:	1d29      	adds	r1, r5, #4
 80034ae:	4870      	ldr	r0, [pc, #448]	@ (8003670 <RI_SetRegCommandParser+0x644>)
 80034b0:	f005 f94a 	bl	8008748 <MCPA_cfgLog>
              break;
 80034b4:	e5f1      	b.n	800309a <RI_SetRegCommandParser+0x6e>
 80034b6:	f022 0247 	bic.w	r2, r2, #71	@ 0x47
              retVal = MCP_ERROR_UNKNOWN_REG;
 80034ba:	2a28      	cmp	r2, #40	@ 0x28
 80034bc:	bf0c      	ite	eq
 80034be:	2004      	moveq	r0, #4
 80034c0:	2005      	movne	r0, #5
 80034c2:	e5ea      	b.n	800309a <RI_SetRegCommandParser+0x6e>
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 80034c4:	f01e 0307 	ands.w	r3, lr, #7
 80034c8:	d104      	bne.n	80034d4 <RI_SetRegCommandParser+0x4a8>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 80034ca:	fa5f fe8e 	uxtb.w	lr, lr
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 80034ce:	f1be 0f2f 	cmp.w	lr, #47	@ 0x2f
 80034d2:	d94b      	bls.n	800356c <RI_SetRegCommandParser+0x540>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 80034d4:	200a      	movs	r0, #10
 80034d6:	e5e0      	b.n	800309a <RI_SetRegCommandParser+0x6e>
            uint8_t regdata8 = *data;
 80034d8:	78ab      	ldrb	r3, [r5, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d032      	beq.n	8003544 <RI_SetRegCommandParser+0x518>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80034de:	2b03      	cmp	r3, #3
 80034e0:	f47f ae1a 	bne.w	8003118 <RI_SetRegCommandParser+0xec>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 80034e4:	4863      	ldr	r0, [pc, #396]	@ (8003674 <RI_SetRegCommandParser+0x648>)
 80034e6:	f7fe fb6b 	bl	8001bc0 <MCI_GetMecSpeedRefUnit>
 80034ea:	2200      	movs	r2, #0
 80034ec:	4601      	mov	r1, r0
 80034ee:	4861      	ldr	r0, [pc, #388]	@ (8003674 <RI_SetRegCommandParser+0x648>)
 80034f0:	f7fe fa78 	bl	80019e4 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80034f4:	2000      	movs	r0, #0
 80034f6:	e5d0      	b.n	800309a <RI_SetRegCommandParser+0x6e>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80034f8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80034fc:	495e      	ldr	r1, [pc, #376]	@ (8003678 <RI_SetRegCommandParser+0x64c>)
 80034fe:	485d      	ldr	r0, [pc, #372]	@ (8003674 <RI_SetRegCommandParser+0x648>)
 8003500:	fb81 2103 	smull	r2, r1, r1, r3
 8003504:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003508:	b209      	sxth	r1, r1
 800350a:	2200      	movs	r2, #0
 800350c:	f7fe fa6a 	bl	80019e4 <MCI_ExecSpeedRamp>
 8003510:	e602      	b.n	8003118 <RI_SetRegCommandParser+0xec>
      rxLength = (int16_t) (rxLength - size);
 8003512:	ebac 0c04 	sub.w	ip, ip, r4
      rxData = rxData+size;
 8003516:	1907      	adds	r7, r0, r4
      rxLength = (int16_t) (rxLength - size);
 8003518:	fa0f f48c 	sxth.w	r4, ip
        retVal = MCP_ERROR_RO_REG;
 800351c:	2004      	movs	r0, #4
 800351e:	e5bc      	b.n	800309a <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003520:	686b      	ldr	r3, [r5, #4]
 8003522:	4955      	ldr	r1, [pc, #340]	@ (8003678 <RI_SetRegCommandParser+0x64c>)
 8003524:	892a      	ldrh	r2, [r5, #8]
 8003526:	fb81 0103 	smull	r0, r1, r1, r3
 800352a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800352e:	4851      	ldr	r0, [pc, #324]	@ (8003674 <RI_SetRegCommandParser+0x648>)
 8003530:	b209      	sxth	r1, r1
 8003532:	f7fe fa57 	bl	80019e4 <MCI_ExecSpeedRamp>
              break;
 8003536:	e5ef      	b.n	8003118 <RI_SetRegCommandParser+0xec>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003538:	6869      	ldr	r1, [r5, #4]
              MCI_SetCurrentReferences(pMCIN, currComp);
 800353a:	484e      	ldr	r0, [pc, #312]	@ (8003674 <RI_SetRegCommandParser+0x648>)
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 800353c:	9103      	str	r1, [sp, #12]
              MCI_SetCurrentReferences(pMCIN, currComp);
 800353e:	f7fe fa65 	bl	8001a0c <MCI_SetCurrentReferences>
              break;
 8003542:	e5e9      	b.n	8003118 <RI_SetRegCommandParser+0xec>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8003544:	484b      	ldr	r0, [pc, #300]	@ (8003674 <RI_SetRegCommandParser+0x648>)
 8003546:	f7fe fb93 	bl	8001c70 <MCI_GetTeref>
 800354a:	2200      	movs	r2, #0
 800354c:	4601      	mov	r1, r0
 800354e:	4849      	ldr	r0, [pc, #292]	@ (8003674 <RI_SetRegCommandParser+0x648>)
 8003550:	f7fe fa52 	bl	80019f8 <MCI_ExecTorqueRamp>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8003554:	e5e0      	b.n	8003118 <RI_SetRegCommandParser+0xec>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003556:	2701      	movs	r7, #1
  const char_t *tempsrcString = srcString;
 8003558:	4602      	mov	r2, r0
  *size= 1U ; /* /0 is the min String size */
 800355a:	463c      	mov	r4, r7
 800355c:	e606      	b.n	800316c <RI_SetRegCommandParser+0x140>
      rxLength = (int16_t) (rxLength - size);
 800355e:	f1ae 0e03 	sub.w	lr, lr, #3
      rxData = rxData+size;
 8003562:	1cef      	adds	r7, r5, #3
      rxLength = (int16_t) (rxLength - size);
 8003564:	fa0f f48e 	sxth.w	r4, lr
        retVal = MCP_ERROR_RO_REG;
 8003568:	2004      	movs	r0, #4
 800356a:	e596      	b.n	800309a <RI_SetRegCommandParser+0x6e>
                for (i = 0; i <nbrOfPhase; i++)
 800356c:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8003570:	f43f add2 	beq.w	8003118 <RI_SetRegCommandParser+0xec>
 8003574:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
 8003578:	9401      	str	r4, [sp, #4]
 800357a:	4691      	mov	r9, r2
 800357c:	461c      	mov	r4, r3
                revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800357e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8003582:	4b3d      	ldr	r3, [pc, #244]	@ (8003678 <RI_SetRegCommandParser+0x64c>)
 8003584:	fb83 c200 	smull	ip, r2, r3, r0
 8003588:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800358c:	f8ad 200e 	strh.w	r2, [sp, #14]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003590:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8003594:	f8ad 2010 	strh.w	r2, [sp, #16]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003598:	896a      	ldrh	r2, [r5, #10]
 800359a:	f8ad 200c 	strh.w	r2, [sp, #12]
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 800359e:	b2e1      	uxtb	r1, r4
 80035a0:	4836      	ldr	r0, [pc, #216]	@ (800367c <RI_SetRegCommandParser+0x650>)
                for (i = 0; i <nbrOfPhase; i++)
 80035a2:	3508      	adds	r5, #8
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 80035a4:	aa03      	add	r2, sp, #12
 80035a6:	f006 fbd1 	bl	8009d4c <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 80035aa:	45a9      	cmp	r9, r5
 80035ac:	f104 0401 	add.w	r4, r4, #1
 80035b0:	d1e5      	bne.n	800357e <RI_SetRegCommandParser+0x552>
 80035b2:	9c01      	ldr	r4, [sp, #4]
 80035b4:	e5b0      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 80035b6:	4832      	ldr	r0, [pc, #200]	@ (8003680 <RI_SetRegCommandParser+0x654>)
 80035b8:	fa0f f189 	sxth.w	r1, r9
 80035bc:	f005 f998 	bl	80088f0 <PID_SetKI>
            break;
 80035c0:	e5aa      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 80035c2:	4b30      	ldr	r3, [pc, #192]	@ (8003684 <RI_SetRegCommandParser+0x658>)
 80035c4:	fa0f f189 	sxth.w	r1, r9
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	f005 f98f 	bl	80088ec <PID_SetKP>
            break;
 80035ce:	e5a3      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            currComp = MCI_GetIqdref(pMCIN);
 80035d0:	4828      	ldr	r0, [pc, #160]	@ (8003674 <RI_SetRegCommandParser+0x648>)
 80035d2:	f7fe fb23 	bl	8001c1c <MCI_GetIqdref>
 80035d6:	9003      	str	r0, [sp, #12]
            currComp.d = (int16_t)regdata16;
 80035d8:	f8ad 900e 	strh.w	r9, [sp, #14]
            MCI_SetCurrentReferences(pMCIN,currComp);
 80035dc:	9903      	ldr	r1, [sp, #12]
 80035de:	4825      	ldr	r0, [pc, #148]	@ (8003674 <RI_SetRegCommandParser+0x648>)
 80035e0:	f7fe fa14 	bl	8001a0c <MCI_SetCurrentReferences>
            break;
 80035e4:	e598      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 80035e6:	4820      	ldr	r0, [pc, #128]	@ (8003668 <RI_SetRegCommandParser+0x63c>)
 80035e8:	fa0f f189 	sxth.w	r1, r9
 80035ec:	f005 f980 	bl	80088f0 <PID_SetKI>
            break;
 80035f0:	e592      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 80035f2:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <RI_SetRegCommandParser+0x65c>)
 80035f4:	fa0f f189 	sxth.w	r1, r9
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	f005 f979 	bl	80088f0 <PID_SetKI>
            break;
 80035fe:	e58b      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8003600:	481f      	ldr	r0, [pc, #124]	@ (8003680 <RI_SetRegCommandParser+0x654>)
 8003602:	4649      	mov	r1, r9
 8003604:	f005 f982 	bl	800890c <PID_SetKPDivisorPOW2>
            break;
 8003608:	e586      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 800360a:	4b1f      	ldr	r3, [pc, #124]	@ (8003688 <RI_SetRegCommandParser+0x65c>)
 800360c:	4649      	mov	r1, r9
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	f005 f97c 	bl	800890c <PID_SetKPDivisorPOW2>
            break;
 8003614:	e580      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8003616:	4b1c      	ldr	r3, [pc, #112]	@ (8003688 <RI_SetRegCommandParser+0x65c>)
 8003618:	4649      	mov	r1, r9
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	f005 f9a0 	bl	8008960 <PID_SetKDDivisorPOW2>
            break;
 8003620:	e57a      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003622:	4811      	ldr	r0, [pc, #68]	@ (8003668 <RI_SetRegCommandParser+0x63c>)
 8003624:	4649      	mov	r1, r9
 8003626:	f005 f971 	bl	800890c <PID_SetKPDivisorPOW2>
            break;
 800362a:	e575      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 800362c:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <RI_SetRegCommandParser+0x658>)
 800362e:	fa0f f189 	sxth.w	r1, r9
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	f005 f98c 	bl	8008950 <PID_SetKD>
            break;
 8003638:	e56e      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800363a:	480b      	ldr	r0, [pc, #44]	@ (8003668 <RI_SetRegCommandParser+0x63c>)
 800363c:	4649      	mov	r1, r9
 800363e:	f005 f98f 	bl	8008960 <PID_SetKDDivisorPOW2>
            break;
 8003642:	e569      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8003644:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <RI_SetRegCommandParser+0x658>)
 8003646:	4649      	mov	r1, r9
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	f005 f96d 	bl	8008928 <PID_SetKIDivisorPOW2>
            break;
 800364e:	e563      	b.n	8003118 <RI_SetRegCommandParser+0xec>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8003650:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <RI_SetRegCommandParser+0x65c>)
 8003652:	fa0f f189 	sxth.w	r1, r9
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	f005 f948 	bl	80088ec <PID_SetKP>
            break;
 800365c:	e55c      	b.n	8003118 <RI_SetRegCommandParser+0xec>
 800365e:	9800      	ldr	r0, [sp, #0]
      if (MCP_CMD_OK == retVal)
 8003660:	2800      	cmp	r0, #0
 8003662:	f43f ad64 	beq.w	800312e <RI_SetRegCommandParser+0x102>
 8003666:	e530      	b.n	80030ca <RI_SetRegCommandParser+0x9e>
 8003668:	2000043c 	.word	0x2000043c
 800366c:	20000148 	.word	0x20000148
 8003670:	2000048c 	.word	0x2000048c
 8003674:	20000968 	.word	0x20000968
 8003678:	2aaaaaab 	.word	0x2aaaaaab
 800367c:	20000338 	.word	0x20000338
 8003680:	2000017c 	.word	0x2000017c
 8003684:	20000004 	.word	0x20000004
 8003688:	20000008 	.word	0x20000008

0800368c <RI_GetRegCommandParser>:
{
 800368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 8003690:	f8b0 900c 	ldrh.w	r9, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 8003694:	f8d0 b004 	ldr.w	fp, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8003698:	6886      	ldr	r6, [r0, #8]
    pHandle->txLength = 0;
 800369a:	2300      	movs	r3, #0
{
 800369c:	b099      	sub	sp, #100	@ 0x64
    pHandle->txLength = 0;
 800369e:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 80036a0:	f1b9 0f00 	cmp.w	r9, #0
 80036a4:	f000 8372 	beq.w	8003d8c <RI_GetRegCommandParser+0x700>
 80036a8:	b20c      	sxth	r4, r1
 80036aa:	4680      	mov	r8, r0
 80036ac:	4619      	mov	r1, r3
    uint8_t * rxData = pHandle->rxBuffer;
 80036ae:	465d      	mov	r5, fp
 80036b0:	f241 5790 	movw	r7, #5520	@ 0x1590
 80036b4:	4620      	mov	r0, r4
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 80036b6:	f835 3b02 	ldrh.w	r3, [r5], #2
    switch (typeID)
 80036ba:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80036be:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 80036c0:	f023 0307 	bic.w	r3, r3, #7
 80036c4:	b29b      	uxth	r3, r3
    switch (typeID)
 80036c6:	2a20      	cmp	r2, #32
 80036c8:	d812      	bhi.n	80036f0 <RI_GetRegCommandParser+0x64>
 80036ca:	e8df f002 	tbb	[pc, r2]
 80036ce:	11d9      	.short	0x11d9
 80036d0:	11111111 	.word	0x11111111
 80036d4:	116b1111 	.word	0x116b1111
 80036d8:	11111111 	.word	0x11111111
 80036dc:	11e71111 	.word	0x11e71111
 80036e0:	11111111 	.word	0x11111111
 80036e4:	11311111 	.word	0x11311111
 80036e8:	11111111 	.word	0x11111111
 80036ec:	1111      	.short	0x1111
 80036ee:	15          	.byte	0x15
 80036ef:	00          	.byte	0x00
 80036f0:	2007      	movs	r0, #7
}
 80036f2:	b019      	add	sp, #100	@ 0x64
 80036f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 80036f8:	f5b3 7fd4 	cmp.w	r3, #424	@ 0x1a8
 80036fc:	f106 0202 	add.w	r2, r6, #2
        switch (regID)
 8003700:	f000 82ae 	beq.w	8003c60 <RI_GetRegCommandParser+0x5d4>
 8003704:	f200 810e 	bhi.w	8003924 <RI_GetRegCommandParser+0x298>
 8003708:	2ba8      	cmp	r3, #168	@ 0xa8
 800370a:	f000 82be 	beq.w	8003c8a <RI_GetRegCommandParser+0x5fe>
 800370e:	f200 80ff 	bhi.w	8003910 <RI_GetRegCommandParser+0x284>
 8003712:	2b28      	cmp	r3, #40	@ 0x28
 8003714:	f000 82d1 	beq.w	8003cba <RI_GetRegCommandParser+0x62e>
 8003718:	2b68      	cmp	r3, #104	@ 0x68
 800371a:	f040 80bd 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800371e:	233c      	movs	r3, #60	@ 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8003720:	283d      	cmp	r0, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003722:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003724:	f200 8334 	bhi.w	8003d90 <RI_GetRegCommandParser+0x704>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003728:	2008      	movs	r0, #8
}
 800372a:	b019      	add	sp, #100	@ 0x64
 800372c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8003730:	2ba0      	cmp	r3, #160	@ 0xa0
 8003732:	f000 8241 	beq.w	8003bb8 <RI_GetRegCommandParser+0x52c>
 8003736:	f200 80cd 	bhi.w	80038d4 <RI_GetRegCommandParser+0x248>
 800373a:	2b20      	cmp	r3, #32
 800373c:	f000 8254 	beq.w	8003be8 <RI_GetRegCommandParser+0x55c>
 8003740:	2b60      	cmp	r3, #96	@ 0x60
 8003742:	f040 80a9 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003746:	4cb2      	ldr	r4, [pc, #712]	@ (8003a10 <RI_GetRegCommandParser+0x384>)
 8003748:	f994 1000 	ldrsb.w	r1, [r4]
 800374c:	2900      	cmp	r1, #0
 800374e:	f000 8282 	beq.w	8003c56 <RI_GetRegCommandParser+0x5ca>
 8003752:	2801      	cmp	r0, #1
 8003754:	f340 822e 	ble.w	8003bb4 <RI_GetRegCommandParser+0x528>
 8003758:	46b6      	mov	lr, r6
 800375a:	f1c6 0201 	rsb	r2, r6, #1
 800375e:	e002      	b.n	8003766 <RI_GetRegCommandParser+0xda>
 8003760:	4283      	cmp	r3, r0
 8003762:	f280 8227 	bge.w	8003bb4 <RI_GetRegCommandParser+0x528>
    *tempdestString = *tempsrcString;
 8003766:	f80e 1b01 	strb.w	r1, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800376a:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
    *size = *size + 1U;
 800376e:	eb0e 0302 	add.w	r3, lr, r2
 8003772:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003774:	2900      	cmp	r1, #0
 8003776:	d1f3      	bne.n	8003760 <RI_GetRegCommandParser+0xd4>
        txData = txData+size;
 8003778:	469c      	mov	ip, r3
    *tempdestString = (int8_t)0;
 800377a:	2200      	movs	r2, #0
 800377c:	f88e 2000 	strb.w	r2, [lr]
        pHandle->txLength += size;
 8003780:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        if (freeSpace >= 2U)
 8003784:	b284      	uxth	r4, r0
    while (rxLength > 0U)
 8003786:	eb0b 0209 	add.w	r2, fp, r9
        freeSpaceS16 = freeSpaceS16-size;
 800378a:	1ae0      	subs	r0, r4, r3
        pHandle->txLength += size;
 800378c:	4419      	add	r1, r3
    while (rxLength > 0U)
 800378e:	b2ac      	uxth	r4, r5
 8003790:	b293      	uxth	r3, r2
        pHandle->txLength += size;
 8003792:	b289      	uxth	r1, r1
    while (rxLength > 0U)
 8003794:	429c      	cmp	r4, r3
        pHandle->txLength += size;
 8003796:	f8a8 100e 	strh.w	r1, [r8, #14]
        txData = txData+size;
 800379a:	4466      	add	r6, ip
        freeSpaceS16 = freeSpaceS16-size;
 800379c:	b200      	sxth	r0, r0
    while (rxLength > 0U)
 800379e:	d18a      	bne.n	80036b6 <RI_GetRegCommandParser+0x2a>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 80037a0:	2000      	movs	r0, #0
 80037a2:	e7a6      	b.n	80036f2 <RI_GetRegCommandParser+0x66>
        if (freeSpace >= 2U)
 80037a4:	b284      	uxth	r4, r0
 80037a6:	2c01      	cmp	r4, #1
 80037a8:	d9be      	bls.n	8003728 <RI_GetRegCommandParser+0x9c>
          switch (regID)
 80037aa:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 80037ae:	f000 832e 	beq.w	8003e0e <RI_GetRegCommandParser+0x782>
 80037b2:	d924      	bls.n	80037fe <RI_GetRegCommandParser+0x172>
 80037b4:	f5b3 6f69 	cmp.w	r3, #3728	@ 0xe90
 80037b8:	f000 80e3 	beq.w	8003982 <RI_GetRegCommandParser+0x2f6>
 80037bc:	f240 80e5 	bls.w	800398a <RI_GetRegCommandParser+0x2fe>
 80037c0:	42bb      	cmp	r3, r7
 80037c2:	f000 8334 	beq.w	8003e2e <RI_GetRegCommandParser+0x7a2>
 80037c6:	f240 810f 	bls.w	80039e8 <RI_GetRegCommandParser+0x35c>
 80037ca:	f241 6250 	movw	r2, #5712	@ 0x1650
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f000 8322 	beq.w	8003e18 <RI_GetRegCommandParser+0x78c>
 80037d4:	f240 80f3 	bls.w	80039be <RI_GetRegCommandParser+0x332>
 80037d8:	f641 02d0 	movw	r2, #6352	@ 0x18d0
 80037dc:	4293      	cmp	r3, r2
 80037de:	f000 8379 	beq.w	8003ed4 <RI_GetRegCommandParser+0x848>
 80037e2:	f641 1210 	movw	r2, #6416	@ 0x1910
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d156      	bne.n	8003898 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 80037ea:	488a      	ldr	r0, [pc, #552]	@ (8003a14 <RI_GetRegCommandParser+0x388>)
 80037ec:	f005 f88c 	bl	8008908 <PID_GetKPDivisorPOW2>
        pHandle->txLength += size;
 80037f0:	f04f 0c02 	mov.w	ip, #2
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 80037f4:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80037f6:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 80037fa:	4663      	mov	r3, ip
 80037fc:	e7c3      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 80037fe:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8003802:	f000 8302 	beq.w	8003e0a <RI_GetRegCommandParser+0x77e>
 8003806:	d919      	bls.n	800383c <RI_GetRegCommandParser+0x1b0>
 8003808:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 800380c:	f000 82f2 	beq.w	8003df4 <RI_GetRegCommandParser+0x768>
 8003810:	f240 8173 	bls.w	8003afa <RI_GetRegCommandParser+0x46e>
 8003814:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 8003818:	f000 82e7 	beq.w	8003dea <RI_GetRegCommandParser+0x75e>
 800381c:	f240 8138 	bls.w	8003a90 <RI_GetRegCommandParser+0x404>
 8003820:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 8003824:	d138      	bne.n	8003898 <RI_GetRegCommandParser+0x20c>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003826:	487c      	ldr	r0, [pc, #496]	@ (8003a18 <RI_GetRegCommandParser+0x38c>)
 8003828:	f7fe f9f8 	bl	8001c1c <MCI_GetIqdref>
        pHandle->txLength += size;
 800382c:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003830:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003832:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003836:	900e      	str	r0, [sp, #56]	@ 0x38
          *size = 2;
 8003838:	4663      	mov	r3, ip
 800383a:	e7a4      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 800383c:	f5b3 7f04 	cmp.w	r3, #528	@ 0x210
 8003840:	f000 82c8 	beq.w	8003dd4 <RI_GetRegCommandParser+0x748>
 8003844:	f240 814a 	bls.w	8003adc <RI_GetRegCommandParser+0x450>
 8003848:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800384c:	f000 832b 	beq.w	8003ea6 <RI_GetRegCommandParser+0x81a>
 8003850:	f240 8131 	bls.w	8003ab6 <RI_GetRegCommandParser+0x42a>
 8003854:	f5b3 7f54 	cmp.w	r3, #848	@ 0x350
 8003858:	f000 8316 	beq.w	8003e88 <RI_GetRegCommandParser+0x7fc>
 800385c:	f5b3 7f64 	cmp.w	r3, #912	@ 0x390
 8003860:	d11a      	bne.n	8003898 <RI_GetRegCommandParser+0x20c>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8003862:	f10d 010a 	add.w	r1, sp, #10
 8003866:	486d      	ldr	r0, [pc, #436]	@ (8003a1c <RI_GetRegCommandParser+0x390>)
 8003868:	aa15      	add	r2, sp, #84	@ 0x54
 800386a:	f006 fe43 	bl	800a4f4 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 800386e:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 8003872:	8033      	strh	r3, [r6, #0]
        pHandle->txLength += size;
 8003874:	f04f 0c02 	mov.w	ip, #2
 8003878:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 800387c:	4663      	mov	r3, ip
 800387e:	e782      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
        if (freeSpace > 0U)
 8003880:	2800      	cmp	r0, #0
 8003882:	f43f af51 	beq.w	8003728 <RI_GetRegCommandParser+0x9c>
          switch (regID)
 8003886:	2b88      	cmp	r3, #136	@ 0x88
 8003888:	f000 81da 	beq.w	8003c40 <RI_GetRegCommandParser+0x5b4>
 800388c:	2bc8      	cmp	r3, #200	@ 0xc8
 800388e:	f000 81cc 	beq.w	8003c2a <RI_GetRegCommandParser+0x59e>
 8003892:	2b48      	cmp	r3, #72	@ 0x48
 8003894:	f000 81be 	beq.w	8003c14 <RI_GetRegCommandParser+0x588>
 8003898:	2005      	movs	r0, #5
 800389a:	e72a      	b.n	80036f2 <RI_GetRegCommandParser+0x66>
        if (freeSpace >= 4U)
 800389c:	b284      	uxth	r4, r0
 800389e:	2c03      	cmp	r4, #3
 80038a0:	f67f af42 	bls.w	8003728 <RI_GetRegCommandParser+0x9c>
          switch (regID)
 80038a4:	2bd8      	cmp	r3, #216	@ 0xd8
 80038a6:	f000 8259 	beq.w	8003d5c <RI_GetRegCommandParser+0x6d0>
 80038aa:	f200 816c 	bhi.w	8003b86 <RI_GetRegCommandParser+0x4fa>
 80038ae:	2b58      	cmp	r3, #88	@ 0x58
 80038b0:	f000 8268 	beq.w	8003d84 <RI_GetRegCommandParser+0x6f8>
 80038b4:	2b98      	cmp	r3, #152	@ 0x98
 80038b6:	f040 8159 	bne.w	8003b6c <RI_GetRegCommandParser+0x4e0>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80038ba:	4857      	ldr	r0, [pc, #348]	@ (8003a18 <RI_GetRegCommandParser+0x38c>)
 80038bc:	f7fe f980 	bl	8001bc0 <MCI_GetMecSpeedRefUnit>
 80038c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80038c4:	0040      	lsls	r0, r0, #1
        pHandle->txLength += size;
 80038c6:	f04f 0c04 	mov.w	ip, #4
 80038ca:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80038ce:	6030      	str	r0, [r6, #0]
          *size = 4;
 80038d0:	4663      	mov	r3, ip
 80038d2:	e758      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 80038d4:	2be0      	cmp	r3, #224	@ 0xe0
 80038d6:	d1df      	bne.n	8003898 <RI_GetRegCommandParser+0x20c>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80038d8:	4b51      	ldr	r3, [pc, #324]	@ (8003a20 <RI_GetRegCommandParser+0x394>)
 80038da:	681c      	ldr	r4, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80038dc:	f994 1024 	ldrsb.w	r1, [r4, #36]	@ 0x24
 80038e0:	2900      	cmp	r1, #0
 80038e2:	f000 81b8 	beq.w	8003c56 <RI_GetRegCommandParser+0x5ca>
 80038e6:	2801      	cmp	r0, #1
 80038e8:	f340 8164 	ble.w	8003bb4 <RI_GetRegCommandParser+0x528>
 80038ec:	3424      	adds	r4, #36	@ 0x24
 80038ee:	46b6      	mov	lr, r6
 80038f0:	f1c6 0201 	rsb	r2, r6, #1
 80038f4:	e002      	b.n	80038fc <RI_GetRegCommandParser+0x270>
 80038f6:	4283      	cmp	r3, r0
 80038f8:	f280 815c 	bge.w	8003bb4 <RI_GetRegCommandParser+0x528>
    *tempdestString = *tempsrcString;
 80038fc:	f80e 1b01 	strb.w	r1, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003900:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
    *size = *size + 1U;
 8003904:	eb0e 0302 	add.w	r3, lr, r2
 8003908:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800390a:	2900      	cmp	r1, #0
 800390c:	d1f3      	bne.n	80038f6 <RI_GetRegCommandParser+0x26a>
 800390e:	e733      	b.n	8003778 <RI_GetRegCommandParser+0xec>
 8003910:	2be8      	cmp	r3, #232	@ 0xe8
 8003912:	d1c1      	bne.n	8003898 <RI_GetRegCommandParser+0x20c>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003914:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 8003916:	280f      	cmp	r0, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003918:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 800391a:	f67f af05 	bls.w	8003728 <RI_GetRegCommandParser+0x9c>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 800391e:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <RI_GetRegCommandParser+0x398>)
        if (freeSpace >= 2U)
 8003920:	b284      	uxth	r4, r0
 8003922:	e1b9      	b.n	8003c98 <RI_GetRegCommandParser+0x60c>
 8003924:	f5b3 7f0a 	cmp.w	r3, #552	@ 0x228
 8003928:	f000 81da 	beq.w	8003ce0 <RI_GetRegCommandParser+0x654>
 800392c:	f5b3 7f5a 	cmp.w	r3, #872	@ 0x368
 8003930:	d115      	bne.n	800395e <RI_GetRegCommandParser+0x2d2>
            *rawSize = 4;
 8003932:	2304      	movs	r3, #4
 8003934:	8033      	strh	r3, [r6, #0]
        if (freeSpace >= 2U)
 8003936:	b284      	uxth	r4, r0
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003938:	4837      	ldr	r0, [pc, #220]	@ (8003a18 <RI_GetRegCommandParser+0x38c>)
 800393a:	f7fe f96f 	bl	8001c1c <MCI_GetIqdref>
 800393e:	8070      	strh	r0, [r6, #2]
 8003940:	9004      	str	r0, [sp, #16]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003942:	4835      	ldr	r0, [pc, #212]	@ (8003a18 <RI_GetRegCommandParser+0x38c>)
 8003944:	f7fe f96a 	bl	8001c1c <MCI_GetIqdref>
 8003948:	9003      	str	r0, [sp, #12]
 800394a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800394e:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 8003950:	8833      	ldrh	r3, [r6, #0]
        pHandle->txLength += size;
 8003952:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        *size = (*rawSize) + 2U;
 8003956:	3302      	adds	r3, #2
 8003958:	b29b      	uxth	r3, r3
        txData = txData+size;
 800395a:	469c      	mov	ip, r3
 800395c:	e713      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 800395e:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 8003962:	d199      	bne.n	8003898 <RI_GetRegCommandParser+0x20c>
            *rawSize = 4;
 8003964:	2304      	movs	r3, #4
 8003966:	8033      	strh	r3, [r6, #0]
        if (freeSpace >= 2U)
 8003968:	b284      	uxth	r4, r0
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 800396a:	482b      	ldr	r0, [pc, #172]	@ (8003a18 <RI_GetRegCommandParser+0x38c>)
 800396c:	f7fe f916 	bl	8001b9c <MCI_GetLastRampFinalTorque>
 8003970:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003972:	4829      	ldr	r0, [pc, #164]	@ (8003a18 <RI_GetRegCommandParser+0x38c>)
 8003974:	f7fe f916 	bl	8001ba4 <MCI_GetLastRampFinalDuration>
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003978:	80b0      	strh	r0, [r6, #4]
 800397a:	e7e9      	b.n	8003950 <RI_GetRegCommandParser+0x2c4>
 800397c:	f5b3 6f65 	cmp.w	r3, #3664	@ 0xe50
 8003980:	d18a      	bne.n	8003898 <RI_GetRegCommandParser+0x20c>
 8003982:	f04f 0c02 	mov.w	ip, #2
 8003986:	4663      	mov	r3, ip
 8003988:	e6fd      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 800398a:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 800398e:	f000 8297 	beq.w	8003ec0 <RI_GetRegCommandParser+0x834>
 8003992:	d966      	bls.n	8003a62 <RI_GetRegCommandParser+0x3d6>
 8003994:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 8003998:	f000 8287 	beq.w	8003eaa <RI_GetRegCommandParser+0x81e>
 800399c:	d954      	bls.n	8003a48 <RI_GetRegCommandParser+0x3bc>
 800399e:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 80039a2:	d1eb      	bne.n	800397c <RI_GetRegCommandParser+0x2f0>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 80039a4:	481d      	ldr	r0, [pc, #116]	@ (8003a1c <RI_GetRegCommandParser+0x390>)
 80039a6:	f006 fd87 	bl	800a4b8 <STO_PLL_GetEstimatedBemf>
 80039aa:	9005      	str	r0, [sp, #20]
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80039ac:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80039b0:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80039b2:	f04f 0c02 	mov.w	ip, #2
 80039b6:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 80039ba:	4663      	mov	r3, ip
 80039bc:	e6e3      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 80039be:	f241 52d0 	movw	r2, #5584	@ 0x15d0
 80039c2:	4293      	cmp	r3, r2
 80039c4:	f000 82b8 	beq.w	8003f38 <RI_GetRegCommandParser+0x8ac>
 80039c8:	f241 6210 	movw	r2, #5648	@ 0x1610
 80039cc:	4293      	cmp	r3, r2
 80039ce:	f47f af63 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 80039d2:	4b15      	ldr	r3, [pc, #84]	@ (8003a28 <RI_GetRegCommandParser+0x39c>)
 80039d4:	6818      	ldr	r0, [r3, #0]
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 80039d6:	f004 ffa1 	bl	800891c <PID_GetKIDivisorPOW2>
        pHandle->txLength += size;
 80039da:	f04f 0c02 	mov.w	ip, #2
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 80039de:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80039e0:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 80039e4:	4663      	mov	r3, ip
 80039e6:	e6ce      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 80039e8:	f241 42d0 	movw	r2, #5328	@ 0x14d0
 80039ec:	4293      	cmp	r3, r2
 80039ee:	f000 8273 	beq.w	8003ed8 <RI_GetRegCommandParser+0x84c>
 80039f2:	d91d      	bls.n	8003a30 <RI_GetRegCommandParser+0x3a4>
 80039f4:	f241 5210 	movw	r2, #5392	@ 0x1510
 80039f8:	4293      	cmp	r3, r2
 80039fa:	f000 8271 	beq.w	8003ee0 <RI_GetRegCommandParser+0x854>
 80039fe:	f241 5250 	movw	r2, #5456	@ 0x1550
 8003a02:	4293      	cmp	r3, r2
 8003a04:	f47f af48 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8003a08:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <RI_GetRegCommandParser+0x3a0>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	e7e3      	b.n	80039d6 <RI_GetRegCommandParser+0x34a>
 8003a0e:	bf00      	nop
 8003a10:	0800aaec 	.word	0x0800aaec
 8003a14:	2000017c 	.word	0x2000017c
 8003a18:	20000968 	.word	0x20000968
 8003a1c:	20000148 	.word	0x20000148
 8003a20:	2000047c 	.word	0x2000047c
 8003a24:	20000480 	.word	0x20000480
 8003a28:	20000008 	.word	0x20000008
 8003a2c:	20000004 	.word	0x20000004
 8003a30:	f241 4250 	movw	r2, #5200	@ 0x1450
 8003a34:	4293      	cmp	r3, r2
 8003a36:	f000 8251 	beq.w	8003edc <RI_GetRegCommandParser+0x850>
 8003a3a:	f241 4290 	movw	r2, #5264	@ 0x1490
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	f47f af2a 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8003a44:	48b9      	ldr	r0, [pc, #740]	@ (8003d2c <RI_GetRegCommandParser+0x6a0>)
 8003a46:	e7c6      	b.n	80039d6 <RI_GetRegCommandParser+0x34a>
 8003a48:	f5b3 6f3d 	cmp.w	r3, #3024	@ 0xbd0
 8003a4c:	f000 8269 	beq.w	8003f22 <RI_GetRegCommandParser+0x896>
 8003a50:	f5b3 6f41 	cmp.w	r3, #3088	@ 0xc10
 8003a54:	f47f af20 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 8003a58:	48b5      	ldr	r0, [pc, #724]	@ (8003d30 <RI_GetRegCommandParser+0x6a4>)
 8003a5a:	f006 fd39 	bl	800a4d0 <STO_PLL_GetEstimatedCurrent>
 8003a5e:	9007      	str	r0, [sp, #28]
 8003a60:	e7a4      	b.n	80039ac <RI_GetRegCommandParser+0x320>
 8003a62:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 8003a66:	f000 8251 	beq.w	8003f0c <RI_GetRegCommandParser+0x880>
 8003a6a:	d958      	bls.n	8003b1e <RI_GetRegCommandParser+0x492>
 8003a6c:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 8003a70:	f000 8247 	beq.w	8003f02 <RI_GetRegCommandParser+0x876>
 8003a74:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 8003a78:	f47f af0e 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003a7c:	48ac      	ldr	r0, [pc, #688]	@ (8003d30 <RI_GetRegCommandParser+0x6a4>)
 8003a7e:	f006 f987 	bl	8009d90 <SPD_GetElAngle>
        pHandle->txLength += size;
 8003a82:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003a86:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003a88:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003a8c:	4663      	mov	r3, ip
 8003a8e:	e67a      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 8003a90:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8003a94:	f000 8230 	beq.w	8003ef8 <RI_GetRegCommandParser+0x86c>
 8003a98:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 8003a9c:	f47f aefc 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003aa0:	48a4      	ldr	r0, [pc, #656]	@ (8003d34 <RI_GetRegCommandParser+0x6a8>)
 8003aa2:	f7fe f8ad 	bl	8001c00 <MCI_GetIqd>
        pHandle->txLength += size;
 8003aa6:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003aaa:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003aac:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003ab0:	9010      	str	r0, [sp, #64]	@ 0x40
          *size = 2;
 8003ab2:	4663      	mov	r3, ip
 8003ab4:	e667      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 8003ab6:	f5b3 7f24 	cmp.w	r3, #656	@ 0x290
 8003aba:	f000 8216 	beq.w	8003eea <RI_GetRegCommandParser+0x85e>
 8003abe:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
 8003ac2:	f47f aee9 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003ac6:	4b9c      	ldr	r3, [pc, #624]	@ (8003d38 <RI_GetRegCommandParser+0x6ac>)
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	f004 ff17 	bl	80088fc <PID_GetKI>
        pHandle->txLength += size;
 8003ace:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003ad2:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003ad4:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003ad8:	4663      	mov	r3, ip
 8003ada:	e654      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 8003adc:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003ae0:	f000 8208 	beq.w	8003ef4 <RI_GetRegCommandParser+0x868>
 8003ae4:	d928      	bls.n	8003b38 <RI_GetRegCommandParser+0x4ac>
 8003ae6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003aea:	f000 8201 	beq.w	8003ef0 <RI_GetRegCommandParser+0x864>
 8003aee:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8003af2:	f47f aed1 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003af6:	4b91      	ldr	r3, [pc, #580]	@ (8003d3c <RI_GetRegCommandParser+0x6b0>)
 8003af8:	e7e6      	b.n	8003ac8 <RI_GetRegCommandParser+0x43c>
 8003afa:	f5b3 6fba 	cmp.w	r3, #1488	@ 0x5d0
 8003afe:	f000 81b8 	beq.w	8003e72 <RI_GetRegCommandParser+0x7e6>
 8003b02:	d921      	bls.n	8003b48 <RI_GetRegCommandParser+0x4bc>
 8003b04:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003b08:	f000 81a8 	beq.w	8003e5c <RI_GetRegCommandParser+0x7d0>
 8003b0c:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003b10:	f47f aec2 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8003b14:	4887      	ldr	r0, [pc, #540]	@ (8003d34 <RI_GetRegCommandParser+0x6a8>)
 8003b16:	f7fe f857 	bl	8001bc8 <MCI_GetIab>
 8003b1a:	9013      	str	r0, [sp, #76]	@ 0x4c
 8003b1c:	e746      	b.n	80039ac <RI_GetRegCommandParser+0x320>
 8003b1e:	f5b3 6f1d 	cmp.w	r3, #2512	@ 0x9d0
 8003b22:	f000 8190 	beq.w	8003e46 <RI_GetRegCommandParser+0x7ba>
 8003b26:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8003b2a:	f47f aeb5 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003b2e:	4881      	ldr	r0, [pc, #516]	@ (8003d34 <RI_GetRegCommandParser+0x6a8>)
 8003b30:	f7fe f882 	bl	8001c38 <MCI_GetVqd>
 8003b34:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003b36:	e739      	b.n	80039ac <RI_GetRegCommandParser+0x320>
 8003b38:	2b90      	cmp	r3, #144	@ 0x90
 8003b3a:	f000 817a 	beq.w	8003e32 <RI_GetRegCommandParser+0x7a6>
 8003b3e:	2bd0      	cmp	r3, #208	@ 0xd0
 8003b40:	f47f aeaa 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003b44:	4879      	ldr	r0, [pc, #484]	@ (8003d2c <RI_GetRegCommandParser+0x6a0>)
 8003b46:	e7c0      	b.n	8003aca <RI_GetRegCommandParser+0x43e>
 8003b48:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 8003b4c:	f000 81cb 	beq.w	8003ee6 <RI_GetRegCommandParser+0x85a>
 8003b50:	f5b3 6fb2 	cmp.w	r3, #1424	@ 0x590
 8003b54:	f47f aea0 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003b58:	4879      	ldr	r0, [pc, #484]	@ (8003d40 <RI_GetRegCommandParser+0x6b4>)
 8003b5a:	f004 fc1b 	bl	8008394 <VBS_GetAvBusVoltage_V>
        pHandle->txLength += size;
 8003b5e:	f04f 0c02 	mov.w	ip, #2
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003b62:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003b64:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003b68:	4663      	mov	r3, ip
 8003b6a:	e60c      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 8003b6c:	2b18      	cmp	r3, #24
 8003b6e:	f47f ae93 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003b72:	4870      	ldr	r0, [pc, #448]	@ (8003d34 <RI_GetRegCommandParser+0x6a8>)
 8003b74:	f7fd ffe4 	bl	8001b40 <MCI_GetFaultState>
        pHandle->txLength += size;
 8003b78:	f04f 0c04 	mov.w	ip, #4
 8003b7c:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003b80:	6030      	str	r0, [r6, #0]
          *size = 4;
 8003b82:	4663      	mov	r3, ip
 8003b84:	e5ff      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
 8003b86:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003b8a:	f000 80f1 	beq.w	8003d70 <RI_GetRegCommandParser+0x6e4>
 8003b8e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f47f ae80 	bne.w	8003898 <RI_GetRegCommandParser+0x20c>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8003b98:	4b6a      	ldr	r3, [pc, #424]	@ (8003d44 <RI_GetRegCommandParser+0x6b8>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	f004 ff44 	bl	8008a28 <PQD_GetAvrgElMotorPowerW>
 8003ba0:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8003ba4:	9b01      	ldr	r3, [sp, #4]
 8003ba6:	6033      	str	r3, [r6, #0]
        pHandle->txLength += size;
 8003ba8:	f04f 0c04 	mov.w	ip, #4
 8003bac:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 4;
 8003bb0:	4663      	mov	r3, ip
 8003bb2:	e5e8      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003bb4:	2006      	movs	r0, #6
 8003bb6:	e59c      	b.n	80036f2 <RI_GetRegCommandParser+0x66>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8003bb8:	4b63      	ldr	r3, [pc, #396]	@ (8003d48 <RI_GetRegCommandParser+0x6bc>)
 8003bba:	681c      	ldr	r4, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003bbc:	f994 1000 	ldrsb.w	r1, [r4]
 8003bc0:	2900      	cmp	r1, #0
 8003bc2:	d048      	beq.n	8003c56 <RI_GetRegCommandParser+0x5ca>
 8003bc4:	2801      	cmp	r0, #1
 8003bc6:	ddf5      	ble.n	8003bb4 <RI_GetRegCommandParser+0x528>
 8003bc8:	46b6      	mov	lr, r6
 8003bca:	f1c6 0201 	rsb	r2, r6, #1
 8003bce:	e001      	b.n	8003bd4 <RI_GetRegCommandParser+0x548>
 8003bd0:	4283      	cmp	r3, r0
 8003bd2:	daef      	bge.n	8003bb4 <RI_GetRegCommandParser+0x528>
    *tempdestString = *tempsrcString;
 8003bd4:	f80e 1b01 	strb.w	r1, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003bd8:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
    *size = *size + 1U;
 8003bdc:	eb0e 0302 	add.w	r3, lr, r2
 8003be0:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003be2:	2900      	cmp	r1, #0
 8003be4:	d1f4      	bne.n	8003bd0 <RI_GetRegCommandParser+0x544>
 8003be6:	e5c7      	b.n	8003778 <RI_GetRegCommandParser+0xec>
 8003be8:	4c58      	ldr	r4, [pc, #352]	@ (8003d4c <RI_GetRegCommandParser+0x6c0>)
 8003bea:	f994 1000 	ldrsb.w	r1, [r4]
 8003bee:	b391      	cbz	r1, 8003c56 <RI_GetRegCommandParser+0x5ca>
 8003bf0:	2801      	cmp	r0, #1
 8003bf2:	dddf      	ble.n	8003bb4 <RI_GetRegCommandParser+0x528>
 8003bf4:	46b6      	mov	lr, r6
 8003bf6:	f1c6 0201 	rsb	r2, r6, #1
 8003bfa:	e001      	b.n	8003c00 <RI_GetRegCommandParser+0x574>
 8003bfc:	4283      	cmp	r3, r0
 8003bfe:	dad9      	bge.n	8003bb4 <RI_GetRegCommandParser+0x528>
    *tempdestString = *tempsrcString;
 8003c00:	f80e 1b01 	strb.w	r1, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003c04:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
    *size = *size + 1U;
 8003c08:	eb0e 0302 	add.w	r3, lr, r2
 8003c0c:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003c0e:	2900      	cmp	r1, #0
 8003c10:	d1f4      	bne.n	8003bfc <RI_GetRegCommandParser+0x570>
 8003c12:	e5b1      	b.n	8003778 <RI_GetRegCommandParser+0xec>
        if (freeSpace >= 2U)
 8003c14:	b284      	uxth	r4, r0
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003c16:	4847      	ldr	r0, [pc, #284]	@ (8003d34 <RI_GetRegCommandParser+0x6a8>)
 8003c18:	f7fd ff48 	bl	8001aac <MCI_GetSTMState>
        if (freeSpace >= 2U)
 8003c1c:	f04f 0c01 	mov.w	ip, #1
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003c20:	7030      	strb	r0, [r6, #0]
        pHandle->txLength += size;
 8003c22:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 1;
 8003c26:	4663      	mov	r3, ip
 8003c28:	e5ad      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
        if (freeSpace >= 2U)
 8003c2a:	b284      	uxth	r4, r0
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 8003c2c:	4848      	ldr	r0, [pc, #288]	@ (8003d50 <RI_GetRegCommandParser+0x6c4>)
 8003c2e:	f006 f89b 	bl	8009d68 <RUC_GetNumberOfPhases>
        if (freeSpace >= 2U)
 8003c32:	f04f 0c01 	mov.w	ip, #1
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 8003c36:	7030      	strb	r0, [r6, #0]
        pHandle->txLength += size;
 8003c38:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 1;
 8003c3c:	4663      	mov	r3, ip
 8003c3e:	e5a2      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
        if (freeSpace >= 2U)
 8003c40:	b284      	uxth	r4, r0
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003c42:	483c      	ldr	r0, [pc, #240]	@ (8003d34 <RI_GetRegCommandParser+0x6a8>)
 8003c44:	f7fd ff82 	bl	8001b4c <MCI_GetControlMode>
        if (freeSpace >= 2U)
 8003c48:	f04f 0c01 	mov.w	ip, #1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003c4c:	7030      	strb	r0, [r6, #0]
        pHandle->txLength += size;
 8003c4e:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 1;
 8003c52:	4663      	mov	r3, ip
 8003c54:	e597      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003c56:	f04f 0c01 	mov.w	ip, #1
 8003c5a:	46b6      	mov	lr, r6
  *size= 1U ; /* /0 is the min String size */
 8003c5c:	4663      	mov	r3, ip
 8003c5e:	e58c      	b.n	800377a <RI_GetRegCommandParser+0xee>
        if (freeSpace >= 2U)
 8003c60:	b284      	uxth	r4, r0
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003c62:	4834      	ldr	r0, [pc, #208]	@ (8003d34 <RI_GetRegCommandParser+0x6a8>)
 8003c64:	f7fd ff96 	bl	8001b94 <MCI_GetLastRampFinalSpeed>
 8003c68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003c6c:	0040      	lsls	r0, r0, #1
 8003c6e:	f8c6 0002 	str.w	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003c72:	4830      	ldr	r0, [pc, #192]	@ (8003d34 <RI_GetRegCommandParser+0x6a8>)
 8003c74:	f7fd ff96 	bl	8001ba4 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003c78:	2306      	movs	r3, #6
 8003c7a:	8033      	strh	r3, [r6, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003c7c:	80f0      	strh	r0, [r6, #6]
        if (freeSpace >= 2U)
 8003c7e:	f04f 0c08 	mov.w	ip, #8
        pHandle->txLength += size;
 8003c82:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        *size = (*rawSize) + 2U;
 8003c86:	4663      	mov	r3, ip
 8003c88:	e57d      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8003c8a:	230e      	movs	r3, #14
            if ((*rawSize) +2  > freeSpace)
 8003c8c:	280f      	cmp	r0, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8003c8e:	8033      	strh	r3, [r6, #0]
            if ((*rawSize) +2  > freeSpace)
 8003c90:	f77f ad4a 	ble.w	8003728 <RI_GetRegCommandParser+0x9c>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8003c94:	4b2f      	ldr	r3, [pc, #188]	@ (8003d54 <RI_GetRegCommandParser+0x6c8>)
        if (freeSpace >= 2U)
 8003c96:	b284      	uxth	r4, r0
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8003ca2:	f8c2 e008 	str.w	lr, [r2, #8]
 8003ca6:	6010      	str	r0, [r2, #0]
 8003ca8:	6051      	str	r1, [r2, #4]
 8003caa:	899b      	ldrh	r3, [r3, #12]
 8003cac:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 8003cae:	f04f 0c10 	mov.w	ip, #16
        pHandle->txLength += size;
 8003cb2:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        *size = (*rawSize) + 2U;
 8003cb6:	4663      	mov	r3, ip
 8003cb8:	e565      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003cba:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 8003cbc:	280b      	cmp	r0, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003cbe:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003cc0:	f67f ad32 	bls.w	8003728 <RI_GetRegCommandParser+0x9c>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003cc4:	4b24      	ldr	r3, [pc, #144]	@ (8003d58 <RI_GetRegCommandParser+0x6cc>)
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	6011      	str	r1, [r2, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	891b      	ldrh	r3, [r3, #8]
 8003cce:	8113      	strh	r3, [r2, #8]
        if (freeSpace >= 2U)
 8003cd0:	f04f 0c0c 	mov.w	ip, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003cd4:	6051      	str	r1, [r2, #4]
        pHandle->txLength += size;
 8003cd6:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        if (freeSpace >= 2U)
 8003cda:	b284      	uxth	r4, r0
        *size = (*rawSize) + 2U;
 8003cdc:	4663      	mov	r3, ip
 8003cde:	e552      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003ce0:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > freeSpace)
 8003ce2:	2829      	cmp	r0, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003ce4:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003ce6:	f67f ad1f 	bls.w	8003728 <RI_GetRegCommandParser+0x9c>
 8003cea:	f04f 0a00 	mov.w	sl, #0
 8003cee:	9501      	str	r5, [sp, #4]
 8003cf0:	4634      	mov	r4, r6
 8003cf2:	4655      	mov	r5, sl
 8003cf4:	4682      	mov	sl, r0
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8003cf6:	b2e9      	uxtb	r1, r5
 8003cf8:	aa15      	add	r2, sp, #84	@ 0x54
 8003cfa:	4815      	ldr	r0, [pc, #84]	@ (8003d50 <RI_GetRegCommandParser+0x6c4>)
 8003cfc:	f006 f838 	bl	8009d70 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d00:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	@ 0x56
 8003d04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003d08:	0052      	lsls	r2, r2, #1
 8003d0a:	f8c4 2002 	str.w	r2, [r4, #2]
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003d0e:	f8bd 2058 	ldrh.w	r2, [sp, #88]	@ 0x58
 8003d12:	80e2      	strh	r2, [r4, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8003d14:	3501      	adds	r5, #1
                *durationms  = revUpPhase.hDurationms;
 8003d16:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8003d1a:	f824 2f08 	strh.w	r2, [r4, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8003d1e:	2d05      	cmp	r5, #5
 8003d20:	d1e9      	bne.n	8003cf6 <RI_GetRegCommandParser+0x66a>
        if (freeSpace >= 2U)
 8003d22:	9d01      	ldr	r5, [sp, #4]
 8003d24:	fa1f f48a 	uxth.w	r4, sl
 8003d28:	e612      	b.n	8003950 <RI_GetRegCommandParser+0x2c4>
 8003d2a:	bf00      	nop
 8003d2c:	2000043c 	.word	0x2000043c
 8003d30:	20000148 	.word	0x20000148
 8003d34:	20000968 	.word	0x20000968
 8003d38:	20000004 	.word	0x20000004
 8003d3c:	20000008 	.word	0x20000008
 8003d40:	200000e0 	.word	0x200000e0
 8003d44:	20000000 	.word	0x20000000
 8003d48:	20000484 	.word	0x20000484
 8003d4c:	0800aac4 	.word	0x0800aac4
 8003d50:	20000338 	.word	0x20000338
 8003d54:	20000478 	.word	0x20000478
 8003d58:	0800aab8 	.word	0x0800aab8
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 8003d5c:	4878      	ldr	r0, [pc, #480]	@ (8003f40 <RI_GetRegCommandParser+0x8b4>)
 8003d5e:	f006 fbdf 	bl	800a520 <STO_PLL_GetEstimatedBemfLevel>
        pHandle->txLength += size;
 8003d62:	f04f 0c04 	mov.w	ip, #4
 8003d66:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 8003d6a:	6030      	str	r0, [r6, #0]
          *size = 4;
 8003d6c:	4663      	mov	r3, ip
 8003d6e:	e50a      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 8003d70:	4873      	ldr	r0, [pc, #460]	@ (8003f40 <RI_GetRegCommandParser+0x8b4>)
 8003d72:	f006 fbd9 	bl	800a528 <STO_PLL_GetObservedBemfLevel>
        pHandle->txLength += size;
 8003d76:	f04f 0c04 	mov.w	ip, #4
 8003d7a:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 8003d7e:	6030      	str	r0, [r6, #0]
          *size = 4;
 8003d80:	4663      	mov	r3, ip
 8003d82:	e500      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003d84:	486f      	ldr	r0, [pc, #444]	@ (8003f44 <RI_GetRegCommandParser+0x8b8>)
 8003d86:	f7fd ff13 	bl	8001bb0 <MCI_GetAvrgMecSpeedUnit>
 8003d8a:	e599      	b.n	80038c0 <RI_GetRegCommandParser+0x234>
  uint8_t retVal = MCP_CMD_NOK;
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	e4b0      	b.n	80036f2 <RI_GetRegCommandParser+0x66>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8003d90:	4b6d      	ldr	r3, [pc, #436]	@ (8003f48 <RI_GetRegCommandParser+0x8bc>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f103 0a30 	add.w	sl, r3, #48	@ 0x30
 8003d98:	f8d3 c000 	ldr.w	ip, [r3]
 8003d9c:	685c      	ldr	r4, [r3, #4]
 8003d9e:	6899      	ldr	r1, [r3, #8]
 8003da0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8003da4:	f8c2 e00c 	str.w	lr, [r2, #12]
 8003da8:	3310      	adds	r3, #16
 8003daa:	4553      	cmp	r3, sl
 8003dac:	f8c2 c000 	str.w	ip, [r2]
 8003db0:	6054      	str	r4, [r2, #4]
 8003db2:	6091      	str	r1, [r2, #8]
 8003db4:	f102 0210 	add.w	r2, r2, #16
 8003db8:	d1ee      	bne.n	8003d98 <RI_GetRegCommandParser+0x70c>
 8003dba:	6859      	ldr	r1, [r3, #4]
        if (freeSpace >= 2U)
 8003dbc:	b284      	uxth	r4, r0
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	6093      	str	r3, [r2, #8]
 8003dc4:	6010      	str	r0, [r2, #0]
 8003dc6:	6051      	str	r1, [r2, #4]
        if (freeSpace >= 2U)
 8003dc8:	f04f 0c3e 	mov.w	ip, #62	@ 0x3e
        pHandle->txLength += size;
 8003dcc:	f8b8 100e 	ldrh.w	r1, [r8, #14]
        *size = (*rawSize) + 2U;
 8003dd0:	4663      	mov	r3, ip
 8003dd2:	e4d8      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003dd4:	4b5d      	ldr	r3, [pc, #372]	@ (8003f4c <RI_GetRegCommandParser+0x8c0>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	f004 fdbc 	bl	8008954 <PID_GetKD>
        pHandle->txLength += size;
 8003ddc:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003de0:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003de2:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003de6:	4663      	mov	r3, ip
 8003de8:	e4cd      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8003dea:	4856      	ldr	r0, [pc, #344]	@ (8003f44 <RI_GetRegCommandParser+0x8b8>)
 8003dec:	f7fd ff08 	bl	8001c00 <MCI_GetIqd>
 8003df0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003df2:	e5db      	b.n	80039ac <RI_GetRegCommandParser+0x320>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003df4:	4853      	ldr	r0, [pc, #332]	@ (8003f44 <RI_GetRegCommandParser+0x8b8>)
 8003df6:	f7fd fef5 	bl	8001be4 <MCI_GetIalphabeta>
        pHandle->txLength += size;
 8003dfa:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003dfe:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003e00:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003e04:	9012      	str	r0, [sp, #72]	@ 0x48
          *size = 2;
 8003e06:	4663      	mov	r3, ip
 8003e08:	e4bd      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8003e0a:	4851      	ldr	r0, [pc, #324]	@ (8003f50 <RI_GetRegCommandParser+0x8c4>)
 8003e0c:	e65d      	b.n	8003aca <RI_GetRegCommandParser+0x43e>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8003e0e:	484d      	ldr	r0, [pc, #308]	@ (8003f44 <RI_GetRegCommandParser+0x8b8>)
 8003e10:	f7fd ff04 	bl	8001c1c <MCI_GetIqdref>
 8003e14:	900d      	str	r0, [sp, #52]	@ 0x34
 8003e16:	e5c9      	b.n	80039ac <RI_GetRegCommandParser+0x320>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003e18:	4b4c      	ldr	r3, [pc, #304]	@ (8003f4c <RI_GetRegCommandParser+0x8c0>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	f004 fd9e 	bl	800895c <PID_GetKDDivisorPOW2>
        pHandle->txLength += size;
 8003e20:	f04f 0c02 	mov.w	ip, #2
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003e24:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003e26:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003e2a:	4663      	mov	r3, ip
 8003e2c:	e4ab      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8003e2e:	4b49      	ldr	r3, [pc, #292]	@ (8003f54 <RI_GetRegCommandParser+0x8c8>)
 8003e30:	e7f3      	b.n	8003e1a <RI_GetRegCommandParser+0x78e>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8003e32:	4849      	ldr	r0, [pc, #292]	@ (8003f58 <RI_GetRegCommandParser+0x8cc>)
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8003e34:	f004 fd5e 	bl	80088f4 <PID_GetKP>
        pHandle->txLength += size;
 8003e38:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8003e3c:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003e3e:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003e42:	4663      	mov	r3, ip
 8003e44:	e49f      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003e46:	483f      	ldr	r0, [pc, #252]	@ (8003f44 <RI_GetRegCommandParser+0x8b8>)
 8003e48:	f7fd fef6 	bl	8001c38 <MCI_GetVqd>
        pHandle->txLength += size;
 8003e4c:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003e50:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003e52:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003e56:	900c      	str	r0, [sp, #48]	@ 0x30
          *size = 2;
 8003e58:	4663      	mov	r3, ip
 8003e5a:	e494      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003e5c:	4839      	ldr	r0, [pc, #228]	@ (8003f44 <RI_GetRegCommandParser+0x8b8>)
 8003e5e:	f7fd feb3 	bl	8001bc8 <MCI_GetIab>
        pHandle->txLength += size;
 8003e62:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003e66:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003e68:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003e6c:	9014      	str	r0, [sp, #80]	@ 0x50
          *size = 2;
 8003e6e:	4663      	mov	r3, ip
 8003e70:	e489      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003e72:	4b3a      	ldr	r3, [pc, #232]	@ (8003f5c <RI_GetRegCommandParser+0x8d0>)
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	f004 fd1f 	bl	80088b8 <NTC_GetAvTemp_C>
        pHandle->txLength += size;
 8003e7a:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003e7e:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003e80:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003e84:	4663      	mov	r3, ip
 8003e86:	e47e      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8003e88:	f10d 010a 	add.w	r1, sp, #10
 8003e8c:	482c      	ldr	r0, [pc, #176]	@ (8003f40 <RI_GetRegCommandParser+0x8b4>)
 8003e8e:	aa15      	add	r2, sp, #84	@ 0x54
 8003e90:	f006 fb30 	bl	800a4f4 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8003e94:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003e98:	8033      	strh	r3, [r6, #0]
        pHandle->txLength += size;
 8003e9a:	f04f 0c02 	mov.w	ip, #2
 8003e9e:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003ea2:	4663      	mov	r3, ip
 8003ea4:	e46f      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f54 <RI_GetRegCommandParser+0x8c8>)
 8003ea8:	e795      	b.n	8003dd6 <RI_GetRegCommandParser+0x74a>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003eaa:	4825      	ldr	r0, [pc, #148]	@ (8003f40 <RI_GetRegCommandParser+0x8b4>)
 8003eac:	f006 fb04 	bl	800a4b8 <STO_PLL_GetEstimatedBemf>
        pHandle->txLength += size;
 8003eb0:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003eb4:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003eb6:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003eba:	9006      	str	r0, [sp, #24]
          *size = 2;
 8003ebc:	4663      	mov	r3, ip
 8003ebe:	e462      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003ec0:	481f      	ldr	r0, [pc, #124]	@ (8003f40 <RI_GetRegCommandParser+0x8b4>)
 8003ec2:	f005 ffa7 	bl	8009e14 <SPD_GetS16Speed>
        pHandle->txLength += size;
 8003ec6:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003eca:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003ecc:	f8b8 100e 	ldrh.w	r1, [r8, #14]
          *size = 2;
 8003ed0:	4663      	mov	r3, ip
 8003ed2:	e458      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003ed4:	481e      	ldr	r0, [pc, #120]	@ (8003f50 <RI_GetRegCommandParser+0x8c4>)
 8003ed6:	e57e      	b.n	80039d6 <RI_GetRegCommandParser+0x34a>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8003ed8:	481f      	ldr	r0, [pc, #124]	@ (8003f58 <RI_GetRegCommandParser+0x8cc>)
 8003eda:	e79f      	b.n	8003e1c <RI_GetRegCommandParser+0x790>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8003edc:	481e      	ldr	r0, [pc, #120]	@ (8003f58 <RI_GetRegCommandParser+0x8cc>)
 8003ede:	e485      	b.n	80037ec <RI_GetRegCommandParser+0x160>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8003ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f54 <RI_GetRegCommandParser+0x8c8>)
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	e482      	b.n	80037ec <RI_GetRegCommandParser+0x160>
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 8003ee6:	481a      	ldr	r0, [pc, #104]	@ (8003f50 <RI_GetRegCommandParser+0x8c4>)
 8003ee8:	e7a4      	b.n	8003e34 <RI_GetRegCommandParser+0x7a8>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8003eea:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <RI_GetRegCommandParser+0x8c8>)
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	e7a1      	b.n	8003e34 <RI_GetRegCommandParser+0x7a8>
 8003ef0:	4b16      	ldr	r3, [pc, #88]	@ (8003f4c <RI_GetRegCommandParser+0x8c0>)
 8003ef2:	e7fb      	b.n	8003eec <RI_GetRegCommandParser+0x860>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8003ef4:	4818      	ldr	r0, [pc, #96]	@ (8003f58 <RI_GetRegCommandParser+0x8cc>)
 8003ef6:	e76f      	b.n	8003dd8 <RI_GetRegCommandParser+0x74c>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8003ef8:	4812      	ldr	r0, [pc, #72]	@ (8003f44 <RI_GetRegCommandParser+0x8b8>)
 8003efa:	f7fd fe73 	bl	8001be4 <MCI_GetIalphabeta>
 8003efe:	9011      	str	r0, [sp, #68]	@ 0x44
 8003f00:	e554      	b.n	80039ac <RI_GetRegCommandParser+0x320>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8003f02:	4810      	ldr	r0, [pc, #64]	@ (8003f44 <RI_GetRegCommandParser+0x8b8>)
 8003f04:	f7fd fea6 	bl	8001c54 <MCI_GetValphabeta>
 8003f08:	9009      	str	r0, [sp, #36]	@ 0x24
 8003f0a:	e54f      	b.n	80039ac <RI_GetRegCommandParser+0x320>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003f0c:	480d      	ldr	r0, [pc, #52]	@ (8003f44 <RI_GetRegCommandParser+0x8b8>)
 8003f0e:	f7fd fea1 	bl	8001c54 <MCI_GetValphabeta>
        pHandle->txLength += size;
 8003f12:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003f16:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003f18:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003f1c:	900a      	str	r0, [sp, #40]	@ 0x28
          *size = 2;
 8003f1e:	4663      	mov	r3, ip
 8003f20:	e431      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003f22:	4807      	ldr	r0, [pc, #28]	@ (8003f40 <RI_GetRegCommandParser+0x8b4>)
 8003f24:	f006 fad4 	bl	800a4d0 <STO_PLL_GetEstimatedCurrent>
        pHandle->txLength += size;
 8003f28:	f04f 0c02 	mov.w	ip, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003f2c:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003f2e:	f8b8 100e 	ldrh.w	r1, [r8, #14]
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003f32:	9008      	str	r0, [sp, #32]
          *size = 2;
 8003f34:	4663      	mov	r3, ip
 8003f36:	e426      	b.n	8003786 <RI_GetRegCommandParser+0xfa>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8003f38:	4b04      	ldr	r3, [pc, #16]	@ (8003f4c <RI_GetRegCommandParser+0x8c0>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	e456      	b.n	80037ec <RI_GetRegCommandParser+0x160>
 8003f3e:	bf00      	nop
 8003f40:	20000148 	.word	0x20000148
 8003f44:	20000968 	.word	0x20000968
 8003f48:	2000047c 	.word	0x2000047c
 8003f4c:	20000008 	.word	0x20000008
 8003f50:	2000017c 	.word	0x2000017c
 8003f54:	20000004 	.word	0x20000004
 8003f58:	2000043c 	.word	0x2000043c
 8003f5c:	2000000c 	.word	0x2000000c

08003f60 <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003f60:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8003f64:	3808      	subs	r0, #8
 8003f66:	b2c0      	uxtb	r0, r0
 8003f68:	2810      	cmp	r0, #16
 8003f6a:	bf9a      	itte	ls
 8003f6c:	4b01      	ldrls	r3, [pc, #4]	@ (8003f74 <RI_GetIDSize+0x14>)
 8003f6e:	5c18      	ldrbls	r0, [r3, r0]
 8003f70:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8003f72:	4770      	bx	lr
 8003f74:	0800abc8 	.word	0x0800abc8

08003f78 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003f78:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d003      	beq.n	8003f88 <RI_GetPtrReg+0x10>
 8003f80:	4a43      	ldr	r2, [pc, #268]	@ (8004090 <RI_GetPtrReg+0x118>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 8003f82:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003f84:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 8003f86:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003f88:	f020 0007 	bic.w	r0, r0, #7
 8003f8c:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8003f90:	b283      	uxth	r3, r0
 8003f92:	d073      	beq.n	800407c <RI_GetPtrReg+0x104>
 8003f94:	d80f      	bhi.n	8003fb6 <RI_GetPtrReg+0x3e>
 8003f96:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 8003f9a:	d074      	beq.n	8004086 <RI_GetPtrReg+0x10e>
 8003f9c:	d824      	bhi.n	8003fe8 <RI_GetPtrReg+0x70>
 8003f9e:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 8003fa2:	d058      	beq.n	8004056 <RI_GetPtrReg+0xde>
 8003fa4:	d915      	bls.n	8003fd2 <RI_GetPtrReg+0x5a>
 8003fa6:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8003faa:	d1e9      	bne.n	8003f80 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003fac:	4b39      	ldr	r3, [pc, #228]	@ (8004094 <RI_GetPtrReg+0x11c>)
 8003fae:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003fb0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003fb2:	3206      	adds	r2, #6
            break;
 8003fb4:	e7e6      	b.n	8003f84 <RI_GetPtrReg+0xc>
 8003fb6:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 8003fba:	d049      	beq.n	8004050 <RI_GetPtrReg+0xd8>
 8003fbc:	d929      	bls.n	8004012 <RI_GetPtrReg+0x9a>
 8003fbe:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 8003fc2:	d041      	beq.n	8004048 <RI_GetPtrReg+0xd0>
 8003fc4:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 8003fc8:	d119      	bne.n	8003ffe <RI_GetPtrReg+0x86>
 8003fca:	4a33      	ldr	r2, [pc, #204]	@ (8004098 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003fcc:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003fce:	2000      	movs	r0, #0
}
 8003fd0:	4770      	bx	lr
 8003fd2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003fd6:	d04d      	beq.n	8004074 <RI_GetPtrReg+0xfc>
 8003fd8:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003fdc:	d1d0      	bne.n	8003f80 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003fde:	4b2d      	ldr	r3, [pc, #180]	@ (8004094 <RI_GetPtrReg+0x11c>)
 8003fe0:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003fe2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003fe4:	3202      	adds	r2, #2
            break;
 8003fe6:	e7cd      	b.n	8003f84 <RI_GetPtrReg+0xc>
 8003fe8:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 8003fec:	d038      	beq.n	8004060 <RI_GetPtrReg+0xe8>
 8003fee:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 8003ff2:	d119      	bne.n	8004028 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003ff4:	4b27      	ldr	r3, [pc, #156]	@ (8004094 <RI_GetPtrReg+0x11c>)
 8003ff6:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003ff8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003ffa:	3212      	adds	r2, #18
            break;
 8003ffc:	e7c2      	b.n	8003f84 <RI_GetPtrReg+0xc>
 8003ffe:	4824      	ldr	r0, [pc, #144]	@ (8004090 <RI_GetPtrReg+0x118>)
 8004000:	4a26      	ldr	r2, [pc, #152]	@ (800409c <RI_GetPtrReg+0x124>)
 8004002:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 8004006:	bf16      	itet	ne
 8004008:	4602      	movne	r2, r0
 800400a:	2000      	moveq	r0, #0
 800400c:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800400e:	600a      	str	r2, [r1, #0]
}
 8004010:	4770      	bx	lr
 8004012:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 8004016:	d028      	beq.n	800406a <RI_GetPtrReg+0xf2>
 8004018:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 800401c:	d10c      	bne.n	8004038 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800401e:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <RI_GetPtrReg+0x11c>)
 8004020:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004022:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004024:	321c      	adds	r2, #28
            break;
 8004026:	e7ad      	b.n	8003f84 <RI_GetPtrReg+0xc>
 8004028:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 800402c:	d1a8      	bne.n	8003f80 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800402e:	4b19      	ldr	r3, [pc, #100]	@ (8004094 <RI_GetPtrReg+0x11c>)
 8004030:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004032:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8004034:	320e      	adds	r2, #14
            break;
 8004036:	e7a5      	b.n	8003f84 <RI_GetPtrReg+0xc>
 8004038:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 800403c:	d1a0      	bne.n	8003f80 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <RI_GetPtrReg+0x11c>)
 8004040:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004042:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8004044:	3218      	adds	r2, #24
            break;
 8004046:	e79d      	b.n	8003f84 <RI_GetPtrReg+0xc>
 8004048:	4a15      	ldr	r2, [pc, #84]	@ (80040a0 <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800404a:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800404c:	2000      	movs	r0, #0
}
 800404e:	4770      	bx	lr
 8004050:	4a14      	ldr	r2, [pc, #80]	@ (80040a4 <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 8004052:	2000      	movs	r0, #0
 8004054:	e796      	b.n	8003f84 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <RI_GetPtrReg+0x11c>)
 8004058:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800405a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 800405c:	3204      	adds	r2, #4
            break;
 800405e:	e791      	b.n	8003f84 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004060:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <RI_GetPtrReg+0x11c>)
 8004062:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004064:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004066:	3210      	adds	r2, #16
            break;
 8004068:	e78c      	b.n	8003f84 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800406a:	4b0a      	ldr	r3, [pc, #40]	@ (8004094 <RI_GetPtrReg+0x11c>)
 800406c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800406e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8004070:	321a      	adds	r2, #26
            break;
 8004072:	e787      	b.n	8003f84 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004074:	4b07      	ldr	r3, [pc, #28]	@ (8004094 <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 8004076:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004078:	685a      	ldr	r2, [r3, #4]
             break;
 800407a:	e783      	b.n	8003f84 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <RI_GetPtrReg+0x11c>)
 800407e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004080:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8004082:	3216      	adds	r2, #22
            break;
 8004084:	e77e      	b.n	8003f84 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8004086:	4b03      	ldr	r3, [pc, #12]	@ (8004094 <RI_GetPtrReg+0x11c>)
 8004088:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800408a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 800408c:	320c      	adds	r2, #12
            break;
 800408e:	e779      	b.n	8003f84 <RI_GetPtrReg+0xc>
 8004090:	20001ce4 	.word	0x20001ce4
 8004094:	20000968 	.word	0x20000968
 8004098:	200001ba 	.word	0x200001ba
 800409c:	20000154 	.word	0x20000154
 80040a0:	200001b8 	.word	0x200001b8
 80040a4:	2000014c 	.word	0x2000014c

080040a8 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t *regConv)
{
 80040a8:	b470      	push	{r4, r5, r6}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80040aa:	4e78      	ldr	r6, [pc, #480]	@ (800428c <RCM_RegisterRegConv+0x1e4>)
 80040ac:	6834      	ldr	r4, [r6, #0]
{
 80040ae:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80040b0:	2c00      	cmp	r4, #0
 80040b2:	d034      	beq.n	800411e <RCM_RegisterRegConv+0x76>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80040b4:	7902      	ldrb	r2, [r0, #4]
 80040b6:	7923      	ldrb	r3, [r4, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d01e      	beq.n	80040fa <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80040bc:	6875      	ldr	r5, [r6, #4]
 80040be:	2d00      	cmp	r5, #0
 80040c0:	f000 80c1 	beq.w	8004246 <RCM_RegisterRegConv+0x19e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80040c4:	792b      	ldrb	r3, [r5, #4]
 80040c6:	4293      	cmp	r3, r2
  uint8_t handle = 255U;
 80040c8:	f04f 00ff 	mov.w	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80040cc:	d030      	beq.n	8004130 <RCM_RegisterRegConv+0x88>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80040ce:	68b4      	ldr	r4, [r6, #8]
 80040d0:	2c00      	cmp	r4, #0
 80040d2:	f000 809e 	beq.w	8004212 <RCM_RegisterRegConv+0x16a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80040d6:	7923      	ldrb	r3, [r4, #4]
 80040d8:	4293      	cmp	r3, r2
 80040da:	d02f      	beq.n	800413c <RCM_RegisterRegConv+0x94>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80040dc:	68f4      	ldr	r4, [r6, #12]
 80040de:	2c00      	cmp	r4, #0
 80040e0:	f000 80a3 	beq.w	800422a <RCM_RegisterRegConv+0x182>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80040e4:	7923      	ldrb	r3, [r4, #4]
 80040e6:	4293      	cmp	r3, r2
 80040e8:	f000 80a6 	beq.w	8004238 <RCM_RegisterRegConv+0x190>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80040ec:	2803      	cmp	r0, #3
 80040ee:	bf88      	it	hi
 80040f0:	20ff      	movhi	r0, #255	@ 0xff
 80040f2:	f240 80b2 	bls.w	800425a <RCM_RegisterRegConv+0x1b2>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 80040f6:	bc70      	pop	{r4, r5, r6}
 80040f8:	4770      	bx	lr
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80040fa:	6803      	ldr	r3, [r0, #0]
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	4283      	cmp	r3, r0
 8004100:	d022      	beq.n	8004148 <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004102:	6875      	ldr	r5, [r6, #4]
 8004104:	2d00      	cmp	r5, #0
 8004106:	d1dd      	bne.n	80040c4 <RCM_RegisterRegConv+0x1c>
 8004108:	68b4      	ldr	r4, [r6, #8]
      i++;
 800410a:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800410c:	2c00      	cmp	r4, #0
 800410e:	d1e2      	bne.n	80040d6 <RCM_RegisterRegConv+0x2e>
 8004110:	68f4      	ldr	r4, [r6, #12]
 8004112:	b1e4      	cbz	r4, 800414e <RCM_RegisterRegConv+0xa6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004114:	7925      	ldrb	r5, [r4, #4]
 8004116:	790a      	ldrb	r2, [r1, #4]
 8004118:	4295      	cmp	r5, r2
 800411a:	d116      	bne.n	800414a <RCM_RegisterRegConv+0xa2>
 800411c:	e08d      	b.n	800423a <RCM_RegisterRegConv+0x192>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800411e:	6875      	ldr	r5, [r6, #4]
 8004120:	2d00      	cmp	r5, #0
 8004122:	f000 80a2 	beq.w	800426a <RCM_RegisterRegConv+0x1c2>
 8004126:	7902      	ldrb	r2, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004128:	792b      	ldrb	r3, [r5, #4]
 800412a:	4293      	cmp	r3, r2
    uint8_t i = 0;
 800412c:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800412e:	d1ce      	bne.n	80040ce <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004130:	682c      	ldr	r4, [r5, #0]
 8004132:	680b      	ldr	r3, [r1, #0]
 8004134:	42a3      	cmp	r3, r4
 8004136:	d1ca      	bne.n	80040ce <RCM_RegisterRegConv+0x26>
      i++;
 8004138:	2001      	movs	r0, #1
 800413a:	e006      	b.n	800414a <RCM_RegisterRegConv+0xa2>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800413c:	6824      	ldr	r4, [r4, #0]
 800413e:	680b      	ldr	r3, [r1, #0]
 8004140:	429c      	cmp	r4, r3
 8004142:	d1cb      	bne.n	80040dc <RCM_RegisterRegConv+0x34>
      i++;
 8004144:	2002      	movs	r0, #2
 8004146:	e000      	b.n	800414a <RCM_RegisterRegConv+0xa2>
    uint8_t i = 0;
 8004148:	2000      	movs	r0, #0
    while (i < RCM_MAX_CONV)
 800414a:	f04f 0400 	mov.w	r4, #0
 800414e:	f360 0407 	bfi	r4, r0, #0, #8
 8004152:	f360 240f 	bfi	r4, r0, #8, #8
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8004156:	4d4e      	ldr	r5, [pc, #312]	@ (8004290 <RCM_RegisterRegConv+0x1e8>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004158:	689a      	ldr	r2, [r3, #8]
      RCM_handle_array [handle] = regConv;
 800415a:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800415e:	2600      	movs	r6, #0
 8004160:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004164:	07d6      	lsls	r6, r2, #31
 8004166:	d422      	bmi.n	80041ae <RCM_RegisterRegConv+0x106>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	f022 0204 	bic.w	r2, r2, #4
 800416e:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004170:	2204      	movs	r2, #4
 8004172:	601a      	str	r2, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	f022 0220 	bic.w	r2, r2, #32
 800417a:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800417c:	2220      	movs	r2, #32
 800417e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8004186:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800418a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800418e:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	2a00      	cmp	r2, #0
 8004194:	dbfc      	blt.n	8004190 <RCM_RegisterRegConv+0xe8>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	07d5      	lsls	r5, r2, #31
 800419a:	d408      	bmi.n	80041ae <RCM_RegisterRegConv+0x106>
  MODIFY_REG(ADCx->CR,
 800419c:	4d3d      	ldr	r5, [pc, #244]	@ (8004294 <RCM_RegisterRegConv+0x1ec>)
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	402a      	ands	r2, r5
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	07d2      	lsls	r2, r2, #31
 80041ac:	d5f7      	bpl.n	800419e <RCM_RegisterRegConv+0xf6>
      RCM_NoInj_array[handle].enable = false;
 80041ae:	4d3a      	ldr	r5, [pc, #232]	@ (8004298 <RCM_RegisterRegConv+0x1f0>)
 80041b0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80041b4:	0052      	lsls	r2, r2, #1
      RCM_NoInj_array[handle].prev = handle;
 80041b6:	1d2e      	adds	r6, r5, #4
 80041b8:	52b4      	strh	r4, [r6, r2]
      RCM_NoInj_array[handle].enable = false;
 80041ba:	2400      	movs	r4, #0
 80041bc:	54ac      	strb	r4, [r5, r2]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80041be:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80041c0:	f024 040f 	bic.w	r4, r4, #15
 80041c4:	631c      	str	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80041c6:	f891 c004 	ldrb.w	ip, [r1, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	fa02 f20c 	lsl.w	r2, r2, ip
 80041d0:	f1bc 0f09 	cmp.w	ip, #9
 80041d4:	ea42 628c 	orr.w	r2, r2, ip, lsl #26
 80041d8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80041dc:	d813      	bhi.n	8004206 <RCM_RegisterRegConv+0x15e>
 80041de:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041e2:	0dd4      	lsrs	r4, r2, #23
 80041e4:	f004 0404 	and.w	r4, r4, #4
 80041e8:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80041ea:	688d      	ldr	r5, [r1, #8]
 80041ec:	5919      	ldr	r1, [r3, r4]
 80041ee:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80041f2:	2607      	movs	r6, #7
 80041f4:	4095      	lsls	r5, r2
 80041f6:	fa06 f202 	lsl.w	r2, r6, r2
 80041fa:	ea21 0202 	bic.w	r2, r1, r2
 80041fe:	432a      	orrs	r2, r5
 8004200:	511a      	str	r2, [r3, r4]
}
 8004202:	bc70      	pop	{r4, r5, r6}
 8004204:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004206:	3c1e      	subs	r4, #30
 8004208:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 800420c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004210:	e7e7      	b.n	80041e2 <RCM_RegisterRegConv+0x13a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004212:	2804      	cmp	r0, #4
 8004214:	d92e      	bls.n	8004274 <RCM_RegisterRegConv+0x1cc>
 8004216:	68f0      	ldr	r0, [r6, #12]
 8004218:	b370      	cbz	r0, 8004278 <RCM_RegisterRegConv+0x1d0>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800421a:	7903      	ldrb	r3, [r0, #4]
 800421c:	429a      	cmp	r2, r3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800421e:	680b      	ldr	r3, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004220:	d02f      	beq.n	8004282 <RCM_RegisterRegConv+0x1da>
      i++;
 8004222:	2002      	movs	r0, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004224:	f240 2402 	movw	r4, #514	@ 0x202
 8004228:	e795      	b.n	8004156 <RCM_RegisterRegConv+0xae>
 800422a:	2804      	cmp	r0, #4
 800422c:	d917      	bls.n	800425e <RCM_RegisterRegConv+0x1b6>
 800422e:	680b      	ldr	r3, [r1, #0]
 8004230:	2003      	movs	r0, #3
 8004232:	f240 3403 	movw	r4, #771	@ 0x303
 8004236:	e78e      	b.n	8004156 <RCM_RegisterRegConv+0xae>
 8004238:	680b      	ldr	r3, [r1, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	f47f af55 	bne.w	80040ec <RCM_RegisterRegConv+0x44>
      i++;
 8004242:	2003      	movs	r0, #3
 8004244:	e781      	b.n	800414a <RCM_RegisterRegConv+0xa2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004246:	68b4      	ldr	r4, [r6, #8]
      i++;
 8004248:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800424a:	2c00      	cmp	r4, #0
 800424c:	f47f af43 	bne.w	80040d6 <RCM_RegisterRegConv+0x2e>
 8004250:	68f4      	ldr	r4, [r6, #12]
 8004252:	b124      	cbz	r4, 800425e <RCM_RegisterRegConv+0x1b6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004254:	7923      	ldrb	r3, [r4, #4]
 8004256:	4293      	cmp	r3, r2
 8004258:	d0ee      	beq.n	8004238 <RCM_RegisterRegConv+0x190>
 800425a:	f04f 0400 	mov.w	r4, #0
 800425e:	f360 0407 	bfi	r4, r0, #0, #8
 8004262:	680b      	ldr	r3, [r1, #0]
 8004264:	f360 240f 	bfi	r4, r0, #8, #8
 8004268:	e775      	b.n	8004156 <RCM_RegisterRegConv+0xae>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800426a:	68b4      	ldr	r4, [r6, #8]
 800426c:	b134      	cbz	r4, 800427c <RCM_RegisterRegConv+0x1d4>
 800426e:	7902      	ldrb	r2, [r0, #4]
    uint8_t i = 0;
 8004270:	4628      	mov	r0, r5
 8004272:	e730      	b.n	80040d6 <RCM_RegisterRegConv+0x2e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004274:	4620      	mov	r0, r4
 8004276:	e7eb      	b.n	8004250 <RCM_RegisterRegConv+0x1a8>
 8004278:	680b      	ldr	r3, [r1, #0]
 800427a:	e7d2      	b.n	8004222 <RCM_RegisterRegConv+0x17a>
 800427c:	6803      	ldr	r3, [r0, #0]
    uint8_t i = 0;
 800427e:	4620      	mov	r0, r4
 8004280:	e746      	b.n	8004110 <RCM_RegisterRegConv+0x68>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004282:	6802      	ldr	r2, [r0, #0]
 8004284:	4293      	cmp	r3, r2
 8004286:	d0dc      	beq.n	8004242 <RCM_RegisterRegConv+0x19a>
 8004288:	e7cb      	b.n	8004222 <RCM_RegisterRegConv+0x17a>
 800428a:	bf00      	nop
 800428c:	20001d24 	.word	0x20001d24
 8004290:	20001d04 	.word	0x20001d04
 8004294:	7fffffc0 	.word	0x7fffffc0
 8004298:	20001cec 	.word	0x20001cec

0800429c <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 800429c:	4b5d      	ldr	r3, [pc, #372]	@ (8004414 <RCM_ExecRegularConv+0x178>)
 800429e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 80042a2:	b510      	push	{r4, lr}
  if (false == RCM_NoInj_array [handle].enable)
 80042a4:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 80042a8:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80042ac:	2900      	cmp	r1, #0
 80042ae:	d139      	bne.n	8004324 <RCM_ExecRegularConv+0x88>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	b992      	cbnz	r2, 80042da <RCM_ExecRegularConv+0x3e>
  uint8_t LastEnable = RCM_MAX_CONV;
 80042b4:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 80042b6:	799a      	ldrb	r2, [r3, #6]
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	d173      	bne.n	80043a4 <RCM_ExecRegularConv+0x108>
 80042bc:	7b1a      	ldrb	r2, [r3, #12]
 80042be:	2a00      	cmp	r2, #0
 80042c0:	d175      	bne.n	80043ae <RCM_ExecRegularConv+0x112>
 80042c2:	7c9a      	ldrb	r2, [r3, #18]
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	f000 8098 	beq.w	80043fa <RCM_ExecRegularConv+0x15e>
      {
        if (RCM_NoInj_array[i].next > handle)
 80042ca:	7dda      	ldrb	r2, [r3, #23]
 80042cc:	4282      	cmp	r2, r0
 80042ce:	f240 809e 	bls.w	800440e <RCM_ExecRegularConv+0x172>
 80042d2:	f04f 0e03 	mov.w	lr, #3
      if (true == RCM_NoInj_array [i].enable)
 80042d6:	4671      	mov	r1, lr
 80042d8:	e003      	b.n	80042e2 <RCM_ExecRegularConv+0x46>
        if (RCM_NoInj_array[i].next > handle)
 80042da:	795a      	ldrb	r2, [r3, #5]
 80042dc:	4290      	cmp	r0, r2
 80042de:	d2ea      	bcs.n	80042b6 <RCM_ExecRegularConv+0x1a>
  uint8_t i=0;
 80042e0:	468e      	mov	lr, r1
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 80042e2:	eb0c 0400 	add.w	r4, ip, r0
 80042e6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 80042ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 80042ee:	7162      	strb	r2, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 80042f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
          RCM_NoInj_array[handle].prev = i;
 80042f4:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 80042f8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80042fc:	4c46      	ldr	r4, [pc, #280]	@ (8004418 <RCM_ExecRegularConv+0x17c>)
          RCM_NoInj_array[formerNext].prev = handle;
 80042fe:	7110      	strb	r0, [r2, #4]
          RCM_NoInj_array[i].next = handle;
 8004300:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004304:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8004306:	7148      	strb	r0, [r1, #5]
    RCM_NoInj_array[handle].enable = true;
 8004308:	eb0c 0100 	add.w	r1, ip, r0
 800430c:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004310:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8004314:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004318:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800431c:	7852      	ldrb	r2, [r2, #1]
 800431e:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8004320:	bf18      	it	ne
 8004322:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8004324:	4a3d      	ldr	r2, [pc, #244]	@ (800441c <RCM_ExecRegularConv+0x180>)
 8004326:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 800432a:	2a00      	cmp	r2, #0
 800432c:	d135      	bne.n	800439a <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800432e:	4a3c      	ldr	r2, [pc, #240]	@ (8004420 <RCM_ExecRegularConv+0x184>)
 8004330:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004334:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004336:	6811      	ldr	r1, [r2, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004338:	2201      	movs	r2, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800433a:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800433c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8004340:	fa02 f204 	lsl.w	r2, r2, r4
 8004344:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8004348:	bf84      	itt	hi
 800434a:	f1ae 0e1e 	subhi.w	lr, lr, #30
 800434e:	ea42 520e 	orrhi.w	r2, r2, lr, lsl #20
  MODIFY_REG(*preg,
 8004352:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004354:	bf94      	ite	ls
 8004356:	ea42 520e 	orrls.w	r2, r2, lr, lsl #20
 800435a:	f042 7200 	orrhi.w	r2, r2, #33554432	@ 0x2000000
 800435e:	0d12      	lsrs	r2, r2, #20
 8004360:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 8004364:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8004368:	4322      	orrs	r2, r4
 800436a:	630a      	str	r2, [r1, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800436c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 800436e:	688a      	ldr	r2, [r1, #8]
 8004370:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004374:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004378:	f042 0204 	orr.w	r2, r2, #4
 800437c:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800437e:	680a      	ldr	r2, [r1, #0]
 8004380:	0752      	lsls	r2, r2, #29
 8004382:	d5fc      	bpl.n	800437e <RCM_ExecRegularConv+0xe2>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8004384:	eb0c 0200 	add.w	r2, ip, r0
 8004388:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800438c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800438e:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8004390:	4921      	ldr	r1, [pc, #132]	@ (8004418 <RCM_ExecRegularConv+0x17c>)
 8004392:	7954      	ldrb	r4, [r2, #5]
 8004394:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array[handle].status = valid;
 8004396:	2102      	movs	r1, #2
 8004398:	7051      	strb	r1, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 800439a:	4484      	add	ip, r0
 800439c:	eb03 034c 	add.w	r3, r3, ip, lsl #1
  return retVal;
}
 80043a0:	8858      	ldrh	r0, [r3, #2]
 80043a2:	bd10      	pop	{r4, pc}
        if (RCM_NoInj_array[i].next > handle)
 80043a4:	7ada      	ldrb	r2, [r3, #11]
 80043a6:	4290      	cmp	r0, r2
 80043a8:	d31d      	bcc.n	80043e6 <RCM_ExecRegularConv+0x14a>
      if (true == RCM_NoInj_array [i].enable)
 80043aa:	7b1a      	ldrb	r2, [r3, #12]
 80043ac:	b1fa      	cbz	r2, 80043ee <RCM_ExecRegularConv+0x152>
        if (RCM_NoInj_array[i].next > handle)
 80043ae:	7c5a      	ldrb	r2, [r3, #17]
 80043b0:	4282      	cmp	r2, r0
 80043b2:	d828      	bhi.n	8004406 <RCM_ExecRegularConv+0x16a>
      if (true == RCM_NoInj_array [i].enable)
 80043b4:	7c9a      	ldrb	r2, [r3, #18]
 80043b6:	2a00      	cmp	r2, #0
 80043b8:	d187      	bne.n	80042ca <RCM_ExecRegularConv+0x2e>
 80043ba:	2202      	movs	r2, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 80043bc:	4611      	mov	r1, r2
 80043be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 80043c2:	eb0c 0400 	add.w	r4, ip, r0
 80043c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 80043ca:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 80043ce:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 80043d0:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 80043d2:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 80043d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043d8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80043dc:	4c0e      	ldr	r4, [pc, #56]	@ (8004418 <RCM_ExecRegularConv+0x17c>)
         RCM_NoInj_array[formerNext].prev = handle;
 80043de:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 80043e0:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80043e2:	7822      	ldrb	r2, [r4, #0]
 80043e4:	e790      	b.n	8004308 <RCM_ExecRegularConv+0x6c>
        if (RCM_NoInj_array[i].next > handle)
 80043e6:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 80043ea:	4671      	mov	r1, lr
 80043ec:	e779      	b.n	80042e2 <RCM_ExecRegularConv+0x46>
 80043ee:	7c9a      	ldrb	r2, [r3, #18]
 80043f0:	2a00      	cmp	r2, #0
 80043f2:	f47f af6a 	bne.w	80042ca <RCM_ExecRegularConv+0x2e>
 80043f6:	2201      	movs	r2, #1
 80043f8:	e7e0      	b.n	80043bc <RCM_ExecRegularConv+0x120>
       if (LastEnable != RCM_MAX_CONV )
 80043fa:	2900      	cmp	r1, #0
 80043fc:	d0de      	beq.n	80043bc <RCM_ExecRegularConv+0x120>
         RCM_currentHandle = handle;
 80043fe:	4c06      	ldr	r4, [pc, #24]	@ (8004418 <RCM_ExecRegularConv+0x17c>)
 8004400:	4602      	mov	r2, r0
 8004402:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 8004404:	e780      	b.n	8004308 <RCM_ExecRegularConv+0x6c>
        if (RCM_NoInj_array[i].next > handle)
 8004406:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 800440a:	4671      	mov	r1, lr
 800440c:	e769      	b.n	80042e2 <RCM_ExecRegularConv+0x46>
 800440e:	2103      	movs	r1, #3
 8004410:	460a      	mov	r2, r1
 8004412:	e7d4      	b.n	80043be <RCM_ExecRegularConv+0x122>
 8004414:	20001cec 	.word	0x20001cec
 8004418:	20001cea 	.word	0x20001cea
 800441c:	200002a8 	.word	0x200002a8
 8004420:	20001d24 	.word	0x20001d24

08004424 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8004424:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004426:	4c12      	ldr	r4, [pc, #72]	@ (8004470 <RCM_ExecUserConv+0x4c>)
 8004428:	7823      	ldrb	r3, [r4, #0]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d000      	beq.n	8004430 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 800442e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004430:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <RCM_ExecUserConv+0x50>)
 8004432:	781d      	ldrb	r5, [r3, #0]
 8004434:	4628      	mov	r0, r5
 8004436:	f7ff ff31 	bl	800429c <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800443a:	4b0f      	ldr	r3, [pc, #60]	@ (8004478 <RCM_ExecUserConv+0x54>)
 800443c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8004440:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004444:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004446:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004448:	8010      	strh	r0, [r2, #0]
 800444a:	4601      	mov	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800444c:	b10b      	cbz	r3, 8004452 <RCM_ExecUserConv+0x2e>
      RCM_UserConvState = RCM_USERCONV_EOC;
 800444e:	2302      	movs	r3, #2
 8004450:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8004452:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <RCM_ExecUserConv+0x5c>)
 8004454:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
 8004458:	2e00      	cmp	r6, #0
 800445a:	d0e8      	beq.n	800442e <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800445c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004460:	4628      	mov	r0, r5
 8004462:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8004464:	2300      	movs	r3, #0
 8004466:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004468:	4633      	mov	r3, r6
}
 800446a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800446e:	4718      	bx	r3
 8004470:	20001ce7 	.word	0x20001ce7
 8004474:	20001ce6 	.word	0x20001ce6
 8004478:	20001cec 	.word	0x20001cec
 800447c:	20001ce8 	.word	0x20001ce8
 8004480:	20001d04 	.word	0x20001d04

08004484 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004484:	4b1e      	ldr	r3, [pc, #120]	@ (8004500 <RCM_ExecNextConv+0x7c>)
 8004486:	491f      	ldr	r1, [pc, #124]	@ (8004504 <RCM_ExecNextConv+0x80>)
 8004488:	781a      	ldrb	r2, [r3, #0]
 800448a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800448e:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8004492:	b3a3      	cbz	r3, 80044fe <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004494:	4b1c      	ldr	r3, [pc, #112]	@ (8004508 <RCM_ExecNextConv+0x84>)
{
 8004496:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800449c:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800449e:	2404      	movs	r4, #4
 80044a0:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80044a2:	f893 c004 	ldrb.w	ip, [r3, #4]
 80044a6:	2301      	movs	r3, #1
 80044a8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80044ac:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80044b0:	fa03 f30c 	lsl.w	r3, r3, ip
 80044b4:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 80044b8:	bf84      	itt	hi
 80044ba:	3c1e      	subhi	r4, #30
 80044bc:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 80044c0:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80044c4:	bf98      	it	ls
 80044c6:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80044ca:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80044cc:	bf88      	it	hi
 80044ce:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 80044d2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80044d4:	0d1b      	lsrs	r3, r3, #20
 80044d6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80044da:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 80044de:	4313      	orrs	r3, r2
 80044e0:	6303      	str	r3, [r0, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80044e2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 80044e4:	6883      	ldr	r3, [r0, #8]
 80044e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80044ea:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 80044ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044f2:	2401      	movs	r4, #1
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	6083      	str	r3, [r0, #8]
 80044fa:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 80044fc:	bd10      	pop	{r4, pc}
 80044fe:	4770      	bx	lr
 8004500:	20001cea 	.word	0x20001cea
 8004504:	20001cec 	.word	0x20001cec
 8004508:	20001d24 	.word	0x20001d24

0800450c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 800450c:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 800450e:	4811      	ldr	r0, [pc, #68]	@ (8004554 <RCM_ReadOngoingConv+0x48>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004510:	4a11      	ldr	r2, [pc, #68]	@ (8004558 <RCM_ReadOngoingConv+0x4c>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8004512:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004514:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004518:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8004520:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8004524:	4a0d      	ldr	r2, [pc, #52]	@ (800455c <RCM_ReadOngoingConv+0x50>)
 8004526:	d00e      	beq.n	8004546 <RCM_ReadOngoingConv+0x3a>
 8004528:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800452c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8004530:	f89c e001 	ldrb.w	lr, [ip, #1]
 8004534:	f01e 0ffd 	tst.w	lr, #253	@ 0xfd
 8004538:	d005      	beq.n	8004546 <RCM_ReadOngoingConv+0x3a>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800453a:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800453c:	f8ac 4002 	strh.w	r4, [ip, #2]
  else
  {
    /* Reading of ADC Converted Value */
    RCM_NoInj_array[RCM_currentHandle].value
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8004540:	2402      	movs	r4, #2
 8004542:	f88c 4001 	strb.w	r4, [ip, #1]
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8004546:	440b      	add	r3, r1
 8004548:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800454c:	7953      	ldrb	r3, [r2, #5]
 800454e:	7003      	strb	r3, [r0, #0]
}
 8004550:	bd10      	pop	{r4, pc}
 8004552:	bf00      	nop
 8004554:	20001cea 	.word	0x20001cea
 8004558:	20001d24 	.word	0x20001d24
 800455c:	20001cec 	.word	0x20001cec

08004560 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004560:	4b0e      	ldr	r3, [pc, #56]	@ (800459c <HAL_MspInit+0x3c>)
{
 8004562:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004564:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	661a      	str	r2, [r3, #96]	@ 0x60
 800456c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 800456e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004570:	f002 0201 	and.w	r2, r2, #1
 8004574:	9200      	str	r2, [sp, #0]
 8004576:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800457a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800457e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004586:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004588:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800458c:	f001 faae 	bl	8005aec <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004590:	b003      	add	sp, #12
 8004592:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8004596:	f001 bd37 	b.w	8006008 <HAL_PWREx_DisableUCPDDeadBattery>
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000

080045a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045a0:	b510      	push	{r4, lr}
 80045a2:	4604      	mov	r4, r0
 80045a4:	b09e      	sub	sp, #120	@ 0x78
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045a8:	2244      	movs	r2, #68	@ 0x44
 80045aa:	a80d      	add	r0, sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80045b0:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 80045b4:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045b6:	f006 f8db 	bl	800a770 <memset>
  if(hadc->Instance==ADC1)
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045c0:	d004      	beq.n	80045cc <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80045c2:	4a4d      	ldr	r2, [pc, #308]	@ (80046f8 <HAL_ADC_MspInit+0x158>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d047      	beq.n	8004658 <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80045c8:	b01e      	add	sp, #120	@ 0x78
 80045ca:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80045cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80045d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045d4:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80045d6:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80045d8:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045da:	f002 f8cd 	bl	8006778 <HAL_RCCEx_PeriphCLKConfig>
 80045de:	2800      	cmp	r0, #0
 80045e0:	f040 8084 	bne.w	80046ec <HAL_ADC_MspInit+0x14c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80045e4:	4a45      	ldr	r2, [pc, #276]	@ (80046fc <HAL_ADC_MspInit+0x15c>)
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80045ea:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80045ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80045ee:	d109      	bne.n	8004604 <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80045f0:	4b43      	ldr	r3, [pc, #268]	@ (8004700 <HAL_ADC_MspInit+0x160>)
 80045f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80045fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004604:	4b3e      	ldr	r3, [pc, #248]	@ (8004700 <HAL_ADC_MspInit+0x160>)
 8004606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800460e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004610:	f002 0201 	and.w	r2, r2, #1
 8004614:	9202      	str	r2, [sp, #8]
 8004616:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004618:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800461a:	f042 0202 	orr.w	r2, r2, #2
 800461e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8004628:	2203      	movs	r2, #3
 800462a:	2303      	movs	r3, #3
 800462c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004632:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004636:	a908      	add	r1, sp, #32
 8004638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 800463c:	f001 fb64 	bl	8005d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8004640:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004644:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004646:	482f      	ldr	r0, [pc, #188]	@ (8004704 <HAL_ADC_MspInit+0x164>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800464a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 800464c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004650:	f001 fb5a 	bl	8005d08 <HAL_GPIO_Init>
}
 8004654:	b01e      	add	sp, #120	@ 0x78
 8004656:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004658:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800465c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004660:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004662:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004664:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004666:	f002 f887 	bl	8006778 <HAL_RCCEx_PeriphCLKConfig>
 800466a:	2800      	cmp	r0, #0
 800466c:	d141      	bne.n	80046f2 <HAL_ADC_MspInit+0x152>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800466e:	4a23      	ldr	r2, [pc, #140]	@ (80046fc <HAL_ADC_MspInit+0x15c>)
 8004670:	6813      	ldr	r3, [r2, #0]
 8004672:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004674:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004676:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004678:	d109      	bne.n	800468e <HAL_ADC_MspInit+0xee>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800467a:	4b21      	ldr	r3, [pc, #132]	@ (8004700 <HAL_ADC_MspInit+0x160>)
 800467c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800467e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004682:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468e:	4b1c      	ldr	r3, [pc, #112]	@ (8004700 <HAL_ADC_MspInit+0x160>)
 8004690:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004698:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800469a:	f002 0201 	and.w	r2, r2, #1
 800469e:	9205      	str	r2, [sp, #20]
 80046a0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046a4:	f042 0204 	orr.w	r2, r2, #4
 80046a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80046aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046ac:	f002 0204 	and.w	r2, r2, #4
 80046b0:	9206      	str	r2, [sp, #24]
 80046b2:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046b6:	f042 0202 	orr.w	r2, r2, #2
 80046ba:	64da      	str	r2, [r3, #76]	@ 0x4c
 80046bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 80046c4:	2280      	movs	r2, #128	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 80046c8:	a908      	add	r1, sp, #32
 80046ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d6:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 80046d8:	f001 fb16 	bl	8005d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin;
 80046dc:	2210      	movs	r2, #16
 80046de:	2303      	movs	r3, #3
 80046e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 80046e4:	4808      	ldr	r0, [pc, #32]	@ (8004708 <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e6:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 80046e8:	a908      	add	r1, sp, #32
 80046ea:	e7a7      	b.n	800463c <HAL_ADC_MspInit+0x9c>
      Error_Handler();
 80046ec:	f7fd f94e 	bl	800198c <Error_Handler>
 80046f0:	e778      	b.n	80045e4 <HAL_ADC_MspInit+0x44>
      Error_Handler();
 80046f2:	f7fd f94b 	bl	800198c <Error_Handler>
 80046f6:	e7ba      	b.n	800466e <HAL_ADC_MspInit+0xce>
 80046f8:	50000100 	.word	0x50000100
 80046fc:	20001d34 	.word	0x20001d34
 8004700:	40021000 	.word	0x40021000
 8004704:	48000400 	.word	0x48000400
 8004708:	48000800 	.word	0x48000800

0800470c <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 800470c:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <HAL_CORDIC_MspInit+0x2c>)
 800470e:	6802      	ldr	r2, [r0, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d000      	beq.n	8004716 <HAL_CORDIC_MspInit+0xa>
 8004714:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004716:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 800471a:	f042 0208 	orr.w	r2, r2, #8
 800471e:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
 8004722:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
{
 8004726:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	9301      	str	r3, [sp, #4]
 8004730:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004732:	b002      	add	sp, #8
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40020c00 	.word	0x40020c00
 800473c:	00000000 	.word	0x00000000

08004740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004740:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 8004742:	4a1b      	ldr	r2, [pc, #108]	@ (80047b0 <HAL_SPI_MspInit+0x70>)
 8004744:	6801      	ldr	r1, [r0, #0]
{
 8004746:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004748:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 800474a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004750:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004754:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI3)
 8004756:	d002      	beq.n	800475e <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004758:	b009      	add	sp, #36	@ 0x24
 800475a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 800475e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004762:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004766:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80047a8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800476a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800476c:	4811      	ldr	r0, [pc, #68]	@ (80047b4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800476e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004772:	659a      	str	r2, [r3, #88]	@ 0x58
 8004774:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004776:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800477a:	9200      	str	r2, [sp, #0]
 800477c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800477e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004780:	f042 0204 	orr.w	r2, r2, #4
 8004784:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004790:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004792:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004796:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004798:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800479a:	f001 fab5 	bl	8005d08 <HAL_GPIO_Init>
}
 800479e:	b009      	add	sp, #36	@ 0x24
 80047a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80047a4:	f3af 8000 	nop.w
 80047a8:	00001c00 	.word	0x00001c00
 80047ac:	00000002 	.word	0x00000002
 80047b0:	40003c00 	.word	0x40003c00
 80047b4:	48000800 	.word	0x48000800

080047b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047b8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80047ba:	6802      	ldr	r2, [r0, #0]
 80047bc:	492a      	ldr	r1, [pc, #168]	@ (8004868 <HAL_TIM_Base_MspInit+0xb0>)
{
 80047be:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80047c2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80047c8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80047cc:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 80047ce:	d020      	beq.n	8004812 <HAL_TIM_Base_MspInit+0x5a>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80047d0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80047d4:	d004      	beq.n	80047e0 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80047d6:	4b25      	ldr	r3, [pc, #148]	@ (800486c <HAL_TIM_Base_MspInit+0xb4>)
 80047d8:	429a      	cmp	r2, r3
 80047da:	d00d      	beq.n	80047f8 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80047dc:	b00a      	add	sp, #40	@ 0x28
 80047de:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047e0:	4b23      	ldr	r3, [pc, #140]	@ (8004870 <HAL_TIM_Base_MspInit+0xb8>)
 80047e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80047ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	9302      	str	r3, [sp, #8]
 80047f2:	9b02      	ldr	r3, [sp, #8]
}
 80047f4:	b00a      	add	sp, #40	@ 0x28
 80047f6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047f8:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 80047fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047fe:	f042 0202 	orr.w	r2, r2, #2
 8004802:	659a      	str	r2, [r3, #88]	@ 0x58
 8004804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	9303      	str	r3, [sp, #12]
 800480c:	9b03      	ldr	r3, [sp, #12]
}
 800480e:	b00a      	add	sp, #40	@ 0x28
 8004810:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004812:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004816:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800481a:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8004860 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM1_CLK_ENABLE();
 800481e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004824:	661a      	str	r2, [r3, #96]	@ 0x60
 8004826:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004828:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800482c:	9200      	str	r2, [sp, #0]
 800482e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004830:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004840:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8004842:	230c      	movs	r3, #12
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004844:	a904      	add	r1, sp, #16
 8004846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800484a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800484e:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004850:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8004852:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004854:	f001 fa58 	bl	8005d08 <HAL_GPIO_Init>
}
 8004858:	b00a      	add	sp, #40	@ 0x28
 800485a:	bd10      	pop	{r4, pc}
 800485c:	f3af 8000 	nop.w
 8004860:	00000800 	.word	0x00000800
 8004864:	00000012 	.word	0x00000012
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40000400 	.word	0x40000400
 8004870:	40021000 	.word	0x40021000
 8004874:	00000000 	.word	0x00000000

08004878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004878:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800487a:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <HAL_TIM_MspPostInit+0x70>)
 800487c:	6801      	ldr	r1, [r0, #0]
{
 800487e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004880:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8004882:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004884:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004888:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800488c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800488e:	d002      	beq.n	8004896 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004890:	b009      	add	sp, #36	@ 0x24
 8004892:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004896:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800489a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800489e:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80048d8 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80048aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80048ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048b0:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80048e0 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80048bc:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80048c2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80048c8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ca:	f001 fa1d 	bl	8005d08 <HAL_GPIO_Init>
}
 80048ce:	b009      	add	sp, #36	@ 0x24
 80048d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80048d4:	f3af 8000 	nop.w
 80048d8:	00000700 	.word	0x00000700
 80048dc:	00000002 	.word	0x00000002
 80048e0:	00000002 	.word	0x00000002
 80048e4:	00000002 	.word	0x00000002
 80048e8:	40012c00 	.word	0x40012c00

080048ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	4604      	mov	r4, r0
 80048f0:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048f4:	2244      	movs	r2, #68	@ 0x44
 80048f6:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80048fc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004900:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004902:	f005 ff35 	bl	800a770 <memset>
  if(huart->Instance==USART2)
 8004906:	4b31      	ldr	r3, [pc, #196]	@ (80049cc <HAL_UART_MspInit+0xe0>)
 8004908:	6822      	ldr	r2, [r4, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d001      	beq.n	8004912 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800490e:	b018      	add	sp, #96	@ 0x60
 8004910:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004912:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004914:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004916:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004918:	f001 ff2e 	bl	8006778 <HAL_RCCEx_PeriphCLKConfig>
 800491c:	2800      	cmp	r0, #0
 800491e:	d14c      	bne.n	80049ba <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004920:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <HAL_UART_MspInit+0xe4>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004922:	4e2c      	ldr	r6, [pc, #176]	@ (80049d4 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004924:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004926:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800492a:	659a      	str	r2, [r3, #88]	@ 0x58
 800492c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800492e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004932:	9200      	str	r2, [sp, #0]
 8004934:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800493e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004946:	220c      	movs	r2, #12
 8004948:	2302      	movs	r3, #2
 800494a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800494e:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004950:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004952:	2300      	movs	r3, #0
 8004954:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004958:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800495a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800495c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004960:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004962:	f001 f9d1 	bl	8005d08 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004966:	491c      	ldr	r1, [pc, #112]	@ (80049d8 <HAL_UART_MspInit+0xec>)
 8004968:	221a      	movs	r2, #26
 800496a:	2300      	movs	r3, #0
 800496c:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004970:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004972:	2280      	movs	r2, #128	@ 0x80
 8004974:	e9c6 3302 	strd	r3, r3, [r6, #8]
 8004978:	e9c6 2304 	strd	r2, r3, [r6, #16]
 800497c:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8004980:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004982:	f001 f92f 	bl	8005be4 <HAL_DMA_Init>
 8004986:	b9f0      	cbnz	r0, 80049c6 <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004988:	4d14      	ldr	r5, [pc, #80]	@ (80049dc <HAL_UART_MspInit+0xf0>)
 800498a:	4915      	ldr	r1, [pc, #84]	@ (80049e0 <HAL_UART_MspInit+0xf4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800498c:	67e6      	str	r6, [r4, #124]	@ 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800498e:	221b      	movs	r2, #27
 8004990:	2300      	movs	r3, #0
 8004992:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004996:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004998:	2110      	movs	r1, #16
 800499a:	2280      	movs	r2, #128	@ 0x80
 800499c:	e9c5 1302 	strd	r1, r3, [r5, #8]
 80049a0:	e9c5 3305 	strd	r3, r3, [r5, #20]
 80049a4:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80049a8:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80049aa:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80049ac:	f001 f91a 	bl	8005be4 <HAL_DMA_Init>
 80049b0:	b930      	cbnz	r0, 80049c0 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80049b2:	67a5      	str	r5, [r4, #120]	@ 0x78
 80049b4:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80049b6:	b018      	add	sp, #96	@ 0x60
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80049ba:	f7fc ffe7 	bl	800198c <Error_Handler>
 80049be:	e7af      	b.n	8004920 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80049c0:	f7fc ffe4 	bl	800198c <Error_Handler>
 80049c4:	e7f5      	b.n	80049b2 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80049c6:	f7fc ffe1 	bl	800198c <Error_Handler>
 80049ca:	e7dd      	b.n	8004988 <HAL_UART_MspInit+0x9c>
 80049cc:	40004400 	.word	0x40004400
 80049d0:	40021000 	.word	0x40021000
 80049d4:	20000630 	.word	0x20000630
 80049d8:	40020008 	.word	0x40020008
 80049dc:	200005d0 	.word	0x200005d0
 80049e0:	4002001c 	.word	0x4002001c

080049e4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049e4:	4801      	ldr	r0, [pc, #4]	@ (80049ec <TIM2_IRQHandler+0x8>)
 80049e6:	f002 be85 	b.w	80076f4 <HAL_TIM_IRQHandler>
 80049ea:	bf00      	nop
 80049ec:	2000076c 	.word	0x2000076c

080049f0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049f0:	4801      	ldr	r0, [pc, #4]	@ (80049f8 <TIM3_IRQHandler+0x8>)
 80049f2:	f002 be7f 	b.w	80076f4 <HAL_TIM_IRQHandler>
 80049f6:	bf00      	nop
 80049f8:	20000720 	.word	0x20000720

080049fc <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80049fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a00:	2240      	movs	r2, #64	@ 0x40
 8004a02:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  (void)TSK_HighFrequencyTask();
 8004a04:	f7fd bed8 	b.w	80027b8 <TSK_HighFrequencyTask>

08004a08 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004a08:	4b03      	ldr	r3, [pc, #12]	@ (8004a18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    ( void )R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004a0a:	4804      	ldr	r0, [pc, #16]	@ (8004a1c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004a0c:	f06f 0201 	mvn.w	r2, #1
 8004a10:	611a      	str	r2, [r3, #16]
 8004a12:	f004 bdf3 	b.w	80095fc <R3_2_TIMx_UP_IRQHandler>
 8004a16:	bf00      	nop
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	200002a8 	.word	0x200002a8

08004a20 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8004a20:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004a22:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	0611      	lsls	r1, r2, #24
 8004a28:	d505      	bpl.n	8004a36 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004a2a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    ( void )R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8004a2e:	480a      	ldr	r0, [pc, #40]	@ (8004a58 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004a30:	611a      	str	r2, [r3, #16]
 8004a32:	f004 fe4b 	bl	80096cc <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004a36:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	05d2      	lsls	r2, r2, #23
 8004a3c:	d505      	bpl.n	8004a4a <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8004a3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    ( void )R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8004a42:	4805      	ldr	r0, [pc, #20]	@ (8004a58 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004a44:	611a      	str	r2, [r3, #16]
 8004a46:	f004 fe1d 	bl	8009684 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8004a4e:	f7fd be6d 	b.w	800272c <MC_Scheduler>
 8004a52:	bf00      	nop
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	200002a8 	.word	0x200002a8

08004a5c <DMA1_Channel1_IRQHandler>:
  }
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 8004a5c:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <DMA1_Channel1_IRQHandler+0x14>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	0792      	lsls	r2, r2, #30
 8004a62:	d400      	bmi.n	8004a66 <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 8004a64:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004a66:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8004a68:	4802      	ldr	r0, [pc, #8]	@ (8004a74 <DMA1_Channel1_IRQHandler+0x18>)
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	f7fc bbdc 	b.w	8001228 <ASPEP_HWDataReceivedIT>
 8004a70:	40020000 	.word	0x40020000
 8004a74:	200004c8 	.word	0x200004c8

08004a78 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004a78:	4b41      	ldr	r3, [pc, #260]	@ (8004b80 <USART2_IRQHandler+0x108>)
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8004a7e:	b510      	push	{r4, lr}
 8004a80:	d509      	bpl.n	8004a96 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004a82:	4940      	ldr	r1, [pc, #256]	@ (8004b84 <USART2_IRQHandler+0x10c>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8004a84:	4840      	ldr	r0, [pc, #256]	@ (8004b88 <USART2_IRQHandler+0x110>)
 8004a86:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004a88:	2440      	movs	r4, #64	@ 0x40
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	61ca      	str	r2, [r1, #28]
 8004a90:	621c      	str	r4, [r3, #32]
 8004a92:	f7fc fa1d 	bl	8000ed0 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004a96:	4b3a      	ldr	r3, [pc, #232]	@ (8004b80 <USART2_IRQHandler+0x108>)
 8004a98:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004a9a:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004a9c:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004a9e:	689c      	ldr	r4, [r3, #8]
 8004aa0:	07e4      	lsls	r4, r4, #31
 8004aa2:	d526      	bpl.n	8004af2 <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004aa4:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004aa8:	f000 0008 	and.w	r0, r0, #8
  test2 = LL_USART_IsActiveFlag_FE (USARTA);
  test3 = LL_USART_IsActiveFlag_NE (USARTA);
  mask = LL_USART_IsEnabledIT_ERROR (USARTA);

  test1 = ( ( test1 | test2 | test3 ) & mask );
  if ( 0U == test1 )
 8004aac:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004aae:	f001 0104 	and.w	r1, r1, #4
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	d01d      	beq.n	8004af2 <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8004ab6:	220e      	movs	r2, #14
 8004ab8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004abe:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004ace:	e840 3100 	strex	r1, r3, [r0]
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	d1f3      	bne.n	8004abe <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004ada:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004ade:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004ae2:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004aea:	e840 3100 	strex	r1, r3, [r0]
 8004aee:	2900      	cmp	r1, #0
 8004af0:	d1f3      	bne.n	8004ada <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004af2:	4b23      	ldr	r3, [pc, #140]	@ (8004b80 <USART2_IRQHandler+0x108>)
 8004af4:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004af6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004af8:	06d2      	lsls	r2, r2, #27
 8004afa:	d540      	bpl.n	8004b7e <USART2_IRQHandler+0x106>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004afc:	06db      	lsls	r3, r3, #27
 8004afe:	d53e      	bpl.n	8004b7e <USART2_IRQHandler+0x106>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004b04:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004b08:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004b0c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004b14:	e840 3100 	strex	r1, r3, [r0]
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	d1f3      	bne.n	8004b04 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004b20:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004b24:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004b28:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004b30:	e840 3100 	strex	r1, r3, [r0]
 8004b34:	2900      	cmp	r1, #0
 8004b36:	d1f3      	bne.n	8004b20 <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004b3c:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004b40:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004b4c:	e840 3100 	strex	r1, r3, [r0]
 8004b50:	2900      	cmp	r1, #0
 8004b52:	d1f3      	bne.n	8004b3c <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004b54:	4b0a      	ldr	r3, [pc, #40]	@ (8004b80 <USART2_IRQHandler+0x108>)
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004b5c:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004b60:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004b6c:	e840 3100 	strex	r1, r3, [r0]
 8004b70:	2900      	cmp	r1, #0
 8004b72:	d1f3      	bne.n	8004b5c <USART2_IRQHandler+0xe4>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8004b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8004b78:	4803      	ldr	r0, [pc, #12]	@ (8004b88 <USART2_IRQHandler+0x110>)
 8004b7a:	f7fc bba3 	b.w	80012c4 <ASPEP_HWDMAReset>
}
 8004b7e:	bd10      	pop	{r4, pc}
 8004b80:	40004400 	.word	0x40004400
 8004b84:	40020000 	.word	0x40020000
 8004b88:	200004c8 	.word	0x200004c8

08004b8c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004b8c:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004b8e:	f7fe f84f 	bl	8002c30 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8004b92:	e7fe      	b.n	8004b92 <HardFault_Handler+0x6>

08004b94 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004b94:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004b96:	4c0a      	ldr	r4, [pc, #40]	@ (8004bc0 <SysTick_Handler+0x2c>)
 8004b98:	7823      	ldrb	r3, [r4, #0]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d006      	beq.n	8004bac <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004ba8:	f7fe b836 	b.w	8002c18 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8004bac:	f000 f8e2 	bl	8004d74 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004bb0:	f001 f814 	bl	8005bdc <HAL_SYSTICK_IRQHandler>
 8004bb4:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8004bb6:	7023      	strb	r3, [r4, #0]
}
 8004bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004bbc:	f7fe b82c 	b.w	8002c18 <MC_RunMotorControlTasks>
 8004bc0:	20000550 	.word	0x20000550

08004bc4 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004bc4:	4b04      	ldr	r3, [pc, #16]	@ (8004bd8 <EXTI15_10_IRQHandler+0x14>)
 8004bc6:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if (  0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8004bc8:	0492      	lsls	r2, r2, #18
 8004bca:	d400      	bmi.n	8004bce <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    ( void )UI_HandleStartStopButton_cb ();
  }

}
 8004bcc:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004bce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bd2:	615a      	str	r2, [r3, #20]
    ( void )UI_HandleStartStopButton_cb ();
 8004bd4:	f7fe b83c 	b.w	8002c50 <UI_HandleStartStopButton_cb>
 8004bd8:	40010400 	.word	0x40010400

08004bdc <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8004bdc:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004bde:	2340      	movs	r3, #64	@ 0x40
{
 8004be0:	b470      	push	{r4, r5, r6}
 8004be2:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	e842 3100 	strex	r1, r3, [r2]
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	d1f7      	bne.n	8004be4 <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004bf4:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	e851 3f00 	ldrex	r3, [r1]
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	e841 3400 	strex	r4, r3, [r1]
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d1f7      	bne.n	8004bf8 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004c08:	6901      	ldr	r1, [r0, #16]
 8004c0a:	4e17      	ldr	r6, [pc, #92]	@ (8004c68 <UASPEP_INIT+0x8c>)
 8004c0c:	6883      	ldr	r3, [r0, #8]
 8004c0e:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004c10:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004c12:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8004c14:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 8004c18:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004c1a:	68c3      	ldr	r3, [r0, #12]
 8004c1c:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004c1e:	2340      	movs	r3, #64	@ 0x40
 8004c20:	6213      	str	r3, [r2, #32]
 8004c22:	586b      	ldr	r3, [r5, r1]
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004c2a:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	e851 3f00 	ldrex	r3, [r1]
 8004c32:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	e841 3400 	strex	r4, r3, [r1]
 8004c3a:	2c00      	cmp	r4, #0
 8004c3c:	d1f7      	bne.n	8004c2e <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004c3e:	68c3      	ldr	r3, [r0, #12]
 8004c40:	5cf0      	ldrb	r0, [r6, r3]
 8004c42:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8004c44:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004c48:	2340      	movs	r3, #64	@ 0x40
 8004c4a:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004c4c:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004c50:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	e841 3200 	strex	r2, r3, [r1]
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	d1f7      	bne.n	8004c52 <UASPEP_INIT+0x76>
}
 8004c62:	bc70      	pop	{r4, r5, r6}
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	0800abdc 	.word	0x0800abdc

08004c6c <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8004c6c:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004c6e:	6903      	ldr	r3, [r0, #16]
 8004c70:	4d0b      	ldr	r5, [pc, #44]	@ (8004ca0 <UASPEP_SEND_PACKET+0x34>)
 8004c72:	6884      	ldr	r4, [r0, #8]
 8004c74:	5ceb      	ldrb	r3, [r5, r3]
 8004c76:	58e5      	ldr	r5, [r4, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8004c78:	07ed      	lsls	r5, r5, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004c7a:	eb04 0003 	add.w	r0, r4, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8004c7e:	d40b      	bmi.n	8004c98 <UASPEP_SEND_PACKET+0x2c>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8004c80:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004c82:	6841      	ldr	r1, [r0, #4]
 8004c84:	0c09      	lsrs	r1, r1, #16
 8004c86:	0409      	lsls	r1, r1, #16
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	6042      	str	r2, [r0, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004c8c:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8004c8e:	2001      	movs	r0, #1
 8004c90:	4302      	orrs	r2, r0
 8004c92:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return result;
}
 8004c94:	bc30      	pop	{r4, r5}
 8004c96:	4770      	bx	lr
    result = false;
 8004c98:	2000      	movs	r0, #0
}
 8004c9a:	bc30      	pop	{r4, r5}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	0800abdc 	.word	0x0800abdc

08004ca4 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8004ca4:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004ca6:	68c3      	ldr	r3, [r0, #12]
 8004ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8004cd8 <UASPEP_RECEIVE_BUFFER+0x34>)
 8004caa:	6844      	ldr	r4, [r0, #4]
 8004cac:	5ce8      	ldrb	r0, [r5, r3]
 8004cae:	5823      	ldr	r3, [r4, r0]
 8004cb0:	eb04 0c00 	add.w	ip, r4, r0
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8004cba:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004cbe:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004ccc:	5823      	ldr	r3, [r4, r0]
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	5023      	str	r3, [r4, r0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8004cd4:	bc30      	pop	{r4, r5}
 8004cd6:	4770      	bx	lr
 8004cd8:	0800abdc 	.word	0x0800abdc

08004cdc <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004cdc:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004cde:	2310      	movs	r3, #16
 8004ce0:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004ce6:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	e842 3100 	strex	r1, r3, [r2]
 8004cee:	2900      	cmp	r1, #0
 8004cf0:	d1f7      	bne.n	8004ce2 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8004cf2:	4770      	bx	lr

08004cf4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004cf4:	4a03      	ldr	r2, [pc, #12]	@ (8004d04 <SystemInit+0x10>)
 8004cf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004cfa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cfe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d02:	4770      	bx	lr
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d08:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d48 <HAL_InitTick+0x40>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	b90b      	cbnz	r3, 8004d14 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d10:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004d14:	490d      	ldr	r1, [pc, #52]	@ (8004d4c <HAL_InitTick+0x44>)
 8004d16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	6808      	ldr	r0, [r1, #0]
 8004d22:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d26:	f000 ff3d 	bl	8005ba4 <HAL_SYSTICK_Config>
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d1ef      	bne.n	8004d10 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d30:	2d0f      	cmp	r5, #15
 8004d32:	d8ed      	bhi.n	8004d10 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d34:	4602      	mov	r2, r0
 8004d36:	4629      	mov	r1, r5
 8004d38:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3c:	f000 fee8 	bl	8005b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d40:	4b03      	ldr	r3, [pc, #12]	@ (8004d50 <HAL_InitTick+0x48>)
 8004d42:	4620      	mov	r0, r4
 8004d44:	601d      	str	r5, [r3, #0]
}
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20000558 	.word	0x20000558
 8004d4c:	20000554 	.word	0x20000554
 8004d50:	2000055c 	.word	0x2000055c

08004d54 <HAL_Init>:
{
 8004d54:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d56:	2003      	movs	r0, #3
 8004d58:	f000 fec8 	bl	8005aec <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d5c:	2004      	movs	r0, #4
 8004d5e:	f7ff ffd3 	bl	8004d08 <HAL_InitTick>
 8004d62:	b110      	cbz	r0, 8004d6a <HAL_Init+0x16>
    status = HAL_ERROR;
 8004d64:	2401      	movs	r4, #1
}
 8004d66:	4620      	mov	r0, r4
 8004d68:	bd10      	pop	{r4, pc}
 8004d6a:	4604      	mov	r4, r0
    HAL_MspInit();
 8004d6c:	f7ff fbf8 	bl	8004560 <HAL_MspInit>
}
 8004d70:	4620      	mov	r0, r4
 8004d72:	bd10      	pop	{r4, pc}

08004d74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004d74:	4a03      	ldr	r2, [pc, #12]	@ (8004d84 <HAL_IncTick+0x10>)
 8004d76:	4904      	ldr	r1, [pc, #16]	@ (8004d88 <HAL_IncTick+0x14>)
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	6809      	ldr	r1, [r1, #0]
 8004d7c:	440b      	add	r3, r1
 8004d7e:	6013      	str	r3, [r2, #0]
}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20001d38 	.word	0x20001d38
 8004d88:	20000558 	.word	0x20000558

08004d8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004d8c:	4b01      	ldr	r3, [pc, #4]	@ (8004d94 <HAL_GetTick+0x8>)
 8004d8e:	6818      	ldr	r0, [r3, #0]
}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20001d38 	.word	0x20001d38

08004d98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d98:	b530      	push	{r4, r5, lr}
 8004d9a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004da0:	2800      	cmp	r0, #0
 8004da2:	f000 808c 	beq.w	8004ebe <HAL_ADC_Init+0x126>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004da6:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8004da8:	4604      	mov	r4, r0
 8004daa:	2d00      	cmp	r5, #0
 8004dac:	f000 808c 	beq.w	8004ec8 <HAL_ADC_Init+0x130>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004db0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004db2:	6893      	ldr	r3, [r2, #8]
 8004db4:	0098      	lsls	r0, r3, #2
 8004db6:	d505      	bpl.n	8004dc4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004db8:	6893      	ldr	r3, [r2, #8]
 8004dba:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004dbe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dc2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004dc4:	6893      	ldr	r3, [r2, #8]
 8004dc6:	00d9      	lsls	r1, r3, #3
 8004dc8:	d419      	bmi.n	8004dfe <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dca:	4b6e      	ldr	r3, [pc, #440]	@ (8004f84 <HAL_ADC_Init+0x1ec>)
 8004dcc:	486e      	ldr	r0, [pc, #440]	@ (8004f88 <HAL_ADC_Init+0x1f0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004dd0:	6891      	ldr	r1, [r2, #8]
 8004dd2:	099b      	lsrs	r3, r3, #6
 8004dd4:	fba0 0303 	umull	r0, r3, r0, r3
 8004dd8:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8004ddc:	099b      	lsrs	r3, r3, #6
 8004dde:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004de2:	3301      	adds	r3, #1
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004dea:	6091      	str	r1, [r2, #8]
 8004dec:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004dee:	9b01      	ldr	r3, [sp, #4]
 8004df0:	b12b      	cbz	r3, 8004dfe <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004df2:	9b01      	ldr	r3, [sp, #4]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004df8:	9b01      	ldr	r3, [sp, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f9      	bne.n	8004df2 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004dfe:	6893      	ldr	r3, [r2, #8]
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	d45f      	bmi.n	8004ec4 <HAL_ADC_Init+0x12c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e04:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e06:	f043 0310 	orr.w	r3, r3, #16
 8004e0a:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e0c:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e0e:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e10:	4303      	orrs	r3, r0
 8004e12:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e14:	6893      	ldr	r3, [r2, #8]
 8004e16:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e1a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e1c:	d14b      	bne.n	8004eb6 <HAL_ADC_Init+0x11e>
 8004e1e:	06dd      	lsls	r5, r3, #27
 8004e20:	d449      	bmi.n	8004eb6 <HAL_ADC_Init+0x11e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e22:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004e28:	f043 0302 	orr.w	r3, r3, #2
 8004e2c:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e2e:	6893      	ldr	r3, [r2, #8]
 8004e30:	07d9      	lsls	r1, r3, #31
 8004e32:	d409      	bmi.n	8004e48 <HAL_ADC_Init+0xb0>
 8004e34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f013 0f01 	tst.w	r3, #1
 8004e3e:	4b53      	ldr	r3, [pc, #332]	@ (8004f8c <HAL_ADC_Init+0x1f4>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	d101      	bne.n	8004e48 <HAL_ADC_Init+0xb0>
 8004e44:	07db      	lsls	r3, r3, #31
 8004e46:	d576      	bpl.n	8004f36 <HAL_ADC_Init+0x19e>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004e48:	68e5      	ldr	r5, [r4, #12]
 8004e4a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e4c:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                hadc->Init.DataAlign                                                   |
 8004e50:	432b      	orrs	r3, r5
 8004e52:	68a5      	ldr	r5, [r4, #8]
 8004e54:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e56:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e58:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8004e5a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e62:	d05b      	beq.n	8004f1c <HAL_ADC_Init+0x184>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e64:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004e66:	b121      	cbz	r1, 8004e72 <HAL_ADC_Init+0xda>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004e68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e6a:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004e6e:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e70:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004e72:	68d5      	ldr	r5, [r2, #12]
 8004e74:	4946      	ldr	r1, [pc, #280]	@ (8004f90 <HAL_ADC_Init+0x1f8>)
 8004e76:	4029      	ands	r1, r5
 8004e78:	4319      	orrs	r1, r3
 8004e7a:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e7c:	6913      	ldr	r3, [r2, #16]
 8004e7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e80:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e88:	6891      	ldr	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e8a:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e8c:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	430b      	orrs	r3, r1
 8004e96:	d01d      	beq.n	8004ed4 <HAL_ADC_Init+0x13c>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e98:	6963      	ldr	r3, [r4, #20]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d043      	beq.n	8004f26 <HAL_ADC_Init+0x18e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e9e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004ea0:	f023 030f 	bic.w	r3, r3, #15
 8004ea4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ea6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004ea8:	f023 0303 	bic.w	r3, r3, #3
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004eb2:	b003      	add	sp, #12
 8004eb4:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eb6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004eb8:	f043 0310 	orr.w	r3, r3, #16
 8004ebc:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8004ebe:	2001      	movs	r0, #1
}
 8004ec0:	b003      	add	sp, #12
 8004ec2:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	e7a5      	b.n	8004e14 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8004ec8:	f7ff fb6a 	bl	80045a0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004ecc:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004ece:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8004ed2:	e76d      	b.n	8004db0 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ed4:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ed6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eda:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004edc:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ee0:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ee2:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ee6:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004eea:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8004eec:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004eee:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ef0:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004ef2:	bb41      	cbnz	r1, 8004f46 <HAL_ADC_Init+0x1ae>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004efa:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004efe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f02:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f06:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004f0a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d026      	beq.n	8004f60 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f12:	6913      	ldr	r3, [r2, #16]
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	6113      	str	r3, [r2, #16]
 8004f1a:	e7bd      	b.n	8004e98 <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f1c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004f1e:	3901      	subs	r1, #1
 8004f20:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004f24:	e79e      	b.n	8004e64 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f26:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004f28:	6a23      	ldr	r3, [r4, #32]
 8004f2a:	f021 010f 	bic.w	r1, r1, #15
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f34:	e7b7      	b.n	8004ea6 <HAL_ADC_Init+0x10e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004f36:	4917      	ldr	r1, [pc, #92]	@ (8004f94 <HAL_ADC_Init+0x1fc>)
 8004f38:	6865      	ldr	r5, [r4, #4]
 8004f3a:	688b      	ldr	r3, [r1, #8]
 8004f3c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8004f40:	432b      	orrs	r3, r5
 8004f42:	608b      	str	r3, [r1, #8]
}
 8004f44:	e780      	b.n	8004e48 <HAL_ADC_Init+0xb0>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004f4c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004f50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004f5e:	e7d4      	b.n	8004f0a <HAL_ADC_Init+0x172>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f60:	6911      	ldr	r1, [r2, #16]
 8004f62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004f64:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8004f66:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8004f6a:	f021 0104 	bic.w	r1, r1, #4
 8004f6e:	432b      	orrs	r3, r5
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6113      	str	r3, [r2, #16]
 8004f80:	e78a      	b.n	8004e98 <HAL_ADC_Init+0x100>
 8004f82:	bf00      	nop
 8004f84:	20000554 	.word	0x20000554
 8004f88:	053e2d63 	.word	0x053e2d63
 8004f8c:	50000100 	.word	0x50000100
 8004f90:	fff04007 	.word	0xfff04007
 8004f94:	50000300 	.word	0x50000300

08004f98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f9c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004fa4:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004fa6:	f04f 0000 	mov.w	r0, #0
 8004faa:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004fac:	f000 812b 	beq.w	8005206 <HAL_ADC_ConfigChannel+0x26e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fb0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fb8:	6894      	ldr	r4, [r2, #8]
 8004fba:	0764      	lsls	r4, r4, #29
 8004fbc:	d44f      	bmi.n	800505e <HAL_ADC_ConfigChannel+0xc6>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004fbe:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004fc0:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8004fc4:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004fc8:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8004fcc:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004fce:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8004fd2:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004fd6:	f854 500e 	ldr.w	r5, [r4, lr]
 8004fda:	261f      	movs	r6, #31
 8004fdc:	fa00 f00c 	lsl.w	r0, r0, ip
 8004fe0:	fa06 fc0c 	lsl.w	ip, r6, ip
 8004fe4:	ea25 0c0c 	bic.w	ip, r5, ip
 8004fe8:	ea40 000c 	orr.w	r0, r0, ip
 8004fec:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ff0:	6890      	ldr	r0, [r2, #8]
 8004ff2:	0747      	lsls	r7, r0, #29
 8004ff4:	d53d      	bpl.n	8005072 <HAL_ADC_ConfigChannel+0xda>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ff6:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ff8:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ffa:	6894      	ldr	r4, [r2, #8]
 8004ffc:	07e5      	lsls	r5, r4, #31
 8004ffe:	d40c      	bmi.n	800501a <HAL_ADC_ConfigChannel+0x82>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005000:	4dc0      	ldr	r5, [pc, #768]	@ (8005304 <HAL_ADC_ConfigChannel+0x36c>)
 8005002:	68ce      	ldr	r6, [r1, #12]
 8005004:	42ae      	cmp	r6, r5
    SET_BIT(ADCx->DIFSEL,
 8005006:	f3c0 0412 	ubfx	r4, r0, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800500a:	f000 80a7 	beq.w	800515c <HAL_ADC_ConfigChannel+0x1c4>
    CLEAR_BIT(ADCx->DIFSEL,
 800500e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8005012:	ea21 0104 	bic.w	r1, r1, r4
 8005016:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800501a:	49bb      	ldr	r1, [pc, #748]	@ (8005308 <HAL_ADC_ConfigChannel+0x370>)
 800501c:	4208      	tst	r0, r1
 800501e:	d01c      	beq.n	800505a <HAL_ADC_ConfigChannel+0xc2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005020:	4cba      	ldr	r4, [pc, #744]	@ (800530c <HAL_ADC_ConfigChannel+0x374>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005022:	4dbb      	ldr	r5, [pc, #748]	@ (8005310 <HAL_ADC_ConfigChannel+0x378>)
 8005024:	68a1      	ldr	r1, [r4, #8]
 8005026:	42a8      	cmp	r0, r5
 8005028:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 800502c:	d073      	beq.n	8005116 <HAL_ADC_ConfigChannel+0x17e>
 800502e:	4db9      	ldr	r5, [pc, #740]	@ (8005314 <HAL_ADC_ConfigChannel+0x37c>)
 8005030:	42a8      	cmp	r0, r5
 8005032:	d070      	beq.n	8005116 <HAL_ADC_ConfigChannel+0x17e>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005034:	4db8      	ldr	r5, [pc, #736]	@ (8005318 <HAL_ADC_ConfigChannel+0x380>)
 8005036:	42a8      	cmp	r0, r5
 8005038:	f000 80e9 	beq.w	800520e <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800503c:	4db7      	ldr	r5, [pc, #732]	@ (800531c <HAL_ADC_ConfigChannel+0x384>)
 800503e:	42a8      	cmp	r0, r5
 8005040:	d10b      	bne.n	800505a <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005042:	0249      	lsls	r1, r1, #9
 8005044:	d409      	bmi.n	800505a <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005046:	49b6      	ldr	r1, [pc, #728]	@ (8005320 <HAL_ADC_ConfigChannel+0x388>)
 8005048:	428a      	cmp	r2, r1
 800504a:	d006      	beq.n	800505a <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800504c:	68a2      	ldr	r2, [r4, #8]
 800504e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005052:	4332      	orrs	r2, r6
 8005054:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8005058:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800505a:	2000      	movs	r0, #0
 800505c:	e003      	b.n	8005066 <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800505e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005060:	f042 0220 	orr.w	r2, r2, #32
 8005064:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800506c:	b002      	add	sp, #8
 800506e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005072:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005074:	6808      	ldr	r0, [r1, #0]
 8005076:	0726      	lsls	r6, r4, #28
 8005078:	d4bf      	bmi.n	8004ffa <HAL_ADC_ConfigChannel+0x62>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800507a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 800507c:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8005080:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005082:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8005084:	40b4      	lsls	r4, r6
 8005086:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800508a:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 800508e:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005092:	f102 0714 	add.w	r7, r2, #20
 8005096:	f000 8105 	beq.w	80052a4 <HAL_ADC_ConfigChannel+0x30c>
  MODIFY_REG(*preg,
 800509a:	40b5      	lsls	r5, r6
 800509c:	583e      	ldr	r6, [r7, r0]
 800509e:	4034      	ands	r4, r6
 80050a0:	432c      	orrs	r4, r5
 80050a2:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80050a4:	6950      	ldr	r0, [r2, #20]
 80050a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80050aa:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050ac:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80050b0:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050b2:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80050b4:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050b6:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80050ba:	4684      	mov	ip, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80050bc:	f000 80ca 	beq.w	8005254 <HAL_ADC_ConfigChannel+0x2bc>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050c0:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 80050c4:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 80050c6:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 80050ca:	40b5      	lsls	r5, r6
 80050cc:	4e95      	ldr	r6, [pc, #596]	@ (8005324 <HAL_ADC_ConfigChannel+0x38c>)
 80050ce:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80050d2:	ea0c 0606 	and.w	r6, ip, r6
 80050d6:	4306      	orrs	r6, r0
 80050d8:	4335      	orrs	r5, r6
 80050da:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 80050de:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050e2:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 80050e4:	698e      	ldr	r6, [r1, #24]
 80050e6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80050ea:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80050ee:	4330      	orrs	r0, r6
 80050f0:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050f4:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80050f6:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 80050f8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80050fc:	f1a5 0501 	sub.w	r5, r5, #1
 8005100:	fab5 f585 	clz	r5, r5
 8005104:	096d      	lsrs	r5, r5, #5
 8005106:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 800510a:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 800510e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005112:	6808      	ldr	r0, [r1, #0]
}
 8005114:	e771      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005116:	020c      	lsls	r4, r1, #8
 8005118:	d49f      	bmi.n	800505a <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800511a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800511e:	d19c      	bne.n	800505a <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005120:	497a      	ldr	r1, [pc, #488]	@ (800530c <HAL_ADC_ConfigChannel+0x374>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005122:	4881      	ldr	r0, [pc, #516]	@ (8005328 <HAL_ADC_ConfigChannel+0x390>)
 8005124:	688a      	ldr	r2, [r1, #8]
 8005126:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800512a:	4332      	orrs	r2, r6
 800512c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005130:	608a      	str	r2, [r1, #8]
 8005132:	6802      	ldr	r2, [r0, #0]
 8005134:	497d      	ldr	r1, [pc, #500]	@ (800532c <HAL_ADC_ConfigChannel+0x394>)
 8005136:	0992      	lsrs	r2, r2, #6
 8005138:	fba1 1202 	umull	r1, r2, r1, r2
 800513c:	0992      	lsrs	r2, r2, #6
 800513e:	3201      	adds	r2, #1
 8005140:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005144:	0092      	lsls	r2, r2, #2
 8005146:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005148:	9a01      	ldr	r2, [sp, #4]
 800514a:	2a00      	cmp	r2, #0
 800514c:	d085      	beq.n	800505a <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 800514e:	9a01      	ldr	r2, [sp, #4]
 8005150:	3a01      	subs	r2, #1
 8005152:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005154:	9a01      	ldr	r2, [sp, #4]
 8005156:	2a00      	cmp	r2, #0
 8005158:	d1f9      	bne.n	800514e <HAL_ADC_ConfigChannel+0x1b6>
 800515a:	e77e      	b.n	800505a <HAL_ADC_ConfigChannel+0xc2>
    SET_BIT(ADCx->DIFSEL,
 800515c:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8005160:	4325      	orrs	r5, r4
 8005162:	f8c2 50b0 	str.w	r5, [r2, #176]	@ 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005166:	2c00      	cmp	r4, #0
 8005168:	d060      	beq.n	800522c <HAL_ADC_ConfigChannel+0x294>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800516e:	2c00      	cmp	r4, #0
 8005170:	f000 80a0 	beq.w	80052b4 <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 8005174:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005178:	3401      	adds	r4, #1
 800517a:	f004 041f 	and.w	r4, r4, #31
 800517e:	2c09      	cmp	r4, #9
 8005180:	f240 8098 	bls.w	80052b4 <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005188:	2c00      	cmp	r4, #0
 800518a:	f000 8147 	beq.w	800541c <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 800518e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005192:	3401      	adds	r4, #1
 8005194:	06a4      	lsls	r4, r4, #26
 8005196:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800519e:	2d00      	cmp	r5, #0
 80051a0:	f000 8141 	beq.w	8005426 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 80051a4:	fab5 f585 	clz	r5, r5
 80051a8:	3501      	adds	r5, #1
 80051aa:	f005 051f 	and.w	r5, r5, #31
 80051ae:	2601      	movs	r6, #1
 80051b0:	fa06 f505 	lsl.w	r5, r6, r5
 80051b4:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b6:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80051ba:	2800      	cmp	r0, #0
 80051bc:	f000 8131 	beq.w	8005422 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80051c0:	fab0 f080 	clz	r0, r0
 80051c4:	1c45      	adds	r5, r0, #1
 80051c6:	f005 051f 	and.w	r5, r5, #31
 80051ca:	2003      	movs	r0, #3
 80051cc:	f06f 061d 	mvn.w	r6, #29
 80051d0:	fb10 6005 	smlabb	r0, r0, r5, r6
 80051d4:	0500      	lsls	r0, r0, #20
 80051d6:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051da:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80051dc:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80051de:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80051e0:	f005 0504 	and.w	r5, r5, #4
 80051e4:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80051e8:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80051ec:	fa04 f700 	lsl.w	r7, r4, r0
 80051f0:	f04f 0c07 	mov.w	ip, #7
 80051f4:	5974      	ldr	r4, [r6, r5]
 80051f6:	fa0c f000 	lsl.w	r0, ip, r0
 80051fa:	ea24 0000 	bic.w	r0, r4, r0
 80051fe:	4338      	orrs	r0, r7
 8005200:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005202:	6808      	ldr	r0, [r1, #0]
}
 8005204:	e709      	b.n	800501a <HAL_ADC_ConfigChannel+0x82>
  __HAL_LOCK(hadc);
 8005206:	2002      	movs	r0, #2
}
 8005208:	b002      	add	sp, #8
 800520a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800520e:	01c8      	lsls	r0, r1, #7
 8005210:	f53f af23 	bmi.w	800505a <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005214:	4942      	ldr	r1, [pc, #264]	@ (8005320 <HAL_ADC_ConfigChannel+0x388>)
 8005216:	428a      	cmp	r2, r1
 8005218:	f43f af1f 	beq.w	800505a <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800521c:	68a2      	ldr	r2, [r4, #8]
 800521e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005222:	4332      	orrs	r2, r6
 8005224:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005228:	60a2      	str	r2, [r4, #8]
}
 800522a:	e716      	b.n	800505a <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800522c:	0e80      	lsrs	r0, r0, #26
 800522e:	3001      	adds	r0, #1
 8005230:	f000 061f 	and.w	r6, r0, #31
 8005234:	0680      	lsls	r0, r0, #26
 8005236:	f000 45f8 	and.w	r5, r0, #2080374784	@ 0x7c000000
 800523a:	2001      	movs	r0, #1
 800523c:	40b0      	lsls	r0, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800523e:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005240:	ea45 0400 	orr.w	r4, r5, r0
 8005244:	eb06 0046 	add.w	r0, r6, r6, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005248:	d959      	bls.n	80052fe <HAL_ADC_ConfigChannel+0x366>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800524a:	381e      	subs	r0, #30
 800524c:	0500      	lsls	r0, r0, #20
 800524e:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8005252:	e7c2      	b.n	80051da <HAL_ADC_ConfigChannel+0x242>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005254:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8005256:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005258:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800525c:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005260:	2e00      	cmp	r6, #0
 8005262:	d165      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x398>
 8005264:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005268:	4285      	cmp	r5, r0
 800526a:	f000 80a7 	beq.w	80053bc <HAL_ADC_ConfigChannel+0x424>
 800526e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8005270:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005272:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005276:	4285      	cmp	r5, r0
 8005278:	f000 808b 	beq.w	8005392 <HAL_ADC_ConfigChannel+0x3fa>
 800527c:	68a5      	ldr	r5, [r4, #8]
 800527e:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005280:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005284:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005288:	4285      	cmp	r5, r0
 800528a:	f000 80a9 	beq.w	80053e0 <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800528e:	68e5      	ldr	r5, [r4, #12]
 8005290:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005292:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005296:	f3c5 6484 	ubfx	r4, r5, #26, #5
 800529a:	42a0      	cmp	r0, r4
 800529c:	f000 80b5 	beq.w	800540a <HAL_ADC_ConfigChannel+0x472>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80052a0:	4660      	mov	r0, ip
 80052a2:	e6aa      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x62>
  MODIFY_REG(*preg,
 80052a4:	583d      	ldr	r5, [r7, r0]
 80052a6:	402c      	ands	r4, r5
 80052a8:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80052aa:	6950      	ldr	r0, [r2, #20]
 80052ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80052b0:	6150      	str	r0, [r2, #20]
}
 80052b2:	e6fb      	b.n	80050ac <HAL_ADC_ConfigChannel+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b4:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80052b8:	2c00      	cmp	r4, #0
 80052ba:	f000 80b8 	beq.w	800542e <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 80052be:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052c2:	3401      	adds	r4, #1
 80052c4:	06a4      	lsls	r4, r4, #26
 80052c6:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ca:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80052ce:	2d00      	cmp	r5, #0
 80052d0:	f000 80ab 	beq.w	800542a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80052d4:	fab5 f585 	clz	r5, r5
 80052d8:	3501      	adds	r5, #1
 80052da:	f005 051f 	and.w	r5, r5, #31
 80052de:	2601      	movs	r6, #1
 80052e0:	fa06 f505 	lsl.w	r5, r6, r5
 80052e4:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80052ea:	2800      	cmp	r0, #0
 80052ec:	f000 8093 	beq.w	8005416 <HAL_ADC_ConfigChannel+0x47e>
  return __builtin_clz(value);
 80052f0:	fab0 f080 	clz	r0, r0
 80052f4:	3001      	adds	r0, #1
 80052f6:	f000 001f 	and.w	r0, r0, #31
 80052fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80052fe:	0500      	lsls	r0, r0, #20
 8005300:	e76b      	b.n	80051da <HAL_ADC_ConfigChannel+0x242>
 8005302:	bf00      	nop
 8005304:	407f0000 	.word	0x407f0000
 8005308:	80080000 	.word	0x80080000
 800530c:	50000300 	.word	0x50000300
 8005310:	c3210000 	.word	0xc3210000
 8005314:	90c00010 	.word	0x90c00010
 8005318:	c7520000 	.word	0xc7520000
 800531c:	cb840000 	.word	0xcb840000
 8005320:	50000100 	.word	0x50000100
 8005324:	03fff000 	.word	0x03fff000
 8005328:	20000554 	.word	0x20000554
 800532c:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8005334:	b11e      	cbz	r6, 800533e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8005336:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800533a:	42b5      	cmp	r5, r6
 800533c:	d03e      	beq.n	80053bc <HAL_ADC_ConfigChannel+0x424>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800533e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8005340:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005342:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005346:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800534a:	f104 0708 	add.w	r7, r4, #8
 800534e:	46be      	mov	lr, r7
  if (value == 0U)
 8005350:	b11e      	cbz	r6, 800535a <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8005352:	fab6 f686 	clz	r6, r6
 8005356:	42ae      	cmp	r6, r5
 8005358:	d01d      	beq.n	8005396 <HAL_ADC_ConfigChannel+0x3fe>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800535a:	68a5      	ldr	r5, [r4, #8]
 800535c:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800535e:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005366:	f104 060c 	add.w	r6, r4, #12
 800536a:	46b0      	mov	r8, r6
  if (value == 0U)
 800536c:	f1be 0f00 	cmp.w	lr, #0
 8005370:	d003      	beq.n	800537a <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8005372:	fabe fe8e 	clz	lr, lr
 8005376:	45ae      	cmp	lr, r5
 8005378:	d034      	beq.n	80053e4 <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800537a:	68e5      	ldr	r5, [r4, #12]
 800537c:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800537e:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 8005386:	2d00      	cmp	r5, #0
 8005388:	f43f ae37 	beq.w	8004ffa <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 800538c:	fab5 f085 	clz	r0, r5
 8005390:	e783      	b.n	800529a <HAL_ADC_ConfigChannel+0x302>
 8005392:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8005396:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8005398:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800539c:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800539e:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053a2:	68a0      	ldr	r0, [r4, #8]
 80053a4:	68a5      	ldr	r5, [r4, #8]
 80053a6:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053aa:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053ac:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053b0:	4660      	mov	r0, ip
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	d1d5      	bne.n	8005362 <HAL_ADC_ConfigChannel+0x3ca>
 80053b6:	f3cc 6084 	ubfx	r0, ip, #26, #5
 80053ba:	e765      	b.n	8005288 <HAL_ADC_ConfigChannel+0x2f0>
  MODIFY_REG(*preg,
 80053bc:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80053be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80053c2:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053c4:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053c8:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80053ca:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80053cc:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053d0:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053d4:	4660      	mov	r0, ip
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d1b5      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x3ae>
 80053da:	f3cc 6084 	ubfx	r0, ip, #26, #5
 80053de:	e74a      	b.n	8005276 <HAL_ADC_ConfigChannel+0x2de>
 80053e0:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 80053e4:	6838      	ldr	r0, [r7, #0]
 80053e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80053ea:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053ec:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053f0:	68e0      	ldr	r0, [r4, #12]
 80053f2:	68e4      	ldr	r4, [r4, #12]
 80053f4:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053f8:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80053fa:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053fe:	4660      	mov	r0, ip
 8005400:	2d00      	cmp	r5, #0
 8005402:	d1be      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x3ea>
 8005404:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8005408:	e747      	b.n	800529a <HAL_ADC_ConfigChannel+0x302>
  MODIFY_REG(*preg,
 800540a:	6830      	ldr	r0, [r6, #0]
 800540c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005410:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005412:	6808      	ldr	r0, [r1, #0]
}
 8005414:	e5f1      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x62>
 8005416:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 800541a:	e6de      	b.n	80051da <HAL_ADC_ConfigChannel+0x242>
 800541c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8005420:	e6bb      	b.n	800519a <HAL_ADC_ConfigChannel+0x202>
 8005422:	4804      	ldr	r0, [pc, #16]	@ (8005434 <HAL_ADC_ConfigChannel+0x49c>)
 8005424:	e6d9      	b.n	80051da <HAL_ADC_ConfigChannel+0x242>
 8005426:	2502      	movs	r5, #2
 8005428:	e6c4      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x21c>
 800542a:	2502      	movs	r5, #2
 800542c:	e75a      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x34c>
 800542e:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8005432:	e74a      	b.n	80052ca <HAL_ADC_ConfigChannel+0x332>
 8005434:	fe500000 	.word	0xfe500000

08005438 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800543c:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8005440:	4602      	mov	r2, r0
 8005442:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8005444:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8005446:	2b01      	cmp	r3, #1
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005448:	6955      	ldr	r5, [r2, #20]
  __IO uint32_t wait_loop_index = 0;
 800544a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800544c:	f000 8170 	beq.w	8005730 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8005450:	2301      	movs	r3, #1
 8005452:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005456:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800545a:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800545c:	2d00      	cmp	r5, #0
 800545e:	d06a      	beq.n	8005536 <HAL_ADCEx_InjectedConfigChannel+0xfe>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005460:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005462:	2d01      	cmp	r5, #1
 8005464:	d067      	beq.n	8005536 <HAL_ADCEx_InjectedConfigChannel+0xfe>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005466:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005468:	f000 001f 	and.w	r0, r0, #31
 800546c:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8005470:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005472:	2f00      	cmp	r7, #0
 8005474:	f040 8112 	bne.w	800569c <HAL_ADCEx_InjectedConfigChannel+0x264>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005478:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800547a:	3d01      	subs	r5, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800547c:	2800      	cmp	r0, #0
 800547e:	f000 8211 	beq.w	80058a4 <HAL_ADCEx_InjectedConfigChannel+0x46c>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005482:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005484:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 8005488:	4328      	orrs	r0, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800548a:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800548c:	4330      	orrs	r0, r6
 800548e:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005492:	6898      	ldr	r0, [r3, #8]
 8005494:	0700      	lsls	r0, r0, #28
 8005496:	d410      	bmi.n	80054ba <HAL_ADCEx_InjectedConfigChannel+0x82>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005498:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800549c:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 80054a0:	0540      	lsls	r0, r0, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80054a2:	2d00      	cmp	r5, #0
 80054a4:	f040 80ef 	bne.w	8005686 <HAL_ADCEx_InjectedConfigChannel+0x24e>
      MODIFY_REG(hadc->Instance->CFGR,
 80054a8:	68dd      	ldr	r5, [r3, #12]
 80054aa:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 80054ae:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80054b2:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 80054b6:	4328      	orrs	r0, r5
 80054b8:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054ba:	6898      	ldr	r0, [r3, #8]
 80054bc:	f010 0004 	ands.w	r0, r0, #4
 80054c0:	d04f      	beq.n	8005562 <HAL_ADCEx_InjectedConfigChannel+0x12a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80054c2:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054c4:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054c6:	689d      	ldr	r5, [r3, #8]
 80054c8:	07ee      	lsls	r6, r5, #31
 80054ca:	d40c      	bmi.n	80054e6 <HAL_ADCEx_InjectedConfigChannel+0xae>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80054cc:	4ea2      	ldr	r6, [pc, #648]	@ (8005758 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80054ce:	68cf      	ldr	r7, [r1, #12]
 80054d0:	42b7      	cmp	r7, r6
    SET_BIT(ADCx->DIFSEL,
 80054d2:	f3c4 0512 	ubfx	r5, r4, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80054d6:	f000 80fc 	beq.w	80056d2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    CLEAR_BIT(ADCx->DIFSEL,
 80054da:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80054de:	ea21 0105 	bic.w	r1, r1, r5
 80054e2:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80054e6:	499d      	ldr	r1, [pc, #628]	@ (800575c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80054e8:	420c      	tst	r4, r1
 80054ea:	d01e      	beq.n	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80054ec:	4e9c      	ldr	r6, [pc, #624]	@ (8005760 <HAL_ADCEx_InjectedConfigChannel+0x328>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80054ee:	4d9d      	ldr	r5, [pc, #628]	@ (8005764 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80054f0:	68b1      	ldr	r1, [r6, #8]
 80054f2:	42ac      	cmp	r4, r5
 80054f4:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 80054f8:	f000 809f 	beq.w	800563a <HAL_ADCEx_InjectedConfigChannel+0x202>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80054fc:	4d9a      	ldr	r5, [pc, #616]	@ (8005768 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80054fe:	42ac      	cmp	r4, r5
 8005500:	f000 809b 	beq.w	800563a <HAL_ADCEx_InjectedConfigChannel+0x202>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005504:	4d99      	ldr	r5, [pc, #612]	@ (800576c <HAL_ADCEx_InjectedConfigChannel+0x334>)
 8005506:	42ac      	cmp	r4, r5
 8005508:	f000 8116 	beq.w	8005738 <HAL_ADCEx_InjectedConfigChannel+0x300>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800550c:	4d98      	ldr	r5, [pc, #608]	@ (8005770 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 800550e:	42ac      	cmp	r4, r5
 8005510:	d10b      	bne.n	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005512:	0249      	lsls	r1, r1, #9
 8005514:	d409      	bmi.n	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005516:	4997      	ldr	r1, [pc, #604]	@ (8005774 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8005518:	428b      	cmp	r3, r1
 800551a:	d006      	beq.n	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800551c:	68b3      	ldr	r3, [r6, #8]
 800551e:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8005522:	433b      	orrs	r3, r7
 8005524:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005528:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800552a:	2300      	movs	r3, #0
 800552c:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005530:	b003      	add	sp, #12
 8005532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005536:	2809      	cmp	r0, #9
 8005538:	d1ab      	bne.n	8005492 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800553a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800553c:	0c65      	lsrs	r5, r4, #17
 800553e:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005542:	b120      	cbz	r0, 800554e <HAL_ADCEx_InjectedConfigChannel+0x116>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005544:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005546:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800554a:	4330      	orrs	r0, r6
 800554c:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800554e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005550:	4e89      	ldr	r6, [pc, #548]	@ (8005778 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8005552:	4030      	ands	r0, r6
 8005554:	4328      	orrs	r0, r5
 8005556:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005558:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800555a:	6655      	str	r5, [r2, #100]	@ 0x64
 800555c:	0700      	lsls	r0, r0, #28
 800555e:	d4ac      	bmi.n	80054ba <HAL_ADCEx_InjectedConfigChannel+0x82>
 8005560:	e79a      	b.n	8005498 <HAL_ADCEx_InjectedConfigChannel+0x60>
 8005562:	689d      	ldr	r5, [r3, #8]
 8005564:	072f      	lsls	r7, r5, #28
 8005566:	d4ae      	bmi.n	80054c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005568:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800556a:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800556e:	2d00      	cmp	r5, #0
 8005570:	f040 80a6 	bne.w	80056c0 <HAL_ADCEx_InjectedConfigChannel+0x288>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005574:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005576:	68d8      	ldr	r0, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005578:	f000 8196 	beq.w	80058a8 <HAL_ADCEx_InjectedConfigChannel+0x470>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800557c:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8005580:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005582:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005584:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8005588:	2d01      	cmp	r5, #1
 800558a:	f000 8180 	beq.w	800588e <HAL_ADCEx_InjectedConfigChannel+0x456>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800558e:	691d      	ldr	r5, [r3, #16]
 8005590:	f025 0502 	bic.w	r5, r5, #2
 8005594:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005596:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 8005598:	f3c4 5704 	ubfx	r7, r4, #20, #5
 800559c:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800559e:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 80055a0:	40bd      	lsls	r5, r7
 80055a2:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80055a6:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80055aa:	ea6f 0505 	mvn.w	r5, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80055ae:	f103 0c14 	add.w	ip, r3, #20
 80055b2:	f000 8162 	beq.w	800587a <HAL_ADCEx_InjectedConfigChannel+0x442>
  MODIFY_REG(*preg,
 80055b6:	40be      	lsls	r6, r7
 80055b8:	f85c 7004 	ldr.w	r7, [ip, r4]
 80055bc:	403d      	ands	r5, r7
 80055be:	4335      	orrs	r5, r6
 80055c0:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80055c4:	695c      	ldr	r4, [r3, #20]
 80055c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80055ca:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80055cc:	f8d1 c010 	ldr.w	ip, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80055d0:	680c      	ldr	r4, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80055d2:	694e      	ldr	r6, [r1, #20]
 80055d4:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80055d6:	f1bc 0f04 	cmp.w	ip, #4
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80055da:	46a6      	mov	lr, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055dc:	f103 0560 	add.w	r5, r3, #96	@ 0x60
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80055e0:	f000 810b 	beq.w	80057fa <HAL_ADCEx_InjectedConfigChannel+0x3c2>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80055e4:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 80055e8:	007f      	lsls	r7, r7, #1
  MODIFY_REG(*preg,
 80055ea:	f855 e02c 	ldr.w	lr, [r5, ip, lsl #2]
 80055ee:	40be      	lsls	r6, r7
 80055f0:	4f62      	ldr	r7, [pc, #392]	@ (800577c <HAL_ADCEx_InjectedConfigChannel+0x344>)
 80055f2:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 80055f6:	ea0e 0707 	and.w	r7, lr, r7
 80055fa:	4327      	orrs	r7, r4
 80055fc:	433e      	orrs	r6, r7
 80055fe:	f046 4600 	orr.w	r6, r6, #2147483648	@ 0x80000000
 8005602:	f845 602c 	str.w	r6, [r5, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005606:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005608:	698e      	ldr	r6, [r1, #24]
 800560a:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 800560e:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8005612:	4334      	orrs	r4, r6
 8005614:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005618:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800561a:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 800561c:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8005620:	f1a6 0601 	sub.w	r6, r6, #1
 8005624:	fab6 f686 	clz	r6, r6
 8005628:	0976      	lsrs	r6, r6, #5
 800562a:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 800562e:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8005632:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005636:	680c      	ldr	r4, [r1, #0]
}
 8005638:	e745      	b.n	80054c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800563a:	020d      	lsls	r5, r1, #8
 800563c:	f53f af75 	bmi.w	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005640:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005644:	f47f af71 	bne.w	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005648:	4945      	ldr	r1, [pc, #276]	@ (8005760 <HAL_ADCEx_InjectedConfigChannel+0x328>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800564a:	4c4d      	ldr	r4, [pc, #308]	@ (8005780 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800564c:	688b      	ldr	r3, [r1, #8]
 800564e:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8005652:	433b      	orrs	r3, r7
 8005654:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005658:	608b      	str	r3, [r1, #8]
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	4949      	ldr	r1, [pc, #292]	@ (8005784 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 800565e:	099b      	lsrs	r3, r3, #6
 8005660:	fba1 1303 	umull	r1, r3, r1, r3
 8005664:	099b      	lsrs	r3, r3, #6
 8005666:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	3318      	adds	r3, #24
 800566e:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005670:	9b01      	ldr	r3, [sp, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f43f af59 	beq.w	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8005678:	9b01      	ldr	r3, [sp, #4]
 800567a:	3b01      	subs	r3, #1
 800567c:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800567e:	9b01      	ldr	r3, [sp, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f9      	bne.n	8005678 <HAL_ADCEx_InjectedConfigChannel+0x240>
 8005684:	e751      	b.n	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->CFGR,
 8005686:	68dd      	ldr	r5, [r3, #12]
 8005688:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 800568c:	4328      	orrs	r0, r5
 800568e:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005690:	6898      	ldr	r0, [r3, #8]
 8005692:	f010 0004 	ands.w	r0, r0, #4
 8005696:	f43f af64 	beq.w	8005562 <HAL_ADCEx_InjectedConfigChannel+0x12a>
 800569a:	e712      	b.n	80054c2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800569c:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 800569e:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80056a0:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 80056a2:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80056a4:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80056a6:	2f00      	cmp	r7, #0
 80056a8:	f47f aef3 	bne.w	8005492 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80056ac:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80056ae:	4e32      	ldr	r6, [pc, #200]	@ (8005778 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 80056b0:	4030      	ands	r0, r6
 80056b2:	4328      	orrs	r0, r5
 80056b4:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80056b6:	6898      	ldr	r0, [r3, #8]
 80056b8:	0700      	lsls	r0, r0, #28
 80056ba:	f53f aefe 	bmi.w	80054ba <HAL_ADCEx_InjectedConfigChannel+0x82>
 80056be:	e6eb      	b.n	8005498 <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80056c0:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 80056c2:	2d00      	cmp	r5, #0
 80056c4:	f43f af56 	beq.w	8005574 <HAL_ADCEx_InjectedConfigChannel+0x13c>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80056c8:	2801      	cmp	r0, #1
 80056ca:	f000 810f 	beq.w	80058ec <HAL_ADCEx_InjectedConfigChannel+0x4b4>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80056ce:	68d8      	ldr	r0, [r3, #12]
 80056d0:	e754      	b.n	800557c <HAL_ADCEx_InjectedConfigChannel+0x144>
    SET_BIT(ADCx->DIFSEL,
 80056d2:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 80056d6:	432e      	orrs	r6, r5
 80056d8:	f8c3 60b0 	str.w	r6, [r3, #176]	@ 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80056dc:	2d00      	cmp	r5, #0
 80056de:	d153      	bne.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x350>
 80056e0:	0ea4      	lsrs	r4, r4, #26
 80056e2:	3401      	adds	r4, #1
 80056e4:	f004 061f 	and.w	r6, r4, #31
 80056e8:	2501      	movs	r5, #1
 80056ea:	06a4      	lsls	r4, r4, #26
 80056ec:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 80056f0:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056f2:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80056f4:	ea45 0504 	orr.w	r5, r5, r4
 80056f8:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056fc:	f200 80f1 	bhi.w	80058e2 <HAL_ADCEx_InjectedConfigChannel+0x4aa>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005700:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005702:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005704:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8005706:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005708:	f006 0604 	and.w	r6, r6, #4
 800570c:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8005710:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8005714:	fa05 fc04 	lsl.w	ip, r5, r4
 8005718:	f04f 0e07 	mov.w	lr, #7
 800571c:	59bd      	ldr	r5, [r7, r6]
 800571e:	fa0e f404 	lsl.w	r4, lr, r4
 8005722:	ea25 0404 	bic.w	r4, r5, r4
 8005726:	ea44 040c 	orr.w	r4, r4, ip
 800572a:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800572c:	680c      	ldr	r4, [r1, #0]
}
 800572e:	e6da      	b.n	80054e6 <HAL_ADCEx_InjectedConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8005730:	2002      	movs	r0, #2
}
 8005732:	b003      	add	sp, #12
 8005734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005738:	01cc      	lsls	r4, r1, #7
 800573a:	f53f aef6 	bmi.w	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800573e:	490d      	ldr	r1, [pc, #52]	@ (8005774 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8005740:	428b      	cmp	r3, r1
 8005742:	f43f aef2 	beq.w	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005746:	68b3      	ldr	r3, [r6, #8]
 8005748:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800574c:	433b      	orrs	r3, r7
 800574e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005752:	60b3      	str	r3, [r6, #8]
}
 8005754:	e6e9      	b.n	800552a <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8005756:	bf00      	nop
 8005758:	407f0000 	.word	0x407f0000
 800575c:	80080000 	.word	0x80080000
 8005760:	50000300 	.word	0x50000300
 8005764:	c3210000 	.word	0xc3210000
 8005768:	90c00010 	.word	0x90c00010
 800576c:	c7520000 	.word	0xc7520000
 8005770:	cb840000 	.word	0xcb840000
 8005774:	50000100 	.word	0x50000100
 8005778:	04104000 	.word	0x04104000
 800577c:	03fff000 	.word	0x03fff000
 8005780:	20000554 	.word	0x20000554
 8005784:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800578c:	2d00      	cmp	r5, #0
 800578e:	f000 80b2 	beq.w	80058f6 <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 8005792:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005796:	3501      	adds	r5, #1
 8005798:	f005 051f 	and.w	r5, r5, #31
 800579c:	2d09      	cmp	r5, #9
 800579e:	f240 80aa 	bls.w	80058f6 <HAL_ADCEx_InjectedConfigChannel+0x4be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a2:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	f000 8111 	beq.w	80059ce <HAL_ADCEx_InjectedConfigChannel+0x596>
  return __builtin_clz(value);
 80057ac:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80057b0:	3501      	adds	r5, #1
 80057b2:	06ad      	lsls	r5, r5, #26
 80057b4:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80057bc:	2e00      	cmp	r6, #0
 80057be:	f000 8104 	beq.w	80059ca <HAL_ADCEx_InjectedConfigChannel+0x592>
  return __builtin_clz(value);
 80057c2:	fab6 f686 	clz	r6, r6
 80057c6:	3601      	adds	r6, #1
 80057c8:	f006 061f 	and.w	r6, r6, #31
 80057cc:	2701      	movs	r7, #1
 80057ce:	fa07 f606 	lsl.w	r6, r7, r6
 80057d2:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d4:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80057d8:	2c00      	cmp	r4, #0
 80057da:	f000 80fe 	beq.w	80059da <HAL_ADCEx_InjectedConfigChannel+0x5a2>
  return __builtin_clz(value);
 80057de:	fab4 f484 	clz	r4, r4
 80057e2:	1c66      	adds	r6, r4, #1
 80057e4:	f006 061f 	and.w	r6, r6, #31
 80057e8:	2403      	movs	r4, #3
 80057ea:	f06f 071d 	mvn.w	r7, #29
 80057ee:	fb14 7406 	smlabb	r4, r4, r6, r7
 80057f2:	0524      	lsls	r4, r4, #20
 80057f4:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 80057f8:	e783      	b.n	8005702 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80057fa:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 80057fc:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80057fe:	f3c4 0712 	ubfx	r7, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005802:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005806:	2f00      	cmp	r7, #0
 8005808:	d052      	beq.n	80058b0 <HAL_ADCEx_InjectedConfigChannel+0x478>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580a:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 800580e:	b127      	cbz	r7, 800581a <HAL_ADCEx_InjectedConfigChannel+0x3e2>
  return __builtin_clz(value);
 8005810:	fab7 f787 	clz	r7, r7
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005814:	42be      	cmp	r6, r7
 8005816:	f000 80a7 	beq.w	8005968 <HAL_ADCEx_InjectedConfigChannel+0x530>
 800581a:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 800581c:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800581e:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005822:	fa9e f7ae 	rbit	r7, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005826:	f105 0c08 	add.w	ip, r5, #8
 800582a:	46e0      	mov	r8, ip
  if (value == 0U)
 800582c:	b127      	cbz	r7, 8005838 <HAL_ADCEx_InjectedConfigChannel+0x400>
  return __builtin_clz(value);
 800582e:	fab7 f787 	clz	r7, r7
 8005832:	42b7      	cmp	r7, r6
 8005834:	f000 8084 	beq.w	8005940 <HAL_ADCEx_InjectedConfigChannel+0x508>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005838:	68ae      	ldr	r6, [r5, #8]
 800583a:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800583c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005840:	fa9e f8ae 	rbit	r8, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005844:	f105 070c 	add.w	r7, r5, #12
 8005848:	46b9      	mov	r9, r7
  if (value == 0U)
 800584a:	f1b8 0f00 	cmp.w	r8, #0
 800584e:	d004      	beq.n	800585a <HAL_ADCEx_InjectedConfigChannel+0x422>
  return __builtin_clz(value);
 8005850:	fab8 f888 	clz	r8, r8
 8005854:	45b0      	cmp	r8, r6
 8005856:	f000 809c 	beq.w	8005992 <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800585a:	68ee      	ldr	r6, [r5, #12]
 800585c:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800585e:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	fa9e f6ae 	rbit	r6, lr
  if (value == 0U)
 8005866:	2e00      	cmp	r6, #0
 8005868:	f43f ae2d 	beq.w	80054c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  return __builtin_clz(value);
 800586c:	fab6 f486 	clz	r4, r6
 8005870:	42ac      	cmp	r4, r5
 8005872:	f000 80a4 	beq.w	80059be <HAL_ADCEx_InjectedConfigChannel+0x586>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005876:	4674      	mov	r4, lr
 8005878:	e625      	b.n	80054c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 800587a:	f85c 6004 	ldr.w	r6, [ip, r4]
 800587e:	4035      	ands	r5, r6
 8005880:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005884:	695c      	ldr	r4, [r3, #20]
 8005886:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 800588a:	615c      	str	r4, [r3, #20]
}
 800588c:	e69e      	b.n	80055cc <HAL_ADCEx_InjectedConfigChannel+0x194>
      MODIFY_REG(hadc->Instance->CFGR2,
 800588e:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 8005892:	691e      	ldr	r6, [r3, #16]
 8005894:	433d      	orrs	r5, r7
 8005896:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 800589a:	4335      	orrs	r5, r6
 800589c:	f045 0502 	orr.w	r5, r5, #2
 80058a0:	611d      	str	r5, [r3, #16]
 80058a2:	e678      	b.n	8005596 <HAL_ADCEx_InjectedConfigChannel+0x15e>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80058a4:	4628      	mov	r0, r5
 80058a6:	e5f1      	b.n	800548c <HAL_ADCEx_InjectedConfigChannel+0x54>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80058a8:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 80058ac:	60d8      	str	r0, [r3, #12]
 80058ae:	e668      	b.n	8005582 <HAL_ADCEx_InjectedConfigChannel+0x14a>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80058b0:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80058b4:	42a6      	cmp	r6, r4
 80058b6:	d057      	beq.n	8005968 <HAL_ADCEx_InjectedConfigChannel+0x530>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058b8:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 80058ba:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058bc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80058c0:	42a6      	cmp	r6, r4
 80058c2:	d03b      	beq.n	800593c <HAL_ADCEx_InjectedConfigChannel+0x504>
 80058c4:	68ae      	ldr	r6, [r5, #8]
 80058c6:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058c8:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058cc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80058d0:	42a6      	cmp	r6, r4
 80058d2:	d05c      	beq.n	800598e <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058d4:	68ee      	ldr	r6, [r5, #12]
 80058d6:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058d8:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058dc:	f3c6 6584 	ubfx	r5, r6, #26, #5
 80058e0:	e7c6      	b.n	8005870 <HAL_ADCEx_InjectedConfigChannel+0x438>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80058e2:	3c1e      	subs	r4, #30
 80058e4:	0524      	lsls	r4, r4, #20
 80058e6:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 80058ea:	e70a      	b.n	8005702 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058ec:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 80058ee:	f045 0520 	orr.w	r5, r5, #32
 80058f2:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 80058f4:	e646      	b.n	8005584 <HAL_ADCEx_InjectedConfigChannel+0x14c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	d071      	beq.n	80059e2 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return __builtin_clz(value);
 80058fe:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005902:	3501      	adds	r5, #1
 8005904:	06ad      	lsls	r5, r5, #26
 8005906:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590a:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800590e:	2e00      	cmp	r6, #0
 8005910:	d065      	beq.n	80059de <HAL_ADCEx_InjectedConfigChannel+0x5a6>
  return __builtin_clz(value);
 8005912:	fab6 f686 	clz	r6, r6
 8005916:	3601      	adds	r6, #1
 8005918:	f006 061f 	and.w	r6, r6, #31
 800591c:	2701      	movs	r7, #1
 800591e:	fa07 f606 	lsl.w	r6, r7, r6
 8005922:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005924:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005928:	2c00      	cmp	r4, #0
 800592a:	d053      	beq.n	80059d4 <HAL_ADCEx_InjectedConfigChannel+0x59c>
  return __builtin_clz(value);
 800592c:	fab4 f484 	clz	r4, r4
 8005930:	3401      	adds	r4, #1
 8005932:	f004 041f 	and.w	r4, r4, #31
 8005936:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800593a:	e6e1      	b.n	8005700 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
 800593c:	f105 0808 	add.w	r8, r5, #8
  MODIFY_REG(*preg,
 8005940:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8005942:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005946:	665c      	str	r4, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005948:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800594c:	68ac      	ldr	r4, [r5, #8]
 800594e:	68ae      	ldr	r6, [r5, #8]
 8005950:	f3ce 0712 	ubfx	r7, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005954:	46c4      	mov	ip, r8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005956:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800595a:	4674      	mov	r4, lr
 800595c:	2f00      	cmp	r7, #0
 800595e:	f47f af6f 	bne.w	8005840 <HAL_ADCEx_InjectedConfigChannel+0x408>
 8005962:	f3ce 6484 	ubfx	r4, lr, #26, #5
 8005966:	e7b3      	b.n	80058d0 <HAL_ADCEx_InjectedConfigChannel+0x498>
  MODIFY_REG(*preg,
 8005968:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800596a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800596e:	661c      	str	r4, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005970:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005974:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8005976:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8005978:	f3ce 0712 	ubfx	r7, lr, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800597c:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005980:	4674      	mov	r4, lr
 8005982:	2f00      	cmp	r7, #0
 8005984:	f47f af4d 	bne.w	8005822 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8005988:	f3ce 6484 	ubfx	r4, lr, #26, #5
 800598c:	e798      	b.n	80058c0 <HAL_ADCEx_InjectedConfigChannel+0x488>
 800598e:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8005992:	f8dc 4000 	ldr.w	r4, [ip]
 8005996:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800599a:	f8cc 4000 	str.w	r4, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800599e:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80059a2:	68ec      	ldr	r4, [r5, #12]
 80059a4:	68ed      	ldr	r5, [r5, #12]
 80059a6:	f3ce 0612 	ubfx	r6, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059aa:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059ac:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80059b0:	4674      	mov	r4, lr
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	f47f af55 	bne.w	8005862 <HAL_ADCEx_InjectedConfigChannel+0x42a>
 80059b8:	f3ce 6484 	ubfx	r4, lr, #26, #5
 80059bc:	e758      	b.n	8005870 <HAL_ADCEx_InjectedConfigChannel+0x438>
  MODIFY_REG(*preg,
 80059be:	683c      	ldr	r4, [r7, #0]
 80059c0:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80059c4:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80059c6:	680c      	ldr	r4, [r1, #0]
}
 80059c8:	e57d      	b.n	80054c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 80059ca:	2602      	movs	r6, #2
 80059cc:	e701      	b.n	80057d2 <HAL_ADCEx_InjectedConfigChannel+0x39a>
 80059ce:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 80059d2:	e6f1      	b.n	80057b8 <HAL_ADCEx_InjectedConfigChannel+0x380>
 80059d4:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 80059d8:	e693      	b.n	8005702 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 80059da:	4c03      	ldr	r4, [pc, #12]	@ (80059e8 <HAL_ADCEx_InjectedConfigChannel+0x5b0>)
 80059dc:	e691      	b.n	8005702 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 80059de:	2602      	movs	r6, #2
 80059e0:	e79f      	b.n	8005922 <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 80059e2:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 80059e6:	e790      	b.n	800590a <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 80059e8:	fe500000 	.word	0xfe500000

080059ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80059ec:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059ee:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059f2:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80059f4:	2a01      	cmp	r2, #1
{
 80059f6:	b09c      	sub	sp, #112	@ 0x70
  __HAL_LOCK(hadc);
 80059f8:	d042      	beq.n	8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x94>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80059fa:	6804      	ldr	r4, [r0, #0]
 80059fc:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80059fe:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005a00:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005a02:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005a06:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8005a08:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005a0c:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005a0e:	d008      	beq.n	8005a22 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a10:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a16:	f041 0120 	orr.w	r1, r1, #32
 8005a1a:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005a1c:	b01c      	add	sp, #112	@ 0x70
 8005a1e:	bcf0      	pop	{r4, r5, r6, r7}
 8005a20:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a22:	4a23      	ldr	r2, [pc, #140]	@ (8005ab0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005a24:	6890      	ldr	r0, [r2, #8]
 8005a26:	0740      	lsls	r0, r0, #29
 8005a28:	d50b      	bpl.n	8005a42 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a2a:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a2e:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8005a32:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a34:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8005a3c:	b01c      	add	sp, #112	@ 0x70
 8005a3e:	bcf0      	pop	{r4, r5, r6, r7}
 8005a40:	4770      	bx	lr
 8005a42:	68a0      	ldr	r0, [r4, #8]
 8005a44:	0746      	lsls	r6, r0, #29
 8005a46:	d4f1      	bmi.n	8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a48:	b1f5      	cbz	r5, 8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005a4a:	4e1a      	ldr	r6, [pc, #104]	@ (8005ab4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005a4c:	684f      	ldr	r7, [r1, #4]
 8005a4e:	68b0      	ldr	r0, [r6, #8]
 8005a50:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8005a54:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8005a58:	4338      	orrs	r0, r7
 8005a5a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8005a5e:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a60:	68a0      	ldr	r0, [r4, #8]
 8005a62:	6892      	ldr	r2, [r2, #8]
 8005a64:	07c0      	lsls	r0, r0, #31
 8005a66:	d420      	bmi.n	8005aaa <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8005a68:	07d7      	lsls	r7, r2, #31
 8005a6a:	d41e      	bmi.n	8005aaa <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        MODIFY_REG(tmpADC_Common->CCR,
 8005a6c:	68b0      	ldr	r0, [r6, #8]
 8005a6e:	688a      	ldr	r2, [r1, #8]
 8005a70:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 8005a74:	432a      	orrs	r2, r5
 8005a76:	f021 010f 	bic.w	r1, r1, #15
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	60b2      	str	r2, [r6, #8]
 8005a7e:	e014      	b.n	8005aaa <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  __HAL_LOCK(hadc);
 8005a80:	2002      	movs	r0, #2
}
 8005a82:	b01c      	add	sp, #112	@ 0x70
 8005a84:	bcf0      	pop	{r4, r5, r6, r7}
 8005a86:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a88:	480a      	ldr	r0, [pc, #40]	@ (8005ab4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005a8a:	6881      	ldr	r1, [r0, #8]
 8005a8c:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005a90:	6081      	str	r1, [r0, #8]
 8005a92:	68a1      	ldr	r1, [r4, #8]
 8005a94:	6892      	ldr	r2, [r2, #8]
 8005a96:	07cd      	lsls	r5, r1, #31
 8005a98:	d407      	bmi.n	8005aaa <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8005a9a:	07d4      	lsls	r4, r2, #31
 8005a9c:	d405      	bmi.n	8005aaa <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a9e:	6882      	ldr	r2, [r0, #8]
 8005aa0:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8005aa4:	f022 020f 	bic.w	r2, r2, #15
 8005aa8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aaa:	2000      	movs	r0, #0
 8005aac:	e7c3      	b.n	8005a36 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8005aae:	bf00      	nop
 8005ab0:	50000100 	.word	0x50000100
 8005ab4:	50000300 	.word	0x50000300

08005ab8 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005ab8:	b1b0      	cbz	r0, 8005ae8 <HAL_CORDIC_Init+0x30>
{
 8005aba:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005abc:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005ac6:	b153      	cbz	r3, 8005ade <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005ac8:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005aca:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005acc:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005ace:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8005ad2:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8005ad6:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005ada:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8005adc:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8005ade:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8005ae2:	f7fe fe13 	bl	800470c <HAL_CORDIC_MspInit>
 8005ae6:	e7ef      	b.n	8005ac8 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005ae8:	2001      	movs	r0, #1
}
 8005aea:	4770      	bx	lr

08005aec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aec:	4907      	ldr	r1, [pc, #28]	@ (8005b0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005aee:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005af0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005af2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005af6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005afa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005afc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005afe:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005b06:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	e000ed00 	.word	0xe000ed00

08005b10 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b10:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <HAL_NVIC_SetPriority+0x70>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b18:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b1a:	f1c3 0e07 	rsb	lr, r3, #7
 8005b1e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b22:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b26:	bf28      	it	cs
 8005b28:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b2c:	f1bc 0f06 	cmp.w	ip, #6
 8005b30:	d91c      	bls.n	8005b6c <HAL_NVIC_SetPriority+0x5c>
 8005b32:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	fa03 f30c 	lsl.w	r3, r3, ip
 8005b3e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	fa03 f30e 	lsl.w	r3, r3, lr
 8005b4a:	ea21 0303 	bic.w	r3, r1, r3
 8005b4e:	fa03 f30c 	lsl.w	r3, r3, ip
 8005b52:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b54:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8005b56:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b58:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005b5a:	db0a      	blt.n	8005b72 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005b60:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005b64:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b6c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b6e:	4694      	mov	ip, r2
 8005b70:	e7e7      	b.n	8005b42 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b72:	4a04      	ldr	r2, [pc, #16]	@ (8005b84 <HAL_NVIC_SetPriority+0x74>)
 8005b74:	f000 000f 	and.w	r0, r0, #15
 8005b78:	4402      	add	r2, r0
 8005b7a:	7613      	strb	r3, [r2, #24]
 8005b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b80:	e000ed00 	.word	0xe000ed00
 8005b84:	e000ecfc 	.word	0xe000ecfc

08005b88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	db07      	blt.n	8005b9c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ba0 <HAL_NVIC_EnableIRQ+0x18>)
 8005b8e:	0941      	lsrs	r1, r0, #5
 8005b90:	2301      	movs	r3, #1
 8005b92:	f000 001f 	and.w	r0, r0, #31
 8005b96:	4083      	lsls	r3, r0
 8005b98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000e100 	.word	0xe000e100

08005ba4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ba4:	3801      	subs	r0, #1
 8005ba6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8005baa:	d301      	bcc.n	8005bb0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005bae:	4770      	bx	lr
{
 8005bb0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb6:	4c07      	ldr	r4, [pc, #28]	@ (8005bd4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bb8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bba:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8005bbe:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bc2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bc4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bc6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bc8:	619a      	str	r2, [r3, #24]
}
 8005bca:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bce:	6119      	str	r1, [r3, #16]
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <HAL_SYSTICK_IRQHandler>:
{
 8005bdc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005bde:	f7ff fffb 	bl	8005bd8 <HAL_SYSTICK_Callback>
}
 8005be2:	bd08      	pop	{r3, pc}

08005be4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d076      	beq.n	8005cd6 <HAL_DMA_Init+0xf2>
{
 8005be8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005bea:	4a3c      	ldr	r2, [pc, #240]	@ (8005cdc <HAL_DMA_Init+0xf8>)
 8005bec:	6804      	ldr	r4, [r0, #0]
 8005bee:	4294      	cmp	r4, r2
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	d95c      	bls.n	8005cae <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005bf4:	493a      	ldr	r1, [pc, #232]	@ (8005ce0 <HAL_DMA_Init+0xfc>)
 8005bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8005ce4 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8005bf8:	483b      	ldr	r0, [pc, #236]	@ (8005ce8 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005bfa:	4421      	add	r1, r4
 8005bfc:	fba2 2101 	umull	r2, r1, r2, r1
 8005c00:	0909      	lsrs	r1, r1, #4
 8005c02:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c04:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c06:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8005c0c:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c0e:	4e35      	ldr	r6, [pc, #212]	@ (8005ce4 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c10:	4f36      	ldr	r7, [pc, #216]	@ (8005cec <HAL_DMA_Init+0x108>)
 8005c12:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c16:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8005c18:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c1a:	4302      	orrs	r2, r0
 8005c1c:	6958      	ldr	r0, [r3, #20]
 8005c1e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c20:	6998      	ldr	r0, [r3, #24]
 8005c22:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 8005c24:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c26:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2a:	69d8      	ldr	r0, [r3, #28]
 8005c2c:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c2e:	b2e0      	uxtb	r0, r4
 8005c30:	3808      	subs	r0, #8
 8005c32:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c36:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c38:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c3c:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8005c3e:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8005c42:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c44:	4e25      	ldr	r6, [pc, #148]	@ (8005cdc <HAL_DMA_Init+0xf8>)
 8005c46:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf0 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c48:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c4c:	42b4      	cmp	r4, r6
 8005c4e:	bf98      	it	ls
 8005c50:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c52:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c56:	2401      	movs	r4, #1
 8005c58:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c5c:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c5e:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005c62:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c66:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005c68:	649e      	str	r6, [r3, #72]	@ 0x48
 8005c6a:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c6e:	d027      	beq.n	8005cc0 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c70:	685e      	ldr	r6, [r3, #4]
 8005c72:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c74:	3e01      	subs	r6, #1
 8005c76:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c78:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c7c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c80:	d824      	bhi.n	8005ccc <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c82:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf4 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c84:	481c      	ldr	r0, [pc, #112]	@ (8005cf8 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c86:	442a      	add	r2, r5
 8005c88:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c8a:	3d01      	subs	r5, #1
 8005c8c:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c8e:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c90:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c94:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c96:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c98:	4a18      	ldr	r2, [pc, #96]	@ (8005cfc <HAL_DMA_Init+0x118>)
 8005c9a:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c9c:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005c9e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca0:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005ca2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005ca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8005caa:	bcf0      	pop	{r4, r5, r6, r7}
 8005cac:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005cae:	4914      	ldr	r1, [pc, #80]	@ (8005d00 <HAL_DMA_Init+0x11c>)
 8005cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce4 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8005cb2:	4814      	ldr	r0, [pc, #80]	@ (8005d04 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005cb4:	4421      	add	r1, r4
 8005cb6:	fba2 2101 	umull	r2, r1, r2, r1
 8005cba:	0909      	lsrs	r1, r1, #4
 8005cbc:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8005cbe:	e7a1      	b.n	8005c04 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005cc0:	2400      	movs	r4, #0
 8005cc2:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005cc4:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cc8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005ccc:	2200      	movs	r2, #0
 8005cce:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cd4:	e7e2      	b.n	8005c9c <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8005cd6:	2001      	movs	r0, #1
}
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40020407 	.word	0x40020407
 8005ce0:	bffdfbf8 	.word	0xbffdfbf8
 8005ce4:	cccccccd 	.word	0xcccccccd
 8005ce8:	40020400 	.word	0x40020400
 8005cec:	40020800 	.word	0x40020800
 8005cf0:	40020820 	.word	0x40020820
 8005cf4:	1000823f 	.word	0x1000823f
 8005cf8:	40020940 	.word	0x40020940
 8005cfc:	40020900 	.word	0x40020900
 8005d00:	bffdfff8 	.word	0xbffdfff8
 8005d04:	40020000 	.word	0x40020000

08005d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d0c:	680c      	ldr	r4, [r1, #0]
{
 8005d0e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d10:	2c00      	cmp	r4, #0
 8005d12:	f000 8089 	beq.w	8005e28 <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8005d16:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d18:	f04f 0b01 	mov.w	fp, #1
 8005d1c:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8005d20:	ea1e 0a04 	ands.w	sl, lr, r4
 8005d24:	d07b      	beq.n	8005e1e <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d26:	684d      	ldr	r5, [r1, #4]
 8005d28:	f005 0203 	and.w	r2, r5, #3
 8005d2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d30:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d32:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d36:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d3a:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d3e:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d42:	d974      	bls.n	8005e2e <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d44:	2a03      	cmp	r2, #3
 8005d46:	f040 80b0 	bne.w	8005eaa <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d4a:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8005d4e:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d52:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d56:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d58:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005d5c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d5e:	d05e      	beq.n	8005e1e <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d60:	4f66      	ldr	r7, [pc, #408]	@ (8005efc <HAL_GPIO_Init+0x1f4>)
 8005d62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d64:	f042 0201 	orr.w	r2, r2, #1
 8005d68:	663a      	str	r2, [r7, #96]	@ 0x60
 8005d6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d6c:	f002 0201 	and.w	r2, r2, #1
 8005d70:	9203      	str	r2, [sp, #12]
 8005d72:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d74:	f023 0203 	bic.w	r2, r3, #3
 8005d78:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005d7c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d80:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005d84:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d86:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005d8a:	260f      	movs	r6, #15
 8005d8c:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d90:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d94:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d98:	d01d      	beq.n	8005dd6 <HAL_GPIO_Init+0xce>
 8005d9a:	4e59      	ldr	r6, [pc, #356]	@ (8005f00 <HAL_GPIO_Init+0x1f8>)
 8005d9c:	42b0      	cmp	r0, r6
 8005d9e:	f000 8097 	beq.w	8005ed0 <HAL_GPIO_Init+0x1c8>
 8005da2:	4e58      	ldr	r6, [pc, #352]	@ (8005f04 <HAL_GPIO_Init+0x1fc>)
 8005da4:	42b0      	cmp	r0, r6
 8005da6:	f000 809a 	beq.w	8005ede <HAL_GPIO_Init+0x1d6>
 8005daa:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8005f0c <HAL_GPIO_Init+0x204>
 8005dae:	4570      	cmp	r0, lr
 8005db0:	f000 8087 	beq.w	8005ec2 <HAL_GPIO_Init+0x1ba>
 8005db4:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8005f10 <HAL_GPIO_Init+0x208>
 8005db8:	4570      	cmp	r0, lr
 8005dba:	f000 8097 	beq.w	8005eec <HAL_GPIO_Init+0x1e4>
 8005dbe:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8005f14 <HAL_GPIO_Init+0x20c>
 8005dc2:	4570      	cmp	r0, lr
 8005dc4:	bf0c      	ite	eq
 8005dc6:	f04f 0e05 	moveq.w	lr, #5
 8005dca:	f04f 0e06 	movne.w	lr, #6
 8005dce:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005dd2:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dd6:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8005f08 <HAL_GPIO_Init+0x200>)
 8005dda:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ddc:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8005dde:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005de2:	4e49      	ldr	r6, [pc, #292]	@ (8005f08 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005de4:	bf54      	ite	pl
 8005de6:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005de8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8005dec:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8005dee:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005df0:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005df2:	4e45      	ldr	r6, [pc, #276]	@ (8005f08 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005df4:	bf54      	ite	pl
 8005df6:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005df8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8005dfc:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8005dfe:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e00:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8005e02:	4e41      	ldr	r6, [pc, #260]	@ (8005f08 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005e04:	bf54      	ite	pl
 8005e06:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005e08:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8005e0c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e0e:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e10:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8005e12:	4d3d      	ldr	r5, [pc, #244]	@ (8005f08 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005e14:	bf54      	ite	pl
 8005e16:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005e18:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8005e1c:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8005e1e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e20:	fa34 f203 	lsrs.w	r2, r4, r3
 8005e24:	f47f af7a 	bne.w	8005d1c <HAL_GPIO_Init+0x14>
  }
}
 8005e28:	b005      	add	sp, #20
 8005e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005e2e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e32:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e34:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e38:	fa06 f80c 	lsl.w	r8, r6, ip
 8005e3c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8005e40:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8005e44:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e48:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e4a:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e4e:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8005e52:	fa0e fe03 	lsl.w	lr, lr, r3
 8005e56:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8005e5a:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8005e5e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e62:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e66:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e6a:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e6e:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8005e70:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e74:	f47f af69 	bne.w	8005d4a <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e78:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005e7a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e7e:	f003 0e07 	and.w	lr, r3, #7
 8005e82:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8005e86:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e8a:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8005e8e:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e92:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e94:	260f      	movs	r6, #15
 8005e96:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e9a:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e9c:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ea0:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8005ea4:	f8c8 e020 	str.w	lr, [r8, #32]
 8005ea8:	e74f      	b.n	8005d4a <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 8005eaa:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eae:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eb0:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eb4:	fa06 fe0c 	lsl.w	lr, r6, ip
 8005eb8:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8005ebc:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ec0:	e743      	b.n	8005d4a <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ec2:	f04f 0e03 	mov.w	lr, #3
 8005ec6:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005eca:	ea47 070c 	orr.w	r7, r7, ip
 8005ece:	e782      	b.n	8005dd6 <HAL_GPIO_Init+0xce>
 8005ed0:	f04f 0e01 	mov.w	lr, #1
 8005ed4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005ed8:	ea47 070c 	orr.w	r7, r7, ip
 8005edc:	e77b      	b.n	8005dd6 <HAL_GPIO_Init+0xce>
 8005ede:	f04f 0e02 	mov.w	lr, #2
 8005ee2:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005ee6:	ea47 070c 	orr.w	r7, r7, ip
 8005eea:	e774      	b.n	8005dd6 <HAL_GPIO_Init+0xce>
 8005eec:	f04f 0e04 	mov.w	lr, #4
 8005ef0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005ef4:	ea47 070c 	orr.w	r7, r7, ip
 8005ef8:	e76d      	b.n	8005dd6 <HAL_GPIO_Init+0xce>
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000
 8005f00:	48000400 	.word	0x48000400
 8005f04:	48000800 	.word	0x48000800
 8005f08:	40010400 	.word	0x40010400
 8005f0c:	48000c00 	.word	0x48000c00
 8005f10:	48001000 	.word	0x48001000
 8005f14:	48001400 	.word	0x48001400

08005f18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f18:	b10a      	cbz	r2, 8005f1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f1a:	6181      	str	r1, [r0, #24]
 8005f1c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f1e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop

08005f24 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f24:	4a35      	ldr	r2, [pc, #212]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005f26:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f28:	b960      	cbnz	r0, 8005f44 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f32:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f36:	d01b      	beq.n	8005f70 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f40:	2000      	movs	r0, #0
}
 8005f42:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f44:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005f48:	d006      	beq.n	8005f58 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f52:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005f54:	2000      	movs	r0, #0
}
 8005f56:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f60:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f64:	d029      	beq.n	8005fba <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f6a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f6e:	e7f1      	b.n	8005f54 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f78:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f7a:	4821      	ldr	r0, [pc, #132]	@ (8006000 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005f7c:	4921      	ldr	r1, [pc, #132]	@ (8006004 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f86:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f88:	6803      	ldr	r3, [r0, #0]
 8005f8a:	2032      	movs	r0, #50	@ 0x32
 8005f8c:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f90:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f92:	fba1 1303 	umull	r1, r3, r1, r3
 8005f96:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f98:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f9a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f9e:	d506      	bpl.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005fa0:	e000      	b.n	8005fa4 <HAL_PWREx_ControlVoltageScaling+0x80>
 8005fa2:	b123      	cbz	r3, 8005fae <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005fa4:	6951      	ldr	r1, [r2, #20]
 8005fa6:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005fa8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fac:	d4f9      	bmi.n	8005fa2 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fae:	4b13      	ldr	r3, [pc, #76]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	055b      	lsls	r3, r3, #21
 8005fb4:	d5ce      	bpl.n	8005f54 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8005fb6:	2003      	movs	r0, #3
 8005fb8:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fbe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fc2:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fc4:	480e      	ldr	r0, [pc, #56]	@ (8006000 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005fc6:	490f      	ldr	r1, [pc, #60]	@ (8006004 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005fcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fd0:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fd2:	6803      	ldr	r3, [r0, #0]
 8005fd4:	2032      	movs	r0, #50	@ 0x32
 8005fd6:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fda:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fdc:	fba1 1303 	umull	r1, r3, r1, r3
 8005fe0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fe2:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fe4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fe8:	d5e1      	bpl.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005fea:	e001      	b.n	8005ff0 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0de      	beq.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005ff0:	6951      	ldr	r1, [r2, #20]
 8005ff2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005ff4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ff8:	d5d9      	bpl.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005ffa:	e7f7      	b.n	8005fec <HAL_PWREx_ControlVoltageScaling+0xc8>
 8005ffc:	40007000 	.word	0x40007000
 8006000:	20000554 	.word	0x20000554
 8006004:	431bde83 	.word	0x431bde83

08006008 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006008:	4a02      	ldr	r2, [pc, #8]	@ (8006014 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800600a:	6893      	ldr	r3, [r2, #8]
 800600c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006010:	6093      	str	r3, [r2, #8]
}
 8006012:	4770      	bx	lr
 8006014:	40007000 	.word	0x40007000

08006018 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006018:	2800      	cmp	r0, #0
 800601a:	f000 8239 	beq.w	8006490 <HAL_RCC_OscConfig+0x478>
{
 800601e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006022:	6803      	ldr	r3, [r0, #0]
 8006024:	07d9      	lsls	r1, r3, #31
{
 8006026:	b082      	sub	sp, #8
 8006028:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800602a:	d512      	bpl.n	8006052 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800602c:	49a3      	ldr	r1, [pc, #652]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 800602e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006030:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006032:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006036:	2a0c      	cmp	r2, #12
 8006038:	f000 80d6 	beq.w	80061e8 <HAL_RCC_OscConfig+0x1d0>
 800603c:	2a08      	cmp	r2, #8
 800603e:	f040 80d8 	bne.w	80061f2 <HAL_RCC_OscConfig+0x1da>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006042:	4a9e      	ldr	r2, [pc, #632]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	0392      	lsls	r2, r2, #14
 8006048:	d503      	bpl.n	8006052 <HAL_RCC_OscConfig+0x3a>
 800604a:	6862      	ldr	r2, [r4, #4]
 800604c:	2a00      	cmp	r2, #0
 800604e:	f000 81a4 	beq.w	800639a <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006052:	079a      	lsls	r2, r3, #30
 8006054:	d522      	bpl.n	800609c <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006056:	4a99      	ldr	r2, [pc, #612]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 8006058:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800605a:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800605c:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006060:	2b0c      	cmp	r3, #12
 8006062:	f000 80fe 	beq.w	8006262 <HAL_RCC_OscConfig+0x24a>
 8006066:	2b04      	cmp	r3, #4
 8006068:	f040 8100 	bne.w	800626c <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800606c:	4b93      	ldr	r3, [pc, #588]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	055b      	lsls	r3, r3, #21
 8006072:	d503      	bpl.n	800607c <HAL_RCC_OscConfig+0x64>
 8006074:	68e3      	ldr	r3, [r4, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 818f 	beq.w	800639a <HAL_RCC_OscConfig+0x382>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607c:	4a8f      	ldr	r2, [pc, #572]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 800607e:	6920      	ldr	r0, [r4, #16]
 8006080:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006082:	498f      	ldr	r1, [pc, #572]	@ (80062c0 <HAL_RCC_OscConfig+0x2a8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006084:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006088:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800608c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800608e:	6808      	ldr	r0, [r1, #0]
 8006090:	f7fe fe3a 	bl	8004d08 <HAL_InitTick>
 8006094:	2800      	cmp	r0, #0
 8006096:	f040 8180 	bne.w	800639a <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	071a      	lsls	r2, r3, #28
 800609e:	d519      	bpl.n	80060d4 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060a0:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060a2:	4d86      	ldr	r5, [pc, #536]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80c8 	beq.w	800623a <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_ENABLE();
 80060aa:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b6:	f7fe fe69 	bl	8004d8c <HAL_GetTick>
 80060ba:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060bc:	e005      	b.n	80060ca <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060be:	f7fe fe65 	bl	8004d8c <HAL_GetTick>
 80060c2:	1b80      	subs	r0, r0, r6
 80060c4:	2802      	cmp	r0, #2
 80060c6:	f200 8118 	bhi.w	80062fa <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060ca:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80060ce:	079b      	lsls	r3, r3, #30
 80060d0:	d5f5      	bpl.n	80060be <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	075d      	lsls	r5, r3, #29
 80060d6:	d541      	bpl.n	800615c <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060d8:	4b78      	ldr	r3, [pc, #480]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 80060da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80060dc:	00d0      	lsls	r0, r2, #3
 80060de:	f100 8110 	bmi.w	8006302 <HAL_RCC_OscConfig+0x2ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80060e4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80060e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80060ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80060f4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060f6:	4e73      	ldr	r6, [pc, #460]	@ (80062c4 <HAL_RCC_OscConfig+0x2ac>)
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	05d9      	lsls	r1, r3, #23
 80060fc:	f140 812f 	bpl.w	800635e <HAL_RCC_OscConfig+0x346>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006100:	68a3      	ldr	r3, [r4, #8]
 8006102:	2b01      	cmp	r3, #1
 8006104:	f000 80ff 	beq.w	8006306 <HAL_RCC_OscConfig+0x2ee>
 8006108:	2b05      	cmp	r3, #5
 800610a:	f000 8185 	beq.w	8006418 <HAL_RCC_OscConfig+0x400>
 800610e:	4e6b      	ldr	r6, [pc, #428]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 8006110:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8006114:	f022 0201 	bic.w	r2, r2, #1
 8006118:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 800611c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8006120:	f022 0204 	bic.w	r2, r2, #4
 8006124:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006128:	2b00      	cmp	r3, #0
 800612a:	f040 80f3 	bne.w	8006314 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612e:	f7fe fe2d 	bl	8004d8c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006132:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8006136:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006138:	e005      	b.n	8006146 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613a:	f7fe fe27 	bl	8004d8c <HAL_GetTick>
 800613e:	1bc0      	subs	r0, r0, r7
 8006140:	4540      	cmp	r0, r8
 8006142:	f200 80da 	bhi.w	80062fa <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006146:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 800614a:	0799      	lsls	r1, r3, #30
 800614c:	d4f5      	bmi.n	800613a <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800614e:	b125      	cbz	r5, 800615a <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006150:	4a5a      	ldr	r2, [pc, #360]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 8006152:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006158:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	069a      	lsls	r2, r3, #26
 800615e:	d518      	bpl.n	8006192 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006160:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006162:	4d56      	ldr	r5, [pc, #344]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80e6 	beq.w	8006336 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 800616a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006176:	f7fe fe09 	bl	8004d8c <HAL_GetTick>
 800617a:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800617c:	e005      	b.n	800618a <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800617e:	f7fe fe05 	bl	8004d8c <HAL_GetTick>
 8006182:	1b80      	subs	r0, r0, r6
 8006184:	2802      	cmp	r0, #2
 8006186:	f200 80b8 	bhi.w	80062fa <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800618a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800618e:	079b      	lsls	r3, r3, #30
 8006190:	d5f5      	bpl.n	800617e <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006192:	69e3      	ldr	r3, [r4, #28]
 8006194:	b323      	cbz	r3, 80061e0 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006196:	4d49      	ldr	r5, [pc, #292]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 8006198:	68aa      	ldr	r2, [r5, #8]
 800619a:	f002 020c 	and.w	r2, r2, #12
 800619e:	2a0c      	cmp	r2, #12
 80061a0:	f000 8148 	beq.w	8006434 <HAL_RCC_OscConfig+0x41c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061a4:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a6:	682b      	ldr	r3, [r5, #0]
 80061a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061ac:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061ae:	f000 80f6 	beq.w	800639e <HAL_RCC_OscConfig+0x386>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80061b2:	68eb      	ldr	r3, [r5, #12]
 80061b4:	f023 0303 	bic.w	r3, r3, #3
 80061b8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80061ba:	68eb      	ldr	r3, [r5, #12]
 80061bc:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80061c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061c4:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fe fde1 	bl	8004d8c <HAL_GetTick>
 80061ca:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061cc:	e005      	b.n	80061da <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ce:	f7fe fddd 	bl	8004d8c <HAL_GetTick>
 80061d2:	1b00      	subs	r0, r0, r4
 80061d4:	2802      	cmp	r0, #2
 80061d6:	f200 8090 	bhi.w	80062fa <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	019b      	lsls	r3, r3, #6
 80061de:	d4f6      	bmi.n	80061ce <HAL_RCC_OscConfig+0x1b6>
      }
    }
  }
  }

  return HAL_OK;
 80061e0:	2000      	movs	r0, #0
}
 80061e2:	b002      	add	sp, #8
 80061e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061e8:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80061ec:	2903      	cmp	r1, #3
 80061ee:	f43f af28 	beq.w	8006042 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f2:	6863      	ldr	r3, [r4, #4]
 80061f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f8:	d055      	beq.n	80062a6 <HAL_RCC_OscConfig+0x28e>
 80061fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061fe:	f000 80bf 	beq.w	8006380 <HAL_RCC_OscConfig+0x368>
 8006202:	4d2e      	ldr	r5, [pc, #184]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 8006204:	682a      	ldr	r2, [r5, #0]
 8006206:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800620a:	602a      	str	r2, [r5, #0]
 800620c:	682a      	ldr	r2, [r5, #0]
 800620e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006212:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006214:	2b00      	cmp	r3, #0
 8006216:	d14b      	bne.n	80062b0 <HAL_RCC_OscConfig+0x298>
        tickstart = HAL_GetTick();
 8006218:	f7fe fdb8 	bl	8004d8c <HAL_GetTick>
 800621c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800621e:	e004      	b.n	800622a <HAL_RCC_OscConfig+0x212>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006220:	f7fe fdb4 	bl	8004d8c <HAL_GetTick>
 8006224:	1b80      	subs	r0, r0, r6
 8006226:	2864      	cmp	r0, #100	@ 0x64
 8006228:	d867      	bhi.n	80062fa <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	0399      	lsls	r1, r3, #14
 800622e:	d4f7      	bmi.n	8006220 <HAL_RCC_OscConfig+0x208>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	079a      	lsls	r2, r3, #30
 8006234:	f57f af32 	bpl.w	800609c <HAL_RCC_OscConfig+0x84>
 8006238:	e70d      	b.n	8006056 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 800623a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8006246:	f7fe fda1 	bl	8004d8c <HAL_GetTick>
 800624a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800624c:	e004      	b.n	8006258 <HAL_RCC_OscConfig+0x240>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800624e:	f7fe fd9d 	bl	8004d8c <HAL_GetTick>
 8006252:	1b80      	subs	r0, r0, r6
 8006254:	2802      	cmp	r0, #2
 8006256:	d850      	bhi.n	80062fa <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006258:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800625c:	079f      	lsls	r7, r3, #30
 800625e:	d4f6      	bmi.n	800624e <HAL_RCC_OscConfig+0x236>
 8006260:	e737      	b.n	80060d2 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006262:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006266:	2a02      	cmp	r2, #2
 8006268:	f43f af00 	beq.w	800606c <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800626c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800626e:	4d13      	ldr	r5, [pc, #76]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006270:	2b00      	cmp	r3, #0
 8006272:	d032      	beq.n	80062da <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_HSI_ENABLE();
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800627a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800627c:	f7fe fd86 	bl	8004d8c <HAL_GetTick>
 8006280:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006282:	e004      	b.n	800628e <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006284:	f7fe fd82 	bl	8004d8c <HAL_GetTick>
 8006288:	1b80      	subs	r0, r0, r6
 800628a:	2802      	cmp	r0, #2
 800628c:	d835      	bhi.n	80062fa <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800628e:	682b      	ldr	r3, [r5, #0]
 8006290:	055f      	lsls	r7, r3, #21
 8006292:	d5f7      	bpl.n	8006284 <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006294:	686b      	ldr	r3, [r5, #4]
 8006296:	6922      	ldr	r2, [r4, #16]
 8006298:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800629c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062a0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	e6fa      	b.n	800609c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a6:	4a05      	ldr	r2, [pc, #20]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
 80062a8:	6813      	ldr	r3, [r2, #0]
 80062aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80062b0:	f7fe fd6c 	bl	8004d8c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062b4:	4e01      	ldr	r6, [pc, #4]	@ (80062bc <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80062b6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062b8:	e00b      	b.n	80062d2 <HAL_RCC_OscConfig+0x2ba>
 80062ba:	bf00      	nop
 80062bc:	40021000 	.word	0x40021000
 80062c0:	2000055c 	.word	0x2000055c
 80062c4:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c8:	f7fe fd60 	bl	8004d8c <HAL_GetTick>
 80062cc:	1b40      	subs	r0, r0, r5
 80062ce:	2864      	cmp	r0, #100	@ 0x64
 80062d0:	d813      	bhi.n	80062fa <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062d2:	6833      	ldr	r3, [r6, #0]
 80062d4:	039f      	lsls	r7, r3, #14
 80062d6:	d5f7      	bpl.n	80062c8 <HAL_RCC_OscConfig+0x2b0>
 80062d8:	e7aa      	b.n	8006230 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_DISABLE();
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80062e2:	f7fe fd53 	bl	8004d8c <HAL_GetTick>
 80062e6:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	0559      	lsls	r1, r3, #21
 80062ec:	f57f aed5 	bpl.w	800609a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f0:	f7fe fd4c 	bl	8004d8c <HAL_GetTick>
 80062f4:	1b80      	subs	r0, r0, r6
 80062f6:	2802      	cmp	r0, #2
 80062f8:	d9f6      	bls.n	80062e8 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 80062fa:	2003      	movs	r0, #3
}
 80062fc:	b002      	add	sp, #8
 80062fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006302:	2500      	movs	r5, #0
 8006304:	e6f7      	b.n	80060f6 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006306:	4a63      	ldr	r2, [pc, #396]	@ (8006494 <HAL_RCC_OscConfig+0x47c>)
 8006308:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8006314:	f7fe fd3a 	bl	8004d8c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006318:	4f5e      	ldr	r7, [pc, #376]	@ (8006494 <HAL_RCC_OscConfig+0x47c>)
      tickstart = HAL_GetTick();
 800631a:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006320:	e004      	b.n	800632c <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006322:	f7fe fd33 	bl	8004d8c <HAL_GetTick>
 8006326:	1b80      	subs	r0, r0, r6
 8006328:	4540      	cmp	r0, r8
 800632a:	d8e6      	bhi.n	80062fa <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800632c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006330:	079b      	lsls	r3, r3, #30
 8006332:	d5f6      	bpl.n	8006322 <HAL_RCC_OscConfig+0x30a>
 8006334:	e70b      	b.n	800614e <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8006336:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8006342:	f7fe fd23 	bl	8004d8c <HAL_GetTick>
 8006346:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006348:	e004      	b.n	8006354 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800634a:	f7fe fd1f 	bl	8004d8c <HAL_GetTick>
 800634e:	1b80      	subs	r0, r0, r6
 8006350:	2802      	cmp	r0, #2
 8006352:	d8d2      	bhi.n	80062fa <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006354:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8006358:	079f      	lsls	r7, r3, #30
 800635a:	d4f6      	bmi.n	800634a <HAL_RCC_OscConfig+0x332>
 800635c:	e719      	b.n	8006192 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800635e:	6833      	ldr	r3, [r6, #0]
 8006360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006364:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006366:	f7fe fd11 	bl	8004d8c <HAL_GetTick>
 800636a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800636c:	6833      	ldr	r3, [r6, #0]
 800636e:	05da      	lsls	r2, r3, #23
 8006370:	f53f aec6 	bmi.w	8006100 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006374:	f7fe fd0a 	bl	8004d8c <HAL_GetTick>
 8006378:	1bc0      	subs	r0, r0, r7
 800637a:	2802      	cmp	r0, #2
 800637c:	d9f6      	bls.n	800636c <HAL_RCC_OscConfig+0x354>
 800637e:	e7bc      	b.n	80062fa <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006380:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006384:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006396:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006398:	e78a      	b.n	80062b0 <HAL_RCC_OscConfig+0x298>
    return HAL_ERROR;
 800639a:	2001      	movs	r0, #1
 800639c:	e721      	b.n	80061e2 <HAL_RCC_OscConfig+0x1ca>
        tickstart = HAL_GetTick();
 800639e:	f7fe fcf5 	bl	8004d8c <HAL_GetTick>
 80063a2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063a4:	e004      	b.n	80063b0 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a6:	f7fe fcf1 	bl	8004d8c <HAL_GetTick>
 80063aa:	1b80      	subs	r0, r0, r6
 80063ac:	2802      	cmp	r0, #2
 80063ae:	d8a4      	bhi.n	80062fa <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	0199      	lsls	r1, r3, #6
 80063b4:	d4f7      	bmi.n	80063a6 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063b6:	68e9      	ldr	r1, [r5, #12]
 80063b8:	4b37      	ldr	r3, [pc, #220]	@ (8006498 <HAL_RCC_OscConfig+0x480>)
 80063ba:	6a22      	ldr	r2, [r4, #32]
 80063bc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063be:	4e35      	ldr	r6, [pc, #212]	@ (8006494 <HAL_RCC_OscConfig+0x47c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063c0:	400b      	ands	r3, r1
 80063c2:	4313      	orrs	r3, r2
 80063c4:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 80063c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80063cc:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80063d0:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 80063d4:	3801      	subs	r0, #1
 80063d6:	0849      	lsrs	r1, r1, #1
 80063d8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80063dc:	3901      	subs	r1, #1
 80063de:	0852      	lsrs	r2, r2, #1
 80063e0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80063e4:	3a01      	subs	r2, #1
 80063e6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80063ea:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063f2:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063f4:	68eb      	ldr	r3, [r5, #12]
 80063f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063fa:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80063fc:	f7fe fcc6 	bl	8004d8c <HAL_GetTick>
 8006400:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006402:	e005      	b.n	8006410 <HAL_RCC_OscConfig+0x3f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006404:	f7fe fcc2 	bl	8004d8c <HAL_GetTick>
 8006408:	1b00      	subs	r0, r0, r4
 800640a:	2802      	cmp	r0, #2
 800640c:	f63f af75 	bhi.w	80062fa <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	019a      	lsls	r2, r3, #6
 8006414:	d5f6      	bpl.n	8006404 <HAL_RCC_OscConfig+0x3ec>
 8006416:	e6e3      	b.n	80061e0 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006418:	4b1e      	ldr	r3, [pc, #120]	@ (8006494 <HAL_RCC_OscConfig+0x47c>)
 800641a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800641e:	f042 0204 	orr.w	r2, r2, #4
 8006422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8006426:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006432:	e76f      	b.n	8006314 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006434:	2b01      	cmp	r3, #1
 8006436:	d0b0      	beq.n	800639a <HAL_RCC_OscConfig+0x382>
      temp_pllckcfg = RCC->PLLCFGR;
 8006438:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800643a:	6a22      	ldr	r2, [r4, #32]
 800643c:	f003 0103 	and.w	r1, r3, #3
 8006440:	4291      	cmp	r1, r2
 8006442:	d1aa      	bne.n	800639a <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006444:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006446:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800644a:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006450:	d1a3      	bne.n	800639a <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006452:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006454:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006458:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800645c:	d19d      	bne.n	800639a <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800645e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006460:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006464:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006468:	d197      	bne.n	800639a <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800646a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800646c:	0852      	lsrs	r2, r2, #1
 800646e:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8006472:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006474:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006478:	d18f      	bne.n	800639a <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800647a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800647c:	0852      	lsrs	r2, r2, #1
 800647e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8006482:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006484:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8006488:	bf14      	ite	ne
 800648a:	2001      	movne	r0, #1
 800648c:	2000      	moveq	r0, #0
 800648e:	e6a8      	b.n	80061e2 <HAL_RCC_OscConfig+0x1ca>
    return HAL_ERROR;
 8006490:	2001      	movs	r0, #1
}
 8006492:	4770      	bx	lr
 8006494:	40021000 	.word	0x40021000
 8006498:	019f800c 	.word	0x019f800c

0800649c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800649c:	4b18      	ldr	r3, [pc, #96]	@ (8006500 <HAL_RCC_GetSysClockFreq+0x64>)
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	f002 020c 	and.w	r2, r2, #12
 80064a4:	2a04      	cmp	r2, #4
 80064a6:	d026      	beq.n	80064f6 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	f002 020c 	and.w	r2, r2, #12
 80064ae:	2a08      	cmp	r2, #8
 80064b0:	d023      	beq.n	80064fa <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	f002 020c 	and.w	r2, r2, #12
 80064b8:	2a0c      	cmp	r2, #12
 80064ba:	d001      	beq.n	80064c0 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80064bc:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80064be:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064c0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064c2:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064c4:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064c6:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 80064ca:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064cc:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064d0:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064d4:	bf0c      	ite	eq
 80064d6:	4b0b      	ldreq	r3, [pc, #44]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064d8:	4b0b      	ldrne	r3, [pc, #44]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064da:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e0:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <HAL_RCC_GetSysClockFreq+0x64>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80064ec:	3301      	adds	r3, #1
 80064ee:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80064f0:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80064f4:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80064f6:	4804      	ldr	r0, [pc, #16]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x6c>)
 80064f8:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80064fa:	4802      	ldr	r0, [pc, #8]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x68>)
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40021000 	.word	0x40021000
 8006504:	016e3600 	.word	0x016e3600
 8006508:	00f42400 	.word	0x00f42400

0800650c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800650c:	2800      	cmp	r0, #0
 800650e:	f000 80ee 	beq.w	80066ee <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006512:	4a78      	ldr	r2, [pc, #480]	@ (80066f4 <HAL_RCC_ClockConfig+0x1e8>)
{
 8006514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006518:	6813      	ldr	r3, [r2, #0]
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	428b      	cmp	r3, r1
 8006520:	460d      	mov	r5, r1
 8006522:	4604      	mov	r4, r0
 8006524:	d20c      	bcs.n	8006540 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006526:	6813      	ldr	r3, [r2, #0]
 8006528:	f023 030f 	bic.w	r3, r3, #15
 800652c:	430b      	orrs	r3, r1
 800652e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006530:	6813      	ldr	r3, [r2, #0]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	428b      	cmp	r3, r1
 8006538:	d002      	beq.n	8006540 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800653a:	2001      	movs	r0, #1
}
 800653c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	07df      	lsls	r7, r3, #31
 8006544:	d569      	bpl.n	800661a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006546:	6867      	ldr	r7, [r4, #4]
 8006548:	2f03      	cmp	r7, #3
 800654a:	f000 80a0 	beq.w	800668e <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800654e:	4b6a      	ldr	r3, [pc, #424]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006550:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006552:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006554:	f000 8097 	beq.w	8006686 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006558:	055b      	lsls	r3, r3, #21
 800655a:	d5ee      	bpl.n	800653a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800655c:	f7ff ff9e 	bl	800649c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006560:	4b66      	ldr	r3, [pc, #408]	@ (80066fc <HAL_RCC_ClockConfig+0x1f0>)
 8006562:	4298      	cmp	r0, r3
 8006564:	f240 80c0 	bls.w	80066e8 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006568:	4a63      	ldr	r2, [pc, #396]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
 800656a:	6893      	ldr	r3, [r2, #8]
 800656c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006574:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006576:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800657a:	4e5f      	ldr	r6, [pc, #380]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
 800657c:	68b3      	ldr	r3, [r6, #8]
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	433b      	orrs	r3, r7
 8006584:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006586:	f7fe fc01 	bl	8004d8c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800658a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800658e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006590:	e004      	b.n	800659c <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006592:	f7fe fbfb 	bl	8004d8c <HAL_GetTick>
 8006596:	1bc0      	subs	r0, r0, r7
 8006598:	4540      	cmp	r0, r8
 800659a:	d871      	bhi.n	8006680 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659c:	68b3      	ldr	r3, [r6, #8]
 800659e:	6862      	ldr	r2, [r4, #4]
 80065a0:	f003 030c 	and.w	r3, r3, #12
 80065a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80065a8:	d1f3      	bne.n	8006592 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	079f      	lsls	r7, r3, #30
 80065ae:	d436      	bmi.n	800661e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 80065b0:	f1b9 0f00 	cmp.w	r9, #0
 80065b4:	d003      	beq.n	80065be <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065b6:	68b3      	ldr	r3, [r6, #8]
 80065b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065bc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065be:	4e4d      	ldr	r6, [pc, #308]	@ (80066f4 <HAL_RCC_ClockConfig+0x1e8>)
 80065c0:	6833      	ldr	r3, [r6, #0]
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	42ab      	cmp	r3, r5
 80065c8:	d846      	bhi.n	8006658 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	075a      	lsls	r2, r3, #29
 80065ce:	d506      	bpl.n	80065de <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065d0:	4949      	ldr	r1, [pc, #292]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
 80065d2:	68e0      	ldr	r0, [r4, #12]
 80065d4:	688a      	ldr	r2, [r1, #8]
 80065d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80065da:	4302      	orrs	r2, r0
 80065dc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065de:	071b      	lsls	r3, r3, #28
 80065e0:	d507      	bpl.n	80065f2 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065e2:	4a45      	ldr	r2, [pc, #276]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
 80065e4:	6921      	ldr	r1, [r4, #16]
 80065e6:	6893      	ldr	r3, [r2, #8]
 80065e8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80065ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80065f0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065f2:	f7ff ff53 	bl	800649c <HAL_RCC_GetSysClockFreq>
 80065f6:	4a40      	ldr	r2, [pc, #256]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
 80065f8:	4c41      	ldr	r4, [pc, #260]	@ (8006700 <HAL_RCC_ClockConfig+0x1f4>)
 80065fa:	6892      	ldr	r2, [r2, #8]
 80065fc:	4941      	ldr	r1, [pc, #260]	@ (8006704 <HAL_RCC_ClockConfig+0x1f8>)
 80065fe:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006602:	4603      	mov	r3, r0
 8006604:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006606:	4840      	ldr	r0, [pc, #256]	@ (8006708 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006608:	f002 021f 	and.w	r2, r2, #31
 800660c:	40d3      	lsrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006610:	6800      	ldr	r0, [r0, #0]
}
 8006612:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006616:	f7fe bb77 	b.w	8004d08 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800661a:	079e      	lsls	r6, r3, #30
 800661c:	d5cf      	bpl.n	80065be <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800661e:	0758      	lsls	r0, r3, #29
 8006620:	d504      	bpl.n	800662c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006622:	4935      	ldr	r1, [pc, #212]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006624:	688a      	ldr	r2, [r1, #8]
 8006626:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800662a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800662c:	0719      	lsls	r1, r3, #28
 800662e:	d506      	bpl.n	800663e <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006630:	4a31      	ldr	r2, [pc, #196]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006632:	6893      	ldr	r3, [r2, #8]
 8006634:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006638:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800663c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800663e:	4a2e      	ldr	r2, [pc, #184]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006640:	68a1      	ldr	r1, [r4, #8]
 8006642:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006644:	4e2b      	ldr	r6, [pc, #172]	@ (80066f4 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006646:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800664a:	430b      	orrs	r3, r1
 800664c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800664e:	6833      	ldr	r3, [r6, #0]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	42ab      	cmp	r3, r5
 8006656:	d9b8      	bls.n	80065ca <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006658:	6833      	ldr	r3, [r6, #0]
 800665a:	f023 030f 	bic.w	r3, r3, #15
 800665e:	432b      	orrs	r3, r5
 8006660:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006662:	f7fe fb93 	bl	8004d8c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006666:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800666a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800666c:	6833      	ldr	r3, [r6, #0]
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	42ab      	cmp	r3, r5
 8006674:	d0a9      	beq.n	80065ca <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006676:	f7fe fb89 	bl	8004d8c <HAL_GetTick>
 800667a:	1bc0      	subs	r0, r0, r7
 800667c:	4540      	cmp	r0, r8
 800667e:	d9f5      	bls.n	800666c <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8006680:	2003      	movs	r0, #3
}
 8006682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006686:	039a      	lsls	r2, r3, #14
 8006688:	f53f af68 	bmi.w	800655c <HAL_RCC_ClockConfig+0x50>
 800668c:	e755      	b.n	800653a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800668e:	4a1a      	ldr	r2, [pc, #104]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006690:	6811      	ldr	r1, [r2, #0]
 8006692:	0188      	lsls	r0, r1, #6
 8006694:	f57f af51 	bpl.w	800653a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006698:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800669a:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800669c:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800669e:	4e17      	ldr	r6, [pc, #92]	@ (80066fc <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066a0:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80066a4:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066a6:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066aa:	bf0c      	ite	eq
 80066ac:	4817      	ldreq	r0, [pc, #92]	@ (800670c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066ae:	4818      	ldrne	r0, [pc, #96]	@ (8006710 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066b0:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066b2:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066b6:	4810      	ldr	r0, [pc, #64]	@ (80066f8 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066b8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80066bc:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066c0:	68c1      	ldr	r1, [r0, #12]
 80066c2:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80066c6:	3101      	adds	r1, #1
 80066c8:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80066ca:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80066ce:	42b2      	cmp	r2, r6
 80066d0:	d90a      	bls.n	80066e8 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066d2:	6882      	ldr	r2, [r0, #8]
 80066d4:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 80066d8:	f43f af46 	beq.w	8006568 <HAL_RCC_ClockConfig+0x5c>
 80066dc:	0799      	lsls	r1, r3, #30
 80066de:	d503      	bpl.n	80066e8 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066e0:	68a3      	ldr	r3, [r4, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f43f af40 	beq.w	8006568 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066e8:	f04f 0900 	mov.w	r9, #0
 80066ec:	e745      	b.n	800657a <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 80066ee:	2001      	movs	r0, #1
}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40022000 	.word	0x40022000
 80066f8:	40021000 	.word	0x40021000
 80066fc:	04c4b400 	.word	0x04c4b400
 8006700:	0800abec 	.word	0x0800abec
 8006704:	20000554 	.word	0x20000554
 8006708:	2000055c 	.word	0x2000055c
 800670c:	016e3600 	.word	0x016e3600
 8006710:	00f42400 	.word	0x00f42400

08006714 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006714:	4b01      	ldr	r3, [pc, #4]	@ (800671c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20000554 	.word	0x20000554

08006720 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006720:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006722:	4a06      	ldr	r2, [pc, #24]	@ (800673c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006724:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006726:	4906      	ldr	r1, [pc, #24]	@ (8006740 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006728:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800672c:	6808      	ldr	r0, [r1, #0]
 800672e:	5cd3      	ldrb	r3, [r2, r3]
 8006730:	f003 031f 	and.w	r3, r3, #31
}
 8006734:	40d8      	lsrs	r0, r3
 8006736:	4770      	bx	lr
 8006738:	40021000 	.word	0x40021000
 800673c:	0800abe4 	.word	0x0800abe4
 8006740:	20000554 	.word	0x20000554

08006744 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006744:	4b05      	ldr	r3, [pc, #20]	@ (800675c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006746:	4a06      	ldr	r2, [pc, #24]	@ (8006760 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006748:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800674a:	4906      	ldr	r1, [pc, #24]	@ (8006764 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800674c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006750:	6808      	ldr	r0, [r1, #0]
 8006752:	5cd3      	ldrb	r3, [r2, r3]
 8006754:	f003 031f 	and.w	r3, r3, #31
}
 8006758:	40d8      	lsrs	r0, r3
 800675a:	4770      	bx	lr
 800675c:	40021000 	.word	0x40021000
 8006760:	0800abe4 	.word	0x0800abe4
 8006764:	20000554 	.word	0x20000554

08006768 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8006768:	4a02      	ldr	r2, [pc, #8]	@ (8006774 <HAL_RCC_EnableCSS+0xc>)
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006770:	6013      	str	r3, [r2, #0]
}
 8006772:	4770      	bx	lr
 8006774:	40021000 	.word	0x40021000

08006778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800677c:	6803      	ldr	r3, [r0, #0]
{
 800677e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006780:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8006784:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006786:	d052      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006788:	4ba1      	ldr	r3, [pc, #644]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800678a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800678c:	00d5      	lsls	r5, r2, #3
 800678e:	f140 8108 	bpl.w	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    FlagStatus       pwrclkchanged = RESET;
 8006792:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006794:	4d9f      	ldr	r5, [pc, #636]	@ (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006796:	682b      	ldr	r3, [r5, #0]
 8006798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800679e:	f7fe faf5 	bl	8004d8c <HAL_GetTick>
 80067a2:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067a4:	e005      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a6:	f7fe faf1 	bl	8004d8c <HAL_GetTick>
 80067aa:	1b83      	subs	r3, r0, r6
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	f200 8103 	bhi.w	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067b2:	682b      	ldr	r3, [r5, #0]
 80067b4:	05d8      	lsls	r0, r3, #23
 80067b6:	d5f6      	bpl.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067b8:	4d95      	ldr	r5, [pc, #596]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067ba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067bc:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067c0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80067c4:	d026      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d024      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067ca:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067ce:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80067d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d6:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067da:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80067de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067e2:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067e6:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067ea:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80067ec:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067f0:	d510      	bpl.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f2:	f7fe facb 	bl	8004d8c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067f6:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80067fa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067fc:	e005      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fe:	f7fe fac5 	bl	8004d8c <HAL_GetTick>
 8006802:	1b80      	subs	r0, r0, r6
 8006804:	4540      	cmp	r0, r8
 8006806:	f200 80d7 	bhi.w	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800680a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800680e:	079b      	lsls	r3, r3, #30
 8006810:	d5f5      	bpl.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006812:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006814:	497e      	ldr	r1, [pc, #504]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006816:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800681a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006824:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006826:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 8006828:	2f00      	cmp	r7, #0
 800682a:	f040 80ca 	bne.w	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800682e:	07de      	lsls	r6, r3, #31
 8006830:	d508      	bpl.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006832:	4977      	ldr	r1, [pc, #476]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006834:	6865      	ldr	r5, [r4, #4]
 8006836:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800683a:	f022 0203 	bic.w	r2, r2, #3
 800683e:	432a      	orrs	r2, r5
 8006840:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006844:	079d      	lsls	r5, r3, #30
 8006846:	d508      	bpl.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006848:	4971      	ldr	r1, [pc, #452]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800684a:	68a5      	ldr	r5, [r4, #8]
 800684c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006850:	f022 020c 	bic.w	r2, r2, #12
 8006854:	432a      	orrs	r2, r5
 8006856:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800685a:	0759      	lsls	r1, r3, #29
 800685c:	d508      	bpl.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800685e:	496c      	ldr	r1, [pc, #432]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006860:	68e5      	ldr	r5, [r4, #12]
 8006862:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006866:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800686a:	432a      	orrs	r2, r5
 800686c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006870:	071a      	lsls	r2, r3, #28
 8006872:	d508      	bpl.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006874:	4966      	ldr	r1, [pc, #408]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006876:	6925      	ldr	r5, [r4, #16]
 8006878:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800687c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8006880:	432a      	orrs	r2, r5
 8006882:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006886:	069f      	lsls	r7, r3, #26
 8006888:	d508      	bpl.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800688a:	4961      	ldr	r1, [pc, #388]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800688c:	6965      	ldr	r5, [r4, #20]
 800688e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006892:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006896:	432a      	orrs	r2, r5
 8006898:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800689c:	065e      	lsls	r6, r3, #25
 800689e:	d508      	bpl.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068a0:	495b      	ldr	r1, [pc, #364]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80068a2:	69a5      	ldr	r5, [r4, #24]
 80068a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80068a8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80068ac:	432a      	orrs	r2, r5
 80068ae:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068b2:	061d      	lsls	r5, r3, #24
 80068b4:	d508      	bpl.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068b6:	4956      	ldr	r1, [pc, #344]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80068b8:	69e5      	ldr	r5, [r4, #28]
 80068ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80068be:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80068c2:	432a      	orrs	r2, r5
 80068c4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068c8:	05d9      	lsls	r1, r3, #23
 80068ca:	d508      	bpl.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068cc:	4950      	ldr	r1, [pc, #320]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80068ce:	6a25      	ldr	r5, [r4, #32]
 80068d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80068d4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80068d8:	432a      	orrs	r2, r5
 80068da:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068de:	059a      	lsls	r2, r3, #22
 80068e0:	d508      	bpl.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068e2:	494b      	ldr	r1, [pc, #300]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80068e4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80068e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80068ea:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80068ee:	432a      	orrs	r2, r5
 80068f0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068f4:	055f      	lsls	r7, r3, #21
 80068f6:	d50b      	bpl.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068f8:	4945      	ldr	r1, [pc, #276]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80068fa:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80068fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006900:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006904:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006906:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800690a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800690e:	d05e      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x256>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006910:	051e      	lsls	r6, r3, #20
 8006912:	d50b      	bpl.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006914:	493e      	ldr	r1, [pc, #248]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006916:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006918:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800691c:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8006920:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006922:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006926:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800692a:	d055      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800692c:	04dd      	lsls	r5, r3, #19
 800692e:	d50b      	bpl.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006930:	4937      	ldr	r1, [pc, #220]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006932:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8006934:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006938:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800693c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800693e:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006942:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006946:	d04c      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006948:	0499      	lsls	r1, r3, #18
 800694a:	d50b      	bpl.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800694c:	4930      	ldr	r1, [pc, #192]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800694e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8006950:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006954:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006958:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800695a:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800695e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006962:	d043      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x274>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006964:	045a      	lsls	r2, r3, #17
 8006966:	d50b      	bpl.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006968:	4929      	ldr	r1, [pc, #164]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800696a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800696c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006970:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006974:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006976:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800697a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800697e:	d03a      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006980:	041b      	lsls	r3, r3, #16
 8006982:	d50b      	bpl.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006984:	4a22      	ldr	r2, [pc, #136]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006986:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006988:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800698c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006990:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006992:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006996:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800699a:	d031      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x288>
  }

#endif /* QUADSPI */

  return status;
}
 800699c:	b002      	add	sp, #8
 800699e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80069a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80069a4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80069a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80069aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80069b4:	2701      	movs	r7, #1
 80069b6:	e6ed      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069b8:	6823      	ldr	r3, [r4, #0]
        status = ret;
 80069ba:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 80069bc:	2f00      	cmp	r7, #0
 80069be:	f43f af36 	beq.w	800682e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c2:	4913      	ldr	r1, [pc, #76]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80069c4:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80069c6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80069ca:	658a      	str	r2, [r1, #88]	@ 0x58
 80069cc:	e72f      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ce:	68ca      	ldr	r2, [r1, #12]
 80069d0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80069d4:	60ca      	str	r2, [r1, #12]
 80069d6:	e79b      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069d8:	68ca      	ldr	r2, [r1, #12]
 80069da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80069de:	60ca      	str	r2, [r1, #12]
 80069e0:	e7a4      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069e2:	68ca      	ldr	r2, [r1, #12]
 80069e4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80069e8:	60ca      	str	r2, [r1, #12]
 80069ea:	e7ad      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ec:	68ca      	ldr	r2, [r1, #12]
 80069ee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80069f2:	60ca      	str	r2, [r1, #12]
 80069f4:	e7b6      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069f6:	68ca      	ldr	r2, [r1, #12]
 80069f8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80069fc:	60ca      	str	r2, [r1, #12]
 80069fe:	e7bf      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a00:	68d3      	ldr	r3, [r2, #12]
 8006a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a06:	60d3      	str	r3, [r2, #12]
}
 8006a08:	b002      	add	sp, #8
 8006a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a0e:	bf00      	nop
 8006a10:	40021000 	.word	0x40021000
 8006a14:	40007000 	.word	0x40007000

08006a18 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1c:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a1e:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006a20:	460e      	mov	r6, r1
 8006a22:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8006a24:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006a28:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006a2a:	f7fe f9af 	bl	8004d8c <HAL_GetTick>
 8006a2e:	4437      	add	r7, r6
 8006a30:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8006a32:	f7fe f9ab 	bl	8004d8c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a36:	4b32      	ldr	r3, [pc, #200]	@ (8006b00 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a38:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006a44:	0d1b      	lsrs	r3, r3, #20
 8006a46:	fb07 f303 	mul.w	r3, r7, r3
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a4e:	d111      	bne.n	8006a74 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8006a50:	68a3      	ldr	r3, [r4, #8]
 8006a52:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8006a56:	d009      	beq.n	8006a6c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a58:	7b23      	ldrb	r3, [r4, #12]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a60:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a64:	68a3      	ldr	r3, [r4, #8]
 8006a66:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8006a6a:	d1f5      	bne.n	8006a58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8006a6c:	2000      	movs	r0, #0
}
 8006a6e:	b002      	add	sp, #8
 8006a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a74:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a76:	4623      	mov	r3, r4
 8006a78:	e013      	b.n	8006aa2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 8006a7a:	7b23      	ldrb	r3, [r4, #12]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8006a82:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a86:	f7fe f981 	bl	8004d8c <HAL_GetTick>
 8006a8a:	eba0 0008 	sub.w	r0, r0, r8
 8006a8e:	42b8      	cmp	r0, r7
 8006a90:	d20c      	bcs.n	8006aac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 8006a92:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006a94:	9b01      	ldr	r3, [sp, #4]
 8006a96:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 8006a98:	2a00      	cmp	r2, #0
      count--;
 8006a9a:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a9c:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 8006a9e:	bf08      	it	eq
 8006aa0:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8006aa8:	d1e7      	bne.n	8006a7a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 8006aaa:	e7df      	b.n	8006a6c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aac:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ab0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab2:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ab6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006aba:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006abc:	d013      	beq.n	8006ae6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006abe:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006ac0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006ac4:	d107      	bne.n	8006ad6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ad4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006ad6:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8006ad8:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8006ada:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006ade:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006ae2:	2003      	movs	r0, #3
 8006ae4:	e7c3      	b.n	8006a6e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ae6:	68aa      	ldr	r2, [r5, #8]
 8006ae8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006aec:	d002      	beq.n	8006af4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aee:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006af2:	d1e4      	bne.n	8006abe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e7df      	b.n	8006abe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 8006afe:	bf00      	nop
 8006b00:	20000554 	.word	0x20000554

08006b04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8006b0a:	2300      	movs	r3, #0
{
 8006b0c:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 8006b0e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006b12:	eb01 0902 	add.w	r9, r1, r2
{
 8006b16:	4617      	mov	r7, r2
 8006b18:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b1a:	f7fe f937 	bl	8004d8c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b1e:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8006c44 <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b22:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8006b26:	f7fe f931 	bl	8004d8c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b2a:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b2e:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b38:	0d1b      	lsrs	r3, r3, #20
 8006b3a:	fb0a f303 	mul.w	r3, sl, r3
 8006b3e:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b40:	1c73      	adds	r3, r6, #1
 8006b42:	bf18      	it	ne
 8006b44:	4683      	movne	fp, r0
 8006b46:	d130      	bne.n	8006baa <SPI_EndRxTxTransaction+0xa6>
 8006b48:	68a3      	ldr	r3, [r4, #8]
 8006b4a:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8006b4e:	d1fb      	bne.n	8006b48 <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b50:	f7fe f91c 	bl	8004d8c <HAL_GetTick>
 8006b54:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8006b58:	f7fe f918 	bl	8004d8c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b5c:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b60:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b62:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006b66:	fb09 f303 	mul.w	r3, r9, r3
 8006b6a:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 8006b6c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b6e:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b70:	d130      	bne.n	8006bd4 <SPI_EndRxTxTransaction+0xd0>
 8006b72:	68a3      	ldr	r3, [r4, #8]
 8006b74:	061a      	lsls	r2, r3, #24
 8006b76:	d4fc      	bmi.n	8006b72 <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b78:	463a      	mov	r2, r7
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f7ff ff4b 	bl	8006a18 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006b82:	bb58      	cbnz	r0, 8006bdc <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006b84:	b005      	add	sp, #20
 8006b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b8a:	f7fe f8ff 	bl	8004d8c <HAL_GetTick>
 8006b8e:	eba0 000b 	sub.w	r0, r0, fp
 8006b92:	4582      	cmp	sl, r0
 8006b94:	d92a      	bls.n	8006bec <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8006b96:	9a02      	ldr	r2, [sp, #8]
      count--;
 8006b98:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b9a:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8006b9c:	2a00      	cmp	r2, #0
      count--;
 8006b9e:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006ba2:	bf08      	it	eq
 8006ba4:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8006ba8:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8006baa:	68a3      	ldr	r3, [r4, #8]
 8006bac:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8006bb0:	d1eb      	bne.n	8006b8a <SPI_EndRxTxTransaction+0x86>
 8006bb2:	e7cd      	b.n	8006b50 <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bb4:	f7fe f8ea 	bl	8004d8c <HAL_GetTick>
 8006bb8:	eba0 0008 	sub.w	r0, r0, r8
 8006bbc:	4581      	cmp	r9, r0
 8006bbe:	d915      	bls.n	8006bec <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8006bc0:	9a03      	ldr	r2, [sp, #12]
      count--;
 8006bc2:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bc4:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8006bc6:	2a00      	cmp	r2, #0
      count--;
 8006bc8:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006bcc:	bf08      	it	eq
 8006bce:	f04f 0900 	moveq.w	r9, #0
      count--;
 8006bd2:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd4:	68a3      	ldr	r3, [r4, #8]
 8006bd6:	061b      	lsls	r3, r3, #24
 8006bd8:	d4ec      	bmi.n	8006bb4 <SPI_EndRxTxTransaction+0xb0>
 8006bda:	e7cd      	b.n	8006b78 <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bdc:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8006bde:	f043 0320 	orr.w	r3, r3, #32
 8006be2:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006be4:	2003      	movs	r0, #3
}
 8006be6:	b005      	add	sp, #20
 8006be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bec:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bf0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf2:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bf6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bfa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bfc:	d016      	beq.n	8006c2c <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bfe:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006c00:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006c04:	d107      	bne.n	8006c16 <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c14:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c1c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8006c1e:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c20:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8006c24:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c28:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c2a:	e7db      	b.n	8006be4 <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c2c:	68aa      	ldr	r2, [r5, #8]
 8006c2e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006c32:	d002      	beq.n	8006c3a <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c34:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006c38:	d1e1      	bne.n	8006bfe <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	e7dc      	b.n	8006bfe <SPI_EndRxTxTransaction+0xfa>
 8006c44:	20000554 	.word	0x20000554

08006c48 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d077      	beq.n	8006d3c <HAL_SPI_Init+0xf4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c4c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8006c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c52:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	d057      	beq.n	8006d08 <HAL_SPI_Init+0xc0>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c5e:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c62:	2100      	movs	r1, #0
 8006c64:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c66:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d05a      	beq.n	8006d24 <HAL_SPI_Init+0xdc>
  __HAL_SPI_DISABLE(hspi);
 8006c6e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c70:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006c72:	2302      	movs	r3, #2
 8006c74:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006c78:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c7a:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8006c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c82:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c84:	d846      	bhi.n	8006d14 <HAL_SPI_Init+0xcc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c86:	d154      	bne.n	8006d32 <HAL_SPI_Init+0xea>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c88:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c8a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c8e:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8006c92:	68a3      	ldr	r3, [r4, #8]
 8006c94:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c96:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c9a:	6862      	ldr	r2, [r4, #4]
 8006c9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ca0:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	4313      	orrs	r3, r2
 8006cae:	6962      	ldr	r2, [r4, #20]
 8006cb0:	f002 0201 	and.w	r2, r2, #1
 8006cb4:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cb6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cb8:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cc4:	69e3      	ldr	r3, [r4, #28]
 8006cc6:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8006cca:	6a23      	ldr	r3, [r4, #32]
 8006ccc:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8006cd0:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	ea43 0308 	orr.w	r3, r3, r8
 8006cda:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cdc:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cde:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ce0:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ce4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ce6:	ea4e 0306 	orr.w	r3, lr, r6
 8006cea:	ea43 030c 	orr.w	r3, r3, ip
 8006cee:	4303      	orrs	r3, r0
 8006cf0:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cf2:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cf4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8006cfa:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cfc:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cfe:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d00:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
}
 8006d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d08:	6843      	ldr	r3, [r0, #4]
 8006d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d0e:	d0a6      	beq.n	8006c5e <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d10:	61c2      	str	r2, [r0, #28]
 8006d12:	e7a4      	b.n	8006c5e <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d14:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8006d18:	d112      	bne.n	8006d40 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d1a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d1c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d1e:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8006d22:	e7b6      	b.n	8006c92 <HAL_SPI_Init+0x4a>
    hspi->Lock = HAL_UNLOCKED;
 8006d24:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f7fd fd09 	bl	8004740 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006d30:	e79d      	b.n	8006c6e <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d32:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d36:	2500      	movs	r5, #0
 8006d38:	62a5      	str	r5, [r4, #40]	@ 0x28
 8006d3a:	e7aa      	b.n	8006c92 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8006d3c:	2001      	movs	r0, #1
}
 8006d3e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d40:	2000      	movs	r0, #0
 8006d42:	e7f8      	b.n	8006d36 <HAL_SPI_Init+0xee>

08006d44 <HAL_SPI_TransmitReceive>:
{
 8006d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d48:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006d4a:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
{
 8006d4e:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8006d50:	2801      	cmp	r0, #1
 8006d52:	f000 809e 	beq.w	8006e92 <HAL_SPI_TransmitReceive+0x14e>
 8006d56:	461f      	mov	r7, r3
 8006d58:	2301      	movs	r3, #1
 8006d5a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006d5e:	4689      	mov	r9, r1
 8006d60:	4690      	mov	r8, r2
 8006d62:	f7fe f813 	bl	8004d8c <HAL_GetTick>
 8006d66:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8006d68:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006d6c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d6e:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8006d70:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d72:	d010      	beq.n	8006d96 <HAL_SPI_TransmitReceive+0x52>
 8006d74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d78:	d008      	beq.n	8006d8c <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8006d7a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006d7c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8006d7e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8006d80:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8006d84:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d8c:	68a2      	ldr	r2, [r4, #8]
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	d1f3      	bne.n	8006d7a <HAL_SPI_TransmitReceive+0x36>
 8006d92:	2904      	cmp	r1, #4
 8006d94:	d1f1      	bne.n	8006d7a <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d96:	f1b9 0f00 	cmp.w	r9, #0
 8006d9a:	f000 80d4 	beq.w	8006f46 <HAL_SPI_TransmitReceive+0x202>
 8006d9e:	f1b8 0f00 	cmp.w	r8, #0
 8006da2:	f000 80d0 	beq.w	8006f46 <HAL_SPI_TransmitReceive+0x202>
 8006da6:	2f00      	cmp	r7, #0
 8006da8:	f000 80cd 	beq.w	8006f46 <HAL_SPI_TransmitReceive+0x202>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dac:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006db0:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006db2:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006db6:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006db8:	bf1c      	itt	ne
 8006dba:	2205      	movne	r2, #5
 8006dbc:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc0:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006dc2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc6:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8006dc8:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 8006dcc:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dd0:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 8006dd2:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dd6:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006dda:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006ddc:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006dde:	d85b      	bhi.n	8006e98 <HAL_SPI_TransmitReceive+0x154>
 8006de0:	2f01      	cmp	r7, #1
 8006de2:	f000 8124 	beq.w	800702e <HAL_SPI_TransmitReceive+0x2ea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006de6:	6851      	ldr	r1, [r2, #4]
 8006de8:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8006dec:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dee:	6811      	ldr	r1, [r2, #0]
 8006df0:	0649      	lsls	r1, r1, #25
 8006df2:	d403      	bmi.n	8006dfc <HAL_SPI_TransmitReceive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 8006df4:	6811      	ldr	r1, [r2, #0]
 8006df6:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8006dfa:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dfc:	b96b      	cbnz	r3, 8006e1a <HAL_SPI_TransmitReceive+0xd6>
      if (hspi->TxXferCount > 1U)
 8006dfe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	f240 80fd 	bls.w	8007002 <HAL_SPI_TransmitReceive+0x2be>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e08:	4649      	mov	r1, r9
 8006e0a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006e0e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8006e10:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e12:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e14:	3b02      	subs	r3, #2
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006e1a:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e1c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	b92b      	cbnz	r3, 8006e2e <HAL_SPI_TransmitReceive+0xea>
 8006e22:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8082 	beq.w	8006f32 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e2e:	6821      	ldr	r1, [r4, #0]
 8006e30:	688b      	ldr	r3, [r1, #8]
 8006e32:	079a      	lsls	r2, r3, #30
 8006e34:	d506      	bpl.n	8006e44 <HAL_SPI_TransmitReceive+0x100>
 8006e36:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	b11b      	cbz	r3, 8006e44 <HAL_SPI_TransmitReceive+0x100>
 8006e3c:	2f00      	cmp	r7, #0
 8006e3e:	f040 8095 	bne.w	8006f6c <HAL_SPI_TransmitReceive+0x228>
        txallowed = 0U;
 8006e42:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e44:	688b      	ldr	r3, [r1, #8]
 8006e46:	f013 0301 	ands.w	r3, r3, #1
 8006e4a:	d019      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0x13c>
 8006e4c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8006e50:	b292      	uxth	r2, r2
 8006e52:	b1aa      	cbz	r2, 8006e80 <HAL_SPI_TransmitReceive+0x13c>
        if (hspi->RxXferCount > 1U)
 8006e54:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e58:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8006e5a:	b280      	uxth	r0, r0
 8006e5c:	2801      	cmp	r0, #1
 8006e5e:	d979      	bls.n	8006f54 <HAL_SPI_TransmitReceive+0x210>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e60:	68c8      	ldr	r0, [r1, #12]
 8006e62:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e66:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006e68:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8006e6c:	3a02      	subs	r2, #2
 8006e6e:	b292      	uxth	r2, r2
 8006e70:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006e74:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8006e78:	b292      	uxth	r2, r2
 8006e7a:	2a01      	cmp	r2, #1
 8006e7c:	d965      	bls.n	8006f4a <HAL_SPI_TransmitReceive+0x206>
        txallowed = 1U;
 8006e7e:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e80:	f7fd ff84 	bl	8004d8c <HAL_GetTick>
 8006e84:	1b40      	subs	r0, r0, r5
 8006e86:	42b0      	cmp	r0, r6
 8006e88:	d3c8      	bcc.n	8006e1c <HAL_SPI_TransmitReceive+0xd8>
 8006e8a:	1c73      	adds	r3, r6, #1
 8006e8c:	d0c6      	beq.n	8006e1c <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 8006e8e:	2003      	movs	r0, #3
 8006e90:	e774      	b.n	8006d7c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8006e92:	2002      	movs	r0, #2
}
 8006e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e98:	6851      	ldr	r1, [r2, #4]
 8006e9a:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8006e9e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	0648      	lsls	r0, r1, #25
 8006ea4:	d403      	bmi.n	8006eae <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 8006ea6:	6811      	ldr	r1, [r2, #0]
 8006ea8:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8006eac:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f040 8082 	bne.w	8006fb8 <HAL_SPI_TransmitReceive+0x274>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006eba:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8006ebc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ebe:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006ec6:	1c73      	adds	r3, r6, #1
{
 8006ec8:	f04f 0701 	mov.w	r7, #1
 8006ecc:	d028      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x1dc>
 8006ece:	e06e      	b.n	8006fae <HAL_SPI_TransmitReceive+0x26a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ed0:	6822      	ldr	r2, [r4, #0]
 8006ed2:	6893      	ldr	r3, [r2, #8]
 8006ed4:	0798      	lsls	r0, r3, #30
 8006ed6:	d50d      	bpl.n	8006ef4 <HAL_SPI_TransmitReceive+0x1b0>
 8006ed8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	b153      	cbz	r3, 8006ef4 <HAL_SPI_TransmitReceive+0x1b0>
 8006ede:	b147      	cbz	r7, 8006ef2 <HAL_SPI_TransmitReceive+0x1ae>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ee2:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006ee6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006eea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 8006ef2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ef4:	6893      	ldr	r3, [r2, #8]
 8006ef6:	f013 0301 	ands.w	r3, r3, #1
 8006efa:	d00f      	beq.n	8006f1c <HAL_SPI_TransmitReceive+0x1d8>
 8006efc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8006f00:	b289      	uxth	r1, r1
 8006f02:	b159      	cbz	r1, 8006f1c <HAL_SPI_TransmitReceive+0x1d8>
        txallowed = 1U;
 8006f04:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f08:	68d2      	ldr	r2, [r2, #12]
 8006f0a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f0e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f1c:	f7fd ff36 	bl	8004d8c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f20:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1d3      	bne.n	8006ed0 <HAL_SPI_TransmitReceive+0x18c>
 8006f28:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1ce      	bne.n	8006ed0 <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f32:	462a      	mov	r2, r5
 8006f34:	4631      	mov	r1, r6
 8006f36:	4620      	mov	r0, r4
 8006f38:	f7ff fde4 	bl	8006b04 <SPI_EndRxTxTransaction>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f43f af1d 	beq.w	8006d7c <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f42:	2320      	movs	r3, #32
 8006f44:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8006f46:	2001      	movs	r0, #1
 8006f48:	e718      	b.n	8006d7c <HAL_SPI_TransmitReceive+0x38>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f4a:	684a      	ldr	r2, [r1, #4]
 8006f4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f50:	604a      	str	r2, [r1, #4]
 8006f52:	e794      	b.n	8006e7e <HAL_SPI_TransmitReceive+0x13a>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f54:	7b09      	ldrb	r1, [r1, #12]
 8006f56:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8006f58:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006f5a:	3201      	adds	r2, #1
 8006f5c:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006f5e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8006f62:	3a01      	subs	r2, #1
 8006f64:	b292      	uxth	r2, r2
 8006f66:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8006f6a:	e788      	b.n	8006e7e <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 8006f6c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8006f70:	b292      	uxth	r2, r2
 8006f72:	2a01      	cmp	r2, #1
 8006f74:	d950      	bls.n	8007018 <HAL_SPI_TransmitReceive+0x2d4>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f76:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006f7a:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f7e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f80:	3b02      	subs	r3, #2
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006f86:	e75c      	b.n	8006e42 <HAL_SPI_TransmitReceive+0xfe>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f88:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0cf      	beq.n	8006f32 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	6893      	ldr	r3, [r2, #8]
 8006f96:	0799      	lsls	r1, r3, #30
 8006f98:	d423      	bmi.n	8006fe2 <HAL_SPI_TransmitReceive+0x29e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f9a:	6893      	ldr	r3, [r2, #8]
 8006f9c:	f013 0301 	ands.w	r3, r3, #1
 8006fa0:	d10d      	bne.n	8006fbe <HAL_SPI_TransmitReceive+0x27a>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fa2:	f7fd fef3 	bl	8004d8c <HAL_GetTick>
 8006fa6:	1b40      	subs	r0, r0, r5
 8006fa8:	42b0      	cmp	r0, r6
 8006faa:	f4bf af70 	bcs.w	8006e8e <HAL_SPI_TransmitReceive+0x14a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ed      	bne.n	8006f92 <HAL_SPI_TransmitReceive+0x24e>
 8006fb6:	e7e7      	b.n	8006f88 <HAL_SPI_TransmitReceive+0x244>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb8:	2f01      	cmp	r7, #1
 8006fba:	d184      	bne.n	8006ec6 <HAL_SPI_TransmitReceive+0x182>
 8006fbc:	e77a      	b.n	8006eb4 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fbe:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8006fc2:	b289      	uxth	r1, r1
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	d0ec      	beq.n	8006fa2 <HAL_SPI_TransmitReceive+0x25e>
        txallowed = 1U;
 8006fc8:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006fcc:	68d2      	ldr	r2, [r2, #12]
 8006fce:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fd2:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006fd4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8006fe0:	e7df      	b.n	8006fa2 <HAL_SPI_TransmitReceive+0x25e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fe2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0d7      	beq.n	8006f9a <HAL_SPI_TransmitReceive+0x256>
 8006fea:	b147      	cbz	r7, 8006ffe <HAL_SPI_TransmitReceive+0x2ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006fee:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006ff2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ff6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8006ffe:	2700      	movs	r7, #0
 8007000:	e7cb      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x256>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007002:	f899 3000 	ldrb.w	r3, [r9]
 8007006:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8007008:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800700a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800700c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800700e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8007010:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8007012:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007014:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8007016:	e700      	b.n	8006e1a <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800701c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800701e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007020:	6821      	ldr	r1, [r4, #0]
          hspi->TxXferCount--;
 8007022:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8007024:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8007026:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8007028:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800702a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800702c:	e709      	b.n	8006e42 <HAL_SPI_TransmitReceive+0xfe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800702e:	6853      	ldr	r3, [r2, #4]
 8007030:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007034:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	0659      	lsls	r1, r3, #25
 800703a:	f53f aee0 	bmi.w	8006dfe <HAL_SPI_TransmitReceive+0xba>
    __HAL_SPI_ENABLE(hspi);
 800703e:	6813      	ldr	r3, [r2, #0]
 8007040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007044:	6013      	str	r3, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007046:	e6da      	b.n	8006dfe <HAL_SPI_TransmitReceive+0xba>

08007048 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007048:	6a03      	ldr	r3, [r0, #32]
 800704a:	f023 0301 	bic.w	r3, r3, #1
 800704e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007050:	6a03      	ldr	r3, [r0, #32]
{
 8007052:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007056:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007058:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800705a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800705e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007062:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007064:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007066:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800706a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800706c:	4d13      	ldr	r5, [pc, #76]	@ (80070bc <TIM_OC1_SetConfig+0x74>)
 800706e:	42a8      	cmp	r0, r5
 8007070:	d00f      	beq.n	8007092 <TIM_OC1_SetConfig+0x4a>
 8007072:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007076:	42a8      	cmp	r0, r5
 8007078:	d00b      	beq.n	8007092 <TIM_OC1_SetConfig+0x4a>
 800707a:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800707e:	42a8      	cmp	r0, r5
 8007080:	d007      	beq.n	8007092 <TIM_OC1_SetConfig+0x4a>
 8007082:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007086:	42a8      	cmp	r0, r5
 8007088:	d003      	beq.n	8007092 <TIM_OC1_SetConfig+0x4a>
 800708a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800708e:	42a8      	cmp	r0, r5
 8007090:	d10d      	bne.n	80070ae <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007092:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007094:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007098:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800709a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800709e:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80070a2:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80070a6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80070aa:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80070b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80070b2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80070b4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80070b6:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80070b8:	6203      	str	r3, [r0, #32]
}
 80070ba:	4770      	bx	lr
 80070bc:	40012c00 	.word	0x40012c00

080070c0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070c0:	6a03      	ldr	r3, [r0, #32]
 80070c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070c6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c8:	6a03      	ldr	r3, [r0, #32]
{
 80070ca:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ce:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80070d6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80070da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070dc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80070de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070e6:	4d14      	ldr	r5, [pc, #80]	@ (8007138 <TIM_OC3_SetConfig+0x78>)
 80070e8:	42a8      	cmp	r0, r5
 80070ea:	d00f      	beq.n	800710c <TIM_OC3_SetConfig+0x4c>
 80070ec:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80070f0:	42a8      	cmp	r0, r5
 80070f2:	d00b      	beq.n	800710c <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f4:	4d11      	ldr	r5, [pc, #68]	@ (800713c <TIM_OC3_SetConfig+0x7c>)
 80070f6:	42a8      	cmp	r0, r5
 80070f8:	d00f      	beq.n	800711a <TIM_OC3_SetConfig+0x5a>
 80070fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80070fe:	42a8      	cmp	r0, r5
 8007100:	d00b      	beq.n	800711a <TIM_OC3_SetConfig+0x5a>
 8007102:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007106:	42a8      	cmp	r0, r5
 8007108:	d10f      	bne.n	800712a <TIM_OC3_SetConfig+0x6a>
 800710a:	e006      	b.n	800711a <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800710c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800710e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007112:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800711a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800711e:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007122:	ea46 0c05 	orr.w	ip, r6, r5
 8007126:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800712a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800712c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800712e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007130:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8007132:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8007134:	6203      	str	r3, [r0, #32]
}
 8007136:	4770      	bx	lr
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40014000 	.word	0x40014000

08007140 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007140:	6a03      	ldr	r3, [r0, #32]
 8007142:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007146:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007148:	6a03      	ldr	r3, [r0, #32]
{
 800714a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800714c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800714e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007150:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007152:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007156:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800715a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800715e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007164:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007168:	4d14      	ldr	r5, [pc, #80]	@ (80071bc <TIM_OC4_SetConfig+0x7c>)
 800716a:	42a8      	cmp	r0, r5
 800716c:	d00f      	beq.n	800718e <TIM_OC4_SetConfig+0x4e>
 800716e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007172:	42a8      	cmp	r0, r5
 8007174:	d00b      	beq.n	800718e <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007176:	4d12      	ldr	r5, [pc, #72]	@ (80071c0 <TIM_OC4_SetConfig+0x80>)
 8007178:	42a8      	cmp	r0, r5
 800717a:	d00f      	beq.n	800719c <TIM_OC4_SetConfig+0x5c>
 800717c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007180:	42a8      	cmp	r0, r5
 8007182:	d00b      	beq.n	800719c <TIM_OC4_SetConfig+0x5c>
 8007184:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007188:	42a8      	cmp	r0, r5
 800718a:	d10f      	bne.n	80071ac <TIM_OC4_SetConfig+0x6c>
 800718c:	e006      	b.n	800719c <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800718e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007190:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007194:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007198:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800719c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80071a0:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071a4:	ea46 0c05 	orr.w	ip, r6, r5
 80071a8:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071ac:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80071ae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80071b0:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80071b2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80071b4:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 80071b6:	6203      	str	r3, [r0, #32]
}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40014000 	.word	0x40014000

080071c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d06d      	beq.n	80072a4 <HAL_TIM_Base_Init+0xe0>
{
 80071c8:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80071ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80071ce:	4604      	mov	r4, r0
 80071d0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d060      	beq.n	800729a <HAL_TIM_Base_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d8:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071da:	4e33      	ldr	r6, [pc, #204]	@ (80072a8 <HAL_TIM_Base_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 80071dc:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071de:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e0:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80071e2:	2302      	movs	r3, #2
 80071e4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071e8:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80071ea:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071ec:	d044      	beq.n	8007278 <HAL_TIM_Base_Init+0xb4>
 80071ee:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80071f2:	d017      	beq.n	8007224 <HAL_TIM_Base_Init+0x60>
 80071f4:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 80071f8:	42b2      	cmp	r2, r6
 80071fa:	d013      	beq.n	8007224 <HAL_TIM_Base_Init+0x60>
 80071fc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007200:	42b2      	cmp	r2, r6
 8007202:	d00f      	beq.n	8007224 <HAL_TIM_Base_Init+0x60>
 8007204:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8007208:	42b2      	cmp	r2, r6
 800720a:	d035      	beq.n	8007278 <HAL_TIM_Base_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800720c:	4e27      	ldr	r6, [pc, #156]	@ (80072ac <HAL_TIM_Base_Init+0xe8>)
 800720e:	42b2      	cmp	r2, r6
 8007210:	d036      	beq.n	8007280 <HAL_TIM_Base_Init+0xbc>
 8007212:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007216:	42b2      	cmp	r2, r6
 8007218:	d032      	beq.n	8007280 <HAL_TIM_Base_Init+0xbc>
 800721a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800721e:	42b2      	cmp	r2, r6
 8007220:	d108      	bne.n	8007234 <HAL_TIM_Base_Init+0x70>
 8007222:	e02d      	b.n	8007280 <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8007224:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800722a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800722c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800722e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007232:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007234:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007238:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800723a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800723c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800723e:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007240:	2301      	movs	r3, #1
 8007242:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007244:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007248:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800724c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007250:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007254:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800725c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007260:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007264:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007268:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800726c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007270:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007274:	2000      	movs	r0, #0
}
 8007276:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8007278:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800727a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800727e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007280:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007286:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800728c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800728e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007290:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007292:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007294:	6963      	ldr	r3, [r4, #20]
 8007296:	6313      	str	r3, [r2, #48]	@ 0x30
 8007298:	e7d2      	b.n	8007240 <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 800729a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800729e:	f7fd fa8b 	bl	80047b8 <HAL_TIM_Base_MspInit>
 80072a2:	e799      	b.n	80071d8 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80072a4:	2001      	movs	r0, #1
}
 80072a6:	4770      	bx	lr
 80072a8:	40012c00 	.word	0x40012c00
 80072ac:	40014000 	.word	0x40014000

080072b0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80072b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d122      	bne.n	80072fe <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ba:	4916      	ldr	r1, [pc, #88]	@ (8007314 <HAL_TIM_Base_Start_IT+0x64>)
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	2202      	movs	r2, #2
 80072be:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072c2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072cc:	d019      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x52>
 80072ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072d2:	d016      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x52>
 80072d4:	4a10      	ldr	r2, [pc, #64]	@ (8007318 <HAL_TIM_Base_Start_IT+0x68>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x52>
 80072da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00f      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x52>
 80072e2:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00b      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x52>
 80072ea:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d007      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	f042 0201 	orr.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80072fa:	2000      	movs	r0, #0
 80072fc:	4770      	bx	lr
    return HAL_ERROR;
 80072fe:	2001      	movs	r0, #1
}
 8007300:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007302:	6899      	ldr	r1, [r3, #8]
 8007304:	4a05      	ldr	r2, [pc, #20]	@ (800731c <HAL_TIM_Base_Start_IT+0x6c>)
 8007306:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007308:	2a06      	cmp	r2, #6
 800730a:	d0f6      	beq.n	80072fa <HAL_TIM_Base_Start_IT+0x4a>
 800730c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007310:	d1ef      	bne.n	80072f2 <HAL_TIM_Base_Start_IT+0x42>
 8007312:	e7f2      	b.n	80072fa <HAL_TIM_Base_Start_IT+0x4a>
 8007314:	40012c00 	.word	0x40012c00
 8007318:	40000400 	.word	0x40000400
 800731c:	00010007 	.word	0x00010007

08007320 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop

08007324 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007324:	2800      	cmp	r0, #0
 8007326:	d06d      	beq.n	8007404 <HAL_TIM_PWM_Init+0xe0>
{
 8007328:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800732a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800732e:	4604      	mov	r4, r0
 8007330:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007334:	2b00      	cmp	r3, #0
 8007336:	d060      	beq.n	80073fa <HAL_TIM_PWM_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007338:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800733a:	4e33      	ldr	r6, [pc, #204]	@ (8007408 <HAL_TIM_PWM_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 800733c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800733e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007340:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8007342:	2302      	movs	r3, #2
 8007344:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007348:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800734a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800734c:	d044      	beq.n	80073d8 <HAL_TIM_PWM_Init+0xb4>
 800734e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007352:	d017      	beq.n	8007384 <HAL_TIM_PWM_Init+0x60>
 8007354:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8007358:	42b2      	cmp	r2, r6
 800735a:	d013      	beq.n	8007384 <HAL_TIM_PWM_Init+0x60>
 800735c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007360:	42b2      	cmp	r2, r6
 8007362:	d00f      	beq.n	8007384 <HAL_TIM_PWM_Init+0x60>
 8007364:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8007368:	42b2      	cmp	r2, r6
 800736a:	d035      	beq.n	80073d8 <HAL_TIM_PWM_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800736c:	4e27      	ldr	r6, [pc, #156]	@ (800740c <HAL_TIM_PWM_Init+0xe8>)
 800736e:	42b2      	cmp	r2, r6
 8007370:	d036      	beq.n	80073e0 <HAL_TIM_PWM_Init+0xbc>
 8007372:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007376:	42b2      	cmp	r2, r6
 8007378:	d032      	beq.n	80073e0 <HAL_TIM_PWM_Init+0xbc>
 800737a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800737e:	42b2      	cmp	r2, r6
 8007380:	d108      	bne.n	8007394 <HAL_TIM_PWM_Init+0x70>
 8007382:	e02d      	b.n	80073e0 <HAL_TIM_PWM_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8007384:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800738a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800738e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007392:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007398:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800739a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800739c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800739e:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80073a0:	2301      	movs	r3, #1
 80073a2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80073ac:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80073b0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80073b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80073b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80073c4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80073c8:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80073cc:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80073d0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80073d4:	2000      	movs	r0, #0
}
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80073d8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80073de:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073e0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80073e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073e6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ec:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80073ee:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073f0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80073f2:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80073f4:	6963      	ldr	r3, [r4, #20]
 80073f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80073f8:	e7d2      	b.n	80073a0 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 80073fa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80073fe:	f7ff ff8f 	bl	8007320 <HAL_TIM_PWM_MspInit>
 8007402:	e799      	b.n	8007338 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8007404:	2001      	movs	r0, #1
}
 8007406:	4770      	bx	lr
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40014000 	.word	0x40014000

08007410 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007410:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007414:	2b01      	cmp	r3, #1
 8007416:	f000 8086 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x116>
 800741a:	4602      	mov	r2, r0
{
 800741c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800741e:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8007420:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007422:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8007426:	2001      	movs	r0, #1
 8007428:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800742c:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800742e:	4b5c      	ldr	r3, [pc, #368]	@ (80075a0 <HAL_TIM_ConfigClockSource+0x190>)
 8007430:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8007432:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8007434:	680b      	ldr	r3, [r1, #0]
 8007436:	2b70      	cmp	r3, #112	@ 0x70
 8007438:	f000 80a1 	beq.w	800757e <HAL_TIM_ConfigClockSource+0x16e>
 800743c:	d827      	bhi.n	800748e <HAL_TIM_ConfigClockSource+0x7e>
 800743e:	2b50      	cmp	r3, #80	@ 0x50
 8007440:	d073      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x11a>
 8007442:	d93c      	bls.n	80074be <HAL_TIM_ConfigClockSource+0xae>
 8007444:	2b60      	cmp	r3, #96	@ 0x60
 8007446:	d11a      	bne.n	800747e <HAL_TIM_ConfigClockSource+0x6e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007448:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800744a:	6848      	ldr	r0, [r1, #4]
 800744c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800744e:	f023 0310 	bic.w	r3, r3, #16
 8007452:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007454:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8007456:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007458:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800745c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007460:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007464:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007468:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800746a:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800746c:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800746e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007476:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800747a:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800747c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800747e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007480:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007482:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007486:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 800748a:	bc30      	pop	{r4, r5}
 800748c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800748e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007492:	d064      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x14e>
 8007494:	d936      	bls.n	8007504 <HAL_TIM_ConfigClockSource+0xf4>
 8007496:	4943      	ldr	r1, [pc, #268]	@ (80075a4 <HAL_TIM_ConfigClockSource+0x194>)
 8007498:	428b      	cmp	r3, r1
 800749a:	d006      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x9a>
 800749c:	d92b      	bls.n	80074f6 <HAL_TIM_ConfigClockSource+0xe6>
 800749e:	4942      	ldr	r1, [pc, #264]	@ (80075a8 <HAL_TIM_ConfigClockSource+0x198>)
 80074a0:	428b      	cmp	r3, r1
 80074a2:	d002      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x9a>
 80074a4:	3130      	adds	r1, #48	@ 0x30
 80074a6:	428b      	cmp	r3, r1
 80074a8:	d1e9      	bne.n	800747e <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 80074aa:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ac:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80074b0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074b4:	4319      	orrs	r1, r3
 80074b6:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 80074ba:	60a1      	str	r1, [r4, #8]
}
 80074bc:	e025      	b.n	800750a <HAL_TIM_ConfigClockSource+0xfa>
  switch (sClockSourceConfig->ClockSource)
 80074be:	2b40      	cmp	r3, #64	@ 0x40
 80074c0:	d125      	bne.n	800750e <HAL_TIM_ConfigClockSource+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074c2:	684b      	ldr	r3, [r1, #4]
 80074c4:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80074c6:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074c8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80074cc:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ce:	6a23      	ldr	r3, [r4, #32]
 80074d0:	f023 0301 	bic.w	r3, r3, #1
 80074d4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074dc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80074e0:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80074e2:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80074e4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80074e6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80074ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ee:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80074f2:	60a3      	str	r3, [r4, #8]
}
 80074f4:	e009      	b.n	800750a <HAL_TIM_ConfigClockSource+0xfa>
  switch (sClockSourceConfig->ClockSource)
 80074f6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074fa:	d0d6      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x9a>
 80074fc:	3910      	subs	r1, #16
 80074fe:	428b      	cmp	r3, r1
 8007500:	d0d3      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x9a>
 8007502:	e7bc      	b.n	800747e <HAL_TIM_ConfigClockSource+0x6e>
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007508:	d1b9      	bne.n	800747e <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 800750a:	2000      	movs	r0, #0
 800750c:	e7b7      	b.n	800747e <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 800750e:	d8b6      	bhi.n	800747e <HAL_TIM_ConfigClockSource+0x6e>
 8007510:	2b20      	cmp	r3, #32
 8007512:	d0ca      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x9a>
 8007514:	d903      	bls.n	800751e <HAL_TIM_ConfigClockSource+0x10e>
 8007516:	2b30      	cmp	r3, #48	@ 0x30
 8007518:	d0c7      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 800751a:	2001      	movs	r0, #1
 800751c:	e7af      	b.n	800747e <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 800751e:	f033 0110 	bics.w	r1, r3, #16
 8007522:	d1ac      	bne.n	800747e <HAL_TIM_ConfigClockSource+0x6e>
 8007524:	e7c1      	b.n	80074aa <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8007526:	2002      	movs	r0, #2
}
 8007528:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 800752a:	684b      	ldr	r3, [r1, #4]
 800752c:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800752e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007530:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007534:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007536:	6a23      	ldr	r3, [r4, #32]
 8007538:	f023 0301 	bic.w	r3, r3, #1
 800753c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007540:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007544:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007548:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800754a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800754c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800754e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007556:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800755a:	60a3      	str	r3, [r4, #8]
}
 800755c:	e7d5      	b.n	800750a <HAL_TIM_ConfigClockSource+0xfa>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800755e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007562:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007564:	432b      	orrs	r3, r5
 8007566:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007568:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800756c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007570:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007572:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007574:	68a3      	ldr	r3, [r4, #8]
 8007576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800757a:	60a3      	str	r3, [r4, #8]
      break;
 800757c:	e7c5      	b.n	800750a <HAL_TIM_ConfigClockSource+0xfa>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800757e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007582:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007584:	432b      	orrs	r3, r5
 8007586:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007588:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800758c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007590:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007592:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007594:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007596:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800759a:	60a3      	str	r3, [r4, #8]
      break;
 800759c:	e7b5      	b.n	800750a <HAL_TIM_ConfigClockSource+0xfa>
 800759e:	bf00      	nop
 80075a0:	ffce0088 	.word	0xffce0088
 80075a4:	00100030 	.word	0x00100030
 80075a8:	00100040 	.word	0x00100040

080075ac <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80075ac:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d069      	beq.n	8007688 <HAL_TIM_SlaveConfigSynchro+0xdc>
 80075b4:	4684      	mov	ip, r0
 80075b6:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 80075b8:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80075ba:	2302      	movs	r3, #2
{
 80075bc:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80075be:	f88c 203c 	strb.w	r2, [ip, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80075c2:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80075c6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80075c8:	684b      	ldr	r3, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80075ca:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80075cc:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80075d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80075d4:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 80075d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80075da:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80075de:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 80075e0:	2b60      	cmp	r3, #96	@ 0x60
  htim->Instance->SMCR = tmpsmcr;
 80075e2:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80075e4:	d05e      	beq.n	80076a4 <HAL_TIM_SlaveConfigSynchro+0xf8>
 80075e6:	d816      	bhi.n	8007616 <HAL_TIM_SlaveConfigSynchro+0x6a>
 80075e8:	2b40      	cmp	r3, #64	@ 0x40
 80075ea:	d06e      	beq.n	80076ca <HAL_TIM_SlaveConfigSynchro+0x11e>
 80075ec:	d933      	bls.n	8007656 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80075ee:	2b50      	cmp	r3, #80	@ 0x50
 80075f0:	d141      	bne.n	8007676 <HAL_TIM_SlaveConfigSynchro+0xca>
  tmpccer = TIMx->CCER;
 80075f2:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075f4:	688a      	ldr	r2, [r1, #8]
 80075f6:	6909      	ldr	r1, [r1, #16]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075f8:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80075fc:	431a      	orrs	r2, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075fe:	6a03      	ldr	r3, [r0, #32]
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007606:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007608:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800760c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007610:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007612:	6202      	str	r2, [r0, #32]
 8007614:	e00d      	b.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8007616:	2b70      	cmp	r3, #112	@ 0x70
 8007618:	d038      	beq.n	800768c <HAL_TIM_SlaveConfigSynchro+0xe0>
 800761a:	2b6f      	cmp	r3, #111	@ 0x6f
 800761c:	d92b      	bls.n	8007676 <HAL_TIM_SlaveConfigSynchro+0xca>
 800761e:	4a2f      	ldr	r2, [pc, #188]	@ (80076dc <HAL_TIM_SlaveConfigSynchro+0x130>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d006      	beq.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
 8007624:	d91d      	bls.n	8007662 <HAL_TIM_SlaveConfigSynchro+0xb6>
 8007626:	4a2e      	ldr	r2, [pc, #184]	@ (80076e0 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d002      	beq.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
 800762c:	3230      	adds	r2, #48	@ 0x30
 800762e:	4293      	cmp	r3, r2
 8007630:	d121      	bne.n	8007676 <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007632:	68c3      	ldr	r3, [r0, #12]
 8007634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007638:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800763a:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 800763c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800763e:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007640:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007644:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8007646:	f88c 103d 	strb.w	r1, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800764a:	f88c 203c 	strb.w	r2, [ip, #60]	@ 0x3c
  return HAL_OK;
 800764e:	4610      	mov	r0, r2
}
 8007650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007654:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8007656:	2b20      	cmp	r3, #32
 8007658:	d0eb      	beq.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
 800765a:	d909      	bls.n	8007670 <HAL_TIM_SlaveConfigSynchro+0xc4>
 800765c:	2b30      	cmp	r3, #48	@ 0x30
 800765e:	d10a      	bne.n	8007676 <HAL_TIM_SlaveConfigSynchro+0xca>
 8007660:	e7e7      	b.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
 8007662:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007666:	d0e4      	beq.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
 8007668:	3a10      	subs	r2, #16
 800766a:	4293      	cmp	r3, r2
 800766c:	d0e1      	beq.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
 800766e:	e002      	b.n	8007676 <HAL_TIM_SlaveConfigSynchro+0xca>
 8007670:	f033 0310 	bics.w	r3, r3, #16
 8007674:	d0dd      	beq.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8007676:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8007678:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 800767a:	f88c 003d 	strb.w	r0, [ip, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800767e:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 8007682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007686:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007688:	2002      	movs	r0, #2
}
 800768a:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800768c:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8007690:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007692:	6909      	ldr	r1, [r1, #16]
 8007694:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007696:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800769a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800769e:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80076a0:	6083      	str	r3, [r0, #8]
 80076a2:	e7c6      	b.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a4:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076a6:	688c      	ldr	r4, [r1, #8]
 80076a8:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076aa:	f023 0310 	bic.w	r3, r3, #16
 80076ae:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076b0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80076b2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076b4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076bc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80076c0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80076c4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80076c6:	6203      	str	r3, [r0, #32]
 80076c8:	e7b3      	b.n	8007632 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80076ca:	2c05      	cmp	r4, #5
 80076cc:	d0d3      	beq.n	8007676 <HAL_TIM_SlaveConfigSynchro+0xca>
 80076ce:	f1b4 1f01 	cmp.w	r4, #65537	@ 0x10001
 80076d2:	d0d0      	beq.n	8007676 <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 80076d4:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80076d6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80076d8:	6a03      	ldr	r3, [r0, #32]
 80076da:	e791      	b.n	8007600 <HAL_TIM_SlaveConfigSynchro+0x54>
 80076dc:	00100030 	.word	0x00100030
 80076e0:	00100040 	.word	0x00100040

080076e4 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop

080076e8 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop

080076ec <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop

080076f0 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop

080076f4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076f4:	6803      	ldr	r3, [r0, #0]
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	0791      	lsls	r1, r2, #30
{
 80076fa:	b510      	push	{r4, lr}
 80076fc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076fe:	d503      	bpl.n	8007708 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	0792      	lsls	r2, r2, #30
 8007704:	f100 808a 	bmi.w	800781c <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	0752      	lsls	r2, r2, #29
 800770c:	d502      	bpl.n	8007714 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	0750      	lsls	r0, r2, #29
 8007712:	d470      	bmi.n	80077f6 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007714:	691a      	ldr	r2, [r3, #16]
 8007716:	0711      	lsls	r1, r2, #28
 8007718:	d502      	bpl.n	8007720 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	0712      	lsls	r2, r2, #28
 800771e:	d458      	bmi.n	80077d2 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	06d1      	lsls	r1, r2, #27
 8007724:	d502      	bpl.n	800772c <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	06d2      	lsls	r2, r2, #27
 800772a:	d43e      	bmi.n	80077aa <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	07d0      	lsls	r0, r2, #31
 8007730:	d503      	bpl.n	800773a <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	07d1      	lsls	r1, r2, #31
 8007736:	f100 808a 	bmi.w	800784e <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	0612      	lsls	r2, r2, #24
 800773e:	d503      	bpl.n	8007748 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	0610      	lsls	r0, r2, #24
 8007744:	f100 808b 	bmi.w	800785e <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	05d1      	lsls	r1, r2, #23
 800774c:	d503      	bpl.n	8007756 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	0612      	lsls	r2, r2, #24
 8007752:	f100 808c 	bmi.w	800786e <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	0650      	lsls	r0, r2, #25
 800775a:	d503      	bpl.n	8007764 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	0651      	lsls	r1, r2, #25
 8007760:	f100 808d 	bmi.w	800787e <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	0692      	lsls	r2, r2, #26
 8007768:	d503      	bpl.n	8007772 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	0690      	lsls	r0, r2, #26
 800776e:	f100 808e 	bmi.w	800788e <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	02d1      	lsls	r1, r2, #11
 8007776:	d503      	bpl.n	8007780 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	02d2      	lsls	r2, r2, #11
 800777c:	f100 808f 	bmi.w	800789e <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007780:	691a      	ldr	r2, [r3, #16]
 8007782:	0290      	lsls	r0, r2, #10
 8007784:	d503      	bpl.n	800778e <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	0291      	lsls	r1, r2, #10
 800778a:	f100 8090 	bmi.w	80078ae <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800778e:	691a      	ldr	r2, [r3, #16]
 8007790:	0252      	lsls	r2, r2, #9
 8007792:	d503      	bpl.n	800779c <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	0250      	lsls	r0, r2, #9
 8007798:	f100 8091 	bmi.w	80078be <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	0211      	lsls	r1, r2, #8
 80077a0:	d502      	bpl.n	80077a8 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	0212      	lsls	r2, r2, #8
 80077a6:	d44a      	bmi.n	800783e <HAL_TIM_IRQHandler+0x14a>
}
 80077a8:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077aa:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077ae:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077b0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077b2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80077ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077bc:	f040 8090 	bne.w	80078e0 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c0:	f7ff ff90 	bl	80076e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c4:	4620      	mov	r0, r4
 80077c6:	f7ff ff91 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ca:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077cc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ce:	7722      	strb	r2, [r4, #28]
 80077d0:	e7ac      	b.n	800772c <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077d2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077d6:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077d8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077da:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80077e0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077e2:	d17a      	bne.n	80078da <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e4:	f7ff ff7e 	bl	80076e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e8:	4620      	mov	r0, r4
 80077ea:	f7ff ff7f 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ee:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077f0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f2:	7722      	strb	r2, [r4, #28]
 80077f4:	e794      	b.n	8007720 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077f6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077fa:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077fc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007806:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007808:	d164      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800780a:	f7ff ff6b 	bl	80076e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800780e:	4620      	mov	r0, r4
 8007810:	f7ff ff6c 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007814:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007816:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007818:	7722      	strb	r2, [r4, #28]
 800781a:	e77b      	b.n	8007714 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800781c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007820:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007822:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007824:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	0799      	lsls	r1, r3, #30
 800782a:	d150      	bne.n	80078ce <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800782c:	f7ff ff5a 	bl	80076e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	4620      	mov	r0, r4
 8007832:	f7ff ff5b 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007838:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783a:	7722      	strb	r2, [r4, #28]
 800783c:	e764      	b.n	8007708 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800783e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007842:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007844:	611a      	str	r2, [r3, #16]
}
 8007846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 800784a:	f000 ba79 	b.w	8007d40 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800784e:	f06f 0201 	mvn.w	r2, #1
 8007852:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007854:	4620      	mov	r0, r4
 8007856:	f7fa f88b 	bl	8001970 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	e76d      	b.n	800773a <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800785e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007862:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007864:	4620      	mov	r0, r4
 8007866:	f000 fa61 	bl	8007d2c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	e76c      	b.n	8007748 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800786e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007872:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fa5b 	bl	8007d30 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	e76b      	b.n	8007756 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800787e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007882:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007884:	4620      	mov	r0, r4
 8007886:	f7ff ff33 	bl	80076f0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	e76a      	b.n	8007764 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800788e:	f06f 0220 	mvn.w	r2, #32
 8007892:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007894:	4620      	mov	r0, r4
 8007896:	f000 fa47 	bl	8007d28 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	e769      	b.n	8007772 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800789e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80078a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 fa45 	bl	8007d34 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	e768      	b.n	8007780 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80078ae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80078b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80078b4:	4620      	mov	r0, r4
 80078b6:	f000 fa3f 	bl	8007d38 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	e767      	b.n	800778e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80078be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80078c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 fa39 	bl	8007d3c <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	e766      	b.n	800779c <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 80078ce:	f7ff ff0b 	bl	80076e8 <HAL_TIM_IC_CaptureCallback>
 80078d2:	e7b0      	b.n	8007836 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 80078d4:	f7ff ff08 	bl	80076e8 <HAL_TIM_IC_CaptureCallback>
 80078d8:	e79c      	b.n	8007814 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80078da:	f7ff ff05 	bl	80076e8 <HAL_TIM_IC_CaptureCallback>
 80078de:	e786      	b.n	80077ee <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 80078e0:	f7ff ff02 	bl	80076e8 <HAL_TIM_IC_CaptureCallback>
 80078e4:	e771      	b.n	80077ca <HAL_TIM_IRQHandler+0xd6>
 80078e6:	bf00      	nop

080078e8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e8:	6a03      	ldr	r3, [r0, #32]
 80078ea:	f023 0310 	bic.w	r3, r3, #16
 80078ee:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80078f0:	6a03      	ldr	r3, [r0, #32]
{
 80078f2:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80078f4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80078f6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078fa:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80078fe:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007902:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007906:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007908:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800790c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007910:	4d14      	ldr	r5, [pc, #80]	@ (8007964 <TIM_OC2_SetConfig+0x7c>)
 8007912:	42a8      	cmp	r0, r5
 8007914:	d00f      	beq.n	8007936 <TIM_OC2_SetConfig+0x4e>
 8007916:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800791a:	42a8      	cmp	r0, r5
 800791c:	d00b      	beq.n	8007936 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791e:	4d12      	ldr	r5, [pc, #72]	@ (8007968 <TIM_OC2_SetConfig+0x80>)
 8007920:	42a8      	cmp	r0, r5
 8007922:	d00f      	beq.n	8007944 <TIM_OC2_SetConfig+0x5c>
 8007924:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007928:	42a8      	cmp	r0, r5
 800792a:	d00b      	beq.n	8007944 <TIM_OC2_SetConfig+0x5c>
 800792c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007930:	42a8      	cmp	r0, r5
 8007932:	d10f      	bne.n	8007954 <TIM_OC2_SetConfig+0x6c>
 8007934:	e006      	b.n	8007944 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007936:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800793c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007944:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007948:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800794c:	ea46 0c05 	orr.w	ip, r6, r5
 8007950:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8007954:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007956:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007958:	6182      	str	r2, [r0, #24]
}
 800795a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800795c:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800795e:	6203      	str	r3, [r0, #32]
}
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	40012c00 	.word	0x40012c00
 8007968:	40014000 	.word	0x40014000

0800796c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800796c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007970:	2b01      	cmp	r3, #1
 8007972:	f000 80dc 	beq.w	8007b2e <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8007976:	2301      	movs	r3, #1
{
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4604      	mov	r4, r0
 800797c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800797e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8007982:	2a14      	cmp	r2, #20
 8007984:	d80c      	bhi.n	80079a0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007986:	e8df f002 	tbb	[pc, r2]
 800798a:	0b4f      	.short	0x0b4f
 800798c:	0b630b0b 	.word	0x0b630b0b
 8007990:	0b740b0b 	.word	0x0b740b0b
 8007994:	0b840b0b 	.word	0x0b840b0b
 8007998:	0b950b0b 	.word	0x0b950b0b
 800799c:	0b0b      	.short	0x0b0b
 800799e:	10          	.byte	0x10
 800799f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80079a0:	2300      	movs	r3, #0
 80079a2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 80079a6:	2001      	movs	r0, #1
}
 80079a8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079aa:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079ac:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079ae:	6a1a      	ldr	r2, [r3, #32]
 80079b0:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80079b4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80079b6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80079b8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80079ba:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079bc:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80079c0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079c8:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079ca:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079ce:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d2:	4e58      	ldr	r6, [pc, #352]	@ (8007b34 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80079d4:	42b3      	cmp	r3, r6
 80079d6:	d00f      	beq.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80079d8:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80079dc:	42b3      	cmp	r3, r6
 80079de:	d00b      	beq.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80079e0:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80079e4:	42b3      	cmp	r3, r6
 80079e6:	d007      	beq.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80079e8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80079ec:	42b3      	cmp	r3, r6
 80079ee:	d003      	beq.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80079f0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80079f4:	42b3      	cmp	r3, r6
 80079f6:	d104      	bne.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079f8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079fa:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079fe:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8007a02:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007a04:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8007a06:	6869      	ldr	r1, [r5, #4]
 8007a08:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8007a0a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a0e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a14:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a1c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007a24:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007a26:	e00e      	b.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a28:	6800      	ldr	r0, [r0, #0]
 8007a2a:	f7ff fb0d 	bl	8007048 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a2e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a30:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a32:	f043 0308 	orr.w	r3, r3, #8
 8007a36:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a38:	6983      	ldr	r3, [r0, #24]
 8007a3a:	f023 0304 	bic.w	r3, r3, #4
 8007a3e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a40:	6983      	ldr	r3, [r0, #24]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8007a46:	2300      	movs	r3, #0
 8007a48:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007a4c:	2000      	movs	r0, #0
}
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a50:	6800      	ldr	r0, [r0, #0]
 8007a52:	f7ff ff49 	bl	80078e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a56:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a58:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007a5e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a60:	6983      	ldr	r3, [r0, #24]
 8007a62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a66:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a68:	6983      	ldr	r3, [r0, #24]
 8007a6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a6e:	6183      	str	r3, [r0, #24]
      break;
 8007a70:	e7e9      	b.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a72:	6800      	ldr	r0, [r0, #0]
 8007a74:	f7ff fb24 	bl	80070c0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a78:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a7a:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a7c:	f043 0308 	orr.w	r3, r3, #8
 8007a80:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a82:	69c3      	ldr	r3, [r0, #28]
 8007a84:	f023 0304 	bic.w	r3, r3, #4
 8007a88:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a8a:	69c3      	ldr	r3, [r0, #28]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	61c3      	str	r3, [r0, #28]
      break;
 8007a90:	e7d9      	b.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a92:	6800      	ldr	r0, [r0, #0]
 8007a94:	f7ff fb54 	bl	8007140 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a98:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a9a:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007aa0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007aa2:	69c3      	ldr	r3, [r0, #28]
 8007aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007aa8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007aaa:	69c3      	ldr	r3, [r0, #28]
 8007aac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ab0:	61c3      	str	r3, [r0, #28]
      break;
 8007ab2:	e7c8      	b.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ab4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8007ab6:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007abe:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007ac2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007ac4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ac6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8007aca:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8007ace:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ad0:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8007ad2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ad6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ada:	4e16      	ldr	r6, [pc, #88]	@ (8007b34 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8007adc:	42b3      	cmp	r3, r6
 8007ade:	d00f      	beq.n	8007b00 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007ae0:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8007ae4:	42b3      	cmp	r3, r6
 8007ae6:	d00b      	beq.n	8007b00 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007ae8:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8007aec:	42b3      	cmp	r3, r6
 8007aee:	d007      	beq.n	8007b00 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007af0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007af4:	42b3      	cmp	r3, r6
 8007af6:	d003      	beq.n	8007b00 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007af8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007afc:	42b3      	cmp	r3, r6
 8007afe:	d104      	bne.n	8007b0a <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b00:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b02:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b06:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8007b0a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007b0c:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8007b0e:	6869      	ldr	r1, [r5, #4]
 8007b10:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8007b12:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b16:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b18:	f042 0208 	orr.w	r2, r2, #8
 8007b1c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b20:	f022 0204 	bic.w	r2, r2, #4
 8007b24:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007b2c:	e78b      	b.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 8007b2e:	2002      	movs	r0, #2
}
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	40012c00 	.word	0x40012c00

08007b38 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b38:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d046      	beq.n	8007bce <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8007b40:	b470      	push	{r4, r5, r6}
 8007b42:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b44:	4e23      	ldr	r6, [pc, #140]	@ (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8007b46:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b4e:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8007b50:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b52:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8007b54:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b56:	d024      	beq.n	8007ba2 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8007b58:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8007b5c:	42b0      	cmp	r0, r6
 8007b5e:	d02b      	beq.n	8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b60:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b68:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8007b6e:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b70:	d00a      	beq.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8007b72:	4b19      	ldr	r3, [pc, #100]	@ (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8007b74:	4298      	cmp	r0, r3
 8007b76:	d007      	beq.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8007b78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b7c:	4298      	cmp	r0, r3
 8007b7e:	d003      	beq.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8007b80:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8007b84:	4298      	cmp	r0, r3
 8007b86:	d104      	bne.n	8007b92 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b88:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b8a:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b8e:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b90:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007b92:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007b94:	2301      	movs	r3, #1
 8007b96:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007b9a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8007b9e:	bc70      	pop	{r4, r5, r6}
 8007ba0:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ba2:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ba4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ba8:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8007baa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bb2:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007bb4:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb6:	e7e7      	b.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bb8:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bbe:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bc0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bc8:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8007bca:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bcc:	e7dc      	b.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8007bce:	2002      	movs	r0, #2
}
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40000400 	.word	0x40000400

08007bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bdc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d045      	beq.n	8007c70 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8007be4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007be6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8007bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bee:	4602      	mov	r2, r0
 8007bf0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bf2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bf4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bfa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c00:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c02:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c08:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c0a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c10:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c12:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c18:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c1a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c1c:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c20:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c26:	4c13      	ldr	r4, [pc, #76]	@ (8007c74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007c28:	42a0      	cmp	r0, r4
 8007c2a:	d00b      	beq.n	8007c44 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8007c2c:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d007      	beq.n	8007c44 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007c34:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007c36:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8007c38:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8007c3c:	4608      	mov	r0, r1
}
 8007c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c42:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c44:	69cc      	ldr	r4, [r1, #28]
 8007c46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c4a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c4c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8007c4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c52:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c56:	6a0c      	ldr	r4, [r1, #32]
 8007c58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c5c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c5e:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007c60:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c62:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007c66:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007c68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	e7e1      	b.n	8007c34 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007c70:	2002      	movs	r0, #2
}
 8007c72:	4770      	bx	lr
 8007c74:	40012c00 	.word	0x40012c00

08007c78 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8007c78:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c7a:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8007c7e:	2801      	cmp	r0, #1
 8007c80:	d047      	beq.n	8007d12 <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8007c82:	6810      	ldr	r0, [r2, #0]
 8007c84:	3801      	subs	r0, #1
 8007c86:	280f      	cmp	r0, #15
{
 8007c88:	b4f0      	push	{r4, r5, r6, r7}
 8007c8a:	d825      	bhi.n	8007cd8 <HAL_TIMEx_ConfigBreakInput+0x60>
 8007c8c:	4c22      	ldr	r4, [pc, #136]	@ (8007d18 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8007c8e:	4e23      	ldr	r6, [pc, #140]	@ (8007d1c <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8007c90:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8007c94:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8007c98:	4c21      	ldr	r4, [pc, #132]	@ (8007d20 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8007c9a:	4e22      	ldr	r6, [pc, #136]	@ (8007d24 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8007c9c:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8007ca0:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8007ca4:	2901      	cmp	r1, #1
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_TIMEx_ConfigBreakInput+0x6c>
 8007ca8:	2902      	cmp	r1, #2
 8007caa:	d12c      	bne.n	8007d06 <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007cac:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 8007cae:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007cb0:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007cb2:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 8007cb4:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007cb6:	fa01 f10c 	lsl.w	r1, r1, ip
 8007cba:	ea81 0207 	eor.w	r2, r1, r7
 8007cbe:	402a      	ands	r2, r5
 8007cc0:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007cc2:	ea80 0102 	eor.w	r1, r0, r2
 8007cc6:	4021      	ands	r1, r4
 8007cc8:	404a      	eors	r2, r1

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8007cca:	6672      	str	r2, [r6, #100]	@ 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007cd2:	2000      	movs	r0, #0

  return status;
}
 8007cd4:	bcf0      	pop	{r4, r5, r6, r7}
 8007cd6:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8007cd8:	2700      	movs	r7, #0
  switch (BreakInput)
 8007cda:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8007cdc:	46bc      	mov	ip, r7
 8007cde:	463c      	mov	r4, r7
 8007ce0:	463d      	mov	r5, r7
  switch (BreakInput)
 8007ce2:	d1e1      	bne.n	8007ca8 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007ce4:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8007ce6:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007ce8:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007cea:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8007cec:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007cee:	fa01 f10c 	lsl.w	r1, r1, ip
 8007cf2:	ea81 0207 	eor.w	r2, r1, r7
 8007cf6:	402a      	ands	r2, r5
 8007cf8:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007cfa:	ea80 0102 	eor.w	r1, r0, r2
 8007cfe:	4021      	ands	r1, r4
 8007d00:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8007d02:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8007d04:	e7e2      	b.n	8007ccc <HAL_TIMEx_ConfigBreakInput+0x54>
  __HAL_UNLOCK(htim);
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8007d0c:	2001      	movs	r0, #1
}
 8007d0e:	bcf0      	pop	{r4, r5, r6, r7}
 8007d10:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007d12:	2002      	movs	r0, #2
}
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	0800acbc 	.word	0x0800acbc
 8007d1c:	0800ac3c 	.word	0x0800ac3c
 8007d20:	0800ac7c 	.word	0x0800ac7c
 8007d24:	0800abfc 	.word	0x0800abfc

08007d28 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop

08007d2c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop

08007d30 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop

08007d34 <HAL_TIMEx_EncoderIndexCallback>:
/**
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop

08007d38 <HAL_TIMEx_DirectionChangeCallback>:
/**
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop

08007d3c <HAL_TIMEx_IndexErrorCallback>:
/**
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop

08007d40 <HAL_TIMEx_TransitionErrorCallback>:
/**
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop

08007d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d48:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d4a:	6882      	ldr	r2, [r0, #8]
 8007d4c:	6900      	ldr	r0, [r0, #16]
 8007d4e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d50:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d52:	4302      	orrs	r2, r0
 8007d54:	430a      	orrs	r2, r1
 8007d56:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d58:	4995      	ldr	r1, [pc, #596]	@ (8007fb0 <UART_SetConfig+0x26c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d5a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d5c:	4029      	ands	r1, r5
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d66:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d68:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007d6c:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d6e:	4991      	ldr	r1, [pc, #580]	@ (8007fb4 <UART_SetConfig+0x270>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d70:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d72:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d74:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d76:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d78:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8007d7c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d80:	f000 80bb 	beq.w	8007efa <UART_SetConfig+0x1b6>
    tmpreg |= huart->Init.OneBitSampling;
 8007d84:	6a26      	ldr	r6, [r4, #32]
 8007d86:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d8e:	f022 020f 	bic.w	r2, r2, #15
 8007d92:	432a      	orrs	r2, r5
 8007d94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d96:	4a88      	ldr	r2, [pc, #544]	@ (8007fb8 <UART_SetConfig+0x274>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d035      	beq.n	8007e08 <UART_SetConfig+0xc4>
 8007d9c:	4a87      	ldr	r2, [pc, #540]	@ (8007fbc <UART_SetConfig+0x278>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00e      	beq.n	8007dc0 <UART_SetConfig+0x7c>
 8007da2:	4a87      	ldr	r2, [pc, #540]	@ (8007fc0 <UART_SetConfig+0x27c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	f000 8098 	beq.w	8007eda <UART_SetConfig+0x196>
 8007daa:	4a86      	ldr	r2, [pc, #536]	@ (8007fc4 <UART_SetConfig+0x280>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d03f      	beq.n	8007e30 <UART_SetConfig+0xec>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8007db0:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007db2:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007db4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8007db8:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 8007dbc:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dc0:	4b81      	ldr	r3, [pc, #516]	@ (8007fc8 <UART_SetConfig+0x284>)
 8007dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc6:	f003 030c 	and.w	r3, r3, #12
 8007dca:	2b0c      	cmp	r3, #12
 8007dcc:	d8f0      	bhi.n	8007db0 <UART_SetConfig+0x6c>
 8007dce:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd4 <UART_SetConfig+0x90>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007ecf 	.word	0x08007ecf
 8007dd8:	08007db1 	.word	0x08007db1
 8007ddc:	08007db1 	.word	0x08007db1
 8007de0:	08007db1 	.word	0x08007db1
 8007de4:	08007e49 	.word	0x08007e49
 8007de8:	08007db1 	.word	0x08007db1
 8007dec:	08007db1 	.word	0x08007db1
 8007df0:	08007db1 	.word	0x08007db1
 8007df4:	08007e91 	.word	0x08007e91
 8007df8:	08007db1 	.word	0x08007db1
 8007dfc:	08007db1 	.word	0x08007db1
 8007e00:	08007db1 	.word	0x08007db1
 8007e04:	08007e61 	.word	0x08007e61
 8007e08:	4b6f      	ldr	r3, [pc, #444]	@ (8007fc8 <UART_SetConfig+0x284>)
 8007e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d03c      	beq.n	8007e90 <UART_SetConfig+0x14c>
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d022      	beq.n	8007e60 <UART_SetConfig+0x11c>
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d014      	beq.n	8007e48 <UART_SetConfig+0x104>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e1e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007e22:	f000 80bc 	beq.w	8007f9e <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e26:	f7fe fc8d 	bl	8006744 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007e2a:	b9a8      	cbnz	r0, 8007e58 <UART_SetConfig+0x114>
        pclk = (uint32_t) HSI_VALUE;
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	e7c0      	b.n	8007db2 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e30:	4b65      	ldr	r3, [pc, #404]	@ (8007fc8 <UART_SetConfig+0x284>)
 8007e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007e3a:	2b80      	cmp	r3, #128	@ 0x80
 8007e3c:	d028      	beq.n	8007e90 <UART_SetConfig+0x14c>
 8007e3e:	d859      	bhi.n	8007ef4 <UART_SetConfig+0x1b0>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d044      	beq.n	8007ece <UART_SetConfig+0x18a>
 8007e44:	2b40      	cmp	r3, #64	@ 0x40
 8007e46:	d1b3      	bne.n	8007db0 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e48:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007e4c:	f000 80aa 	beq.w	8007fa4 <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 8007e50:	f7fe fb24 	bl	800649c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d0e9      	beq.n	8007e2c <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e58:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007e5a:	e006      	b.n	8007e6a <UART_SetConfig+0x126>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e5c:	2b30      	cmp	r3, #48	@ 0x30
 8007e5e:	d1a7      	bne.n	8007db0 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e60:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007e64:	d018      	beq.n	8007e98 <UART_SetConfig+0x154>
        pclk = (uint32_t) LSE_VALUE;
 8007e66:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e6a:	6863      	ldr	r3, [r4, #4]
 8007e6c:	4a57      	ldr	r2, [pc, #348]	@ (8007fcc <UART_SetConfig+0x288>)
 8007e6e:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8007e72:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e76:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e7a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007e7e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e82:	f1a0 0310 	sub.w	r3, r0, #16
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d892      	bhi.n	8007db0 <UART_SetConfig+0x6c>
          huart->Instance->BRR = usartdiv;
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	60d8      	str	r0, [r3, #12]
 8007e8e:	e7cd      	b.n	8007e2c <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e90:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8007e94:	484e      	ldr	r0, [pc, #312]	@ (8007fd0 <UART_SetConfig+0x28c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e96:	d1e8      	bne.n	8007e6a <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e98:	6862      	ldr	r2, [r4, #4]
 8007e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8007fcc <UART_SetConfig+0x288>)
 8007e9c:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8007ea0:	fbb0 f0f1 	udiv	r0, r0, r1
 8007ea4:	0853      	lsrs	r3, r2, #1
 8007ea6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eaa:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eae:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eb2:	f1a3 0210 	sub.w	r2, r3, #16
 8007eb6:	428a      	cmp	r2, r1
 8007eb8:	f63f af7a 	bhi.w	8007db0 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ebc:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8007ec0:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ec2:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ec4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60cb      	str	r3, [r1, #12]
 8007ecc:	e7ae      	b.n	8007e2c <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ece:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007ed2:	d05d      	beq.n	8007f90 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ed4:	f7fe fc24 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
        break;
 8007ed8:	e7a7      	b.n	8007e2a <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eda:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc8 <UART_SetConfig+0x284>)
 8007edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d0d3      	beq.n	8007e90 <UART_SetConfig+0x14c>
 8007ee8:	d8b8      	bhi.n	8007e5c <UART_SetConfig+0x118>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0ef      	beq.n	8007ece <UART_SetConfig+0x18a>
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d0aa      	beq.n	8007e48 <UART_SetConfig+0x104>
 8007ef2:	e75d      	b.n	8007db0 <UART_SetConfig+0x6c>
 8007ef4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ef6:	d0b3      	beq.n	8007e60 <UART_SetConfig+0x11c>
 8007ef8:	e75a      	b.n	8007db0 <UART_SetConfig+0x6c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007efa:	4311      	orrs	r1, r2
 8007efc:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f00:	4931      	ldr	r1, [pc, #196]	@ (8007fc8 <UART_SetConfig+0x284>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f02:	f022 020f 	bic.w	r2, r2, #15
 8007f06:	432a      	orrs	r2, r5
 8007f08:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f0a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8007f0e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f16:	d048      	beq.n	8007faa <UART_SetConfig+0x266>
 8007f18:	d833      	bhi.n	8007f82 <UART_SetConfig+0x23e>
 8007f1a:	b37b      	cbz	r3, 8007f7c <UART_SetConfig+0x238>
 8007f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f20:	f47f af46 	bne.w	8007db0 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007f24:	f7fe faba 	bl	800649c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f43f af7f 	beq.w	8007e2c <UART_SetConfig+0xe8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f2e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f30:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f32:	4b26      	ldr	r3, [pc, #152]	@ (8007fcc <UART_SetConfig+0x288>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f34:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f38:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8007f3c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f40:	4299      	cmp	r1, r3
 8007f42:	f63f af35 	bhi.w	8007db0 <UART_SetConfig+0x6c>
 8007f46:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8007f4a:	f63f af31 	bhi.w	8007db0 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f4e:	2300      	movs	r3, #0
 8007f50:	4619      	mov	r1, r3
 8007f52:	f7f8 fcbf 	bl	80008d4 <__aeabi_uldivmod>
 8007f56:	0872      	lsrs	r2, r6, #1
 8007f58:	0203      	lsls	r3, r0, #8
 8007f5a:	0209      	lsls	r1, r1, #8
 8007f5c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007f60:	1898      	adds	r0, r3, r2
 8007f62:	f141 0100 	adc.w	r1, r1, #0
 8007f66:	4632      	mov	r2, r6
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f7f8 fcb3 	bl	80008d4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f6e:	4b19      	ldr	r3, [pc, #100]	@ (8007fd4 <UART_SetConfig+0x290>)
 8007f70:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007f74:	429a      	cmp	r2, r3
 8007f76:	f63f af1b 	bhi.w	8007db0 <UART_SetConfig+0x6c>
 8007f7a:	e786      	b.n	8007e8a <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7c:	f7fe fbd0 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
        break;
 8007f80:	e7d2      	b.n	8007f28 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f86:	f47f af13 	bne.w	8007db0 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8007f8a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007f8e:	e7cf      	b.n	8007f30 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f90:	f7fe fbc6 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f43f af49 	beq.w	8007e2c <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f9a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007f9c:	e77c      	b.n	8007e98 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f9e:	f7fe fbd1 	bl	8006744 <HAL_RCC_GetPCLK2Freq>
        break;
 8007fa2:	e7f7      	b.n	8007f94 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetSysClockFreq();
 8007fa4:	f7fe fa7a 	bl	800649c <HAL_RCC_GetSysClockFreq>
        break;
 8007fa8:	e7f4      	b.n	8007f94 <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 8007faa:	4809      	ldr	r0, [pc, #36]	@ (8007fd0 <UART_SetConfig+0x28c>)
 8007fac:	e7c0      	b.n	8007f30 <UART_SetConfig+0x1ec>
 8007fae:	bf00      	nop
 8007fb0:	cfff69f3 	.word	0xcfff69f3
 8007fb4:	40008000 	.word	0x40008000
 8007fb8:	40013800 	.word	0x40013800
 8007fbc:	40004400 	.word	0x40004400
 8007fc0:	40004800 	.word	0x40004800
 8007fc4:	40004c00 	.word	0x40004c00
 8007fc8:	40021000 	.word	0x40021000
 8007fcc:	0800acfc 	.word	0x0800acfc
 8007fd0:	00f42400 	.word	0x00f42400
 8007fd4:	000ffcff 	.word	0x000ffcff

08007fd8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fd8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007fda:	07da      	lsls	r2, r3, #31
{
 8007fdc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fde:	d506      	bpl.n	8007fee <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fe0:	6801      	ldr	r1, [r0, #0]
 8007fe2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007fe4:	684a      	ldr	r2, [r1, #4]
 8007fe6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007fea:	4322      	orrs	r2, r4
 8007fec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fee:	079c      	lsls	r4, r3, #30
 8007ff0:	d506      	bpl.n	8008000 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ff2:	6801      	ldr	r1, [r0, #0]
 8007ff4:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007ff6:	684a      	ldr	r2, [r1, #4]
 8007ff8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007ffc:	4322      	orrs	r2, r4
 8007ffe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008000:	0759      	lsls	r1, r3, #29
 8008002:	d506      	bpl.n	8008012 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008004:	6801      	ldr	r1, [r0, #0]
 8008006:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008008:	684a      	ldr	r2, [r1, #4]
 800800a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800800e:	4322      	orrs	r2, r4
 8008010:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008012:	071a      	lsls	r2, r3, #28
 8008014:	d506      	bpl.n	8008024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008016:	6801      	ldr	r1, [r0, #0]
 8008018:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800801a:	684a      	ldr	r2, [r1, #4]
 800801c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008020:	4322      	orrs	r2, r4
 8008022:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008024:	06dc      	lsls	r4, r3, #27
 8008026:	d506      	bpl.n	8008036 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008028:	6801      	ldr	r1, [r0, #0]
 800802a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800802c:	688a      	ldr	r2, [r1, #8]
 800802e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008032:	4322      	orrs	r2, r4
 8008034:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008036:	0699      	lsls	r1, r3, #26
 8008038:	d506      	bpl.n	8008048 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800803a:	6801      	ldr	r1, [r0, #0]
 800803c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800803e:	688a      	ldr	r2, [r1, #8]
 8008040:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008044:	4322      	orrs	r2, r4
 8008046:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008048:	065a      	lsls	r2, r3, #25
 800804a:	d509      	bpl.n	8008060 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800804c:	6801      	ldr	r1, [r0, #0]
 800804e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008050:	684a      	ldr	r2, [r1, #4]
 8008052:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008056:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008058:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800805c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800805e:	d00b      	beq.n	8008078 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008060:	061b      	lsls	r3, r3, #24
 8008062:	d506      	bpl.n	8008072 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008064:	6802      	ldr	r2, [r0, #0]
 8008066:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008068:	6853      	ldr	r3, [r2, #4]
 800806a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800806e:	430b      	orrs	r3, r1
 8008070:	6053      	str	r3, [r2, #4]
  }
}
 8008072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008076:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008078:	684a      	ldr	r2, [r1, #4]
 800807a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800807c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8008080:	4322      	orrs	r2, r4
 8008082:	604a      	str	r2, [r1, #4]
 8008084:	e7ec      	b.n	8008060 <UART_AdvFeatureConfig+0x88>
 8008086:	bf00      	nop

08008088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800808c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008090:	6804      	ldr	r4, [r0, #0]
 8008092:	f1b8 3fff 	cmp.w	r8, #4294967295
{
 8008096:	460d      	mov	r5, r1
 8008098:	4616      	mov	r6, r2
 800809a:	d10a      	bne.n	80080b2 <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809c:	69e3      	ldr	r3, [r4, #28]
 800809e:	ea35 0303 	bics.w	r3, r5, r3
 80080a2:	bf0c      	ite	eq
 80080a4:	2301      	moveq	r3, #1
 80080a6:	2300      	movne	r3, #0
 80080a8:	429e      	cmp	r6, r3
 80080aa:	d0f7      	beq.n	800809c <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80080ac:	2000      	movs	r0, #0
}
 80080ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b2:	4607      	mov	r7, r0
 80080b4:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b6:	69e2      	ldr	r2, [r4, #28]
 80080b8:	ea35 0202 	bics.w	r2, r5, r2
 80080bc:	bf0c      	ite	eq
 80080be:	2301      	moveq	r3, #1
 80080c0:	2300      	movne	r3, #0
 80080c2:	42b3      	cmp	r3, r6
 80080c4:	d1f2      	bne.n	80080ac <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c6:	f7fc fe61 	bl	8004d8c <HAL_GetTick>
 80080ca:	eba0 0009 	sub.w	r0, r0, r9
 80080ce:	4540      	cmp	r0, r8
 80080d0:	d830      	bhi.n	8008134 <UART_WaitOnFlagUntilTimeout+0xac>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080d2:	683c      	ldr	r4, [r7, #0]
 80080d4:	4622      	mov	r2, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d6:	f1b8 0f00 	cmp.w	r8, #0
 80080da:	d02c      	beq.n	8008136 <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	0758      	lsls	r0, r3, #29
 80080e0:	d5e9      	bpl.n	80080b6 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080e2:	69e3      	ldr	r3, [r4, #28]
 80080e4:	0519      	lsls	r1, r3, #20
 80080e6:	d5e6      	bpl.n	80080b6 <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080ec:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080f2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	e844 3100 	strex	r1, r3, [r4]
 80080fa:	b139      	cbz	r1, 800810c <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	e852 3f00 	ldrex	r3, [r2]
 8008100:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	e842 3100 	strex	r1, r3, [r2]
 8008108:	2900      	cmp	r1, #0
 800810a:	d1f7      	bne.n	80080fc <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	f102 0308 	add.w	r3, r2, #8
 8008110:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008114:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	f102 0008 	add.w	r0, r2, #8
 800811c:	e840 3100 	strex	r1, r3, [r0]
 8008120:	2900      	cmp	r1, #0
 8008122:	d1f3      	bne.n	800810c <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8008124:	2320      	movs	r3, #32
 8008126:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800812a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800812e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          return HAL_TIMEOUT;
 8008132:	e019      	b.n	8008168 <UART_WaitOnFlagUntilTimeout+0xe0>
 8008134:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800813a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	e842 3100 	strex	r1, r3, [r2]
 8008142:	2900      	cmp	r1, #0
 8008144:	d1f7      	bne.n	8008136 <UART_WaitOnFlagUntilTimeout+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	f102 0308 	add.w	r3, r2, #8
 800814a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	f102 0008 	add.w	r0, r2, #8
 8008156:	e840 3100 	strex	r1, r3, [r0]
 800815a:	2900      	cmp	r1, #0
 800815c:	d1f3      	bne.n	8008146 <UART_WaitOnFlagUntilTimeout+0xbe>
        huart->gState = HAL_UART_STATE_READY;
 800815e:	2320      	movs	r3, #32
 8008160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          __HAL_UNLOCK(huart);
 8008168:	2300      	movs	r3, #0
 800816a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 800816e:	2003      	movs	r0, #3
 8008170:	e79d      	b.n	80080ae <UART_WaitOnFlagUntilTimeout+0x26>
 8008172:	bf00      	nop

08008174 <HAL_UART_Init>:
  if (huart == NULL)
 8008174:	2800      	cmp	r0, #0
 8008176:	d066      	beq.n	8008246 <HAL_UART_Init+0xd2>
{
 8008178:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800817a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800817e:	b082      	sub	sp, #8
 8008180:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008182:	2b00      	cmp	r3, #0
 8008184:	d04c      	beq.n	8008220 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8008186:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008188:	2324      	movs	r3, #36	@ 0x24
 800818a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800818e:	6813      	ldr	r3, [r2, #0]
 8008190:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008194:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8008196:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008198:	f7ff fdd4 	bl	8007d44 <UART_SetConfig>
 800819c:	2801      	cmp	r0, #1
 800819e:	d03c      	beq.n	800821a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d135      	bne.n	8008212 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	6859      	ldr	r1, [r3, #4]
 80081aa:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 80081ae:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081b0:	6899      	ldr	r1, [r3, #8]
 80081b2:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 80081b6:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80081b8:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ba:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80081bc:	f041 0101 	orr.w	r1, r1, #1
 80081c0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c2:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 80081c6:	f7fc fde1 	bl	8004d8c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80081d0:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081d2:	d40e      	bmi.n	80081f2 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	075b      	lsls	r3, r3, #29
 80081d8:	d427      	bmi.n	800822a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081da:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 80081e2:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80081e6:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 80081ea:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ec:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80081ee:	b002      	add	sp, #8
 80081f0:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	462a      	mov	r2, r5
 80081fa:	4603      	mov	r3, r0
 80081fc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008200:	4620      	mov	r0, r4
 8008202:	f7ff ff41 	bl	8008088 <UART_WaitOnFlagUntilTimeout>
 8008206:	b9e0      	cbnz	r0, 8008242 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	075b      	lsls	r3, r3, #29
 800820e:	d40c      	bmi.n	800822a <HAL_UART_Init+0xb6>
 8008210:	e7e3      	b.n	80081da <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8008212:	4620      	mov	r0, r4
 8008214:	f7ff fee0 	bl	8007fd8 <UART_AdvFeatureConfig>
 8008218:	e7c5      	b.n	80081a6 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800821a:	2001      	movs	r0, #1
}
 800821c:	b002      	add	sp, #8
 800821e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8008220:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 8008224:	f7fc fb62 	bl	80048ec <HAL_UART_MspInit>
 8008228:	e7ad      	b.n	8008186 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800822a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	2200      	movs	r2, #0
 8008232:	4633      	mov	r3, r6
 8008234:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008238:	4620      	mov	r0, r4
 800823a:	f7ff ff25 	bl	8008088 <UART_WaitOnFlagUntilTimeout>
 800823e:	2800      	cmp	r0, #0
 8008240:	d0cb      	beq.n	80081da <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8008242:	2003      	movs	r0, #3
 8008244:	e7d3      	b.n	80081ee <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8008246:	2001      	movs	r0, #1
}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop

0800824c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800824c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8008250:	2b01      	cmp	r3, #1
 8008252:	d017      	beq.n	8008284 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008254:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008256:	2324      	movs	r3, #36	@ 0x24
{
 8008258:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800825a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800825e:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008260:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008262:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8008264:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008268:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800826c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800826e:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008270:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008272:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 8008276:	2220      	movs	r2, #32
 8008278:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  return HAL_OK;
}
 800827c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8008280:	4618      	mov	r0, r3
}
 8008282:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008284:	2002      	movs	r0, #2
}
 8008286:	4770      	bx	lr

08008288 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008288:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800828c:	2a01      	cmp	r2, #1
 800828e:	d037      	beq.n	8008300 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8008290:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008292:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008294:	2024      	movs	r0, #36	@ 0x24
{
 8008296:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008298:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800829c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800829e:	6810      	ldr	r0, [r2, #0]
 80082a0:	f020 0001 	bic.w	r0, r0, #1
 80082a4:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082a6:	6890      	ldr	r0, [r2, #8]
 80082a8:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 80082ac:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082ae:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082b0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082b2:	b310      	cbz	r0, 80082fa <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082b4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082b6:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80082b8:	4d12      	ldr	r5, [pc, #72]	@ (8008304 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082ba:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082be:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082c2:	4911      	ldr	r1, [pc, #68]	@ (8008308 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80082c4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082c8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80082cc:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80082d0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082d4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082d6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082d8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082dc:	fbb1 f1f5 	udiv	r1, r1, r5
 80082e0:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80082e4:	2100      	movs	r1, #0
 80082e6:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80082ea:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ec:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80082ee:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 80082f2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80082f4:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 80082f8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80082fa:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80082fc:	4608      	mov	r0, r1
 80082fe:	e7ef      	b.n	80082e0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8008300:	2002      	movs	r0, #2
}
 8008302:	4770      	bx	lr
 8008304:	0800ad14 	.word	0x0800ad14
 8008308:	0800ad1c 	.word	0x0800ad1c

0800830c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800830c:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 8008310:	2a01      	cmp	r2, #1
 8008312:	d037      	beq.n	8008384 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8008314:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008316:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008318:	2024      	movs	r0, #36	@ 0x24
{
 800831a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800831c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008320:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008322:	6810      	ldr	r0, [r2, #0]
 8008324:	f020 0001 	bic.w	r0, r0, #1
 8008328:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800832a:	6890      	ldr	r0, [r2, #8]
 800832c:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8008330:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008332:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008334:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008336:	b310      	cbz	r0, 800837e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008338:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800833a:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800833c:	4d12      	ldr	r5, [pc, #72]	@ (8008388 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800833e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008342:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008346:	4911      	ldr	r1, [pc, #68]	@ (800838c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008348:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800834c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008350:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8008354:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008358:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800835a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800835c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008360:	fbb1 f1f5 	udiv	r1, r1, r5
 8008364:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8008368:	2100      	movs	r1, #0
 800836a:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800836e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008370:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8008372:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 8008376:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008378:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 800837c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800837e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008380:	4608      	mov	r0, r1
 8008382:	e7ef      	b.n	8008364 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8008384:	2002      	movs	r0, #2
}
 8008386:	4770      	bx	lr
 8008388:	0800ad14 	.word	0x0800ad14
 800838c:	0800ad1c 	.word	0x0800ad1c

08008390 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8008390:	88c0      	ldrh	r0, [r0, #6]
 8008392:	4770      	bx	lr

08008394 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8008394:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8008396:	8840      	ldrh	r0, [r0, #2]
 8008398:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 800839c:	0c00      	lsrs	r0, r0, #16
 800839e:	4770      	bx	lr

080083a0 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 80083a0:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 80083a2:	8803      	ldrh	r3, [r0, #0]
 80083a4:	140d      	asrs	r5, r1, #16
 80083a6:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80083a8:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 80083ac:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 80083b0:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 80083b4:	428b      	cmp	r3, r1
{
 80083b6:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 80083b8:	da0f      	bge.n	80083da <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80083ba:	8846      	ldrh	r6, [r0, #2]
 80083bc:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 80083c0:	4282      	cmp	r2, r0
 80083c2:	dd13      	ble.n	80083ec <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 80083c4:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 80083c6:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 80083ca:	bfb8      	it	lt
 80083cc:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 80083ce:	f7f9 fcfd 	bl	8001dcc <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 80083d2:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 80083d4:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 80083d6:	db0e      	blt.n	80083f6 <Circle_Limitation+0x56>
      Local_Vqd.q = (int16_t)new_q;
 80083d8:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 80083da:	b2a4      	uxth	r4, r4
 80083dc:	2000      	movs	r0, #0
 80083de:	f364 000f 	bfi	r0, r4, #0, #16
 80083e2:	b2ad      	uxth	r5, r5
 80083e4:	f365 401f 	bfi	r0, r5, #16, #16
}
 80083e8:	b004      	add	sp, #16
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 80083ec:	1a98      	subs	r0, r3, r2
 80083ee:	f7f9 fced 	bl	8001dcc <MCM_Sqrt>
        if (Vqd.q < 0)
 80083f2:	2c00      	cmp	r4, #0
 80083f4:	daf0      	bge.n	80083d8 <Circle_Limitation+0x38>
          new_q = - new_q;
 80083f6:	4240      	negs	r0, r0
      Local_Vqd.q = (int16_t)new_q;
 80083f8:	b204      	sxth	r4, r0
      Local_Vqd.d = (int16_t)new_d;
 80083fa:	e7ee      	b.n	80083da <Circle_Limitation+0x3a>

080083fc <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 80083fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083fe:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8008400:	6846      	ldr	r6, [r0, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008402:	6823      	ldr	r3, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8008404:	f836 cb02 	ldrh.w	ip, [r6], #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008408:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800840a:	8980      	ldrh	r0, [r0, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800840c:	f40c 457f 	and.w	r5, ip, #65280	@ 0xff00
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008410:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008412:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8008414:	f02c 0307 	bic.w	r3, ip, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8008418:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800841c:	b291      	uxth	r1, r2
{
 800841e:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008420:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8008422:	b29b      	uxth	r3, r3
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008424:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8008426:	d040      	beq.n	80084aa <MCP_ReceivedPacket+0xae>
    MCI_Handle_t *pMCI = &Mci[motorID];
 8008428:	4f4e      	ldr	r7, [pc, #312]	@ (8008564 <MCP_ReceivedPacket+0x168>)
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800842a:	81a0      	strh	r0, [r4, #12]
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 800842c:	f10c 3cff 	add.w	ip, ip, #4294967295
    MCI_Handle_t *pMCI = &Mci[motorID];
 8008430:	f00c 0c07 	and.w	ip, ip, #7
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8008434:	2500      	movs	r5, #0

    switch (command)
 8008436:	2b38      	cmp	r3, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8008438:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 800843a:	eb07 174c 	add.w	r7, r7, ip, lsl #5
    pHandle->txLength = 0;
 800843e:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8008440:	d829      	bhi.n	8008496 <MCP_ReceivedPacket+0x9a>
 8008442:	2b38      	cmp	r3, #56	@ 0x38
 8008444:	d81e      	bhi.n	8008484 <MCP_ReceivedPacket+0x88>
 8008446:	e8df f003 	tbb	[pc, r3]
 800844a:	1d53      	.short	0x1d53
 800844c:	1d1d1d1d 	.word	0x1d1d1d1d
 8008450:	1d5b1d1d 	.word	0x1d5b1d1d
 8008454:	1d1d1d1d 	.word	0x1d1d1d1d
 8008458:	1d4e1d1d 	.word	0x1d4e1d1d
 800845c:	1d1d1d1d 	.word	0x1d1d1d1d
 8008460:	1d461d1d 	.word	0x1d461d1d
 8008464:	1d1d1d1d 	.word	0x1d1d1d1d
 8008468:	1d401d1d 	.word	0x1d401d1d
 800846c:	1d1d1d1d 	.word	0x1d1d1d1d
 8008470:	1d601d1d 	.word	0x1d601d1d
 8008474:	1d1d1d1d 	.word	0x1d1d1d1d
 8008478:	1d3c1d1d 	.word	0x1d3c1d1d
 800847c:	1d1d1d1d 	.word	0x1d1d1d1d
 8008480:	1d1d      	.short	0x1d1d
 8008482:	68          	.byte	0x68
 8008483:	00          	.byte	0x00
 8008484:	2300      	movs	r3, #0
 8008486:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008488:	68a2      	ldr	r2, [r4, #8]
 800848a:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 800848c:	89e3      	ldrh	r3, [r4, #14]
 800848e:	3301      	adds	r3, #1
 8008490:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8008492:	b003      	add	sp, #12
 8008494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8008496:	2b68      	cmp	r3, #104	@ 0x68
 8008498:	d045      	beq.n	8008526 <MCP_ReceivedPacket+0x12a>
 800849a:	2b48      	cmp	r3, #72	@ 0x48
 800849c:	d1f2      	bne.n	8008484 <MCP_ReceivedPacket+0x88>
        MCI_Clear_Iqdref(pMCI);
 800849e:	4638      	mov	r0, r7
 80084a0:	f7f9 fbea 	bl	8001c78 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80084a4:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80084a6:	4628      	mov	r0, r5
        break;
 80084a8:	e7ee      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
      userCommand = (command >> 3) & 0x1f;
 80084aa:	f3c3 03c7 	ubfx	r3, r3, #3, #8
    pHandle->txLength = 0;
 80084ae:	2100      	movs	r1, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 80084b0:	f013 0f1e 	tst.w	r3, #30
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80084b4:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80084b6:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0;
 80084b8:	81e1      	strh	r1, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 80084ba:	d03d      	beq.n	8008538 <MCP_ReceivedPacket+0x13c>
 80084bc:	460b      	mov	r3, r1
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80084be:	200d      	movs	r0, #13
 80084c0:	e7e2      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
        if (IDLE == MCI_GetSTMState(pMCI))
 80084c2:	4638      	mov	r0, r7
 80084c4:	f7f9 faf2 	bl	8001aac <MCI_GetSTMState>
 80084c8:	b128      	cbz	r0, 80084d6 <MCP_ReceivedPacket+0xda>
          (void)MCI_StopMotor(pMCI);
 80084ca:	4638      	mov	r0, r7
 80084cc:	f7f9 fb0a 	bl	8001ae4 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80084d0:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80084d2:	2000      	movs	r0, #0
 80084d4:	e7d8      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 80084d6:	4638      	mov	r0, r7
 80084d8:	f7f9 faee 	bl	8001ab8 <MCI_StartMotor>
 80084dc:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80084e0:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 80084e2:	b2c0      	uxtb	r0, r0
 80084e4:	e7d0      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 80084e6:	4620      	mov	r0, r4
 80084e8:	f7fb f8d0 	bl	800368c <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80084ec:	89e3      	ldrh	r3, [r4, #14]
        break;
 80084ee:	e7cb      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80084f0:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 80084f2:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80084f4:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 80084f6:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80084f8:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80084fa:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80084fc:	2000      	movs	r0, #0
      break;
 80084fe:	e7c3      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8008500:	4620      	mov	r0, r4
 8008502:	f7fa fd93 	bl	800302c <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008506:	89e3      	ldrh	r3, [r4, #14]
        break;
 8008508:	e7be      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
        if (RUN == MCI_GetSTMState(pMCI))
 800850a:	4638      	mov	r0, r7
 800850c:	f7f9 face 	bl	8001aac <MCI_GetSTMState>
 8008510:	2806      	cmp	r0, #6
 8008512:	d01f      	beq.n	8008554 <MCP_ReceivedPacket+0x158>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008514:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008516:	2000      	movs	r0, #0
 8008518:	e7b6      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
        (void)MCI_FaultAcknowledged(pMCI);
 800851a:	4638      	mov	r0, r7
 800851c:	f7f9 fafe 	bl	8001b1c <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008520:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008522:	2000      	movs	r0, #0
        break;
 8008524:	e7b0      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008526:	68a3      	ldr	r3, [r4, #8]
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	4631      	mov	r1, r6
 800852c:	f104 030e 	add.w	r3, r4, #14
 8008530:	f7f9 fa40 	bl	80019b4 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008534:	89e3      	ldrh	r3, [r4, #14]
        break;
 8008536:	e7a7      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8008538:	490b      	ldr	r1, [pc, #44]	@ (8008568 <MCP_ReceivedPacket+0x16c>)
 800853a:	f003 031f 	and.w	r3, r3, #31
 800853e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8008542:	b15d      	cbz	r5, 800855c <MCP_ReceivedPacket+0x160>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008544:	68a3      	ldr	r3, [r4, #8]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	4631      	mov	r1, r6
 800854a:	f104 030e 	add.w	r3, r4, #14
 800854e:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008550:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008552:	e799      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
          MCI_StopRamp(pMCI);
 8008554:	4638      	mov	r0, r7
 8008556:	f7f9 fb27 	bl	8001ba8 <MCI_StopRamp>
 800855a:	e7db      	b.n	8008514 <MCP_ReceivedPacket+0x118>
 800855c:	462b      	mov	r3, r5
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 800855e:	200d      	movs	r0, #13
 8008560:	e792      	b.n	8008488 <MCP_ReceivedPacket+0x8c>
 8008562:	bf00      	nop
 8008564:	20000968 	.word	0x20000968
 8008568:	20000b54 	.word	0x20000b54

0800856c <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800856e:	7fc3      	ldrb	r3, [r0, #31]
 8008570:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8008574:	429a      	cmp	r2, r3
{
 8008576:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008578:	d002      	beq.n	8008580 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 800857a:	3301      	adds	r3, #1
 800857c:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8008580:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8008586:	b1a5      	cbz	r5, 80085b2 <MCPA_dataLog+0x46>
 8008588:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800858a:	8ba2      	ldrh	r2, [r4, #28]
 800858c:	42aa      	cmp	r2, r5
 800858e:	d24e      	bcs.n	800862e <MCPA_dataLog+0xc2>
 8008590:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8008594:	2bfe      	cmp	r3, #254	@ 0xfe
 8008596:	d066      	beq.n	8008666 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008598:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800859c:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 800859e:	8b22      	ldrh	r2, [r4, #24]
 80085a0:	6820      	ldr	r0, [r4, #0]
 80085a2:	3202      	adds	r2, #2
 80085a4:	2309      	movs	r3, #9
 80085a6:	6845      	ldr	r5, [r0, #4]
 80085a8:	b292      	uxth	r2, r2
 80085aa:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	8323      	strh	r3, [r4, #24]
}
 80085b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 80085b2:	4601      	mov	r1, r0
 80085b4:	2209      	movs	r2, #9
 80085b6:	f851 0b14 	ldr.w	r0, [r1], #20
 80085ba:	6803      	ldr	r3, [r0, #0]
 80085bc:	4798      	blx	r3
 80085be:	b390      	cbz	r0, 8008626 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80085c0:	4b49      	ldr	r3, [pc, #292]	@ (80086e8 <MCPA_dataLog+0x17c>)
 80085c2:	6961      	ldr	r1, [r4, #20]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 80085c8:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 80085cc:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 80085d0:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 80085d4:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 80085d6:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 80085d8:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 80085da:	d101      	bne.n	80085e0 <MCPA_dataLog+0x74>
 80085dc:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80085de:	e7d4      	b.n	800858a <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff = pHandle->MFNum;
 80085e0:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff = pHandle->HFNum;
 80085e4:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff = pHandle->MFRate;
 80085e8:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 80085ec:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff = pHandle->HFNum;
 80085f0:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff = pHandle->MFNum;
 80085f4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 80085f8:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80085fa:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff = pHandle->Mark;
 80085fc:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008600:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 8008602:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008606:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008608:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff = pHandle->HFRate;
 800860c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008610:	f002 f8e0 	bl	800a7d4 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8008614:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8008618:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 800861c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8008620:	441a      	add	r2, r3
 8008622:	f002 f8d7 	bl	800a7d4 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008626:	8b25      	ldrh	r5, [r4, #24]
 8008628:	2d00      	cmp	r5, #0
 800862a:	d1ad      	bne.n	8008588 <MCPA_dataLog+0x1c>
}
 800862c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800862e:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8008632:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008634:	b36e      	cbz	r6, 8008692 <MCPA_dataLog+0x126>
 8008636:	68a2      	ldr	r2, [r4, #8]
 8008638:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 800863c:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800863e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008642:	8800      	ldrh	r0, [r0, #0]
 8008644:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008648:	8b25      	ldrh	r5, [r4, #24]
 800864a:	3502      	adds	r5, #2
 800864c:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800864e:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008650:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008652:	d1f4      	bne.n	800863e <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8008654:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008658:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 800865a:	2bfd      	cmp	r3, #253	@ 0xfd
 800865c:	4618      	mov	r0, r3
 800865e:	d91d      	bls.n	800869c <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008660:	4295      	cmp	r5, r2
 8008662:	d897      	bhi.n	8008594 <MCPA_dataLog+0x28>
}
 8008664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008666:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800866a:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800866e:	4418      	add	r0, r3
 8008670:	4298      	cmp	r0, r3
 8008672:	dd91      	ble.n	8008598 <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008674:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008676:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008678:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008680:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008682:	5cf3      	ldrb	r3, [r6, r3]
 8008684:	442b      	add	r3, r5
 8008686:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008688:	b2d3      	uxtb	r3, r2
 800868a:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800868c:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800868e:	dbf3      	blt.n	8008678 <MCPA_dataLog+0x10c>
 8008690:	e782      	b.n	8008598 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8008692:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 8008696:	28fd      	cmp	r0, #253	@ 0xfd
 8008698:	f63f af71 	bhi.w	800857e <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 800869c:	f894 3020 	ldrb.w	r3, [r4, #32]
 80086a0:	4283      	cmp	r3, r0
 80086a2:	d006      	beq.n	80086b2 <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 80086a4:	3301      	adds	r3, #1
 80086a6:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80086aa:	4295      	cmp	r5, r2
 80086ac:	f63f af74 	bhi.w	8008598 <MCPA_dataLog+0x2c>
}
 80086b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086b2:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 80086b6:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80086b8:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086ba:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 80086bc:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086c0:	ddf3      	ble.n	80086aa <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80086c2:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086c6:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80086ca:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086d2:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086d6:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086d8:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086da:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086dc:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086de:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086e0:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086e2:	dbf2      	blt.n	80086ca <MCPA_dataLog+0x15e>
 80086e4:	e7e1      	b.n	80086aa <MCPA_dataLog+0x13e>
 80086e6:	bf00      	nop
 80086e8:	20001d3c 	.word	0x20001d3c

080086ec <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 80086ec:	8b03      	ldrh	r3, [r0, #24]
 80086ee:	b19b      	cbz	r3, 8008718 <MCPA_flushDataLog+0x2c>
{
 80086f0:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 80086f2:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 80086f6:	6941      	ldr	r1, [r0, #20]
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 80086f8:	2afe      	cmp	r2, #254	@ 0xfe
 80086fa:	4604      	mov	r4, r0
 80086fc:	d00d      	beq.n	800871a <MCPA_flushDataLog+0x2e>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 80086fe:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8008702:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008704:	8b22      	ldrh	r2, [r4, #24]
 8008706:	6820      	ldr	r0, [r4, #0]
 8008708:	3202      	adds	r2, #2
 800870a:	2309      	movs	r3, #9
 800870c:	6845      	ldr	r5, [r0, #4]
 800870e:	b292      	uxth	r2, r2
 8008710:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	8323      	strh	r3, [r4, #24]
  }   
}
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800871a:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800871e:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8008722:	4494      	add	ip, r2
 8008724:	4562      	cmp	r2, ip
 8008726:	daea      	bge.n	80086fe <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008728:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800872a:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 800872c:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8008730:	6800      	ldr	r0, [r0, #0]
 8008732:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008734:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008736:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008738:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800873a:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800873c:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800873e:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008740:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008742:	dbf3      	blt.n	800872c <MCPA_flushDataLog+0x40>
 8008744:	e7db      	b.n	80086fe <MCPA_flushDataLog+0x12>
 8008746:	bf00      	nop

08008748 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8008748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800874c:	880f      	ldrh	r7, [r1, #0]
{
 800874e:	4604      	mov	r4, r0

    if (buffSize == 0)
 8008750:	2f00      	cmp	r7, #0
 8008752:	d045      	beq.n	80087e0 <MCPA_cfgLog+0x98>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008754:	6803      	ldr	r3, [r0, #0]
 8008756:	89db      	ldrh	r3, [r3, #14]
 8008758:	42bb      	cmp	r3, r7
 800875a:	d33e      	bcc.n	80087da <MCPA_cfgLog+0x92>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 800875c:	788b      	ldrb	r3, [r1, #2]
 800875e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8008762:	f891 8003 	ldrb.w	r8, [r1, #3]
 8008766:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800876a:	790b      	ldrb	r3, [r1, #4]
 800876c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8008770:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8008772:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8008774:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8008778:	4443      	add	r3, r8
 800877a:	4293      	cmp	r3, r2
 800877c:	dc56      	bgt.n	800882c <MCPA_cfgLog+0xe4>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 800877e:	1d8e      	adds	r6, r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008780:	2b00      	cmp	r3, #0
 8008782:	d056      	beq.n	8008832 <MCPA_cfgLog+0xea>
 8008784:	2500      	movs	r5, #0
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8008786:	46a8      	mov	r8, r5
 8008788:	e011      	b.n	80087ae <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 800878a:	68e3      	ldr	r3, [r4, #12]
 800878c:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 800878e:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008790:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8008794:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 8008798:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800879a:	f105 0c01 	add.w	ip, r5, #1
 800879e:	fa5f f58c 	uxtb.w	r5, ip
 80087a2:	440b      	add	r3, r1
         logSize = logSize+pHandle->dataSizeTable[i];
 80087a4:	4442      	add	r2, r8
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80087a6:	429d      	cmp	r5, r3
         logSize = logSize+pHandle->dataSizeTable[i];
 80087a8:	fa1f f882 	uxth.w	r8, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80087ac:	da11      	bge.n	80087d2 <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 80087ae:	f836 9b02 	ldrh.w	r9, [r6], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 80087b2:	6861      	ldr	r1, [r4, #4]
 80087b4:	4648      	mov	r0, r9
 80087b6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80087ba:	f7fb fbdd 	bl	8003f78 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 80087be:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80087c2:	42ab      	cmp	r3, r5
 80087c4:	f04f 0002 	mov.w	r0, #2
 80087c8:	d8df      	bhi.n	800878a <MCPA_cfgLog+0x42>
 80087ca:	4648      	mov	r0, r9
 80087cc:	f7fb fbc8 	bl	8003f60 <RI_GetIDSize>
 80087d0:	e7db      	b.n	800878a <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 80087d2:	f108 0206 	add.w	r2, r8, #6
 80087d6:	4297      	cmp	r7, r2
 80087d8:	d210      	bcs.n	80087fc <MCPA_cfgLog+0xb4>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80087da:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 80087dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 80087e0:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 80087e2:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 80087e6:	b9ab      	cbnz	r3, 8008814 <MCPA_cfgLog+0xcc>
  pHandle->bufferIndex = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff = 0;
 80087ec:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex = 0;
 80087f0:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 80087f2:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 80087f6:	2000      	movs	r0, #0
}
 80087f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 80087fc:	3f02      	subs	r7, #2
 80087fe:	eba7 0708 	sub.w	r7, r7, r8
 8008802:	8367      	strh	r7, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 8008804:	7833      	ldrb	r3, [r6, #0]
 8008806:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
       if (0U == pHandle->Mark)
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f3      	bne.n	80087f6 <MCPA_cfgLog+0xae>
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 800880e:	8b23      	ldrh	r3, [r4, #24]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0e9      	beq.n	80087e8 <MCPA_cfgLog+0xa0>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008814:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008816:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800881a:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 800881c:	8b22      	ldrh	r2, [r4, #24]
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	3202      	adds	r2, #2
 8008822:	6845      	ldr	r5, [r0, #4]
 8008824:	b292      	uxth	r2, r2
 8008826:	2309      	movs	r3, #9
 8008828:	47a8      	blx	r5
 800882a:	e7dd      	b.n	80087e8 <MCPA_cfgLog+0xa0>
       result = MCP_ERROR_BAD_RAW_FORMAT;
 800882c:	200a      	movs	r0, #10
}
 800882e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008832:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8008834:	4698      	mov	r8, r3
 8008836:	e7ce      	b.n	80087d6 <MCPA_cfgLog+0x8e>

08008838 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008838:	8a03      	ldrh	r3, [r0, #16]
 800883a:	8b42      	ldrh	r2, [r0, #26]
 800883c:	429a      	cmp	r2, r3
 800883e:	d306      	bcc.n	800884e <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8008840:	8b82      	ldrh	r2, [r0, #28]
 8008842:	429a      	cmp	r2, r3
 8008844:	d901      	bls.n	800884a <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8008846:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8008848:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 800884a:	8ac0      	ldrh	r0, [r0, #22]
 800884c:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 800884e:	2008      	movs	r0, #8
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop

08008854 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop

0800885c <NTC_Init>:
{
 800885c:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 800885e:	7803      	ldrb	r3, [r0, #0]
{
 8008860:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8008862:	b123      	cbz	r3, 800886e <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008864:	8a43      	ldrh	r3, [r0, #18]
 8008866:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 8008868:	2200      	movs	r2, #0
 800886a:	82c2      	strh	r2, [r0, #22]
}
 800886c:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800886e:	3004      	adds	r0, #4
 8008870:	f7fb fc1a 	bl	80040a8 <RCM_RegisterRegConv>
 8008874:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
      NTC_Clear(pHandle);
 8008878:	4620      	mov	r0, r4
 800887a:	f7ff ffeb 	bl	8008854 <NTC_Clear>
}
 800887e:	bd10      	pop	{r4, pc}

08008880 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 8008880:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8008882:	7803      	ldrb	r3, [r0, #0]
{
 8008884:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8008886:	b113      	cbz	r3, 800888e <NTC_CalcAvTemp+0xe>
 8008888:	2000      	movs	r0, #0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);

        pHandle->hAvTemp_d = (uint16_t)wtemp;
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800888a:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800888c:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800888e:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8008892:	f7fb fd03 	bl	800429c <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8008896:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800889a:	4298      	cmp	r0, r3
 800889c:	d007      	beq.n	80088ae <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800889e:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 80088a0:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80088a2:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 80088a4:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 80088a8:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 80088ac:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80088ae:	4620      	mov	r0, r4
 80088b0:	f7ff ffc2 	bl	8008838 <NTC_SetFaultState>
 80088b4:	82e0      	strh	r0, [r4, #22]
}
 80088b6:	bd10      	pop	{r4, pc}

080088b8 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80088b8:	7803      	ldrb	r3, [r0, #0]
 80088ba:	b95b      	cbnz	r3, 80088d4 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80088bc:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 80088be:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 80088c0:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80088c4:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 80088c6:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80088c8:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80088cc:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80088d0:	b200      	sxth	r0, r0
 80088d2:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80088d4:	8a80      	ldrh	r0, [r0, #20]
}
 80088d6:	b200      	sxth	r0, r0
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop

080088dc <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80088dc:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80088de:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80088e0:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80088e2:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80088e4:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80088e6:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80088e8:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80088ea:	4770      	bx	lr

080088ec <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80088ec:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80088ee:	4770      	bx	lr

080088f0 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80088f0:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80088f2:	4770      	bx	lr

080088f4 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80088f4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop

080088fc <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80088fc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop

08008904 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8008904:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8008906:	4770      	bx	lr

08008908 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8008908:	8b80      	ldrh	r0, [r0, #28]
 800890a:	4770      	bx	lr

0800890c <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800890c:	2301      	movs	r3, #1
 800890e:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8008910:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8008912:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8008918:	8b40      	ldrh	r0, [r0, #26]
 800891a:	4770      	bx	lr

0800891c <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 800891c:	8bc0      	ldrh	r0, [r0, #30]
 800891e:	4770      	bx	lr

08008920 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8008920:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008922:	4770      	bx	lr

08008924 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8008924:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008926:	4770      	bx	lr

08008928 <PID_SetKIDivisorPOW2>:
{
 8008928:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800892a:	2301      	movs	r3, #1
{
 800892c:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800892e:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008930:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008934:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8008936:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8008938:	8343      	strh	r3, [r0, #26]
{
 800893a:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800893c:	f7ff fff2 	bl	8008924 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8008940:	4902      	ldr	r1, [pc, #8]	@ (800894c <PID_SetKIDivisorPOW2+0x24>)
 8008942:	4628      	mov	r0, r5
 8008944:	40a1      	lsls	r1, r4
 8008946:	f7ff ffeb 	bl	8008920 <PID_SetLowerIntegralTermLimit>
}
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	ffff8001 	.word	0xffff8001

08008950 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8008950:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008952:	4770      	bx	lr

08008954 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8008954:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop

0800895c <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 800895c:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 800895e:	4770      	bx	lr

08008960 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008960:	2301      	movs	r3, #1
 8008962:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8008964:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008966:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop

0800896c <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800896c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8008970:	4603      	mov	r3, r0
 8008972:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8008974:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8008978:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800897c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008980:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8008984:	b17c      	cbz	r4, 80089a6 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008986:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800898a:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 800898e:	eb15 0e01 	adds.w	lr, r5, r1
 8008992:	d41d      	bmi.n	80089d0 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8008994:	420d      	tst	r5, r1
 8008996:	4914      	ldr	r1, [pc, #80]	@ (80089e8 <PI_Controller+0x7c>)
 8008998:	bf48      	it	mi
 800899a:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800899c:	45a6      	cmp	lr, r4
 800899e:	dc02      	bgt.n	80089a6 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 80089a0:	691c      	ldr	r4, [r3, #16]
 80089a2:	4574      	cmp	r4, lr
 80089a4:	dd1d      	ble.n	80089e2 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80089a6:	8b99      	ldrh	r1, [r3, #28]
 80089a8:	410a      	asrs	r2, r1
 80089aa:	8bd9      	ldrh	r1, [r3, #30]
 80089ac:	fa44 f101 	asr.w	r1, r4, r1
 80089b0:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80089b2:	4290      	cmp	r0, r2
 80089b4:	da03      	bge.n	80089be <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80089b6:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80089b8:	4414      	add	r4, r2
 80089ba:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80089bc:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80089be:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80089c0:	bfc5      	ittet	gt
 80089c2:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80089c6:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80089c8:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80089ca:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80089cc:	609c      	str	r4, [r3, #8]
}
 80089ce:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	dde3      	ble.n	800899c <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80089d4:	2900      	cmp	r1, #0
 80089d6:	dde1      	ble.n	800899c <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80089d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80089dc:	428c      	cmp	r4, r1
 80089de:	d1e2      	bne.n	80089a6 <PI_Controller+0x3a>
 80089e0:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80089e2:	4674      	mov	r4, lr
 80089e4:	e7df      	b.n	80089a6 <PI_Controller+0x3a>
 80089e6:	bf00      	nop
 80089e8:	80000001 	.word	0x80000001

080089ec <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80089ec:	6882      	ldr	r2, [r0, #8]
{
 80089ee:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80089f0:	89d1      	ldrh	r1, [r2, #14]
 80089f2:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80089f6:	8993      	ldrh	r3, [r2, #12]
 80089f8:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80089fc:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8008a00:	fb13 230c 	smlabb	r3, r3, ip, r2
 8008a04:	2b00      	cmp	r3, #0

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8008a06:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8008a0a:	bfbc      	itt	lt
 8008a0c:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8008a10:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8008a12:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 8008a16:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8008a1a:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8008a1c:	f85d fb04 	ldr.w	pc, [sp], #4

08008a20 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop

08008a28 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8008a28:	b538      	push	{r3, r4, r5, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008a2a:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 8008a2e:	4604      	mov	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008a30:	68c0      	ldr	r0, [r0, #12]
 8008a32:	f7ff fcaf 	bl	8008394 <VBS_GetAvBusVoltage_V>
 8008a36:	fb05 f300 	mul.w	r3, r5, r0
 8008a3a:	ee00 3a10 	vmov	s0, r3
 8008a3e:	edd4 7a01 	vldr	s15, [r4, #4]
 8008a42:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8008a46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}

08008a4c <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8008a4c:	b410      	push	{r4}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8008a4e:	4b19      	ldr	r3, [pc, #100]	@ (8008ab4 <startTimers+0x68>)
 8008a50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008a52:	07d2      	lsls	r2, r2, #31
 8008a54:	b083      	sub	sp, #12
 8008a56:	d416      	bmi.n	8008a86 <startTimers+0x3a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008a58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008a5a:	f042 0201 	orr.w	r2, r2, #1
 8008a5e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008a60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008a62:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008a66:	f002 0201 	and.w	r2, r2, #1
 8008a6a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8008a6c:	9a01      	ldr	r2, [sp, #4]
 8008a6e:	694a      	ldr	r2, [r1, #20]
 8008a70:	f042 0201 	orr.w	r2, r2, #1
 8008a74:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8008a76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008a78:	f022 0201 	bic.w	r2, r2, #1
 8008a7c:	659a      	str	r2, [r3, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8008a7e:	b003      	add	sp, #12
 8008a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a84:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8008a86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008a8a:	480b      	ldr	r0, [pc, #44]	@ (8008ab8 <startTimers+0x6c>)
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	6859      	ldr	r1, [r3, #4]
 8008a90:	4c0a      	ldr	r4, [pc, #40]	@ (8008abc <startTimers+0x70>)
 8008a92:	4001      	ands	r1, r0
 8008a94:	f041 0120 	orr.w	r1, r1, #32
 8008a98:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008a9a:	6959      	ldr	r1, [r3, #20]
 8008a9c:	f041 0101 	orr.w	r1, r1, #1
 8008aa0:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008aa2:	6859      	ldr	r1, [r3, #4]
 8008aa4:	4022      	ands	r2, r4
 8008aa6:	4001      	ands	r1, r0
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	605a      	str	r2, [r3, #4]
}
 8008aac:	b003      	add	sp, #12
 8008aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	40021000 	.word	0x40021000
 8008ab8:	fdffff8f 	.word	0xfdffff8f
 8008abc:	02000070 	.word	0x02000070

08008ac0 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8008ac0:	3201      	adds	r2, #1
{
 8008ac2:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8008ac4:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008ac6:	f06f 0602 	mvn.w	r6, #2
 8008aca:	0155      	lsls	r5, r2, #5
 8008acc:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8008ace:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8008ad0:	f893 c000 	ldrb.w	ip, [r3]
 8008ad4:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8008ad8:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8008adc:	d80c      	bhi.n	8008af8 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8008ade:	6904      	ldr	r4, [r0, #16]
 8008ae0:	07a4      	lsls	r4, r4, #30
 8008ae2:	d5f5      	bpl.n	8008ad0 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8008ae4:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8008ae8:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008aea:	6106      	str	r6, [r0, #16]
 8008aec:	d8f0      	bhi.n	8008ad0 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8008aee:	781c      	ldrb	r4, [r3, #0]
 8008af0:	2c0f      	cmp	r4, #15
 8008af2:	d8ed      	bhi.n	8008ad0 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8008af4:	2301      	movs	r3, #1
 8008af6:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8008af8:	bd70      	pop	{r4, r5, r6, pc}
 8008afa:	bf00      	nop

08008afc <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008afc:	6883      	ldr	r3, [r0, #8]
 8008afe:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008b02:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008b06:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008b08:	6883      	ldr	r3, [r0, #8]
 8008b0a:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	d418      	bmi.n	8008b42 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8008b10:	4b24      	ldr	r3, [pc, #144]	@ (8008ba4 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8008b12:	6882      	ldr	r2, [r0, #8]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4924      	ldr	r1, [pc, #144]	@ (8008ba8 <R3_2_ADCxInit+0xac>)
 8008b18:	099b      	lsrs	r3, r3, #6
 8008b1a:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8008b1e:	fba1 1303 	umull	r1, r3, r1, r3
 8008b22:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008b26:	099b      	lsrs	r3, r3, #6
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008b2e:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8008b30:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	b12b      	cbz	r3, 8008b42 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008b3c:	9b01      	ldr	r3, [sp, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f9      	bne.n	8008b36 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8008b42:	6883      	ldr	r3, [r0, #8]
 8008b44:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008b48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008b4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b50:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008b52:	6883      	ldr	r3, [r0, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dbfc      	blt.n	8008b52 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008b58:	6803      	ldr	r3, [r0, #0]
 8008b5a:	07da      	lsls	r2, r3, #31
 8008b5c:	d408      	bmi.n	8008b70 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8008b5e:	4a13      	ldr	r2, [pc, #76]	@ (8008bac <R3_2_ADCxInit+0xb0>)
 8008b60:	6883      	ldr	r3, [r0, #8]
 8008b62:	4013      	ands	r3, r2
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008b6a:	6803      	ldr	r3, [r0, #0]
 8008b6c:	07db      	lsls	r3, r3, #31
 8008b6e:	d5f7      	bpl.n	8008b60 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8008b70:	6883      	ldr	r3, [r0, #8]
 8008b72:	4a0e      	ldr	r2, [pc, #56]	@ (8008bac <R3_2_ADCxInit+0xb0>)
 8008b74:	4013      	ands	r3, r2
 8008b76:	f043 0308 	orr.w	r3, r3, #8
 8008b7a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8008b7c:	6883      	ldr	r3, [r0, #8]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	f043 0320 	orr.w	r3, r3, #32
 8008b84:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8008b86:	68c3      	ldr	r3, [r0, #12]
 8008b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b94:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8008b96:	6883      	ldr	r3, [r0, #8]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	f043 0304 	orr.w	r3, r3, #4
 8008b9e:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode(ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY);

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
}
 8008ba0:	b002      	add	sp, #8
 8008ba2:	4770      	bx	lr
 8008ba4:	20000554 	.word	0x20000554
 8008ba8:	053e2d63 	.word	0x053e2d63
 8008bac:	7fffffc0 	.word	0x7fffffc0

08008bb0 <R3_2_GetPhaseCurrents>:
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_2_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8008bb0:	b1d9      	cbz	r1, 8008bea <R3_2_GetPhaseCurrents+0x3a>
  {
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008bb2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8008bb6:	f890 206a 	ldrb.w	r2, [r0, #106]	@ 0x6a
{
 8008bba:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008bbc:	689c      	ldr	r4, [r3, #8]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8008bbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008bc2:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8008bc6:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008bca:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008bce:	6863      	ldr	r3, [r4, #4]
 8008bd0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bd8:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8008bda:	2a05      	cmp	r2, #5
 8008bdc:	f200 8098 	bhi.w	8008d10 <R3_2_GetPhaseCurrents+0x160>
 8008be0:	e8df f002 	tbb	[pc, r2]
 8008be4:	041d1d10 	.word	0x041d1d10
 8008be8:	1004      	.short	0x1004
 8008bea:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008bec:	6f03      	ldr	r3, [r0, #112]	@ 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8008bee:	4a4c      	ldr	r2, [pc, #304]	@ (8008d20 <R3_2_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008bf0:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	db20      	blt.n	8008c38 <R3_2_GetPhaseCurrents+0x88>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008bf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bfa:	f2c0 8086 	blt.w	8008d0a <R3_2_GetPhaseCurrents+0x15a>
 8008bfe:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8008c02:	e01a      	b.n	8008c3a <R3_2_GetPhaseCurrents+0x8a>
      case SECTOR_6:
      case SECTOR_1:
      {
        /* Current on Phase A is not accessible     */
        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008c04:	6f44      	ldr	r4, [r0, #116]	@ 0x74

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8008c06:	4b46      	ldr	r3, [pc, #280]	@ (8008d20 <R3_2_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008c08:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008c0a:	429c      	cmp	r4, r3
 8008c0c:	db2b      	blt.n	8008c66 <R3_2_GetPhaseCurrents+0xb6>
        {
          Iab->b = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008c0e:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8008c12:	db77      	blt.n	8008d04 <R3_2_GetPhaseCurrents+0x154>
 8008c14:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008c18:	4614      	mov	r4, r2
 8008c1a:	4615      	mov	r5, r2
 8008c1c:	e027      	b.n	8008c6e <R3_2_GetPhaseCurrents+0xbe>
      case SECTOR_2:
      case SECTOR_3:
      {
        /* Current on Phase B is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008c1e:	6f04      	ldr	r4, [r0, #112]	@ 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8008c20:	4b3f      	ldr	r3, [pc, #252]	@ (8008d20 <R3_2_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008c22:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008c24:	429c      	cmp	r4, r3
 8008c26:	db2e      	blt.n	8008c86 <R3_2_GetPhaseCurrents+0xd6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008c28:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8008c2c:	db66      	blt.n	8008cfc <R3_2_GetPhaseCurrents+0x14c>
 8008c2e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008c32:	461c      	mov	r4, r3
 8008c34:	469c      	mov	ip, r3
 8008c36:	e02a      	b.n	8008c8e <R3_2_GetPhaseCurrents+0xde>
 8008c38:	4694      	mov	ip, r2
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008c3a:	6f42      	ldr	r2, [r0, #116]	@ 0x74
        if (Aux < -INT16_MAX)
 8008c3c:	4d38      	ldr	r5, [pc, #224]	@ (8008d20 <R3_2_GetPhaseCurrents+0x170>)
          Iab->a = -INT16_MAX;
 8008c3e:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008c42:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8008c44:	42aa      	cmp	r2, r5
 8008c46:	da2f      	bge.n	8008ca8 <R3_2_GetPhaseCurrents+0xf8>
          Iab->b = -INT16_MAX;
 8008c48:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008c4a:	fa1f f38c 	uxth.w	r3, ip
 8008c4e:	f248 0201 	movw	r2, #32769	@ 0x8001
 8008c52:	4413      	add	r3, r2
 8008c54:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 8008c56:	f8a0 5052 	strh.w	r5, [r0, #82]	@ 0x52
    pHandle->_Super.Ia = Iab->a;
 8008c5a:	f8a0 c050 	strh.w	ip, [r0, #80]	@ 0x50
  }
}
 8008c5e:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008c60:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
}
 8008c64:	4770      	bx	lr
 8008c66:	461c      	mov	r4, r3
 8008c68:	f248 0201 	movw	r2, #32769	@ 0x8001
 8008c6c:	461d      	mov	r5, r3
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008c6e:	6f83      	ldr	r3, [r0, #120]	@ 0x78
          Iab->b = -INT16_MAX;
 8008c70:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008c72:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8008c74:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 8008c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c7a:	db20      	blt.n	8008cbe <R3_2_GetPhaseCurrents+0x10e>
          Iab->a = INT16_MAX;
 8008c7c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008c80:	800b      	strh	r3, [r1, #0]
 8008c82:	469c      	mov	ip, r3
 8008c84:	e7e5      	b.n	8008c52 <R3_2_GetPhaseCurrents+0xa2>
 8008c86:	461c      	mov	r4, r3
 8008c88:	46a4      	mov	ip, r4
 8008c8a:	f248 0301 	movw	r3, #32769	@ 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008c8e:	6f82      	ldr	r2, [r0, #120]	@ 0x78
          Iab->a = -INT16_MAX;
 8008c90:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008c94:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8008c96:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8008c98:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8008c9c:	db17      	blt.n	8008cce <R3_2_GetPhaseCurrents+0x11e>
          Iab->b = INT16_MAX;
 8008c9e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008ca2:	804a      	strh	r2, [r1, #2]
 8008ca4:	4615      	mov	r5, r2
 8008ca6:	e7d4      	b.n	8008c52 <R3_2_GetPhaseCurrents+0xa2>
        else  if (Aux > INT16_MAX)
 8008ca8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8008cac:	db20      	blt.n	8008cf0 <R3_2_GetPhaseCurrents+0x140>
          Iab->b = INT16_MAX;
 8008cae:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	804b      	strh	r3, [r1, #2]
 8008cb6:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008cb8:	fa1f f38c 	uxth.w	r3, ip
 8008cbc:	e7c9      	b.n	8008c52 <R3_2_GetPhaseCurrents+0xa2>
        else  if (Aux < -INT16_MAX)
 8008cbe:	4c18      	ldr	r4, [pc, #96]	@ (8008d20 <R3_2_GetPhaseCurrents+0x170>)
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	da0f      	bge.n	8008ce4 <R3_2_GetPhaseCurrents+0x134>
          Iab->a = -INT16_MAX;
 8008cc4:	800c      	strh	r4, [r1, #0]
 8008cc6:	f248 0301 	movw	r3, #32769	@ 0x8001
 8008cca:	46a4      	mov	ip, r4
 8008ccc:	e7c1      	b.n	8008c52 <R3_2_GetPhaseCurrents+0xa2>
        else  if (Aux < -INT16_MAX)
 8008cce:	4d14      	ldr	r5, [pc, #80]	@ (8008d20 <R3_2_GetPhaseCurrents+0x170>)
 8008cd0:	42aa      	cmp	r2, r5
 8008cd2:	da03      	bge.n	8008cdc <R3_2_GetPhaseCurrents+0x12c>
          Iab->b = -INT16_MAX;
 8008cd4:	804d      	strh	r5, [r1, #2]
 8008cd6:	f248 0201 	movw	r2, #32769	@ 0x8001
 8008cda:	e7ba      	b.n	8008c52 <R3_2_GetPhaseCurrents+0xa2>
          Iab->b = (int16_t)Aux;
 8008cdc:	b215      	sxth	r5, r2
 8008cde:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008ce0:	b292      	uxth	r2, r2
 8008ce2:	e7b6      	b.n	8008c52 <R3_2_GetPhaseCurrents+0xa2>
          Iab->a = (int16_t)Aux;
 8008ce4:	fa0f fc83 	sxth.w	ip, r3
 8008ce8:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	e7b0      	b.n	8008c52 <R3_2_GetPhaseCurrents+0xa2>
          Iab->b = (int16_t)Aux;
 8008cf0:	b215      	sxth	r5, r2
 8008cf2:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008cf4:	fa1f f38c 	uxth.w	r3, ip
 8008cf8:	b292      	uxth	r2, r2
 8008cfa:	e7aa      	b.n	8008c52 <R3_2_GetPhaseCurrents+0xa2>
          Iab->a = (int16_t)Aux;
 8008cfc:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008d00:	b2a3      	uxth	r3, r4
 8008d02:	e7c4      	b.n	8008c8e <R3_2_GetPhaseCurrents+0xde>
          Iab->b = (int16_t)Aux;
 8008d04:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008d06:	b2a2      	uxth	r2, r4
 8008d08:	e7b1      	b.n	8008c6e <R3_2_GetPhaseCurrents+0xbe>
          Iab->a = (int16_t)Aux;
 8008d0a:	fa0f fc83 	sxth.w	ip, r3
 8008d0e:	e794      	b.n	8008c3a <R3_2_GetPhaseCurrents+0x8a>
    pHandle->_Super.Ia = Iab->a;
 8008d10:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8008d14:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008d18:	880b      	ldrh	r3, [r1, #0]
 8008d1a:	884a      	ldrh	r2, [r1, #2]
 8008d1c:	e799      	b.n	8008c52 <R3_2_GetPhaseCurrents+0xa2>
 8008d1e:	bf00      	nop
 8008d20:	ffff8001 	.word	0xffff8001

08008d24 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8008d24:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008d26:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8008d2a:	f890 4081 	ldrb.w	r4, [r0, #129]	@ 0x81
 8008d2e:	f880 406a 	strb.w	r4, [r0, #106]	@ 0x6a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008d32:	f8b0 207c 	ldrh.w	r2, [r0, #124]	@ 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008d36:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8008d38:	8fc4      	ldrh	r4, [r0, #62]	@ 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008d3a:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008d3c:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8008d3e:	f8b0 4040 	ldrh.w	r4, [r0, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8008d42:	f8b0 0042 	ldrh.w	r0, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008d46:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008d48:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008d4a:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008d4c:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008d4e:	4904      	ldr	r1, [pc, #16]	@ (8008d60 <R3_2_SetADCSampPointPolarization+0x3c>)
 8008d50:	685b      	ldr	r3, [r3, #4]
}
 8008d52:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008d56:	420b      	tst	r3, r1
}
 8008d58:	bf14      	ite	ne
 8008d5a:	2001      	movne	r0, #1
 8008d5c:	2000      	moveq	r0, #0
 8008d5e:	4770      	bx	lr
 8008d60:	02000070 	.word	0x02000070

08008d64 <R3_2_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8008d64:	b339      	cbz	r1, 8008db6 <R3_2_HFCurrentsPolarizationAB+0x52>
{
 8008d66:	b430      	push	{r4, r5}
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008d68:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8008d6c:	f890 4081 	ldrb.w	r4, [r0, #129]	@ 0x81
 8008d70:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8008d72:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008d76:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8008d7a:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008d7e:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008d82:	6853      	ldr	r3, [r2, #4]
 8008d84:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d8c:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8008d8e:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8008d92:	2b0f      	cmp	r3, #15
 8008d94:	d80b      	bhi.n	8008dae <R3_2_HFCurrentsPolarizationAB+0x4a>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8008d96:	6f03      	ldr	r3, [r0, #112]	@ 0x70
      pHandle-> PhaseBOffset += ADCDataReg2;
 8008d98:	6f42      	ldr	r2, [r0, #116]	@ 0x74
      pHandle-> PhaseAOffset += ADCDataReg1;
 8008d9a:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 8008d9c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
      pHandle-> PhaseBOffset += ADCDataReg2;
 8008da0:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8008da2:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8008da4:	e9c0 421c 	strd	r4, r2, [r0, #112]	@ 0x70
      pHandle->PolarizationCounter++;
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8008dae:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8008db0:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 8008db2:	600b      	str	r3, [r1, #0]
}
 8008db4:	4770      	bx	lr
 8008db6:	4770      	bx	lr

08008db8 <R3_2_HFCurrentsPolarizationC>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8008db8:	b311      	cbz	r1, 8008e00 <R3_2_HFCurrentsPolarizationC+0x48>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008dba:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008dbe:	f890 c081 	ldrb.w	ip, [r0, #129]	@ 0x81
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008dc2:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008dc4:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8008dc8:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dcc:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8008dd0:	6853      	ldr	r3, [r2, #4]
 8008dd2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dda:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8008ddc:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8008de0:	2b0f      	cmp	r3, #15
 8008de2:	d808      	bhi.n	8008df6 <R3_2_HFCurrentsPolarizationC+0x3e>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8008de4:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008de8:	6f82      	ldr	r2, [r0, #120]	@ 0x78
      pHandle->PolarizationCounter++;
 8008dea:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008dec:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 8008dee:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008df0:	6782      	str	r2, [r0, #120]	@ 0x78
      pHandle->PolarizationCounter++;
 8008df2:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8008df6:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8008df8:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8008dfc:	600b      	str	r3, [r1, #0]
}
 8008dfe:	4770      	bx	lr
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop

08008e04 <R3_2_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_2_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
 8008e04:	b410      	push	{r4}
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008e06:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 8008e0a:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008e0c:	68a2      	ldr	r2, [r4, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8008e0e:	f880 306b 	strb.w	r3, [r0, #107]	@ 0x6b
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008e12:	f06f 0301 	mvn.w	r3, #1
 8008e16:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008e18:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008e1a:	6391      	str	r1, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008e1c:	63d1      	str	r1, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008e1e:	6913      	ldr	r3, [r2, #16]
 8008e20:	07db      	lsls	r3, r3, #31
 8008e22:	d5fc      	bpl.n	8008e1e <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008e24:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8008e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e2a:	6453      	str	r3, [r2, #68]	@ 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8008e2c:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d10b      	bne.n	8008e4c <R3_2_TurnOnLowSides+0x48>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008e34:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008e38:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	@ 0xac
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008e3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008e3e:	6190      	str	r0, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008e40:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	@ 0xae
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008e44:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	@ 0xb0
 8008e48:	6188      	str	r0, [r1, #24]
 8008e4a:	619a      	str	r2, [r3, #24]
  else
  {
    /* Nothing to do */
  }
  return;
}
 8008e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop

08008e54 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008e54:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8008e58:	f8b0 207c 	ldrh.w	r2, [r0, #124]	@ 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008e5c:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked = true;
 8008e5e:	f04f 0c01 	mov.w	ip, #1
{
 8008e62:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->ADCRegularLocked = true;
 8008e64:	f880 c08c 	strb.w	ip, [r0, #140]	@ 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008e68:	f04f 0c00 	mov.w	ip, #0
 8008e6c:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8008e70:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008e72:	6358      	str	r0, [r3, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8008e74:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008e76:	6398      	str	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008e78:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008e7a:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008e80:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	07d2      	lsls	r2, r2, #31
 8008e86:	d5fc      	bpl.n	8008e82 <R3_2_SwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008e88:	f06f 0201 	mvn.w	r2, #1
 8008e8c:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008e8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008e94:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008e96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8008e9e:	f891 20c0 	ldrb.w	r2, [r1, #192]	@ 0xc0
 8008ea2:	2a02      	cmp	r2, #2
 8008ea4:	d008      	beq.n	8008eb8 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008ea6:	f06f 0201 	mvn.w	r2, #1
 8008eaa:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 8008eb2:	bcf0      	pop	{r4, r5, r6, r7}
 8008eb4:	60da      	str	r2, [r3, #12]
 8008eb6:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8008eb8:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008eba:	6a0f      	ldr	r7, [r1, #32]
 8008ebc:	f8b1 c0ac 	ldrh.w	ip, [r1, #172]	@ 0xac
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008ec0:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008ec2:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	@ 0xae
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008ec6:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8008ec8:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8008ecc:	f240 5255 	movw	r2, #1365	@ 0x555
 8008ed0:	4210      	tst	r0, r2
 8008ed2:	d004      	beq.n	8008ede <R3_2_SwitchOnPWM+0x8a>
 8008ed4:	f8c7 c018 	str.w	ip, [r7, #24]
 8008ed8:	61ae      	str	r6, [r5, #24]
 8008eda:	61a1      	str	r1, [r4, #24]
}
 8008edc:	e7e3      	b.n	8008ea6 <R3_2_SwitchOnPWM+0x52>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008ede:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 8008ee2:	62ae      	str	r6, [r5, #40]	@ 0x28
 8008ee4:	62a1      	str	r1, [r4, #40]	@ 0x28
}
 8008ee6:	e7de      	b.n	8008ea6 <R3_2_SwitchOnPWM+0x52>

08008ee8 <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008ee8:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8008eec:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008eee:	68d3      	ldr	r3, [r2, #12]
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008ef6:	6c53      	ldr	r3, [r2, #68]	@ 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE(TIMx);

  pHandle->_Super.TurnOnLowSidesAction = false;
 8008ef8:	f04f 0c00 	mov.w	ip, #0
 8008efc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f00:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 8008f04:	6453      	str	r3, [r2, #68]	@ 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->BrakeActionLock)
 8008f06:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008f0a:	b91b      	cbnz	r3, 8008f14 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008f0c:	f891 30c0 	ldrb.w	r3, [r1, #192]	@ 0xc0
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d00c      	beq.n	8008f2e <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008f14:	f06f 0301 	mvn.w	r3, #1
 8008f18:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008f1a:	6913      	ldr	r3, [r2, #16]
 8008f1c:	07db      	lsls	r3, r3, #31
 8008f1e:	d5fc      	bpl.n	8008f1a <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008f20:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 8008f24:	2300      	movs	r3, #0
 8008f26:	6111      	str	r1, [r2, #16]
 8008f28:	f880 308c 	strb.w	r3, [r0, #140]	@ 0x8c
 8008f2c:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008f2e:	6a0b      	ldr	r3, [r1, #32]
{
 8008f30:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008f32:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	@ 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8008f36:	629c      	str	r4, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008f38:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8008f3a:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	@ 0xae
 8008f3e:	629c      	str	r4, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008f40:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008f42:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
 8008f46:	6299      	str	r1, [r3, #40]	@ 0x28
 8008f48:	f06f 0301 	mvn.w	r3, #1
 8008f4c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008f4e:	6913      	ldr	r3, [r2, #16]
 8008f50:	07d9      	lsls	r1, r3, #31
 8008f52:	d5fc      	bpl.n	8008f4e <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008f54:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6111      	str	r1, [r2, #16]
}
 8008f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked = false;
 8008f60:	f880 308c 	strb.w	r3, [r0, #140]	@ 0x8c
}
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop

08008f68 <R3_2_RLGetPhaseCurrents>:
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{

  if (MC_NULL == pStator_Currents)
 8008f68:	b329      	cbz	r1, 8008fb6 <R3_2_RLGetPhaseCurrents+0x4e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f6a:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
{
 8008f6e:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f70:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008f72:	6863      	ldr	r3, [r4, #4]
 8008f74:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f7c:	6063      	str	r3, [r4, #4]
    int32_t wAux;

    /* disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008f7e:	f890 406a 	ldrb.w	r4, [r0, #106]	@ 0x6a
 8008f82:	6f43      	ldr	r3, [r0, #116]	@ 0x74
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 8008f84:	480c      	ldr	r0, [pc, #48]	@ (8008fb8 <R3_2_RLGetPhaseCurrents+0x50>)
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008f86:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008f8a:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8008f8c:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 8008f90:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008f94:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	bfa8      	it	ge
 8008f9a:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 8008f9c:	4283      	cmp	r3, r0
 8008f9e:	bfb8      	it	lt
 8008fa0:	4603      	movlt	r3, r0
 8008fa2:	b21b      	sxth	r3, r3
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f363 020f 	bfi	r2, r3, #0, #16
 8008faa:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
  }
}
 8008fae:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8008fb2:	600a      	str	r2, [r1, #0]
}
 8008fb4:	4770      	bx	lr
 8008fb6:	4770      	bx	lr
 8008fb8:	ffff8001 	.word	0xffff8001

08008fbc <R3_2_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
static void R3_2_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008fbc:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88

  pHandle->ADCRegularLocked = true;
 8008fc0:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008fc2:	688a      	ldr	r2, [r1, #8]
{
 8008fc4:	b410      	push	{r4}
  pHandle->ADCRegularLocked = true;
 8008fc6:	f880 308c 	strb.w	r3, [r0, #140]	@ 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008fca:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008fcc:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008fd0:	6354      	str	r4, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008fd2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008fd4:	6913      	ldr	r3, [r2, #16]
 8008fd6:	07db      	lsls	r3, r3, #31
 8008fd8:	d5fc      	bpl.n	8008fd4 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008fda:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8008fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fe0:	6453      	str	r3, [r2, #68]	@ 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008fe2:	f891 30c0 	ldrb.w	r3, [r1, #192]	@ 0xc0
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d10b      	bne.n	8009002 <R3_2_RLTurnOnLowSides+0x46>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008fea:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008fee:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	@ 0xac
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008ff2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008ff4:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008ff6:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	@ 0xae
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008ffa:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	@ 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 8008ffe:	6284      	str	r4, [r0, #40]	@ 0x28
 8009000:	629a      	str	r2, [r3, #40]	@ 0x28
  else
  {
    /* Nothing to do */
  }
  return;
}
 8009002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009006:	4770      	bx	lr

08009008 <R3_2_RLSwitchOnPWM>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t *pHdl)
{
  if (MC_NULL == pHdl)
 8009008:	2800      	cmp	r0, #0
 800900a:	d054      	beq.n	80090b6 <R3_2_RLSwitchOnPWM+0xae>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800900c:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;

    pHandle->ADCRegularLocked=true;
 8009010:	2201      	movs	r2, #1
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009012:	688b      	ldr	r3, [r1, #8]
{
 8009014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009018:	e9d1 5400 	ldrd	r5, r4, [r1]
    pHandle->ADCRegularLocked=true;
 800901c:	f880 208c 	strb.w	r2, [r0, #140]	@ 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009020:	f06f 0201 	mvn.w	r2, #1
 8009024:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	07d6      	lsls	r6, r2, #31
 800902a:	d5fc      	bpl.n	8009026 <R3_2_RLSwitchOnPWM+0x1e>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800902c:	f8b0 207c 	ldrh.w	r2, [r0, #124]	@ 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009030:	f06f 0601 	mvn.w	r6, #1
 8009034:	611e      	str	r6, [r3, #16]
 8009036:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009038:	2601      	movs	r6, #1
 800903a:	635e      	str	r6, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800903c:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	07d2      	lsls	r2, r2, #31
 8009042:	d5fc      	bpl.n	800903e <R3_2_RLSwitchOnPWM+0x36>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009044:	68da      	ldr	r2, [r3, #12]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	60da      	str	r2, [r3, #12]

    /* enable TIMx update interrupt*/
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800904c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800904e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009052:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800905a:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 800905c:	f891 20c0 	ldrb.w	r2, [r1, #192]	@ 0xc0
 8009060:	2a02      	cmp	r2, #2
 8009062:	d00f      	beq.n	8009084 <R3_2_RLSwitchOnPWM+0x7c>
      /* Nothing to do */
    }

    /* set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 8009064:	2303      	movs	r3, #3
 8009066:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a
  MODIFY_REG(ADCx->CR,
 800906a:	68ab      	ldr	r3, [r5, #8]
 800906c:	4a12      	ldr	r2, [pc, #72]	@ (80090b8 <R3_2_RLSwitchOnPWM+0xb0>)
 800906e:	4013      	ands	r3, r2
 8009070:	f043 0308 	orr.w	r3, r3, #8
 8009074:	60ab      	str	r3, [r5, #8]
 8009076:	68a3      	ldr	r3, [r4, #8]
 8009078:	4013      	ands	r3, r2
 800907a:	f043 0308 	orr.w	r3, r3, #8
 800907e:	60a3      	str	r3, [r4, #8]

    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
  }
  return;
}
 8009080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8009084:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8009086:	f8d1 e020 	ldr.w	lr, [r1, #32]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800908a:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800908c:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800908e:	f8b1 80ac 	ldrh.w	r8, [r1, #172]	@ 0xac
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009092:	f8b1 c0ae 	ldrh.w	ip, [r1, #174]	@ 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009096:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800909a:	f240 5355 	movw	r3, #1365	@ 0x555
 800909e:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 80090a0:	bf15      	itete	ne
 80090a2:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80090a6:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80090aa:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80090ae:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 80090b2:	62b1      	str	r1, [r6, #40]	@ 0x28
}
 80090b4:	e7d6      	b.n	8009064 <R3_2_RLSwitchOnPWM+0x5c>
 80090b6:	4770      	bx	lr
 80090b8:	7fffffc0 	.word	0x7fffffc0

080090bc <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80090bc:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 80090c0:	b510      	push	{r4, lr}
 80090c2:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 80090c6:	f101 0e08 	add.w	lr, r1, #8
 80090ca:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80090cc:	f85e 300c 	ldr.w	r3, [lr, ip]
 80090d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090d8:	4313      	orrs	r3, r2
 80090da:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 80090de:	684a      	ldr	r2, [r1, #4]
 80090e0:	f000 0303 	and.w	r3, r0, #3
 80090e4:	4313      	orrs	r3, r2
 80090e6:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 80090e8:	680a      	ldr	r2, [r1, #0]
 80090ea:	f000 0010 	and.w	r0, r0, #16
 80090ee:	2301      	movs	r3, #1
 80090f0:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80090f2:	ea33 0202 	bics.w	r2, r3, r2
 80090f6:	d014      	beq.n	8009122 <R3_2_SetAOReferenceVoltage+0x66>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 80090f8:	4a14      	ldr	r2, [pc, #80]	@ (800914c <R3_2_SetAOReferenceVoltage+0x90>)
 80090fa:	4815      	ldr	r0, [pc, #84]	@ (8009150 <R3_2_SetAOReferenceVoltage+0x94>)
 80090fc:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 80090fe:	680c      	ldr	r4, [r1, #0]
 8009100:	fba0 0202 	umull	r0, r2, r0, r2
 8009104:	0cd2      	lsrs	r2, r2, #19
 8009106:	4323      	orrs	r3, r4
 8009108:	00d2      	lsls	r2, r2, #3
 800910a:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800910c:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800910e:	9b00      	ldr	r3, [sp, #0]
 8009110:	b12b      	cbz	r3, 800911e <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8009112:	9b00      	ldr	r3, [sp, #0]
 8009114:	3b01      	subs	r3, #1
 8009116:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1f9      	bne.n	8009112 <R3_2_SetAOReferenceVoltage+0x56>
}
 800911e:	b002      	add	sp, #8
 8009120:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009122:	4b0a      	ldr	r3, [pc, #40]	@ (800914c <R3_2_SetAOReferenceVoltage+0x90>)
 8009124:	4a0a      	ldr	r2, [pc, #40]	@ (8009150 <R3_2_SetAOReferenceVoltage+0x94>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	fba2 2303 	umull	r2, r3, r2, r3
 800912c:	0cdb      	lsrs	r3, r3, #19
 800912e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009132:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009134:	9b01      	ldr	r3, [sp, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0f1      	beq.n	800911e <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	3b01      	subs	r3, #1
 800913e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009140:	9b01      	ldr	r3, [sp, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1f9      	bne.n	800913a <R3_2_SetAOReferenceVoltage+0x7e>
}
 8009146:	b002      	add	sp, #8
 8009148:	bd10      	pop	{r4, pc}
 800914a:	bf00      	nop
 800914c:	20000554 	.word	0x20000554
 8009150:	431bde83 	.word	0x431bde83

08009154 <R3_2_Init>:
  if (MC_NULL == pHandle)
 8009154:	2800      	cmp	r0, #0
 8009156:	f000 80f0 	beq.w	800933a <R3_2_Init+0x1e6>
{
 800915a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800915e:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
 8009162:	6827      	ldr	r7, [r4, #0]
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009164:	6866      	ldr	r6, [r4, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009166:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009168:	68a5      	ldr	r5, [r4, #8]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800916a:	f8d4 b014 	ldr.w	fp, [r4, #20]
 800916e:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8009170:	e9d4 c00b 	ldrd	ip, r0, [r4, #44]	@ 0x2c
{
 8009174:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009176:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800917a:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800917e:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8009180:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009182:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8009184:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8009188:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800918a:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800918c:	e9d4 a906 	ldrd	sl, r9, [r4, #24]
 8009190:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009192:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009196:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009198:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800919a:	f022 0220 	bic.w	r2, r2, #32
 800919e:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80091a0:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80091a2:	6872      	ldr	r2, [r6, #4]
 80091a4:	f022 0204 	bic.w	r2, r2, #4
 80091a8:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80091aa:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80091ae:	6872      	ldr	r2, [r6, #4]
 80091b0:	f022 0220 	bic.w	r2, r2, #32
 80091b4:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80091b6:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 80091b8:	4a86      	ldr	r2, [pc, #536]	@ (80093d4 <R3_2_Init+0x280>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80091ba:	4887      	ldr	r0, [pc, #540]	@ (80093d8 <R3_2_Init+0x284>)
 80091bc:	4295      	cmp	r5, r2
 80091be:	6902      	ldr	r2, [r0, #16]
 80091c0:	bf0c      	ite	eq
 80091c2:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 80091c6:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 80091ca:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 80091cc:	b181      	cbz	r1, 80091f0 <R3_2_Init+0x9c>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 80091ce:	e9d1 2003 	ldrd	r2, r0, [r1, #12]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80091d2:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 80091d6:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80091d8:	f04e 0e01 	orr.w	lr, lr, #1
 80091dc:	f8c2 e000 	str.w	lr, [r2]
 80091e0:	6802      	ldr	r2, [r0, #0]
 80091e2:	f042 0201 	orr.w	r2, r2, #1
 80091e6:	6002      	str	r2, [r0, #0]
 80091e8:	680a      	ldr	r2, [r1, #0]
 80091ea:	f042 0201 	orr.w	r2, r2, #1
 80091ee:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 80091f0:	b1b3      	cbz	r3, 8009220 <R3_2_Init+0xcc>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 80091f2:	f894 20c3 	ldrb.w	r2, [r4, #195]	@ 0xc3
 80091f6:	2a01      	cmp	r2, #1
 80091f8:	d00a      	beq.n	8009210 <R3_2_Init+0xbc>
 80091fa:	f1bc 0f00 	cmp.w	ip, #0
 80091fe:	d007      	beq.n	8009210 <R3_2_Init+0xbc>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8009200:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8009204:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	4661      	mov	r1, ip
 800920a:	f7ff ff57 	bl	80090bc <R3_2_SetAOReferenceVoltage>
 800920e:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	f042 0201 	orr.w	r2, r2, #1
 8009216:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800921e:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 8009220:	f1bb 0f00 	cmp.w	fp, #0
 8009224:	d017      	beq.n	8009256 <R3_2_Init+0x102>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 8009226:	f894 30c4 	ldrb.w	r3, [r4, #196]	@ 0xc4
 800922a:	2b01      	cmp	r3, #1
 800922c:	d007      	beq.n	800923e <R3_2_Init+0xea>
 800922e:	9b00      	ldr	r3, [sp, #0]
 8009230:	b12b      	cbz	r3, 800923e <R3_2_Init+0xea>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 8009232:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8009236:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009238:	4619      	mov	r1, r3
 800923a:	f7ff ff3f 	bl	80090bc <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800923e:	f8db 3000 	ldr.w	r3, [fp]
 8009242:	f043 0301 	orr.w	r3, r3, #1
 8009246:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800924a:	f8db 3000 	ldr.w	r3, [fp]
 800924e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009252:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 8009256:	f1ba 0f00 	cmp.w	sl, #0
 800925a:	d017      	beq.n	800928c <R3_2_Init+0x138>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800925c:	f894 30c5 	ldrb.w	r3, [r4, #197]	@ 0xc5
 8009260:	2b01      	cmp	r3, #1
 8009262:	d007      	beq.n	8009274 <R3_2_Init+0x120>
 8009264:	9b01      	ldr	r3, [sp, #4]
 8009266:	b12b      	cbz	r3, 8009274 <R3_2_Init+0x120>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8009268:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 800926c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800926e:	4619      	mov	r1, r3
 8009270:	f7ff ff24 	bl	80090bc <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009274:	f8da 3000 	ldr.w	r3, [sl]
 8009278:	f043 0301 	orr.w	r3, r3, #1
 800927c:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009280:	f8da 3000 	ldr.w	r3, [sl]
 8009284:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009288:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 800928c:	f1b9 0f00 	cmp.w	r9, #0
 8009290:	d017      	beq.n	80092c2 <R3_2_Init+0x16e>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 8009292:	f894 30c6 	ldrb.w	r3, [r4, #198]	@ 0xc6
 8009296:	2b01      	cmp	r3, #1
 8009298:	d007      	beq.n	80092aa <R3_2_Init+0x156>
 800929a:	9b02      	ldr	r3, [sp, #8]
 800929c:	b12b      	cbz	r3, 80092aa <R3_2_Init+0x156>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800929e:	f8b4 20be 	ldrh.w	r2, [r4, #190]	@ 0xbe
 80092a2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80092a4:	4619      	mov	r1, r3
 80092a6:	f7ff ff09 	bl	80090bc <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80092aa:	f8d9 3000 	ldr.w	r3, [r9]
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80092b6:	f8d9 3000 	ldr.w	r3, [r9]
 80092ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092be:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	07da      	lsls	r2, r3, #31
 80092c6:	d53d      	bpl.n	8009344 <R3_2_Init+0x1f0>
 80092c8:	68b3      	ldr	r3, [r6, #8]
 80092ca:	07db      	lsls	r3, r3, #31
 80092cc:	d536      	bpl.n	800933c <R3_2_Init+0x1e8>
  volatile uint32_t Brk2Timeout = 1000;
 80092ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092d2:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	f023 0301 	bic.w	r3, r3, #1
 80092da:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80092dc:	686b      	ldr	r3, [r5, #4]
 80092de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80092e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092e6:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80092e8:	69ab      	ldr	r3, [r5, #24]
 80092ea:	f043 0308 	orr.w	r3, r3, #8
 80092ee:	61ab      	str	r3, [r5, #24]
 80092f0:	69ab      	ldr	r3, [r5, #24]
 80092f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80092f6:	61ab      	str	r3, [r5, #24]
 80092f8:	69eb      	ldr	r3, [r5, #28]
 80092fa:	f043 0308 	orr.w	r3, r3, #8
 80092fe:	61eb      	str	r3, [r5, #28]
 8009300:	69eb      	ldr	r3, [r5, #28]
 8009302:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009306:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009308:	696b      	ldr	r3, [r5, #20]
 800930a:	f043 0301 	orr.w	r3, r3, #1
 800930e:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8009310:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 8009314:	2b02      	cmp	r3, #2
 8009316:	d022      	beq.n	800935e <R3_2_Init+0x20a>
    if (M1 == pHandle->_Super.Motor)
 8009318:	f898 3068 	ldrb.w	r3, [r8, #104]	@ 0x68
 800931c:	bb3b      	cbnz	r3, 800936e <R3_2_Init+0x21a>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800931e:	f894 30c1 	ldrb.w	r3, [r4, #193]	@ 0xc1
 8009322:	2b01      	cmp	r3, #1
 8009324:	d01f      	beq.n	8009366 <R3_2_Init+0x212>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8009326:	2b03      	cmp	r3, #3
 8009328:	d121      	bne.n	800936e <R3_2_Init+0x21a>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800932a:	2201      	movs	r2, #1
 800932c:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800932e:	696a      	ldr	r2, [r5, #20]
 8009330:	f042 0201 	orr.w	r2, r2, #1
 8009334:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009336:	632b      	str	r3, [r5, #48]	@ 0x30
}
 8009338:	e019      	b.n	800936e <R3_2_Init+0x21a>
 800933a:	4770      	bx	lr
        R3_2_ADCxInit(ADCx_2);
 800933c:	4630      	mov	r0, r6
 800933e:	f7ff fbdd 	bl	8008afc <R3_2_ADCxInit>
 8009342:	e7c4      	b.n	80092ce <R3_2_Init+0x17a>
        R3_2_ADCxInit(ADCx_1);
 8009344:	4638      	mov	r0, r7
 8009346:	f7ff fbd9 	bl	8008afc <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800934a:	2340      	movs	r3, #64	@ 0x40
 800934c:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009354:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009356:	68b3      	ldr	r3, [r6, #8]
 8009358:	07db      	lsls	r3, r3, #31
 800935a:	d4b8      	bmi.n	80092ce <R3_2_Init+0x17a>
 800935c:	e7ee      	b.n	800933c <R3_2_Init+0x1e8>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800935e:	f894 30c8 	ldrb.w	r3, [r4, #200]	@ 0xc8
 8009362:	2b01      	cmp	r3, #1
 8009364:	d02a      	beq.n	80093bc <R3_2_Init+0x268>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8009366:	f8b8 307c 	ldrh.w	r3, [r8, #124]	@ 0x7c
 800936a:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800936c:	626b      	str	r3, [r5, #36]	@ 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800936e:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8009372:	612b      	str	r3, [r5, #16]
  if ((pHandle->pParams_str->BKIN2Mode) != NONE)
 8009374:	f894 30c2 	ldrb.w	r3, [r4, #194]	@ 0xc2
 8009378:	b19b      	cbz	r3, 80093a2 <R3_2_Init+0x24e>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800937a:	692b      	ldr	r3, [r5, #16]
    while ((Brk2Timeout != 0u) && (1U == result))
 800937c:	9a05      	ldr	r2, [sp, #20]
 800937e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009382:	b172      	cbz	r2, 80093a2 <R3_2_Init+0x24e>
 8009384:	b16b      	cbz	r3, 80093a2 <R3_2_Init+0x24e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8009386:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 800938a:	e000      	b.n	800938e <R3_2_Init+0x23a>
 800938c:	b14b      	cbz	r3, 80093a2 <R3_2_Init+0x24e>
 800938e:	6129      	str	r1, [r5, #16]
      Brk2Timeout--;
 8009390:	9b05      	ldr	r3, [sp, #20]
 8009392:	3b01      	subs	r3, #1
 8009394:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009396:	692b      	ldr	r3, [r5, #16]
    while ((Brk2Timeout != 0u) && (1U == result))
 8009398:	9a05      	ldr	r2, [sp, #20]
 800939a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939e:	2a00      	cmp	r2, #0
 80093a0:	d1f4      	bne.n	800938c <R3_2_Init+0x238>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80093a2:	68eb      	ldr	r3, [r5, #12]
 80093a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a8:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 80093aa:	6a2b      	ldr	r3, [r5, #32]
 80093ac:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 80093b0:	f043 0305 	orr.w	r3, r3, #5
 80093b4:	622b      	str	r3, [r5, #32]
}
 80093b6:	b007      	add	sp, #28
 80093b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (3U == pHandle->pParams_str->RepetitionCounter)
 80093bc:	f894 20c1 	ldrb.w	r2, [r4, #193]	@ 0xc1
 80093c0:	2a03      	cmp	r2, #3
 80093c2:	d1d0      	bne.n	8009366 <R3_2_Init+0x212>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80093c4:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80093c6:	696b      	ldr	r3, [r5, #20]
 80093c8:	f043 0301 	orr.w	r3, r3, #1
 80093cc:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80093ce:	632a      	str	r2, [r5, #48]	@ 0x30
}
 80093d0:	e7c9      	b.n	8009366 <R3_2_Init+0x212>
 80093d2:	bf00      	nop
 80093d4:	40012c00 	.word	0x40012c00
 80093d8:	e0042000 	.word	0xe0042000

080093dc <R3_2_SetOffsetCalib>:
{
 80093dc:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80093de:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 80093e2:	680b      	ldr	r3, [r1, #0]
 80093e4:	6703      	str	r3, [r0, #112]	@ 0x70
  pHdl->offsetCalibStatus = true;
 80093e6:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80093e8:	e9c0 421d 	strd	r4, r2, [r0, #116]	@ 0x74
  pHdl->offsetCalibStatus = true;
 80093ec:	f880 306e 	strb.w	r3, [r0, #110]	@ 0x6e
}
 80093f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop

080093f8 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80093f8:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	@ 0x74
 80093fc:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 80093fe:	608b      	str	r3, [r1, #8]
 8009400:	e9c1 0200 	strd	r0, r2, [r1]
}
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop

08009408 <R3_2_CurrentReadingPolarization>:
{
 8009408:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800940a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 800940e:	e9d3 7600 	ldrd	r7, r6, [r3]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009412:	689d      	ldr	r5, [r3, #8]
  if (true == pHandle->_Super.offsetCalibStatus)
 8009414:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
{
 8009418:	b083      	sub	sp, #12
 800941a:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800941c:	b1ab      	cbz	r3, 800944a <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	4a4e      	ldr	r2, [pc, #312]	@ (800955c <R3_2_CurrentReadingPolarization+0x154>)
 8009422:	4013      	ands	r3, r2
 8009424:	f043 0308 	orr.w	r3, r3, #8
 8009428:	60bb      	str	r3, [r7, #8]
 800942a:	68b3      	ldr	r3, [r6, #8]
 800942c:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800942e:	2180      	movs	r1, #128	@ 0x80
 8009430:	f043 0308 	orr.w	r3, r3, #8
 8009434:	60b3      	str	r3, [r6, #8]
 8009436:	f8a0 107e 	strh.w	r1, [r0, #126]	@ 0x7e
  pHandle->_Super.Sector = SECTOR_5;
 800943a:	2204      	movs	r2, #4
  pHandle->BrakeActionLock = false;
 800943c:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 800943e:	f884 206a 	strb.w	r2, [r4, #106]	@ 0x6a
  pHandle->BrakeActionLock = false;
 8009442:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8009446:	b003      	add	sp, #12
 8009448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800944a:	6802      	ldr	r2, [r0, #0]
 800944c:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 800944e:	e9c0 331c 	strd	r3, r3, [r0, #112]	@ 0x70
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8009452:	6942      	ldr	r2, [r0, #20]
 8009454:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 8009456:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    pHandle->PhaseCOffset = 0U;
 800945a:	6783      	str	r3, [r0, #120]	@ 0x78
  CLEAR_BIT(TIMx->CCER, Channels);
 800945c:	6a2b      	ldr	r3, [r5, #32]
 800945e:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8009462:	f023 0305 	bic.w	r3, r3, #5
 8009466:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8009468:	2304      	movs	r3, #4
 800946a:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 800946e:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8009472:	4b3b      	ldr	r3, [pc, #236]	@ (8009560 <R3_2_CurrentReadingPolarization+0x158>)
 8009474:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8009476:	4b3b      	ldr	r3, [pc, #236]	@ (8009564 <R3_2_CurrentReadingPolarization+0x15c>)
 8009478:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800947a:	2380      	movs	r3, #128	@ 0x80
 800947c:	f8a0 307e 	strh.w	r3, [r0, #126]	@ 0x7e
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8009480:	f7ff fce8 	bl	8008e54 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8009484:	4a38      	ldr	r2, [pc, #224]	@ (8009568 <R3_2_CurrentReadingPolarization+0x160>)
 8009486:	686b      	ldr	r3, [r5, #4]
 8009488:	4013      	ands	r3, r2
 800948a:	2b70      	cmp	r3, #112	@ 0x70
 800948c:	d1fb      	bne.n	8009486 <R3_2_CurrentReadingPolarization+0x7e>
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	4a32      	ldr	r2, [pc, #200]	@ (800955c <R3_2_CurrentReadingPolarization+0x154>)
 8009492:	4013      	ands	r3, r2
 8009494:	f043 0308 	orr.w	r3, r3, #8
 8009498:	60bb      	str	r3, [r7, #8]
 800949a:	68b3      	ldr	r3, [r6, #8]
 800949c:	4013      	ands	r3, r2
 800949e:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 80094a2:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 80094a6:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 80094a8:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 80094ac:	f104 0644 	add.w	r6, r4, #68	@ 0x44
 80094b0:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 80094b4:	4631      	mov	r1, r6
 80094b6:	463b      	mov	r3, r7
 80094b8:	4628      	mov	r0, r5
 80094ba:	f7ff fb01 	bl	8008ac0 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 80094be:	4620      	mov	r0, r4
 80094c0:	f7ff fd12 	bl	8008ee8 <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  pHandle->PolarizationSector=SECTOR_1;
 80094ca:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 80094ce:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80094d2:	4b26      	ldr	r3, [pc, #152]	@ (800956c <R3_2_CurrentReadingPolarization+0x164>)
 80094d4:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7ff fcbc 	bl	8008e54 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 80094dc:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
    waitForPolarizationEnd(TIMx,
 80094e0:	463b      	mov	r3, r7
 80094e2:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	f7ff fae9 	bl	8008ac0 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7ff fcfa 	bl	8008ee8 <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80094f4:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	@ 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80094f8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80094fa:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80094fc:	0912      	lsrs	r2, r2, #4
 80094fe:	e9c4 121c 	strd	r1, r2, [r4, #112]	@ 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009502:	091b      	lsrs	r3, r3, #4
 8009504:	67a3      	str	r3, [r4, #120]	@ 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009506:	9900      	ldr	r1, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009508:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800950a:	69ab      	ldr	r3, [r5, #24]
 800950c:	6162      	str	r2, [r4, #20]
 800950e:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.offsetCalibStatus = true;
 8009512:	2001      	movs	r0, #1
 8009514:	f884 006e 	strb.w	r0, [r4, #110]	@ 0x6e
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009518:	6021      	str	r1, [r4, #0]
 800951a:	61ab      	str	r3, [r5, #24]
 800951c:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800951e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	@ 0x7c
 8009522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009526:	61aa      	str	r2, [r5, #24]
 8009528:	69ea      	ldr	r2, [r5, #28]
 800952a:	f022 0208 	bic.w	r2, r2, #8
 800952e:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009530:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009532:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009534:	63eb      	str	r3, [r5, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009536:	69ab      	ldr	r3, [r5, #24]
 8009538:	f043 0308 	orr.w	r3, r3, #8
 800953c:	61ab      	str	r3, [r5, #24]
 800953e:	69ab      	ldr	r3, [r5, #24]
 8009540:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009544:	61ab      	str	r3, [r5, #24]
 8009546:	69eb      	ldr	r3, [r5, #28]
 8009548:	f043 0308 	orr.w	r3, r3, #8
 800954c:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800954e:	6a2b      	ldr	r3, [r5, #32]
 8009550:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8009554:	f043 0305 	orr.w	r3, r3, #5
 8009558:	622b      	str	r3, [r5, #32]
}
 800955a:	e76e      	b.n	800943a <R3_2_CurrentReadingPolarization+0x32>
 800955c:	7fffffc0 	.word	0x7fffffc0
 8009560:	08008d65 	.word	0x08008d65
 8009564:	08008d25 	.word	0x08008d25
 8009568:	02000070 	.word	0x02000070
 800956c:	08008db9 	.word	0x08008db9

08009570 <R3_2_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 8009570:	2800      	cmp	r0, #0
 8009572:	d03a      	beq.n	80095ea <R3_2_SetADCSampPointSectX+0x7a>
{
 8009574:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 8009576:	f8b0 3046 	ldrh.w	r3, [r0, #70]	@ 0x46
 800957a:	f8b0 e07c 	ldrh.w	lr, [r0, #124]	@ 0x7c
 800957e:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8009582:	ebae 0203 	sub.w	r2, lr, r3
 8009586:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	@ 0xb2
 800958a:	b292      	uxth	r2, r2
 800958c:	42a2      	cmp	r2, r4
 800958e:	d916      	bls.n	80095be <R3_2_SetADCSampPointSectX+0x4e>
      pHandle->_Super.Sector = SECTOR_5;
 8009590:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8009592:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 8009596:	f880 206a 	strb.w	r2, [r0, #106]	@ 0x6a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800959a:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800959c:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800959e:	8fc5      	ldrh	r5, [r0, #62]	@ 0x3e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 80095a0:	f8b0 4040 	ldrh.w	r4, [r0, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 80095a4:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80095a8:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80095aa:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80095ac:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80095ae:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80095b0:	6852      	ldr	r2, [r2, #4]
 80095b2:	4b11      	ldr	r3, [pc, #68]	@ (80095f8 <R3_2_SetADCSampPointSectX+0x88>)
 80095b4:	421a      	tst	r2, r3
 80095b6:	bf14      	ite	ne
 80095b8:	2001      	movne	r0, #1
 80095ba:	2000      	moveq	r0, #0
}
 80095bc:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 80095be:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
 80095c2:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 80095c6:	fa1f fc8c 	uxth.w	ip, ip
 80095ca:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 80095ce:	d80d      	bhi.n	80095ec <R3_2_SetADCSampPointSectX+0x7c>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 80095d0:	4423      	add	r3, r4
 80095d2:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 80095d4:	459e      	cmp	lr, r3
 80095d6:	d8e1      	bhi.n	800959c <R3_2_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80095d8:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 80095da:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80095de:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 80095e2:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	e7d8      	b.n	800959c <R3_2_SetADCSampPointSectX+0x2c>
}
 80095ea:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 80095ec:	f8b1 20b6 	ldrh.w	r2, [r1, #182]	@ 0xb6
 80095f0:	1a9b      	subs	r3, r3, r2
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	e7d2      	b.n	800959c <R3_2_SetADCSampPointSectX+0x2c>
 80095f6:	bf00      	nop
 80095f8:	02000070 	.word	0x02000070

080095fc <R3_2_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 80095fc:	4602      	mov	r2, r0
 80095fe:	2800      	cmp	r0, #0
 8009600:	d03e      	beq.n	8009680 <R3_2_TIMx_UP_IRQHandler+0x84>
{
 8009602:	b570      	push	{r4, r5, r6, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009604:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8009608:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800960c:	68c8      	ldr	r0, [r1, #12]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800960e:	688c      	ldr	r4, [r1, #8]
    if (OPAMPParams != NULL)
 8009610:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8009614:	ea4f 0e83 	mov.w	lr, r3, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009618:	f8dc 104c 	ldr.w	r1, [ip, #76]	@ 0x4c
    if (OPAMPParams != NULL)
 800961c:	b1b0      	cbz	r0, 800964c <R3_2_TIMx_UP_IRQHandler+0x50>
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 800961e:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1fc      	bne.n	800961e <R3_2_TIMx_UP_IRQHandler+0x22>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8009624:	eb00 030e 	add.w	r3, r0, lr
 8009628:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
      if (OpampConfig != OPAMP_UNCHANGED)
 800962a:	1c6e      	adds	r6, r5, #1
 800962c:	d005      	beq.n	800963a <R3_2_TIMx_UP_IRQHandler+0x3e>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800962e:	68de      	ldr	r6, [r3, #12]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8009630:	6830      	ldr	r0, [r6, #0]
 8009632:	f420 7086 	bic.w	r0, r0, #268	@ 0x10c
 8009636:	4328      	orrs	r0, r5
 8009638:	6030      	str	r0, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 800963a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
      if (OpampConfig != OPAMP_UNCHANGED)
 800963c:	1c45      	adds	r5, r0, #1
 800963e:	d005      	beq.n	800964c <R3_2_TIMx_UP_IRQHandler+0x50>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8009640:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 8009648:	4303      	orrs	r3, r0
 800964a:	602b      	str	r3, [r5, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800964c:	f8b2 307e 	ldrh.w	r3, [r2, #126]	@ 0x7e
 8009650:	f8dc 007c 	ldr.w	r0, [ip, #124]	@ 0x7c
 8009654:	4318      	orrs	r0, r3
 8009656:	64c8      	str	r0, [r1, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009658:	f8dc 0094 	ldr.w	r0, [ip, #148]	@ 0x94
 800965c:	f8dc 1064 	ldr.w	r1, [ip, #100]	@ 0x64
 8009660:	4303      	orrs	r3, r0
 8009662:	64cb      	str	r3, [r1, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009664:	6863      	ldr	r3, [r4, #4]
 8009666:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800966a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800966e:	2180      	movs	r1, #128	@ 0x80
 8009670:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8009674:	6063      	str	r3, [r4, #4]
    tempPointer = &(pHandle->_Super.Motor);
 8009676:	f102 0068 	add.w	r0, r2, #104	@ 0x68
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800967a:	f8a2 107e 	strh.w	r1, [r2, #126]	@ 0x7e
}
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop

08009684 <R3_2_BRK2_IRQHandler>:
  if (MC_NULL == pHandle)
 8009684:	b168      	cbz	r0, 80096a2 <R3_2_BRK2_IRQHandler+0x1e>
    if (false == pHandle->BrakeActionLock)
 8009686:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800968a:	b92b      	cbnz	r3, 8009698 <R3_2_BRK2_IRQHandler+0x14>
      if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 800968c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8009690:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 8009694:	2a02      	cmp	r2, #2
 8009696:	d005      	beq.n	80096a4 <R3_2_BRK2_IRQHandler+0x20>
    pHandle->OverCurrentFlag = true;
 8009698:	2301      	movs	r3, #1
 800969a:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
    tempPointer = &(pHandle->_Super.Motor);
 800969e:	3068      	adds	r0, #104	@ 0x68
 80096a0:	4770      	bx	lr
}
 80096a2:	4770      	bx	lr
{
 80096a4:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80096a6:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80096aa:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	@ 0xac
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80096ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 80096b0:	62a5      	str	r5, [r4, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80096b2:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	@ 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80096b6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80096ba:	628c      	str	r4, [r1, #40]	@ 0x28
 80096bc:	6293      	str	r3, [r2, #40]	@ 0x28
    pHandle->OverCurrentFlag = true;
 80096be:	2301      	movs	r3, #1
 80096c0:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
}
 80096c4:	bc30      	pop	{r4, r5}
    tempPointer = &(pHandle->_Super.Motor);
 80096c6:	3068      	adds	r0, #104	@ 0x68
}
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop

080096cc <R3_2_BRK_IRQHandler>:
  if (MC_NULL == pHandle)
 80096cc:	4603      	mov	r3, r0
 80096ce:	b160      	cbz	r0, 80096ea <R3_2_BRK_IRQHandler+0x1e>
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80096d0:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80096d4:	6891      	ldr	r1, [r2, #8]
 80096d6:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
    pHandle->OverVoltageFlag = true;
 80096d8:	f240 1c01 	movw	ip, #257	@ 0x101
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80096dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80096e0:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->_Super.Motor);
 80096e2:	3068      	adds	r0, #104	@ 0x68
    pHandle->OverVoltageFlag = true;
 80096e4:	f8a3 c083 	strh.w	ip, [r3, #131]	@ 0x83
    tempPointer = &(pHandle->_Super.Motor);
 80096e8:	4770      	bx	lr
}
 80096ea:	4770      	bx	lr

080096ec <R3_2_IsOverCurrentOccurred>:
{
 80096ec:	4603      	mov	r3, r0
  if (true == pHandle->OverVoltageFlag)
 80096ee:	f890 0083 	ldrb.w	r0, [r0, #131]	@ 0x83
 80096f2:	b160      	cbz	r0, 800970e <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 80096fa:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 80096fc:	2002      	movs	r0, #2
  if (true == pHandle->OverCurrentFlag)
 80096fe:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8009702:	b11a      	cbz	r2, 800970c <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    retVal |= MC_BREAK_IN;
 800970a:	4608      	mov	r0, r1
}
 800970c:	4770      	bx	lr
 800970e:	2140      	movs	r1, #64	@ 0x40
 8009710:	e7f5      	b.n	80096fe <R3_2_IsOverCurrentOccurred+0x12>
 8009712:	bf00      	nop

08009714 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 8009714:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
{
 8009718:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 800971a:	2900      	cmp	r1, #0
 800971c:	d13d      	bne.n	800979a <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800971e:	f8d0 5088 	ldr.w	r5, [r0, #136]	@ 0x88
 8009722:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009724:	699a      	ldr	r2, [r3, #24]
 8009726:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800972a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800972e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009732:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009734:	6a1a      	ldr	r2, [r3, #32]
 8009736:	f042 0201 	orr.w	r2, r2, #1
 800973a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800973c:	6a1a      	ldr	r2, [r3, #32]
 800973e:	f022 0204 	bic.w	r2, r2, #4
 8009742:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009744:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009746:	f895 20c0 	ldrb.w	r2, [r5, #192]	@ 0xc0
 800974a:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800974c:	f103 0418 	add.w	r4, r3, #24
 8009750:	d030      	beq.n	80097b4 <R3_2_RLDetectionModeEnable+0xa0>
    else if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8009752:	2a02      	cmp	r2, #2
 8009754:	d10f      	bne.n	8009776 <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009756:	699a      	ldr	r2, [r3, #24]
 8009758:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800975c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8009760:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009764:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009766:	6a1a      	ldr	r2, [r3, #32]
 8009768:	f042 0210 	orr.w	r2, r2, #16
 800976c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800976e:	6a1a      	ldr	r2, [r3, #32]
 8009770:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009774:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009776:	6862      	ldr	r2, [r4, #4]
 8009778:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800977c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8009780:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8009784:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009786:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8009788:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 800978a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800978e:	621a      	str	r2, [r3, #32]
 8009790:	6a1a      	ldr	r2, [r3, #32]
 8009792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009796:	621a      	str	r2, [r3, #32]
 8009798:	6701      	str	r1, [r0, #112]	@ 0x70
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800979a:	4b0f      	ldr	r3, [pc, #60]	@ (80097d8 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800979c:	490f      	ldr	r1, [pc, #60]	@ (80097dc <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800979e:	4a10      	ldr	r2, [pc, #64]	@ (80097e0 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80097a0:	4c10      	ldr	r4, [pc, #64]	@ (80097e4 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80097a2:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 80097a4:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80097a6:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80097a8:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 80097ac:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 80097ae:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
}
 80097b2:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80097ba:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 80097be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097c2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80097c4:	6a1a      	ldr	r2, [r3, #32]
 80097c6:	f022 0210 	bic.w	r2, r2, #16
 80097ca:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80097cc:	6a1a      	ldr	r2, [r3, #32]
 80097ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097d2:	621a      	str	r2, [r3, #32]
}
 80097d4:	e7cf      	b.n	8009776 <R3_2_RLDetectionModeEnable+0x62>
 80097d6:	bf00      	nop
 80097d8:	08008fbd 	.word	0x08008fbd
 80097dc:	08009009 	.word	0x08009009
 80097e0:	08008ee9 	.word	0x08008ee9
 80097e4:	08008f69 	.word	0x08008f69

080097e8 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 80097e8:	f890 306d 	ldrb.w	r3, [r0, #109]	@ 0x6d
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d03d      	beq.n	800986c <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80097f0:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80097f4:	688b      	ldr	r3, [r1, #8]
{
 80097f6:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80097f8:	699a      	ldr	r2, [r3, #24]
 80097fa:	4c41      	ldr	r4, [pc, #260]	@ (8009900 <R3_2_RLDetectionModeDisable+0x118>)
 80097fc:	4022      	ands	r2, r4
 80097fe:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009802:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009804:	6a1a      	ldr	r2, [r3, #32]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 800980c:	f891 10c0 	ldrb.w	r1, [r1, #192]	@ 0xc0
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009810:	f8b0 207c 	ldrh.w	r2, [r0, #124]	@ 0x7c
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009814:	2901      	cmp	r1, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009816:	ea4f 0252 	mov.w	r2, r2, lsr #1
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 800981a:	d028      	beq.n	800986e <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 800981c:	2902      	cmp	r1, #2
 800981e:	d04a      	beq.n	80098b6 <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009820:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009822:	6999      	ldr	r1, [r3, #24]
 8009824:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8009828:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 800982c:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 8009830:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009832:	6a19      	ldr	r1, [r3, #32]
 8009834:	f041 0110 	orr.w	r1, r1, #16
 8009838:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800983a:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800983c:	69d9      	ldr	r1, [r3, #28]
 800983e:	4021      	ands	r1, r4
 8009840:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 8009844:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009846:	6a19      	ldr	r1, [r3, #32]
 8009848:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800984c:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800984e:	492d      	ldr	r1, [pc, #180]	@ (8009904 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009850:	63da      	str	r2, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009852:	4a2d      	ldr	r2, [pc, #180]	@ (8009908 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009854:	6001      	str	r1, [r0, #0]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8009856:	492d      	ldr	r1, [pc, #180]	@ (800990c <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8009858:	4c2d      	ldr	r4, [pc, #180]	@ (8009910 <R3_2_RLDetectionModeDisable+0x128>)
 800985a:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800985c:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800985e:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009862:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8009866:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
}
 800986a:	4770      	bx	lr
 800986c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800986e:	6a19      	ldr	r1, [r3, #32]
 8009870:	f041 0104 	orr.w	r1, r1, #4
 8009874:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009876:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009878:	6999      	ldr	r1, [r3, #24]
 800987a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800987e:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 8009882:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 8009886:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009888:	6a19      	ldr	r1, [r3, #32]
 800988a:	f041 0110 	orr.w	r1, r1, #16
 800988e:	6219      	str	r1, [r3, #32]
 8009890:	6a19      	ldr	r1, [r3, #32]
 8009892:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8009896:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009898:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800989a:	69d9      	ldr	r1, [r3, #28]
 800989c:	4021      	ands	r1, r4
 800989e:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 80098a2:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80098a4:	6a19      	ldr	r1, [r3, #32]
 80098a6:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80098aa:	6219      	str	r1, [r3, #32]
 80098ac:	6a19      	ldr	r1, [r3, #32]
 80098ae:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80098b2:	6219      	str	r1, [r3, #32]
}
 80098b4:	e7cb      	b.n	800984e <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 80098b6:	6a19      	ldr	r1, [r3, #32]
 80098b8:	f021 0104 	bic.w	r1, r1, #4
 80098bc:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80098be:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80098c0:	6999      	ldr	r1, [r3, #24]
 80098c2:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80098c6:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 80098ca:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 80098ce:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80098d0:	6a19      	ldr	r1, [r3, #32]
 80098d2:	f041 0110 	orr.w	r1, r1, #16
 80098d6:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80098d8:	6a19      	ldr	r1, [r3, #32]
 80098da:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80098de:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80098e2:	69d9      	ldr	r1, [r3, #28]
 80098e4:	4021      	ands	r1, r4
 80098e6:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 80098ea:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80098ec:	6a19      	ldr	r1, [r3, #32]
 80098ee:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80098f2:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80098f4:	6a19      	ldr	r1, [r3, #32]
 80098f6:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80098fa:	6219      	str	r1, [r3, #32]
}
 80098fc:	e7a7      	b.n	800984e <R3_2_RLDetectionModeDisable+0x66>
 80098fe:	bf00      	nop
 8009900:	fffeff8c 	.word	0xfffeff8c
 8009904:	08008bb1 	.word	0x08008bb1
 8009908:	08008ee9 	.word	0x08008ee9
 800990c:	08008e55 	.word	0x08008e55
 8009910:	08008e05 	.word	0x08008e05

08009914 <R3_2_RLDetectionModeSetDuty>:
  if (MC_NULL == pHdl)
 8009914:	4603      	mov	r3, r0
 8009916:	2800      	cmp	r0, #0
 8009918:	d03b      	beq.n	8009992 <R3_2_RLDetectionModeSetDuty+0x7e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800991a:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800991e:	f8b0 007c 	ldrh.w	r0, [r0, #124]	@ 0x7c
{
 8009922:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009924:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009926:	69e2      	ldr	r2, [r4, #28]
 8009928:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800992c:	fb00 f101 	mul.w	r1, r0, r1
 8009930:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8009934:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 8009936:	f04f 0c01 	mov.w	ip, #1
 800993a:	f442 42e0 	orr.w	r2, r2, #28672	@ 0x7000
    pHandle->_Super.CntPhA = (uint16_t)val;
 800993e:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    pHandle->ADCRegularLocked = true;
 8009940:	f883 c08c 	strb.w	ip, [r3, #140]	@ 0x8c
 8009944:	61e2      	str	r2, [r4, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8009946:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800994a:	1a80      	subs	r0, r0, r2
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 800994c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009950:	6420      	str	r0, [r4, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009952:	63e2      	str	r2, [r4, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009954:	6361      	str	r1, [r4, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009956:	6862      	ldr	r2, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009958:	f8b3 0044 	ldrh.w	r0, [r3, #68]	@ 0x44
 800995c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8009960:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009964:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 8009968:	2103      	movs	r1, #3
 800996a:	6062      	str	r2, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800996c:	4560      	cmp	r0, ip
    pHdl->Sector = SECTOR_4;
 800996e:	f883 106a 	strb.w	r1, [r3, #106]	@ 0x6a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009972:	6862      	ldr	r2, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009974:	d007      	beq.n	8009986 <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009976:	4b07      	ldr	r3, [pc, #28]	@ (8009994 <R3_2_RLDetectionModeSetDuty+0x80>)
}
 8009978:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800997c:	421a      	tst	r2, r3
 800997e:	bf14      	ite	ne
 8009980:	4660      	movne	r0, ip
 8009982:	2000      	moveq	r0, #0
}
 8009984:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8009986:	2200      	movs	r2, #0
}
 8009988:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800998c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
}
 8009990:	4770      	bx	lr
 8009992:	4770      	bx	lr
 8009994:	02000070 	.word	0x02000070

08009998 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009998:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 800999c:	8c02      	ldrh	r2, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800999e:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80099a0:	4494      	add	ip, r2
 80099a2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 80099a6:	b430      	push	{r4, r5}
 80099a8:	2500      	movs	r5, #0
 80099aa:	f36c 050f 	bfi	r5, ip, #0, #16
 80099ae:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80099b2:	b14b      	cbz	r3, 80099c8 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 80099b4:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 80099b6:	2300      	movs	r3, #0
 80099b8:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80099ba:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 80099bc:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80099c0:	8b01      	ldrh	r1, [r0, #24]
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	4291      	cmp	r1, r2
 80099c6:	d8f7      	bhi.n	80099b8 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 80099c8:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 80099ca:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 80099cc:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 80099d0:	bc30      	pop	{r4, r5}
 80099d2:	4770      	bx	lr

080099d4 <RVBS_Init>:
{
 80099d4:	b510      	push	{r4, lr}
 80099d6:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80099d8:	300c      	adds	r0, #12
 80099da:	f7fa fb65 	bl	80040a8 <RCM_RegisterRegConv>
 80099de:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
    RVBS_Clear(pHandle);
 80099e2:	4620      	mov	r0, r4
 80099e4:	f7ff ffd8 	bl	8009998 <RVBS_Clear>
}
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop

080099ec <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80099ec:	8b42      	ldrh	r2, [r0, #26]
 80099ee:	8b81      	ldrh	r1, [r0, #28]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80099f0:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80099f2:	428a      	cmp	r2, r1
 80099f4:	d010      	beq.n	8009a18 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80099f6:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 80099fa:	459c      	cmp	ip, r3
 80099fc:	d80a      	bhi.n	8009a14 <RVBS_CheckFaultState+0x28>
{
 80099fe:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8009a00:	7f84      	ldrb	r4, [r0, #30]
 8009a02:	b994      	cbnz	r4, 8009a2a <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8009a04:	4299      	cmp	r1, r3
 8009a06:	d914      	bls.n	8009a32 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	7783      	strb	r3, [r0, #30]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8009a0c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8009a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a12:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8009a14:	2004      	movs	r0, #4
 8009a16:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d30c      	bcc.n	8009a36 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009a1c:	8c00      	ldrh	r0, [r0, #32]
 8009a1e:	4298      	cmp	r0, r3
 8009a20:	bf94      	ite	ls
 8009a22:	2000      	movls	r0, #0
 8009a24:	2001      	movhi	r0, #1
 8009a26:	0080      	lsls	r0, r0, #2
 8009a28:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d2ee      	bcs.n	8009a0c <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 8009a32:	2002      	movs	r0, #2
 8009a34:	e7eb      	b.n	8009a0e <RVBS_CheckFaultState+0x22>
 8009a36:	2002      	movs	r0, #2
}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop

08009a3c <RVBS_CalcAvVbus>:
{
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009a40:	f890 002a 	ldrb.w	r0, [r0, #42]	@ 0x2a
 8009a44:	f7fa fc2a 	bl	800429c <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8009a48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009a4c:	4298      	cmp	r0, r3
 8009a4e:	d024      	beq.n	8009a9a <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8009a50:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009a52:	f894 5029 	ldrb.w	r5, [r4, #41]	@ 0x29
 8009a56:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009a5a:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 8009a5e:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 8009a62:	d00d      	beq.n	8009a80 <RVBS_CalcAvVbus+0x44>
 8009a64:	3a01      	subs	r2, #1
 8009a66:	b2d2      	uxtb	r2, r2
 8009a68:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8009a6c:	3b02      	subs	r3, #2
      wtemp = 0u;
 8009a6e:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8009a70:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009a74:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 8009a76:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009a78:	d1fa      	bne.n	8009a70 <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 8009a7a:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009a7e:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8009a80:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009a84:	4575      	cmp	r5, lr
        pHandle->index++;
 8009a86:	bf34      	ite	cc
 8009a88:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8009a8a:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009a8c:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8009a8e:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8009a90:	bf34      	ite	cc
 8009a92:	f884 5029 	strbcc.w	r5, [r4, #41]	@ 0x29
        pHandle->index = 0U;
 8009a96:	f884 3029 	strbcs.w	r3, [r4, #41]	@ 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7ff ffa6 	bl	80099ec <RVBS_CheckFaultState>
 8009aa0:	8120      	strh	r0, [r4, #8]
}
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}

08009aa4 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 8009aa4:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8009aa6:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8009aa8:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8009aac:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8009ab0:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8009ab2:	4770      	bx	lr

08009ab4 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 8009ab4:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8009ab8:	2901      	cmp	r1, #1
{
 8009aba:	b410      	push	{r4}
 8009abc:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal. */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009abe:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 8009ac0:	d909      	bls.n	8009ad6 <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 8009ac2:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 8009ac4:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 8009ac6:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 8009ac8:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8009aca:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 8009ace:	609a      	str	r2, [r3, #8]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8009ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ad4:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 8009ad6:	d005      	beq.n	8009ae4 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8009ad8:	fb92 f0f4 	sdiv	r0, r2, r4
}
 8009adc:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 8009ae0:	609a      	str	r2, [r3, #8]
}
 8009ae2:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009ae4:	6840      	ldr	r0, [r0, #4]
 8009ae6:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 8009aea:	2100      	movs	r1, #0
}
 8009aec:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 8009af0:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 8009af2:	609a      	str	r2, [r3, #8]
}
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop

08009af8 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8009af8:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 8009afa:	fab0 f080 	clz	r0, r0
 8009afe:	0940      	lsrs	r0, r0, #5
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop

08009b04 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8009b04:	2800      	cmp	r0, #0
 8009b06:	bfb8      	it	lt
 8009b08:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 8009b0a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009b0e:	d213      	bcs.n	8009b38 <getScalingFactor+0x34>
 8009b10:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8009b12:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009b16:	e001      	b.n	8009b1c <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 8009b18:	2b20      	cmp	r3, #32
 8009b1a:	d00a      	beq.n	8009b32 <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8009b1c:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 8009b20:	4290      	cmp	r0, r2
 8009b22:	4619      	mov	r1, r3
 8009b24:	f103 0301 	add.w	r3, r3, #1
 8009b28:	d3f6      	bcc.n	8009b18 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8009b2a:	3901      	subs	r1, #1
 8009b2c:	2001      	movs	r0, #1
 8009b2e:	4088      	lsls	r0, r1
 8009b30:	4770      	bx	lr
 8009b32:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009b36:	4770      	bx	lr
    if (TargetAbs >= limit)
 8009b38:	2001      	movs	r0, #1
}
 8009b3a:	4770      	bx	lr

08009b3c <REMNG_ExecRamp>:
{
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	4604      	mov	r4, r0
 8009b42:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8009b44:	6880      	ldr	r0, [r0, #8]
 8009b46:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 8009b48:	4615      	mov	r5, r2
 8009b4a:	b962      	cbnz	r2, 8009b66 <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	f7ff ffd9 	bl	8009b04 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009b52:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8009b56:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009b58:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 8009b5a:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009b5e:	60a6      	str	r6, [r4, #8]
}
 8009b60:	2001      	movs	r0, #1
 8009b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8009b66:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8009b6a:	eba1 0708 	sub.w	r7, r1, r8
 8009b6e:	4638      	mov	r0, r7
 8009b70:	f7ff ffc8 	bl	8009b04 <getScalingFactor>
 8009b74:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8009b76:	4640      	mov	r0, r8
 8009b78:	f7ff ffc4 	bl	8009b04 <getScalingFactor>
 8009b7c:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f7ff ffc0 	bl	8009b04 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 8009b84:	45ca      	cmp	sl, r9
 8009b86:	d318      	bcc.n	8009bba <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 8009b88:	4548      	cmp	r0, r9
 8009b8a:	bf28      	it	cs
 8009b8c:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8009b8e:	fb08 f300 	mul.w	r3, r8, r0
 8009b92:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8009b94:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 8009b96:	4a0b      	ldr	r2, [pc, #44]	@ (8009bc4 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 8009b98:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8009b9a:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 8009b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba2:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8009ba4:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8009ba6:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 8009baa:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8009bac:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 8009bb0:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 8009bb4:	2001      	movs	r0, #1
 8009bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 8009bba:	4550      	cmp	r0, sl
 8009bbc:	bf28      	it	cs
 8009bbe:	4650      	movcs	r0, sl
 8009bc0:	e7e5      	b.n	8009b8e <REMNG_ExecRamp+0x52>
 8009bc2:	bf00      	nop
 8009bc4:	10624dd3 	.word	0x10624dd3

08009bc8 <RUC_Init>:
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS,
						STO_Handle_t *pSNSL,
						PWMC_Handle_t *pPWM)
{
 8009bc8:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 8009bca:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009bcc:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 8009bce:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 8009bd2:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 8009bd6:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 8009bd8:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 8009bdc:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009bde:	b309      	cbz	r1, 8009c24 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009be0:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009be2:	b323      	cbz	r3, 8009c2e <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009be4:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009be6:	b32b      	cbz	r3, 8009c34 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009be8:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009bea:	b333      	cbz	r3, 8009c3a <RUC_Init+0x72>
 8009bec:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8009bee:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009bf2:	b1cb      	cbz	r3, 8009c28 <RUC_Init+0x60>
 8009bf4:	2204      	movs	r2, #4
 8009bf6:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009bfa:	8803      	ldrh	r3, [r0, #0]
 8009bfc:	4910      	ldr	r1, [pc, #64]	@ (8009c40 <RUC_Init+0x78>)
 8009bfe:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8009c02:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009c06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009c0a:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009c0e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009c12:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009c14:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009c16:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 8009c18:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009c1c:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8009c20:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 8009c24:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009c28:	f10c 32ff 	add.w	r2, ip, #4294967295
 8009c2c:	e7e5      	b.n	8009bfa <RUC_Init+0x32>
      bPhase++;
 8009c2e:	f04f 0c02 	mov.w	ip, #2
 8009c32:	e7f9      	b.n	8009c28 <RUC_Init+0x60>
 8009c34:	f04f 0c03 	mov.w	ip, #3
 8009c38:	e7f6      	b.n	8009c28 <RUC_Init+0x60>
 8009c3a:	f04f 0c04 	mov.w	ip, #4
 8009c3e:	e7f3      	b.n	8009c28 <RUC_Init+0x60>
 8009c40:	10624dd3 	.word	0x10624dd3

08009c44 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8009c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8009c48:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8009c4a:	f8d0 8068 	ldr.w	r8, [r0, #104]	@ 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 8009c4e:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 8009c50:	2600      	movs	r6, #0
{
 8009c52:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 8009c54:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 8009c58:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    pHandle->OTFSCLowside = false;
 8009c5c:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 8009c60:	4638      	mov	r0, r7

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8009c62:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 8009c64:	f000 fc78 	bl	800a558 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8009c68:	2104      	movs	r1, #4
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f000 f906 	bl	8009e7c <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8009c70:	8861      	ldrh	r1, [r4, #2]
 8009c72:	fb11 f105 	smulbb	r1, r1, r5
 8009c76:	b209      	sxth	r1, r1
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f000 fd23 	bl	800a6c4 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8009c7e:	4632      	mov	r2, r6
 8009c80:	4631      	mov	r1, r6
 8009c82:	4640      	mov	r0, r8
 8009c84:	f000 f8fe 	bl	8009e84 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8009c88:	8a21      	ldrh	r1, [r4, #16]
 8009c8a:	89a2      	ldrh	r2, [r4, #12]
 8009c8c:	fb11 f105 	smulbb	r1, r1, r5
 8009c90:	b209      	sxth	r1, r1
 8009c92:	4640      	mov	r0, r8
 8009c94:	f000 f8f6 	bl	8009e84 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 8009c98:	89e1      	ldrh	r1, [r4, #14]
 8009c9a:	89a2      	ldrh	r2, [r4, #12]
 8009c9c:	fb11 f105 	smulbb	r1, r1, r5
 8009ca0:	b209      	sxth	r1, r1
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	f000 fd16 	bl	800a6d4 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8009caa:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8009cac:	4a06      	ldr	r2, [pc, #24]	@ (8009cc8 <RUC_Clear+0x84>)

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 8009cae:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8009cb2:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 8009cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cba:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009cbc:	6962      	ldr	r2, [r4, #20]
 8009cbe:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8009cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc8:	10624dd3 	.word	0x10624dd3

08009ccc <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8009ccc:	8883      	ldrh	r3, [r0, #4]
{
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8009cd2:	bb43      	cbnz	r3, 8009d26 <RUC_Exec+0x5a>

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8009cd4:	68a0      	ldr	r0, [r4, #8]
 8009cd6:	b328      	cbz	r0, 8009d24 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed.*/
        /* Gives the next command to STC and VSS.*/
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8009cd8:	8881      	ldrh	r1, [r0, #4]
 8009cda:	88e3      	ldrh	r3, [r4, #6]
 8009cdc:	8802      	ldrh	r2, [r0, #0]
 8009cde:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8009ce0:	fb11 f103 	smulbb	r1, r1, r3
 8009ce4:	b209      	sxth	r1, r1
 8009ce6:	f000 f8cd 	bl	8009e84 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8009cea:	68a3      	ldr	r3, [r4, #8]
 8009cec:	88e0      	ldrh	r0, [r4, #6]
 8009cee:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8009cf0:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8009cf2:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8009cf6:	b209      	sxth	r1, r1
 8009cf8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8009cfa:	f000 fceb 	bl	800a6d4 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks.*/
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8009cfe:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009d00:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8009d02:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009d04:	4a0b      	ldr	r2, [pc, #44]	@ (8009d34 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /*Set the next phases parameter pointer.*/
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8009d06:	6889      	ldr	r1, [r1, #8]
 8009d08:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009d0a:	fb00 f303 	mul.w	r3, r0, r3
 8009d0e:	fba2 2303 	umull	r2, r3, r2, r3

        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
 8009d12:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009d16:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8009d18:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8009d1a:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8009d1c:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 8009d1e:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 8009d22:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8009d24:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0d1      	beq.n	8009cd4 <RUC_Exec+0x8>
  bool retVal = true;
 8009d30:	2001      	movs	r0, #1
}
 8009d32:	bd10      	pop	{r4, pc}
 8009d34:	10624dd3 	.word	0x10624dd3

08009d38 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8009d38:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8009d3c:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8009d40:	4282      	cmp	r2, r0
 8009d42:	bf34      	ite	cc
 8009d44:	2000      	movcc	r0, #0
 8009d46:	2001      	movcs	r0, #1
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop

08009d4c <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8009d4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009d50:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8009d54:	f8d2 c002 	ldr.w	ip, [r2, #2]
 8009d58:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	8813      	ldrh	r3, [r2, #0]
 8009d60:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8009d62:	2001      	movs	r0, #1
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop

08009d68 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 8009d68:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop

08009d70 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8009d70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009d74:	0089      	lsls	r1, r1, #2
 8009d76:	f101 0308 	add.w	r3, r1, #8
 8009d7a:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8009d7c:	4408      	add	r0, r1
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8009d7e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8009d82:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8009d86:	8983      	ldrh	r3, [r0, #12]
 8009d88:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8009d8a:	2001      	movs	r0, #1
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop

08009d90 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8009d90:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop

08009d98 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8009d98:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop

08009da0 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8009da0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop

08009da8 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8009da8:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8009dac:	4603      	mov	r3, r0
 8009dae:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 8009db0:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 8009db4:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 8009db8:	bfb8      	it	lt
 8009dba:	4249      	neglt	r1, r1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009dbc:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8009dc0:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8009dc2:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8009dc4:	8a9c      	ldrh	r4, [r3, #20]
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8009dc6:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 8009dca:	bfb8      	it	lt
 8009dcc:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009dce:	458e      	cmp	lr, r1
 8009dd0:	d816      	bhi.n	8009e00 <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8009dd2:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 8009dd6:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8009dda:	bfb8      	it	lt
 8009ddc:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8009de0:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 8009de4:	bfb8      	it	lt
 8009de6:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8009dea:	45f4      	cmp	ip, lr
 8009dec:	d308      	bcc.n	8009e00 <SPD_IsMecSpeedReliable+0x58>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8009dee:	428c      	cmp	r4, r1
 8009df0:	d306      	bcc.n	8009e00 <SPD_IsMecSpeedReliable+0x58>
        bSpeedErrorNumber++;
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8009df2:	4290      	cmp	r0, r2
 8009df4:	d809      	bhi.n	8009e0a <SPD_IsMecSpeedReliable+0x62>
      {
        bSpeedErrorNumber = 0u;
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8009df6:	1a10      	subs	r0, r2, r0
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009df8:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8009dfa:	bf18      	it	ne
 8009dfc:	2001      	movne	r0, #1
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8009dfe:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8009e00:	4290      	cmp	r0, r2
 8009e02:	d9f8      	bls.n	8009df6 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 8009e04:	3201      	adds	r2, #1
 8009e06:	b2d2      	uxtb	r2, r2
 8009e08:	e7f5      	b.n	8009df6 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 8009e0a:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009e0c:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8009e0e:	2001      	movs	r0, #1
}
 8009e10:	bd10      	pop	{r4, pc}
 8009e12:	bf00      	nop

08009e14 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8009e14:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8009e18:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 8009e1c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8009e20:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8009e24:	b200      	sxth	r0, r0
 8009e26:	4770      	bx	lr

08009e28 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009e28:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 8009e2c:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8009e2e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 8009e32:	6142      	str	r2, [r0, #20]
{
 8009e34:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8009e36:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8009e3a:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8009e3c:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009e3e:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8009e42:	0409      	lsls	r1, r1, #16
 8009e44:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8009e48:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8009e4e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009e50:	6183      	str	r3, [r0, #24]
}
 8009e52:	4770      	bx	lr

08009e54 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8009e54:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009e56:	4770      	bx	lr

08009e58 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8009e58:	6940      	ldr	r0, [r0, #20]
 8009e5a:	4770      	bx	lr

08009e5c <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009e5c:	7803      	ldrb	r3, [r0, #0]
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d000      	beq.n	8009e64 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009e62:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8009e64:	6900      	ldr	r0, [r0, #16]
 8009e66:	2100      	movs	r1, #0
 8009e68:	f7fe bd4c 	b.w	8008904 <PID_SetIntegralTerm>

08009e6c <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8009e6c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop

08009e74 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8009e74:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop

08009e7c <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009e7c:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8009e7e:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009e80:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009e82:	4770      	bx	lr

08009e84 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8009e84:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009e86:	7803      	ldrb	r3, [r0, #0]
 8009e88:	2b04      	cmp	r3, #4
{
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009e90:	d01d      	beq.n	8009ece <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8009e92:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8009e94:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8009e98:	4299      	cmp	r1, r3
 8009e9a:	dd01      	ble.n	8009ea0 <STC_ExecRamp+0x1c>
 8009e9c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8009ea0:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8009ea4:	428b      	cmp	r3, r1
 8009ea6:	dcf9      	bgt.n	8009e9c <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8009ea8:	8c23      	ldrh	r3, [r4, #32]
 8009eaa:	4299      	cmp	r1, r3
 8009eac:	da03      	bge.n	8009eb6 <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8009eae:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8009eb2:	428b      	cmp	r3, r1
 8009eb4:	dbf2      	blt.n	8009e9c <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8009eb6:	b9a6      	cbnz	r6, 8009ee2 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8009eb8:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009eba:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8009ebc:	2b03      	cmp	r3, #3
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009ebe:	bf0c      	ite	eq
 8009ec0:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8009ec2:	60a5      	strne	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 8009ec4:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 8009ec6:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 8009ec8:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 8009eca:	2001      	movs	r0, #1
}
 8009ecc:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8009ece:	f7ff ffd1 	bl	8009e74 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8009ed2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8009ed4:	42ab      	cmp	r3, r5
 8009ed6:	dbe1      	blt.n	8009e9c <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8009ed8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8009edc:	42ab      	cmp	r3, r5
 8009ede:	dcdd      	bgt.n	8009e9c <STC_ExecRamp+0x18>
 8009ee0:	e7e9      	b.n	8009eb6 <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8009ee2:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8009ee4:	4a06      	ldr	r2, [pc, #24]	@ (8009f00 <STC_ExecRamp+0x7c>)
        pHandle->TargetFinal = hTargetFinal;
 8009ee6:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8009ee8:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8009eec:	fba2 2303 	umull	r2, r3, r2, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8009ef0:	1a28      	subs	r0, r5, r0
        wAux /= 1000U;
 8009ef2:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8009ef4:	1c5e      	adds	r6, r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8009ef6:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8009ef8:	fb90 f0f6 	sdiv	r0, r0, r6
        pHandle->IncDecAmount = wAux1;
 8009efc:	e7e3      	b.n	8009ec6 <STC_ExecRamp+0x42>
 8009efe:	bf00      	nop
 8009f00:	10624dd3 	.word	0x10624dd3

08009f04 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009f08:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009f0a:	4770      	bx	lr

08009f0c <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8009f0c:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009f0e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8009f10:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009f12:	2a04      	cmp	r2, #4
{
 8009f14:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009f16:	d012      	beq.n	8009f3e <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 8009f18:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8009f1a:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8009f1c:	d908      	bls.n	8009f30 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8009f1e:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8009f20:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8009f22:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8009f24:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8009f26:	2a03      	cmp	r2, #3
 8009f28:	d011      	beq.n	8009f4e <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8009f2a:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8009f2c:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8009f30:	d1f9      	bne.n	8009f26 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009f32:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8009f36:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009f38:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8009f3a:	60c3      	str	r3, [r0, #12]
 8009f3c:	e7f3      	b.n	8009f26 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 8009f3e:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8009f40:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8009f42:	d911      	bls.n	8009f68 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8009f44:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8009f46:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8009f48:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 8009f4a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009f4c:	e7ed      	b.n	8009f2a <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8009f4e:	6960      	ldr	r0, [r4, #20]
 8009f50:	f7ff ff22 	bl	8009d98 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8009f54:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8009f58:	b209      	sxth	r1, r1
 8009f5a:	6920      	ldr	r0, [r4, #16]
 8009f5c:	f7fe fd06 	bl	800896c <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8009f60:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8009f62:	0405      	lsls	r5, r0, #16
 8009f64:	60a5      	str	r5, [r4, #8]
}
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8009f68:	d1df      	bne.n	8009f2a <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009f6a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8009f6e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009f70:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8009f72:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009f74:	e7d9      	b.n	8009f2a <STC_CalcTorqueReference+0x1e>
 8009f76:	bf00      	nop

08009f78 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8009f78:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop

08009f80 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009f80:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8009f84:	2200      	movs	r2, #0
 8009f86:	b299      	uxth	r1, r3
 8009f88:	f361 020f 	bfi	r2, r1, #0, #16
 8009f8c:	0c1b      	lsrs	r3, r3, #16
 8009f8e:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009f92:	b082      	sub	sp, #8
}
 8009f94:	4610      	mov	r0, r2
 8009f96:	b002      	add	sp, #8
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop

08009f9c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8009f9c:	b510      	push	{r4, lr}
 8009f9e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8009fa0:	6940      	ldr	r0, [r0, #20]
 8009fa2:	f7ff fef9 	bl	8009d98 <SPD_GetAvrgMecSpeedUnit>
 8009fa6:	0400      	lsls	r0, r0, #16
 8009fa8:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009faa:	bd10      	pop	{r4, pc}

08009fac <STO_PLL_CalcElAngle>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8009fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8009fb0:	4604      	mov	r4, r0
{
 8009fb2:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	f000 80cf 	beq.w	800a158 <STO_PLL_CalcElAngle+0x1ac>
 8009fba:	2900      	cmp	r1, #0
 8009fbc:	f000 80cf 	beq.w	800a15e <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8009fc0:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8009fc4:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 8009fc6:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8009fca:	429f      	cmp	r7, r3
 8009fcc:	f340 80d1 	ble.w	800a172 <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8009fd0:	6683      	str	r3, [r0, #104]	@ 0x68
 8009fd2:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009fd4:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009fd8:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009fda:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009fde:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009fe0:	9201      	str	r2, [sp, #4]
 8009fe2:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009fe6:	f2c0 80c1 	blt.w	800a16c <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8009fea:	425b      	negs	r3, r3
 8009fec:	429e      	cmp	r6, r3
 8009fee:	f340 80bd 	ble.w	800a16c <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009ff2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8009ff6:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 8009ffa:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8009ffe:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800a002:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800a004:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800a008:	f340 80b9 	ble.w	800a17e <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800a00c:	6623      	str	r3, [r4, #96]	@ 0x60
 800a00e:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800a010:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 800a014:	4543      	cmp	r3, r8
 800a016:	f2c0 80a6 	blt.w	800a166 <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800a01a:	425b      	negs	r3, r3
 800a01c:	4598      	cmp	r8, r3
 800a01e:	f340 80a2 	ble.w	800a166 <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a022:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800a024:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a028:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a02a:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800a02e:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a032:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800a036:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800a03a:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800a03e:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a042:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800a044:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800a048:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800a04c:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a050:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a052:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a054:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a056:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a058:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800a05a:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800a05e:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a062:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800a066:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800a06a:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a06e:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800a070:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 800a074:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 800a076:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800a07a:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800a07e:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a082:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800a084:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 800a088:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800a08c:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a090:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 800a094:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800a096:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800a09a:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800a09e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a0a2:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 800a0a4:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800a0a8:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800a0ac:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800a0b0:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 800a0b4:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 800a0b8:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a0bc:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a0c0:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800a0c4:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 800a0c8:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 800a0cc:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 800a0d0:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 800a0d4:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 800a0d8:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d154      	bne.n	800a18a <STO_PLL_CalcElAngle+0x1de>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800a0e0:	2a00      	cmp	r2, #0
 800a0e2:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800a0e6:	bfa8      	it	ge
 800a0e8:	f04f 0a01 	movge.w	sl, #1
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800a0ec:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800a0f0:	f7f7 fdf6 	bl	8001ce0 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800a0f4:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800a0f6:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800a0fa:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800a0fe:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800a100:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800a104:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800a108:	f340 31cf 	sbfx	r1, r0, #15, #16
 800a10c:	f345 35cf 	sbfx	r5, r5, #15, #16
 800a110:	1a69      	subs	r1, r5, r1
 800a112:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800a116:	f7fe fc29 	bl	800896c <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800a11a:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800a11e:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800a122:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800a124:	3301      	adds	r3, #1
 800a126:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800a128:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800a12a:	bf12      	itee	ne
 800a12c:	461a      	movne	r2, r3
 800a12e:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 800a130:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800a132:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800a136:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 800a13a:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800a13e:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800a142:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 800a146:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 800a148:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 800a14a:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 800a14c:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 800a150:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800a152:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800a156:	80a0      	strh	r0, [r4, #4]
}
 800a158:	b009      	add	sp, #36	@ 0x24
 800a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 800a15e:	4608      	mov	r0, r1
}
 800a160:	b009      	add	sp, #36	@ 0x24
 800a162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800a166:	6663      	str	r3, [r4, #100]	@ 0x64
 800a168:	4698      	mov	r8, r3
 800a16a:	e75a      	b.n	800a022 <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800a16c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800a16e:	461e      	mov	r6, r3
 800a170:	e73f      	b.n	8009ff2 <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800a172:	425a      	negs	r2, r3
 800a174:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800a176:	bfdc      	itt	le
 800a178:	6682      	strle	r2, [r0, #104]	@ 0x68
 800a17a:	4617      	movle	r7, r2
 800a17c:	e72a      	b.n	8009fd4 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800a17e:	425a      	negs	r2, r3
 800a180:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800a182:	bfdc      	itt	le
 800a184:	6622      	strle	r2, [r4, #96]	@ 0x60
 800a186:	4691      	movle	r9, r2
 800a188:	e742      	b.n	800a010 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800a18a:	fa1f fa83 	uxth.w	sl, r3
 800a18e:	e7ad      	b.n	800a0ec <STO_PLL_CalcElAngle+0x140>

0800a190 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800a190:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800a192:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800a196:	2d00      	cmp	r5, #0
 800a198:	f000 8096 	beq.w	800a2c8 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 800a19c:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 800a1a0:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 800a1a4:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800a1a6:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800a1aa:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800a1ae:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800a1b0:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800a1b2:	d1fa      	bne.n	800a1aa <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800a1b4:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 800a1b8:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800a1bc:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800a1c0:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800a1c4:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 800a1c6:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800a1ca:	d1f7      	bne.n	800a1bc <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800a1cc:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800a1d0:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 800a1d4:	17de      	asrs	r6, r3, #31
 800a1d6:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800a1da:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 800a1dc:	f890 7104 	ldrb.w	r7, [r0, #260]	@ 0x104
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 800a1e0:	fbac 2303 	umull	r2, r3, ip, r3
 800a1e4:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 800a1e8:	09d2      	lsrs	r2, r2, #7
 800a1ea:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800a1ee:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800a1f0:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800a1f4:	42a2      	cmp	r2, r4
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800a1f6:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800a1fa:	bfd8      	it	le
 800a1fc:	2600      	movle	r6, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800a1fe:	69c5      	ldr	r5, [r0, #28]
 800a200:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800a204:	bfc8      	it	gt
 800a206:	2601      	movgt	r6, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a208:	7845      	ldrb	r5, [r0, #1]
 800a20a:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800a20e:	b21d      	sxth	r5, r3
 800a210:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800a212:	f880 60f5 	strb.w	r6, [r0, #245]	@ 0xf5
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800a216:	8185      	strh	r5, [r0, #12]
    if (false == pHandle->IsAlgorithmConverged)
 800a218:	f890 60f8 	ldrb.w	r6, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 800a21c:	b99f      	cbnz	r7, 800a246 <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
    if (false == pHandle->IsAlgorithmConverged)
 800a21e:	b346      	cbz	r6, 800a272 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800a220:	42a2      	cmp	r2, r4
 800a222:	dc23      	bgt.n	800a26c <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
        pHandle->ReliabilityCounter++;
 800a224:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800a228:	f890 2117 	ldrb.w	r2, [r0, #279]	@ 0x117
        pHandle->ReliabilityCounter++;
 800a22c:	3301      	adds	r3, #1
 800a22e:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800a230:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 800a232:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800a236:	d81c      	bhi.n	800a272 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800a238:	78c2      	ldrb	r2, [r0, #3]
 800a23a:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 800a23c:	2300      	movs	r3, #0
 800a23e:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 800a242:	4618      	mov	r0, r3
 800a244:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800a246:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800a248:	f8b0 511a 	ldrh.w	r5, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800a24c:	bfb8      	it	lt
 800a24e:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800a250:	429d      	cmp	r5, r3
 800a252:	dc12      	bgt.n	800a27a <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    bool bIs_Bemf_Consistent = false;
 800a254:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 800a256:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 800a258:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800a25a:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800a25e:	f880 50f9 	strb.w	r5, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800a262:	b136      	cbz	r6, 800a272 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800a264:	42a2      	cmp	r2, r4
 800a266:	dddd      	ble.n	800a224 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 800a268:	2d00      	cmp	r5, #0
 800a26a:	d0db      	beq.n	800a224 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 800a272:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800a276:	f7ff bd97 	b.w	8009da8 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800a27a:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800a27e:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 800a282:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800a286:	f890 5119 	ldrb.w	r5, [r0, #281]	@ 0x119
        wObsBemfSq += wObsBemf * wObsBemf;
 800a28a:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800a28e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800a292:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 800a296:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800a29a:	fb03 f505 	mul.w	r5, r3, r5
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	bfb8      	it	lt
 800a2a2:	353f      	addlt	r5, #63	@ 0x3f
 800a2a4:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 800a2a6:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	461d      	mov	r5, r3
 800a2ae:	f890 c118 	ldrb.w	ip, [r0, #280]	@ 0x118
 800a2b2:	bfb8      	it	lt
 800a2b4:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 800a2b8:	11ad      	asrs	r5, r5, #6
 800a2ba:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800a2be:	42af      	cmp	r7, r5
 800a2c0:	bfd4      	ite	le
 800a2c2:	2500      	movle	r5, #0
 800a2c4:	2501      	movgt	r5, #1
 800a2c6:	e7c8      	b.n	800a25a <STO_PLL_CalcAvrgMecSpeedUnit+0xca>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800a2c8:	462c      	mov	r4, r5
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800a2ce:	46ae      	mov	lr, r5
 800a2d0:	e781      	b.n	800a1d6 <STO_PLL_CalcAvrgMecSpeedUnit+0x46>
 800a2d2:	bf00      	nop

0800a2d4 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800a2d4:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800a2d8:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800a2dc:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800a2e0:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 800a2e4:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800a2e6:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 800a2ea:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800a2ee:	ebac 0101 	sub.w	r1, ip, r1
 800a2f2:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800a2f4:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 800a2f6:	b959      	cbnz	r1, 800a310 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800a2f8:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 800a2fc:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800a2fe:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 800a302:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800a306:	4113      	asrs	r3, r2
}
 800a308:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800a30c:	81c3      	strh	r3, [r0, #14]
}
 800a30e:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800a310:	440a      	add	r2, r1
 800a312:	b291      	uxth	r1, r2
 800a314:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800a316:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800a318:	bfdc      	itt	le
 800a31a:	eba1 010c 	suble.w	r1, r1, ip
 800a31e:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800a320:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800a324:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 800a328:	1a9b      	subs	r3, r3, r2
 800a32a:	e7e8      	b.n	800a2fe <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

0800a32c <STO_PLL_Clear>:
{
 800a32c:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800a32e:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800a332:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 800a334:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 800a338:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 800a33c:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 800a340:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 800a342:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800a344:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800a346:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 800a34a:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 800a34e:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 800a352:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800a356:	b11a      	cbz	r2, 800a360 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800a358:	0052      	lsls	r2, r2, #1
 800a35a:	3074      	adds	r0, #116	@ 0x74
 800a35c:	f000 fa08 	bl	800a770 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800a360:	2100      	movs	r1, #0
 800a362:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800a366:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800a36a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 800a36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800a372:	f7fe bac7 	b.w	8008904 <PID_SetIntegralTerm>
 800a376:	bf00      	nop

0800a378 <STO_PLL_Init>:
{
 800a378:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800a37a:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800a37e:	4b19      	ldr	r3, [pc, #100]	@ (800a3e4 <STO_PLL_Init+0x6c>)
 800a380:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800a384:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 800a388:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800a38a:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800a38c:	fb93 f3fe 	sdiv	r3, r3, lr
 800a390:	b21b      	sxth	r3, r3
{
 800a392:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 800a394:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 800a398:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 800a39a:	b30b      	cbz	r3, 800a3e0 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 800a39c:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800a39e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800a3a2:	f102 0c01 	add.w	ip, r2, #1
 800a3a6:	105b      	asrs	r3, r3, #1
 800a3a8:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 800a3aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800a3ae:	fa1f f28c 	uxth.w	r2, ip
 800a3b2:	d1f4      	bne.n	800a39e <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 800a3b4:	b20a      	sxth	r2, r1
 800a3b6:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800a3b8:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800a3bc:	480a      	ldr	r0, [pc, #40]	@ (800a3e8 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800a3be:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800a3c0:	17cb      	asrs	r3, r1, #31
 800a3c2:	fb80 0101 	smull	r0, r1, r0, r1
 800a3c6:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800a3ca:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f7ff ffad 	bl	800a32c <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800a3d2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800a3d6:	f7fe fa81 	bl	80088dc <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	8263      	strh	r3, [r4, #18]
}
 800a3de:	bd10      	pop	{r4, pc}
 800a3e0:	4671      	mov	r1, lr
 800a3e2:	e7eb      	b.n	800a3bc <STO_PLL_Init+0x44>
 800a3e4:	000fea5e 	.word	0x000fea5e
 800a3e8:	06488dc5 	.word	0x06488dc5

0800a3ec <STO_PLL_IsObserverConverged>:
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 800a3ec:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 800a3f0:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 800a3f2:	b112      	cbz	r2, 800a3fa <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800a3f4:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800a3f8:	800a      	strh	r2, [r1, #0]
    }

    if (true == pHandle->ForceConvergency)
 800a3fa:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 800a3fe:	b128      	cbz	r0, 800a40c <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800a400:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800a402:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800a404:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800a408:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 800a40a:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800a40c:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800a410:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 800a414:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800a416:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 800a41a:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800a41e:	4614      	mov	r4, r2
      if (wtemp > 0)
 800a420:	dd38      	ble.n	800a494 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 800a422:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800a426:	bfbc      	itt	lt
 800a428:	f1cc 0c00 	rsblt	ip, ip, #0
 800a42c:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 800a430:	2a00      	cmp	r2, #0
 800a432:	db34      	blt.n	800a49e <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 800a434:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800a438:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800a43c:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800a440:	b349      	cbz	r1, 800a496 <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800a442:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 800a446:	fa1f f18c 	uxth.w	r1, ip
 800a44a:	428d      	cmp	r5, r1
 800a44c:	d223      	bcs.n	800a496 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800a44e:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800a452:	2a00      	cmp	r2, #0
 800a454:	bfb8      	it	lt
 800a456:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 800a458:	f342 120f 	sbfx	r2, r2, #4, #16
 800a45c:	4594      	cmp	ip, r2
 800a45e:	db1a      	blt.n	800a496 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800a460:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800a464:	f1be 0f00 	cmp.w	lr, #0
 800a468:	bfb8      	it	lt
 800a46a:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800a46e:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 800a472:	45f4      	cmp	ip, lr
 800a474:	dc0f      	bgt.n	800a496 <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 800a476:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800a47a:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 800a47e:	3201      	adds	r2, #1
 800a480:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800a482:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 800a484:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800a488:	d804      	bhi.n	800a494 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 800a48a:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800a48c:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800a48e:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800a492:	701a      	strb	r2, [r3, #0]
}
 800a494:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 800a496:	2200      	movs	r2, #0
 800a498:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 800a49c:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800a49e:	4252      	negs	r2, r2
 800a4a0:	b212      	sxth	r2, r2
 800a4a2:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 800a4a4:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800a4a8:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 800a4ac:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800a4ae:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800a4b2:	2900      	cmp	r1, #0
 800a4b4:	d0ef      	beq.n	800a496 <STO_PLL_IsObserverConverged+0xaa>
 800a4b6:	e7c4      	b.n	800a442 <STO_PLL_IsObserverConverged+0x56>

0800a4b8 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 800a4b8:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	b299      	uxth	r1, r3
 800a4be:	f361 020f 	bfi	r2, r1, #0, #16
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	f363 421f 	bfi	r2, r3, #16, #16
{
 800a4c8:	b082      	sub	sp, #8
}
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	b002      	add	sp, #8
 800a4ce:	4770      	bx	lr

0800a4d0 <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 800a4d0:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800a4d2:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800a4d4:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800a4d8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800a4dc:	410a      	asrs	r2, r1
  return (iaux);
 800a4de:	410b      	asrs	r3, r1
 800a4e0:	b292      	uxth	r2, r2
 800a4e2:	f362 000f 	bfi	r0, r2, #0, #16
 800a4e6:	b29b      	uxth	r3, r3
{
 800a4e8:	b082      	sub	sp, #8
  return (iaux);
 800a4ea:	f363 401f 	bfi	r0, r3, #16, #16
}
 800a4ee:	b002      	add	sp, #8
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop

0800a4f4 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800a4f4:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800a4f8:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800a4fa:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800a4fe:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop

0800a504 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800a504:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 800a506:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop

0800a50c <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800a50c:	6800      	ldr	r0, [r0, #0]
 800a50e:	2100      	movs	r1, #0
 800a510:	3034      	adds	r0, #52	@ 0x34
 800a512:	f7fe b9f7 	b.w	8008904 <PID_SetIntegralTerm>
 800a516:	bf00      	nop

0800a518 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 800a518:	2100      	movs	r1, #0
 800a51a:	3034      	adds	r0, #52	@ 0x34
 800a51c:	f7fe b9f2 	b.w	8008904 <PID_SetIntegralTerm>

0800a520 <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 800a520:	f8d0 0100 	ldr.w	r0, [r0, #256]	@ 0x100
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop

0800a528 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 800a528:	f8d0 00fc 	ldr.w	r0, [r0, #252]	@ 0xfc
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop

0800a530 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 800a530:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800a532:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 800a536:	4770      	bx	lr

0800a538 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 800a538:	6803      	ldr	r3, [r0, #0]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop

0800a544 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800a544:	6803      	ldr	r3, [r0, #0]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop

0800a550 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800a550:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop

0800a558 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800a558:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800a55a:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800a55c:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800a55e:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800a562:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800a564:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800a566:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800a568:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800a56a:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800a56c:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800a56e:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop

0800a574 <VSS_Init>:
{
 800a574:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800a576:	f7ff ffef 	bl	800a558 <VSS_Clear>
}
 800a57a:	bd08      	pop	{r3, pc}

0800a57c <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800a57c:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 800a580:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800a582:	b11a      	cbz	r2, 800a58c <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800a584:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800a588:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800a58a:	4770      	bx	lr
{
 800a58c:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a58e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800a592:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a594:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800a596:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a59a:	785a      	ldrb	r2, [r3, #1]
 800a59c:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a5a0:	4460      	add	r0, ip
 800a5a2:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a5a6:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a5a8:	b200      	sxth	r0, r0
 800a5aa:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a5ac:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800a5ae:	b1fc      	cbz	r4, 800a5f0 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800a5b0:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 800a5b4:	b1f2      	cbz	r2, 800a5f4 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800a5b6:	3a01      	subs	r2, #1
 800a5b8:	b212      	sxth	r2, r2
 800a5ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800a5bc:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800a5c0:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800a5c2:	db26      	blt.n	800a612 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800a5c4:	eba1 0e0e 	sub.w	lr, r1, lr
 800a5c8:	fa0f fe8e 	sxth.w	lr, lr
 800a5cc:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800a5ce:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800a5d2:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800a5d6:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800a5da:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800a5de:	fb12 f205 	smulbb	r2, r2, r5
 800a5e2:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800a5e4:	db0e      	blt.n	800a604 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800a5e6:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800a5e8:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800a5ea:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800a5ee:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800a5f0:	8098      	strh	r0, [r3, #4]
}
 800a5f2:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800a5f4:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800a5f8:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800a5fa:	2401      	movs	r4, #1
 800a5fc:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800a600:	8098      	strh	r0, [r3, #4]
}
 800a602:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800a604:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 800a608:	2c00      	cmp	r4, #0
 800a60a:	d0f1      	beq.n	800a5f0 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800a60c:	440a      	add	r2, r1
 800a60e:	b210      	sxth	r0, r2
 800a610:	e7ee      	b.n	800a5f0 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800a612:	ebae 0e01 	sub.w	lr, lr, r1
 800a616:	fa0f fe8e 	sxth.w	lr, lr
 800a61a:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800a61e:	e7d6      	b.n	800a5ce <VSS_CalcElAngle+0x52>

0800a620 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800a620:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 800a622:	2a01      	cmp	r2, #1
{
 800a624:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 800a626:	d922      	bls.n	800a66e <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800a628:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a62a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800a62c:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a62e:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a630:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800a632:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a636:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a638:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a63a:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a63e:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800a640:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a644:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a648:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a64c:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a64e:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800a652:	b212      	sxth	r2, r2
 800a654:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800a656:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800a658:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800a65a:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800a65c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 800a660:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800a662:	b970      	cbnz	r0, 800a682 <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800a664:	78da      	ldrb	r2, [r3, #3]
 800a666:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800a668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66c:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800a66e:	d00d      	beq.n	800a68c <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800a670:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 800a674:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800a678:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800a67a:	bb00      	cbnz	r0, 800a6be <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800a67c:	78da      	ldrb	r2, [r3, #3]
 800a67e:	701a      	strb	r2, [r3, #0]
}
 800a680:	4770      	bx	lr
 800a682:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff bb8e 	b.w	8009da8 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800a68c:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 800a690:	f8a1 c000 	strh.w	ip, [r1]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a694:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a696:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800a698:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a69c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a6a0:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a6a2:	fb00 f00c 	mul.w	r0, r0, ip
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a6a6:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a6aa:	785a      	ldrb	r2, [r3, #1]
 800a6ac:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800a6b4:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a6b8:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d0de      	beq.n	800a67c <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff bb72 	b.w	8009da8 <SPD_IsMecSpeedReliable>

0800a6c4 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a6c4:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800a6c6:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a6c8:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 800a6cc:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a6ce:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop

0800a6d4 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800a6d4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a6d8:	b9a3      	cbnz	r3, 800a704 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a6da:	8b43      	ldrh	r3, [r0, #26]
{
 800a6dc:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a6de:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a6e0:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a6e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a6e8:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a6ec:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800a6ee:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800a6f2:	b942      	cbnz	r2, 800a706 <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a6f4:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800a6f8:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a6fa:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800a6fe:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a700:	8541      	strh	r1, [r0, #42]	@ 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a702:	bd10      	pop	{r4, pc}
 800a704:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800a706:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800a708:	fb02 f303 	mul.w	r3, r2, r3
 800a70c:	4a0e      	ldr	r2, [pc, #56]	@ (800a748 <VSS_SetMecAcceleration+0x74>)
 800a70e:	fba2 2303 	umull	r2, r3, r2, r3
 800a712:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800a716:	3301      	adds	r3, #1
 800a718:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a71a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800a71e:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800a720:	b91b      	cbnz	r3, 800a72a <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a722:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a724:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a726:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800a728:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a72a:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a72e:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800a732:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a736:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a738:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800a73c:	fb0e f303 	mul.w	r3, lr, r3
 800a740:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a742:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a744:	6242      	str	r2, [r0, #36]	@ 0x24
 800a746:	e7ef      	b.n	800a728 <VSS_SetMecAcceleration+0x54>
 800a748:	10624dd3 	.word	0x10624dd3

0800a74c <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800a74c:	b151      	cbz	r1, 800a764 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800a74e:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 800a752:	2201      	movs	r2, #1
 800a754:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 800a758:	b923      	cbnz	r3, 800a764 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800a75a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800a75e:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800a760:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800a762:	4770      	bx	lr
  bool bAux = true;
 800a764:	2001      	movs	r0, #1
 800a766:	4770      	bx	lr

0800a768 <VSS_TransitionEnded>:
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800a768:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop

0800a770 <memset>:
 800a770:	4402      	add	r2, r0
 800a772:	4603      	mov	r3, r0
 800a774:	4293      	cmp	r3, r2
 800a776:	d100      	bne.n	800a77a <memset+0xa>
 800a778:	4770      	bx	lr
 800a77a:	f803 1b01 	strb.w	r1, [r3], #1
 800a77e:	e7f9      	b.n	800a774 <memset+0x4>

0800a780 <__errno>:
 800a780:	4b01      	ldr	r3, [pc, #4]	@ (800a788 <__errno+0x8>)
 800a782:	6818      	ldr	r0, [r3, #0]
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	20000560 	.word	0x20000560

0800a78c <__libc_init_array>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	4d0d      	ldr	r5, [pc, #52]	@ (800a7c4 <__libc_init_array+0x38>)
 800a790:	4c0d      	ldr	r4, [pc, #52]	@ (800a7c8 <__libc_init_array+0x3c>)
 800a792:	1b64      	subs	r4, r4, r5
 800a794:	10a4      	asrs	r4, r4, #2
 800a796:	2600      	movs	r6, #0
 800a798:	42a6      	cmp	r6, r4
 800a79a:	d109      	bne.n	800a7b0 <__libc_init_array+0x24>
 800a79c:	4d0b      	ldr	r5, [pc, #44]	@ (800a7cc <__libc_init_array+0x40>)
 800a79e:	4c0c      	ldr	r4, [pc, #48]	@ (800a7d0 <__libc_init_array+0x44>)
 800a7a0:	f000 f8c8 	bl	800a934 <_init>
 800a7a4:	1b64      	subs	r4, r4, r5
 800a7a6:	10a4      	asrs	r4, r4, #2
 800a7a8:	2600      	movs	r6, #0
 800a7aa:	42a6      	cmp	r6, r4
 800a7ac:	d105      	bne.n	800a7ba <__libc_init_array+0x2e>
 800a7ae:	bd70      	pop	{r4, r5, r6, pc}
 800a7b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7b4:	4798      	blx	r3
 800a7b6:	3601      	adds	r6, #1
 800a7b8:	e7ee      	b.n	800a798 <__libc_init_array+0xc>
 800a7ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7be:	4798      	blx	r3
 800a7c0:	3601      	adds	r6, #1
 800a7c2:	e7f2      	b.n	800a7aa <__libc_init_array+0x1e>
 800a7c4:	0800ad34 	.word	0x0800ad34
 800a7c8:	0800ad34 	.word	0x0800ad34
 800a7cc:	0800ad34 	.word	0x0800ad34
 800a7d0:	0800ad38 	.word	0x0800ad38

0800a7d4 <memcpy>:
 800a7d4:	440a      	add	r2, r1
 800a7d6:	4291      	cmp	r1, r2
 800a7d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7dc:	d100      	bne.n	800a7e0 <memcpy+0xc>
 800a7de:	4770      	bx	lr
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7ea:	4291      	cmp	r1, r2
 800a7ec:	d1f9      	bne.n	800a7e2 <memcpy+0xe>
 800a7ee:	bd10      	pop	{r4, pc}

0800a7f0 <fmodf>:
 800a7f0:	b508      	push	{r3, lr}
 800a7f2:	ed2d 8b02 	vpush	{d8}
 800a7f6:	eef0 8a40 	vmov.f32	s17, s0
 800a7fa:	eeb0 8a60 	vmov.f32	s16, s1
 800a7fe:	f000 f817 	bl	800a830 <__ieee754_fmodf>
 800a802:	eef4 8a48 	vcmp.f32	s17, s16
 800a806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80a:	d60c      	bvs.n	800a826 <fmodf+0x36>
 800a80c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a82c <fmodf+0x3c>
 800a810:	eeb4 8a68 	vcmp.f32	s16, s17
 800a814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a818:	d105      	bne.n	800a826 <fmodf+0x36>
 800a81a:	f7ff ffb1 	bl	800a780 <__errno>
 800a81e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a822:	2321      	movs	r3, #33	@ 0x21
 800a824:	6003      	str	r3, [r0, #0]
 800a826:	ecbd 8b02 	vpop	{d8}
 800a82a:	bd08      	pop	{r3, pc}
 800a82c:	00000000 	.word	0x00000000

0800a830 <__ieee754_fmodf>:
 800a830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a832:	ee10 5a90 	vmov	r5, s1
 800a836:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800a83a:	1e43      	subs	r3, r0, #1
 800a83c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a840:	d206      	bcs.n	800a850 <__ieee754_fmodf+0x20>
 800a842:	ee10 3a10 	vmov	r3, s0
 800a846:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800a84a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800a84e:	d304      	bcc.n	800a85a <__ieee754_fmodf+0x2a>
 800a850:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a854:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a85a:	4286      	cmp	r6, r0
 800a85c:	dbfc      	blt.n	800a858 <__ieee754_fmodf+0x28>
 800a85e:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800a862:	d105      	bne.n	800a870 <__ieee754_fmodf+0x40>
 800a864:	4b32      	ldr	r3, [pc, #200]	@ (800a930 <__ieee754_fmodf+0x100>)
 800a866:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800a86a:	ed93 0a00 	vldr	s0, [r3]
 800a86e:	e7f3      	b.n	800a858 <__ieee754_fmodf+0x28>
 800a870:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a874:	d140      	bne.n	800a8f8 <__ieee754_fmodf+0xc8>
 800a876:	0232      	lsls	r2, r6, #8
 800a878:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800a87c:	2a00      	cmp	r2, #0
 800a87e:	dc38      	bgt.n	800a8f2 <__ieee754_fmodf+0xc2>
 800a880:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800a884:	d13e      	bne.n	800a904 <__ieee754_fmodf+0xd4>
 800a886:	0207      	lsls	r7, r0, #8
 800a888:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800a88c:	2f00      	cmp	r7, #0
 800a88e:	da36      	bge.n	800a8fe <__ieee754_fmodf+0xce>
 800a890:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800a894:	bfb9      	ittee	lt
 800a896:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800a89a:	1a5b      	sublt	r3, r3, r1
 800a89c:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800a8a0:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800a8a4:	bfb8      	it	lt
 800a8a6:	fa06 f303 	lsllt.w	r3, r6, r3
 800a8aa:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a8ae:	bfb5      	itete	lt
 800a8b0:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800a8b4:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800a8b8:	1aad      	sublt	r5, r5, r2
 800a8ba:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800a8be:	bfb8      	it	lt
 800a8c0:	40a8      	lsllt	r0, r5
 800a8c2:	1a89      	subs	r1, r1, r2
 800a8c4:	1a1d      	subs	r5, r3, r0
 800a8c6:	bb01      	cbnz	r1, 800a90a <__ieee754_fmodf+0xda>
 800a8c8:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800a8cc:	bf38      	it	cc
 800a8ce:	462b      	movcc	r3, r5
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d0c7      	beq.n	800a864 <__ieee754_fmodf+0x34>
 800a8d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a8d8:	db1f      	blt.n	800a91a <__ieee754_fmodf+0xea>
 800a8da:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a8de:	db1f      	blt.n	800a920 <__ieee754_fmodf+0xf0>
 800a8e0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800a8e4:	327f      	adds	r2, #127	@ 0x7f
 800a8e6:	4323      	orrs	r3, r4
 800a8e8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a8ec:	ee00 3a10 	vmov	s0, r3
 800a8f0:	e7b2      	b.n	800a858 <__ieee754_fmodf+0x28>
 800a8f2:	3901      	subs	r1, #1
 800a8f4:	0052      	lsls	r2, r2, #1
 800a8f6:	e7c1      	b.n	800a87c <__ieee754_fmodf+0x4c>
 800a8f8:	15f1      	asrs	r1, r6, #23
 800a8fa:	397f      	subs	r1, #127	@ 0x7f
 800a8fc:	e7c0      	b.n	800a880 <__ieee754_fmodf+0x50>
 800a8fe:	3a01      	subs	r2, #1
 800a900:	007f      	lsls	r7, r7, #1
 800a902:	e7c3      	b.n	800a88c <__ieee754_fmodf+0x5c>
 800a904:	15c2      	asrs	r2, r0, #23
 800a906:	3a7f      	subs	r2, #127	@ 0x7f
 800a908:	e7c2      	b.n	800a890 <__ieee754_fmodf+0x60>
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	da02      	bge.n	800a914 <__ieee754_fmodf+0xe4>
 800a90e:	005b      	lsls	r3, r3, #1
 800a910:	3901      	subs	r1, #1
 800a912:	e7d7      	b.n	800a8c4 <__ieee754_fmodf+0x94>
 800a914:	d0a6      	beq.n	800a864 <__ieee754_fmodf+0x34>
 800a916:	006b      	lsls	r3, r5, #1
 800a918:	e7fa      	b.n	800a910 <__ieee754_fmodf+0xe0>
 800a91a:	005b      	lsls	r3, r3, #1
 800a91c:	3a01      	subs	r2, #1
 800a91e:	e7d9      	b.n	800a8d4 <__ieee754_fmodf+0xa4>
 800a920:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800a924:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800a928:	3282      	adds	r2, #130	@ 0x82
 800a92a:	4113      	asrs	r3, r2
 800a92c:	4323      	orrs	r3, r4
 800a92e:	e7dd      	b.n	800a8ec <__ieee754_fmodf+0xbc>
 800a930:	0800ad24 	.word	0x0800ad24

0800a934 <_init>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	bf00      	nop
 800a938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93a:	bc08      	pop	{r3}
 800a93c:	469e      	mov	lr, r3
 800a93e:	4770      	bx	lr

0800a940 <_fini>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	bf00      	nop
 800a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a946:	bc08      	pop	{r3}
 800a948:	469e      	mov	lr, r3
 800a94a:	4770      	bx	lr
